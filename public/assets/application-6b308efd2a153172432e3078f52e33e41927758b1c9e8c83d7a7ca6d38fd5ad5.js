(function(undefined) {
  // @note
  //   A few conventions for the documentation of this file:
  //   1. Always use "//" (in contrast with "/**/")
  //   2. The syntax used is Yardoc (yardoc.org), which is intended for Ruby (se below)
  //   3. `@param` and `@return` types should be preceded by `JS.` when referring to
  //      JavaScript constructors (e.g. `JS.Function`) otherwise Ruby is assumed.
  //   4. `nil` and `null` being unambiguous refer to the respective
  //      objects/values in Ruby and JavaScript
  //   5. This is still WIP :) so please give feedback and suggestions on how
  //      to improve or for alternative solutions
  //
  //   The way the code is digested before going through Yardoc is a secret kept
  //   in the docs repo (https://github.com/opal/docs/tree/master).

  if (typeof(this.Opal) !== 'undefined') {
    console.warn('Opal already loaded. Loading twice can cause troubles, please fix your setup.');
    return this.Opal;
  }

  var nil;

  // The actual class for BasicObject
  var BasicObject;

  // The actual Object class.
  // The leading underscore is to avoid confusion with window.Object()
  var _Object;

  // The actual Module class
  var Module;

  // The actual Class class
  var Class;

  // Constructor for instances of BasicObject
  function BasicObject_alloc(){}

  // Constructor for instances of Object
  function Object_alloc(){}

  // Constructor for instances of Class
  function Class_alloc(){}

  // Constructor for instances of Module
  function Module_alloc(){}

  // Constructor for instances of NilClass (nil)
  function NilClass_alloc(){}

  // The Opal object that is exposed globally
  var Opal = this.Opal = {};

  // All bridged classes - keep track to donate methods from Object
  var bridges = {};

  // TopScope is used for inheriting constants from the top scope
  var TopScope = function(){};

  // Opal just acts as the top scope
  TopScope.prototype = Opal;

  // To inherit scopes
  Opal.constructor = TopScope;

  // List top scope constants
  Opal.constants = [];

  // This is a useful reference to global object inside ruby files
  Opal.global = this;

  // Configure runtime behavior with regards to require and unsupported fearures
  Opal.config = {
    missing_require_severity: 'error', // error, warning, ignore
    unsupported_features_severity: 'warning' // error, warning, ignore
  }

  // Minify common function calls
  var $hasOwn = Opal.hasOwnProperty;
  var $slice  = Opal.slice = Array.prototype.slice;

  // Nil object id is always 4
  var nil_id = 4;

  // Generates even sequential numbers greater than 4
  // (nil_id) to serve as unique ids for ruby objects
  var unique_id = nil_id;

  // Return next unique id
  Opal.uid = function() {
    unique_id += 2;
    return unique_id;
  };

  // Table holds all class variables
  Opal.cvars = {};

  // Globals table
  Opal.gvars = {};

  // Exit function, this should be replaced by platform specific implementation
  // (See nodejs and phantom for examples)
  Opal.exit = function(status) { if (Opal.gvars.DEBUG) console.log('Exited with status '+status); };

  // keeps track of exceptions for $!
  Opal.exceptions = [];

  // @private
  // Pops an exception from the stack and updates `$!`.
  Opal.pop_exception = function() {
    Opal.gvars["!"] = Opal.exceptions.pop() || nil;
  }


  // Constants
  // ---------

  // Get a constant on the given scope. Every class and module in Opal has a
  // scope used to store, and inherit, constants. For example, the top level
  // `Object` in ruby has a scope accessible as `Opal.Object.$$scope`.
  //
  // To get the `Array` class using this scope, you could use:
  //
  //     Opal.Object.$$scope.get("Array")
  //
  // If a constant with the given name cannot be found, then a dispatch to the
  // class/module's `#const_method` is called, which by default will raise an
  // error.
  //
  // @param name [String] the name of the constant to lookup
  // @return [Object]
  //
  Opal.get = function(name) {
    var constant = this[name];

    if (constant == null) {
      return this.base.$const_get(name);
    }

    return constant;
  };

  // Create a new constants scope for the given class with the given
  // base. Constants are looked up through their parents, so the base
  // scope will be the outer scope of the new klass.
  //
  // @param base_scope [$$scope] the scope in which the new scope should be created
  // @param klass      [Class]
  // @param id         [String, null] the name of the newly created scope
  //
  Opal.create_scope = function(base_scope, klass, id) {
    var const_alloc = function() {};
    var const_scope = const_alloc.prototype = new base_scope.constructor();

    klass.$$scope       = const_scope;
    klass.$$base_module = base_scope.base;

    const_scope.base        = klass;
    const_scope.constructor = const_alloc;
    const_scope.constants   = [];

    if (id) {
      Opal.cdecl(base_scope, id, klass);
      const_alloc.displayName = id+"_scope_alloc";
    }
  };

  // Constant assignment, see also `Opal.cdecl`
  //
  // @param base_module [Module, Class] the constant namespace
  // @param name        [String] the name of the constant
  // @param value       [Object] the value of the constant
  //
  // @example Assigning a namespaced constant
  //   self::FOO = 'bar'
  //
  // @example Assigning with Module#const_set
  //   Foo.const_set :BAR, 123
  //
  Opal.casgn = function(base_module, name, value) {
    function update(klass, name) {
      klass.$$name = name;

      for (name in klass.$$scope) {
        var value = klass.$$scope[name];

        if (value.$$name === nil && (value.$$is_class || value.$$is_module)) {
          update(value, name)
        }
      }
    }

    var scope = base_module.$$scope;

    if (value.$$is_class || value.$$is_module) {
      // Only checking _Object prevents setting a const on an anonymous class
      // that has a superclass that's not Object
      if (value.$$is_class || value.$$base_module === _Object) {
        value.$$base_module = base_module;
      }

      if (value.$$name === nil && value.$$base_module.$$name !== nil) {
        update(value, name);
      }
    }

    scope.constants.push(name);
    scope[name] = value;

    // If we dynamically declare a constant in a module,
    // we should populate all the classes that include this module
    // with the same constant
    if (base_module.$$is_module && base_module.$$dep) {
      for (var i = 0; i < base_module.$$dep.length; i++) {
        var dep = base_module.$$dep[i];
        Opal.casgn(dep, name, value);
      }
    }

    return value;
  };

  // Constant declaration
  //
  // @example
  //   FOO = :bar
  //
  // @param base_scope [$$scope] the current scope
  // @param name       [String] the name of the constant
  // @param value      [Object] the value of the constant
  Opal.cdecl = function(base_scope, name, value) {
    if ((value.$$is_class || value.$$is_module) && value.$$orig_scope == null) {
      value.$$name = name;
      value.$$orig_scope = base_scope;
      // Here we should explicitly set a base module
      // (a module where the constant was initially defined)
      value.$$base_module = base_scope.base;
      base_scope.constructor[name] = value;
    }

    base_scope.constants.push(name);
    return base_scope[name] = value;
  };


  // Modules & Classes
  // -----------------

  // A `class Foo; end` expression in ruby is compiled to call this runtime
  // method which either returns an existing class of the given name, or creates
  // a new class in the given `base` scope.
  //
  // If a constant with the given name exists, then we check to make sure that
  // it is a class and also that the superclasses match. If either of these
  // fail, then we raise a `TypeError`. Note, `superclass` may be null if one
  // was not specified in the ruby code.
  //
  // We pass a constructor to this method of the form `function ClassName() {}`
  // simply so that classes show up with nicely formatted names inside debuggers
  // in the web browser (or node/sprockets).
  //
  // The `base` is the current `self` value where the class is being created
  // from. We use this to get the scope for where the class should be created.
  // If `base` is an object (not a class/module), we simple get its class and
  // use that as the base instead.
  //
  // @param base        [Object] where the class is being created
  // @param superclass  [Class,null] superclass of the new class (may be null)
  // @param id          [String] the name of the class to be created
  // @param constructor [JS.Function] function to use as constructor
  //
  // @return new [Class]  or existing ruby class
  //
  Opal.klass = function(base, superclass, name, constructor) {
    var klass, bridged, alloc;

    // If base is an object, use its class
    if (!base.$$is_class && !base.$$is_module) {
      base = base.$$class;
    }

    // If the superclass is a function then we're bridging a native JS class
    if (typeof(superclass) === 'function') {
      bridged = superclass;
      superclass = _Object;
    }

    // Try to find the class in the current scope
    klass = base.$$scope[name];

    // If the class exists in the scope, then we must use that
    if (klass && klass.$$orig_scope === base.$$scope) {
      // Make sure the existing constant is a class, or raise error
      if (!klass.$$is_class) {
        throw Opal.TypeError.$new(name + " is not a class");
      }

      // Make sure existing class has same superclass
      if (superclass && klass.$$super !== superclass) {
        throw Opal.TypeError.$new("superclass mismatch for class " + name);
      }

      return klass;
    }

    // Class doesnt exist, create a new one with given superclass...

    // Not specifying a superclass means we can assume it to be Object
    if (superclass == null) {
      superclass = _Object;
    }

    // If bridged the JS class will also be the alloc function
    alloc = bridged || Opal.boot_class_alloc(name, constructor, superclass);

    // Create the class object (instance of Class)
    klass = Opal.setup_class_object(name, alloc, superclass.$$name, superclass.constructor);

    // @property $$super the superclass, doesn't get changed by module inclusions
    klass.$$super = superclass;

    // @property $$parent direct parent class
    //                    starts with the superclass, after klass inclusion is
    //                    the last included klass
    klass.$$parent = superclass;

    // Every class gets its own constant scope, inherited from current scope
    Opal.create_scope(base.$$scope, klass, name);

    // Name new class directly onto current scope (Opal.Foo.Baz = klass)
    base[name] = klass;

    if (bridged) {
      Opal.bridge(klass, alloc);
    }
    else {
      // Copy all parent constants to child, unless parent is Object
      if (superclass !== _Object && superclass !== BasicObject) {
        Opal.donate_constants(superclass, klass);
      }

      // Call .inherited() hook with new class on the superclass
      if (superclass.$inherited) {
        superclass.$inherited(klass);
      }
    }

    return klass;
  };

  // Boot a base class (makes instances).
  //
  // @param name [String,null] the class name
  // @param constructor [JS.Function] the class' instances constructor/alloc function
  // @param superclass  [Class,null] the superclass object
  // @return [JS.Function] the consturctor holding the prototype for the class' instances
  Opal.boot_class_alloc = function(name, constructor, superclass) {
    if (superclass) {
      var alloc_proxy = function() {};
      alloc_proxy.prototype  = superclass.$$proto || superclass.prototype;
      constructor.prototype = new alloc_proxy();
    }

    if (name) {
      constructor.displayName = name+'_alloc';
    }

    constructor.prototype.constructor = constructor;

    return constructor;
  };

  // Adds common/required properties to class object (as in `Class.new`)
  //
  // @param name  [String,null] The name of the class
  //
  // @param alloc [JS.Function] The constructor of the class' instances
  //
  // @param superclass_name [String,null]
  //   The name of the super class, this is
  //   usefule to build the `.displayName` of the singleton class
  //
  // @param superclass_alloc [JS.Function]
  //   The constructor of the superclass from which the singleton_class is
  //   derived.
  //
  // @return [Class]
  Opal.setup_class_object = function(name, alloc, superclass_name, superclass_alloc) {
    // Grab the superclass prototype and use it to build an intermediary object
    // in the prototype chain.
    var superclass_alloc_proxy = function() {};
        superclass_alloc_proxy.prototype = superclass_alloc.prototype;
        superclass_alloc_proxy.displayName = superclass_name;

    var singleton_class_alloc = function() {}
        singleton_class_alloc.prototype = new superclass_alloc_proxy();

    // The built class is the only instance of its singleton_class
    var klass = new singleton_class_alloc();

    // @property $$alloc This is the constructor of instances of the current
    //                   class. Its prototype will be used for method lookup
    klass.$$alloc = alloc;

    klass.$$name = name || nil;

    // @property $$id Each class is assigned a unique `id` that helps
    //                comparation and implementation of `#object_id`
    klass.$$id = Opal.uid();

    // Set a displayName for the singleton_class
    singleton_class_alloc.displayName = "#<Class:"+(name || ("#<Class:"+klass.$$id+">"))+">";

    // @property $$proto This is the prototype on which methods will be defined
    klass.$$proto = alloc.prototype;

    // @property $$proto.$$class Make available to instances a reference to the
    //                           class they belong to.
    klass.$$proto.$$class = klass;

    // @property constructor keeps a ref to the constructor, but apparently the
    //                       constructor is already set on:
    //
    //                          `var klass = new constructor` is called.
    //
    //                       Maybe there are some browsers not abiding (IE6?)
    klass.constructor = singleton_class_alloc;

    // @property $$is_class Clearly mark this as a class
    klass.$$is_class = true;

    // @property $$class Classes are instances of the class Class
    klass.$$class    = Class;

    // @property $$inc included modules
    klass.$$inc = [];

    return klass;
  };

  // Define new module (or return existing module). The given `base` is basically
  // the current `self` value the `module` statement was defined in. If this is
  // a ruby module or class, then it is used, otherwise if the base is a ruby
  // object then that objects real ruby class is used (e.g. if the base is the
  // main object, then the top level `Object` class is used as the base).
  //
  // If a module of the given name is already defined in the base, then that
  // instance is just returned.
  //
  // If there is a class of the given name in the base, then an error is
  // generated instead (cannot have a class and module of same name in same base).
  //
  // Otherwise, a new module is created in the base with the given name, and that
  // new instance is returned back (to be referenced at runtime).
  //
  // @param  base [Module, Class] class or module this definition is inside
  // @param  id   [String] the name of the new (or existing) module
  //
  // @return [Module]
  Opal.module = function(base, name) {
    var module;

    if (!base.$$is_class && !base.$$is_module) {
      base = base.$$class;
    }

    if ($hasOwn.call(base.$$scope, name)) {
      module = base.$$scope[name];

      if (!module.$$is_module && module !== _Object) {
        throw Opal.TypeError.$new(name + " is not a module");
      }
    }
    else {
      module = Opal.module_allocate();
      Opal.create_scope(base.$$scope, module, name);
    }

    return module;
  };

  // The implementation for Module#initialize
  // @param module [Module]
  // @param block [Proc,nil]
  // @return nil
  Opal.module_initialize = function(module, block) {
    if (block !== nil) {
      var block_self = block.$$s;
      block.$$s = null;
      block.call(module);
      block.$$s = block_self;
    }
    return nil;
  };

  // Internal function to create a new module instance. This simply sets up
  // the prototype hierarchy and method tables.
  //
  Opal.module_allocate = function() {
    var mtor = function() {};
    mtor.prototype = Module_alloc.prototype;

    function module_constructor() {}
    module_constructor.prototype = new mtor();

    var module = new module_constructor();
    var module_prototype = {};
    var superclass = Module;

    // @property $$id Each class is assigned a unique `id` that helps
    //                comparation and implementation of `#object_id`
    module.$$id = Opal.uid();

    // Set the display name of the singleton prototype holder
    module_constructor.displayName = "#<Class:#<Module:"+module.$$id+">>"

    // @property $$proto This is the prototype on which methods will be defined
    module.$$proto = module_prototype;

    // @property constructor
    //   keeps a ref to the constructor, but apparently the
    //   constructor is already set on:
    //
    //      `var module = new constructor` is called.
    //
    //   Maybe there are some browsers not abiding (IE6?)
    module.constructor = module_constructor;

    // @property $$is_module Clearly mark this as a module
    module.$$is_module = true;
    module.$$class     = Module;

    // @property $$super
    //   the superclass, doesn't get changed by module inclusions
    module.$$super = superclass;

    // @property $$parent
    //   direct parent class or module
    //   starts with the superclass, after module inclusion is
    //   the last included module
    module.$$parent = superclass;

    // @property $$inc included modules
    module.$$inc = [];

    // mark the object as a module
    module.$$is_module = true;

    // initialize dependency tracking
    module.$$dep = [];

    // initialize the name with nil
    module.$$name = nil;

    return module;
  };

  // Return the singleton class for the passed object.
  //
  // If the given object alredy has a singleton class, then it will be stored on
  // the object as the `$$meta` property. If this exists, then it is simply
  // returned back.
  //
  // Otherwise, a new singleton object for the class or object is created, set on
  // the object at `$$meta` for future use, and then returned.
  //
  // @param object [Object] the ruby object
  // @return [Class] the singleton class for object
  Opal.get_singleton_class = function(object) {
    if (object.$$meta) {
      return object.$$meta;
    }

    if (object.$$is_class || object.$$is_module) {
      return Opal.build_class_singleton_class(object);
    }

    return Opal.build_object_singleton_class(object);
  };

  // Build the singleton class for an existing class. Class object are built
  // with their singleton class already in the prototype chain and inheriting
  // from their superclass object (up to `Class` itself).
  //
  // NOTE: Actually in MRI a class' singleton class inherits from its
  // superclass' singleton class which in turn inherits from Class.
  //
  // @param klass [Class]
  // @return [Class]
  Opal.build_class_singleton_class = function(object) {
    var alloc, superclass, klass;

    if (object.$$meta) {
      return object.$$meta;
    }

    // The constructor and prototype of the singleton_class instances is the
    // current class constructor and prototype.
    alloc = object.constructor;

    // The singleton_class superclass is the singleton_class of its superclass;
    // but BasicObject has no superclass (its `$$super` is null), thus we
    // fallback on `Class`.
    superclass = object === BasicObject ? Class : Opal.build_class_singleton_class(object.$$super);

    klass = Opal.setup_class_object(null, alloc, superclass.$$name, superclass.constructor);
    klass.$$super = superclass;
    klass.$$parent = superclass;

    // The singleton_class retains the same scope as the original class
    Opal.create_scope(object.$$scope, klass);

    klass.$$is_singleton = true;
    klass.$$singleton_of = object;

    return object.$$meta = klass;
  };

  // Build the singleton class for a Ruby (non class) Object.
  //
  // @param object [Object]
  // @return [Class]
  Opal.build_object_singleton_class = function(object) {
    var superclass = object.$$class,
        name = "#<Class:#<" + superclass.$$name + ":" + superclass.$$id + ">>";

    var alloc = Opal.boot_class_alloc(name, function(){}, superclass)
    var klass = Opal.setup_class_object(name, alloc, superclass.$$name, superclass.constructor);

    klass.$$super  = superclass;
    klass.$$parent = superclass;
    klass.$$class  = superclass.$$class;
    klass.$$scope  = superclass.$$scope;
    klass.$$proto  = object;

    klass.$$is_singleton = true;
    klass.$$singleton_of = object;

    return object.$$meta = klass;
  };

  // Bridges a single method.
  Opal.bridge_method = function(target, from, name, body) {
    var ancestors, i, ancestor, length;

    ancestors = target.$$bridge.$ancestors();

    // order important here, we have to check for method presence in
    // ancestors from the bridged class to the last ancestor
    for (i = 0, length = ancestors.length; i < length; i++) {
      ancestor = ancestors[i];

      if ($hasOwn.call(ancestor.$$proto, name) &&
          ancestor.$$proto[name] &&
          !ancestor.$$proto[name].$$donated &&
          !ancestor.$$proto[name].$$stub &&
          ancestor !== from) {
        break;
      }

      if (ancestor === from) {
        target.prototype[name] = body
        break;
      }
    }

  };

  // Bridges from *donator* to a *target*.
  Opal._bridge = function(target, donator) {
    var id, methods, method, i, bridged;

    if (typeof(target) === "function") {
      id      = donator.$__id__();
      methods = donator.$instance_methods();

      for (i = methods.length - 1; i >= 0; i--) {
        method = '$' + methods[i];

        Opal.bridge_method(target, donator, method, donator.$$proto[method]);
      }

      if (!bridges[id]) {
        bridges[id] = [];
      }

      bridges[id].push(target);
    }
    else {
      bridged = bridges[target.$__id__()];

      if (bridged) {
        for (i = bridged.length - 1; i >= 0; i--) {
          Opal._bridge(bridged[i], donator);
        }

        bridges[donator.$__id__()] = bridged.slice();
      }
    }
  };

  // The actual inclusion of a module into a class.
  //
  // ## Class `$$parent` and `iclass`
  //
  // To handle `super` calls, every class has a `$$parent`. This parent is
  // used to resolve the next class for a super call. A normal class would
  // have this point to its superclass. However, if a class includes a module
  // then this would need to take into account the module. The module would
  // also have to then point its `$$parent` to the actual superclass. We
  // cannot modify modules like this, because it might be included in more
  // then one class. To fix this, we actually insert an `iclass` as the class'
  // `$$parent` which can then point to the superclass. The `iclass` acts as
  // a proxy to the actual module, so the `super` chain can then search it for
  // the required method.
  //
  // @param module [Module] the module to include
  // @param klass  [Class] the target class to include module into
  // @return [null]
  Opal.append_features = function(module, klass) {
    var iclass, donator, prototype, methods, id, i;

    // check if this module is already included in the class
    for (i = klass.$$inc.length - 1; i >= 0; i--) {
      if (klass.$$inc[i] === module) {
        return;
      }
    }

    klass.$$inc.push(module);
    module.$$dep.push(klass);
    Opal._bridge(klass, module);

    // iclass
    iclass = {
      $$name:   module.$$name,
      $$proto:  module.$$proto,
      $$parent: klass.$$parent,
      $$module: module,
      $$iclass: true
    };

    klass.$$parent = iclass;

    donator   = module.$$proto;
    prototype = klass.$$proto;
    methods   = module.$instance_methods();

    for (i = methods.length - 1; i >= 0; i--) {
      id = '$' + methods[i];

      // if the target class already has a method of the same name defined
      // and that method was NOT donated, then it must be a method defined
      // by the class so we do not want to override it
      if ( prototype.hasOwnProperty(id) &&
          !prototype[id].$$donated &&
          !prototype[id].$$stub) {
        continue;
      }

      prototype[id] = donator[id];
      prototype[id].$$donated = module;
    }

    Opal.donate_constants(module, klass);
  };

  // Table that holds all methods that have been defined on all objects
  // It is used for defining method stubs for new coming native classes
  Opal.stubs = {};

  // For performance, some core Ruby classes are toll-free bridged to their
  // native JavaScript counterparts (e.g. a Ruby Array is a JavaScript Array).
  //
  // This method is used to setup a native constructor (e.g. Array), to have
  // its prototype act like a normal Ruby class. Firstly, a new Ruby class is
  // created using the native constructor so that its prototype is set as the
  // target for th new class. Note: all bridged classes are set to inherit
  // from Object.
  //
  // Example:
  //
  //    Opal.bridge(self, Function);
  //
  // @param klass       [Class] the Ruby class to bridge
  // @param constructor [JS.Function] native JavaScript constructor to use
  // @return [Class] returns the passed Ruby class
  //
  Opal.bridge = function(klass, constructor) {
    if (constructor.$$bridge) {
      throw Opal.ArgumentError.$new("already bridged");
    }

    Opal.stub_subscribers.push(constructor.prototype);

    // Populate constructor with previously stored stubs
    for (var method_name in Opal.stubs) {
      if (!(method_name in constructor.prototype)) {
        constructor.prototype[method_name] = Opal.stub_for(method_name);
      }
    }

    constructor.prototype.$$class = klass;
    constructor.$$bridge          = klass;

    var ancestors = klass.$ancestors();

    // order important here, we have to bridge from the last ancestor to the
    // bridged class
    for (var i = ancestors.length - 1; i >= 0; i--) {
      Opal._bridge(constructor, ancestors[i]);
    }

    for (var name in BasicObject_alloc.prototype) {
      var method = BasicObject_alloc.prototype[method];

      if (method && method.$$stub && !(name in constructor.prototype)) {
        constructor.prototype[name] = method;
      }
    }

    return klass;
  };

  // When a source module is included into the target module, we must also copy
  // its constants to the target.
  //
  Opal.donate_constants = function(source_mod, target_mod) {
    var source_constants = source_mod.$$scope.constants,
        target_scope     = target_mod.$$scope,
        target_constants = target_scope.constants;

    for (var i = 0, length = source_constants.length; i < length; i++) {
      target_constants.push(source_constants[i]);
      target_scope[source_constants[i]] = source_mod.$$scope[source_constants[i]];
    }
  };

  // Donate methods for a module.
  Opal.donate = function(module, jsid) {
    var included_in = module.$$dep,
        body = module.$$proto[jsid],
        i, length, includee, dest, current,
        klass_includees, j, jj, current_owner_index, module_index;

    if (!included_in) {
      return;
    }

    for (i = 0, length = included_in.length; i < length; i++) {
      includee = included_in[i];
      dest = includee.$$proto;
      current = dest[jsid];

      if (dest.hasOwnProperty(jsid) && !current.$$donated && !current.$$stub) {
        // target class has already defined the same method name - do nothing
      }
      else if (dest.hasOwnProperty(jsid) && !current.$$stub) {
        // target class includes another module that has defined this method
        klass_includees = includee.$$inc;

        for (j = 0, jj = klass_includees.length; j < jj; j++) {
          if (klass_includees[j] === current.$$donated) {
            current_owner_index = j;
          }
          if (klass_includees[j] === module) {
            module_index = j;
          }
        }

        // only redefine method on class if the module was included AFTER
        // the module which defined the current method body. Also make sure
        // a module can overwrite a method it defined before
        if (current_owner_index <= module_index) {
          dest[jsid] = body;
          dest[jsid].$$donated = module;
        }
      }
      else {
        // neither a class, or module included by class, has defined method
        dest[jsid] = body;
        dest[jsid].$$donated = module;
      }

      if (includee.$$dep) {
        Opal.donate(includee, jsid);
      }
    }
  };

  // The Array of ancestors for a given module/class
  Opal.ancestors = function(module_or_class) {
    var parent = module_or_class,
        result = [],
        modules;

    while (parent) {
      result.push(parent);
      for (var i=0; i < parent.$$inc.length; i++) {
        modules = Opal.ancestors(parent.$$inc[i]);

        for(var j = 0; j < modules.length; j++) {
          result.push(modules[j]);
        }
      }

      // only the actual singleton class gets included in its ancestry
      // after that, traverse the normal class hierarchy
      if (parent.$$is_singleton && parent.$$singleton_of.$$is_module) {
        parent = parent.$$singleton_of.$$super;
      }
      else {
        parent = parent.$$is_class ? parent.$$super : null;
      }
    }

    return result;
  };


  // Method Missing
  // --------------

  // Methods stubs are used to facilitate method_missing in opal. A stub is a
  // placeholder function which just calls `method_missing` on the receiver.
  // If no method with the given name is actually defined on an object, then it
  // is obvious to say that the stub will be called instead, and then in turn
  // method_missing will be called.
  //
  // When a file in ruby gets compiled to javascript, it includes a call to
  // this function which adds stubs for every method name in the compiled file.
  // It should then be safe to assume that method_missing will work for any
  // method call detected.
  //
  // Method stubs are added to the BasicObject prototype, which every other
  // ruby object inherits, so all objects should handle method missing. A stub
  // is only added if the given property name (method name) is not already
  // defined.
  //
  // Note: all ruby methods have a `$` prefix in javascript, so all stubs will
  // have this prefix as well (to make this method more performant).
  //
  //    Opal.add_stubs(["$foo", "$bar", "$baz="]);
  //
  // All stub functions will have a private `$$stub` property set to true so
  // that other internal methods can detect if a method is just a stub or not.
  // `Kernel#respond_to?` uses this property to detect a methods presence.
  //
  // @param stubs [Array] an array of method stubs to add
  // @return [undefined]
  Opal.add_stubs = function(stubs) {
    var subscriber, subscribers = Opal.stub_subscribers,
        i, ilength = stubs.length,
        j, jlength = subscribers.length,
        method_name, stub;

    for (i = 0; i < ilength; i++) {
      method_name = stubs[i];
      // Save method name to populate other subscribers with this stub
      Opal.stubs[method_name] = true;
      stub = Opal.stub_for(method_name);

      for (j = 0; j < jlength; j++) {
        subscriber = subscribers[j];

        if (!(method_name in subscriber)) {
          subscriber[method_name] = stub;
        }
      }
    }
  };

  // Keep a list of prototypes that want method_missing stubs to be added.
  //
  // @default [Prototype List] BasicObject_alloc.prototype
  //
  Opal.stub_subscribers = [BasicObject_alloc.prototype];

  // Add a method_missing stub function to the given prototype for the
  // given name.
  //
  // @param prototype [Prototype] the target prototype
  // @param stub [String] stub name to add (e.g. "$foo")
  // @return [undefined]
  Opal.add_stub_for = function(prototype, stub) {
    var method_missing_stub = Opal.stub_for(stub);
    prototype[stub] = method_missing_stub;
  };

  // Generate the method_missing stub for a given method name.
  //
  // @param method_name [String] The js-name of the method to stub (e.g. "$foo")
  // @return [undefined]
  Opal.stub_for = function(method_name) {
    function method_missing_stub() {
      // Copy any given block onto the method_missing dispatcher
      this.$method_missing.$$p = method_missing_stub.$$p;

      // Set block property to null ready for the next call (stop false-positives)
      method_missing_stub.$$p = null;

      // call method missing with correct args (remove '$' prefix on method name)
      var args_ary = new Array(arguments.length);
      for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = arguments[i]; }

      return this.$method_missing.apply(this, [method_name.slice(1)].concat(args_ary));
    }

    method_missing_stub.$$stub = true;

    return method_missing_stub;
  };


  // Methods
  // -------

  // Arity count error dispatcher for methods
  //
  // @param actual [Fixnum] number of arguments given to method
  // @param expected [Fixnum] expected number of arguments
  // @param object [Object] owner of the method +meth+
  // @param meth [String] method name that got wrong number of arguments
  // @raise [ArgumentError]
  Opal.ac = function(actual, expected, object, meth) {
    var inspect = '';
    if (object.$$is_class || object.$$is_module) {
      inspect += object.$$name + '.';
    }
    else {
      inspect += object.$$class.$$name + '#';
    }
    inspect += meth;

    throw Opal.ArgumentError.$new('[' + inspect + '] wrong number of arguments(' + actual + ' for ' + expected + ')');
  };

  // Arity count error dispatcher for blocks
  //
  // @param actual [Fixnum] number of arguments given to block
  // @param expected [Fixnum] expected number of arguments
  // @param context [Object] context of the block definition
  // @raise [ArgumentError]
  Opal.block_ac = function(actual, expected, context) {
    var inspect = "`block in " + context + "'";

    throw Opal.ArgumentError.$new(inspect + ': wrong number of arguments (' + actual + ' for ' + expected + ')');
  }

  // Super dispatcher
  Opal.find_super_dispatcher = function(obj, jsid, current_func, defcheck, defs) {
    var dispatcher;

    if (defs) {
      if (obj.$$is_class || obj.$$is_module) {
        dispatcher = defs.$$super;
      }
      else {
        dispatcher = obj.$$class.$$proto;
      }
    }
    else {
      dispatcher = Opal.find_obj_super_dispatcher(obj, jsid, current_func);
    }

    dispatcher = dispatcher['$' + jsid];

    if (!defcheck && dispatcher.$$stub && Opal.Kernel.$method_missing === obj.$method_missing) {
      // method_missing hasn't been explicitly defined
      throw Opal.NoMethodError.$new('super: no superclass method `'+jsid+"' for "+obj, jsid);
    }

    return dispatcher;
  };

  // Iter dispatcher for super in a block
  Opal.find_iter_super_dispatcher = function(obj, jsid, current_func, defcheck, implicit) {
    var call_jsid = jsid;

    if (!current_func) {
      throw Opal.RuntimeError.$new("super called outside of method");
    }

    if (implicit && current_func.$$define_meth) {
      throw Opal.RuntimeError.$new("implicit argument passing of super from method defined by define_method() is not supported. Specify all arguments explicitly");
    }

    if (current_func.$$def) {
      call_jsid = current_func.$$jsid;
    }

    return Opal.find_super_dispatcher(obj, call_jsid, current_func, defcheck);
  };

  Opal.find_obj_super_dispatcher = function(obj, jsid, current_func) {
    var klass = obj.$$meta || obj.$$class;

    // first we need to find the class/module current_func is located on
    klass = Opal.find_owning_class(klass, current_func);

    if (!klass) {
      throw new Error("could not find current class for super()");
    }

    jsid = '$' + jsid;
    return Opal.find_super_func(klass, jsid, current_func);
  };

  Opal.find_owning_class = function(klass, current_func) {
    var owner = current_func.$$owner;

    while (klass) {
      // repeating for readability

      if (klass.$$iclass && klass.$$module === current_func.$$donated) {
        // this klass was the last one the module donated to
        // case is also hit with multiple module includes
        break;
      }
      else if (klass.$$iclass && klass.$$module === owner) {
        // module has donated to other classes but klass isn't one of those
        break;
      }
      else if (owner.$$is_singleton && klass === owner.$$singleton_of.$$class) {
        // cases like stdlib `Singleton::included` that use a singleton of a singleton
        break;
      }
      else if (klass === owner) {
        // no modules, pure class inheritance
        break;
      }

      klass = klass.$$parent;
    }

    return klass;
  };

  Opal.find_super_func = function(owning_klass, jsid, current_func) {
    var klass = owning_klass.$$parent;

    // now we can find the super
    while (klass) {
      var working = klass.$$proto[jsid];

      if (working && working !== current_func) {
        // ok
        break;
      }

      klass = klass.$$parent;
    }

    return klass.$$proto;
  };

  // Used to return as an expression. Sometimes, we can't simply return from
  // a javascript function as if we were a method, as the return is used as
  // an expression, or even inside a block which must "return" to the outer
  // method. This helper simply throws an error which is then caught by the
  // method. This approach is expensive, so it is only used when absolutely
  // needed.
  //
  Opal.ret = function(val) {
    Opal.returner.$v = val;
    throw Opal.returner;
  };

  // Used to break out of a block.
  Opal.brk = function(val, breaker) {
    breaker.$v = val;
    throw breaker;
  };

  // Builds a new unique breaker, this is to avoid multiple nested breaks to get
  // in the way of each other.
  Opal.new_brk = function() {
    return new Error('unexpected break');
  };

  // handles yield calls for 1 yielded arg
  Opal.yield1 = function(block, arg) {
    if (typeof(block) !== "function") {
      throw Opal.LocalJumpError.$new("no block given");
    }

    var has_mlhs = block.$$has_top_level_mlhs_arg,
        has_trailing_comma = block.$$has_trailing_comma_in_args;

    if (block.length > 1 || ((has_mlhs || has_trailing_comma) && block.length === 1)) {
      arg = Opal.to_ary(arg);
    }

    if ((block.length > 1 || (has_trailing_comma && block.length === 1)) && arg.$$is_array) {
      return block.apply(null, arg);
    }
    else {
      return block(arg);
    }
  };

  // handles yield for > 1 yielded arg
  Opal.yieldX = function(block, args) {
    if (typeof(block) !== "function") {
      throw Opal.LocalJumpError.$new("no block given");
    }

    if (block.length > 1 && args.length === 1) {
      if (args[0].$$is_array) {
        return block.apply(null, args[0]);
      }
    }

    if (!args.$$is_array) {
      var args_ary = new Array(args.length);
      for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = args[i]; }

      return block.apply(null, args_ary);
    }

    return block.apply(null, args);
  };

  // Finds the corresponding exception match in candidates.  Each candidate can
  // be a value, or an array of values.  Returns null if not found.
  Opal.rescue = function(exception, candidates) {
    for (var i = 0; i < candidates.length; i++) {
      var candidate = candidates[i];

      if (candidate.$$is_array) {
        var result = Opal.rescue(exception, candidate);

        if (result) {
          return result;
        }
      }
      else if (candidate['$==='](exception)) {
        return candidate;
      }
    }

    return null;
  };

  Opal.is_a = function(object, klass) {
    if (object.$$meta === klass) {
      return true;
    }

    var i, length, ancestors = Opal.ancestors(object.$$class);

    for (i = 0, length = ancestors.length; i < length; i++) {
      if (ancestors[i] === klass) {
        return true;
      }
    }

    ancestors = Opal.ancestors(object.$$meta);

    for (i = 0, length = ancestors.length; i < length; i++) {
      if (ancestors[i] === klass) {
        return true;
      }
    }

    return false;
  };

  // Helpers for extracting kwsplats
  // Used for: { **h }
  Opal.to_hash = function(value) {
    if (value.$$is_hash) {
      return value;
    }
    else if (value['$respond_to?']('to_hash', true)) {
      var hash = value.$to_hash();
      if (hash.$$is_hash) {
        return hash;
      }
      else {
        throw Opal.TypeError.$new("Can't convert " + value.$$class +
          " to Hash (" + value.$$class + "#to_hash gives " + hash.$$class + ")");
      }
    }
    else {
      throw Opal.TypeError.$new("no implicit conversion of " + value.$$class + " into Hash");
    }
  };

  // Helpers for implementing multiple assignment
  // Our code for extracting the values and assigning them only works if the
  // return value is a JS array.
  // So if we get an Array subclass, extract the wrapped JS array from it

  // Used for: a, b = something (no splat)
  Opal.to_ary = function(value) {
    if (value.$$is_array) {
      return value;
    }
    else if (value['$respond_to?']('to_ary', true)) {
      var ary = value.$to_ary();
      if (ary === nil) {
        return [value];
      }
      else if (ary.$$is_array) {
        return ary;
      }
      else {
        throw Opal.TypeError.$new("Can't convert " + value.$$class +
          " to Array (" + value.$$class + "#to_ary gives " + ary.$$class + ")");
      }
    }
    else {
      return [value];
    }
  };

  // Used for: a, b = *something (with splat)
  Opal.to_a = function(value) {
    if (value.$$is_array) {
      // A splatted array must be copied
      return value.slice();
    }
    else if (value['$respond_to?']('to_a', true)) {
      var ary = value.$to_a();
      if (ary === nil) {
        return [value];
      }
      else if (ary.$$is_array) {
        return ary;
      }
      else {
        throw Opal.TypeError.$new("Can't convert " + value.$$class +
          " to Array (" + value.$$class + "#to_a gives " + ary.$$class + ")");
      }
    }
    else {
      return [value];
    }
  };

  // Used for extracting keyword arguments from arguments passed to
  // JS function. If provided +arguments+ list doesn't have a Hash
  // as a last item, returns a blank Hash.
  //
  // @param parameters [Array]
  // @return [Hash]
  //
  Opal.extract_kwargs = function(parameters) {
    var kwargs = parameters[parameters.length - 1];
    if (kwargs != null && kwargs['$respond_to?']('to_hash', true)) {
      Array.prototype.splice.call(parameters, parameters.length - 1, 1);
      return kwargs.$to_hash();
    }
    else {
      return Opal.hash2([], {});
    }
  }

  // Used to get a list of rest keyword arguments. Method takes the given
  // keyword args, i.e. the hash literal passed to the method containing all
  // keyword arguemnts passed to method, as well as the used args which are
  // the names of required and optional arguments defined. This method then
  // just returns all key/value pairs which have not been used, in a new
  // hash literal.
  //
  // @param given_args [Hash] all kwargs given to method
  // @param used_args [Object<String: true>] all keys used as named kwargs
  // @return [Hash]
  //
  Opal.kwrestargs = function(given_args, used_args) {
    var keys      = [],
        map       = {},
        key       = null,
        given_map = given_args.$$smap;

    for (key in given_map) {
      if (!used_args[key]) {
        keys.push(key);
        map[key] = given_map[key];
      }
    }

    return Opal.hash2(keys, map);
  };

  // Call a ruby method on a ruby object with some arguments:
  //
  // @example
  //   var my_array = [1, 2, 3, 4]
  //   Opal.send(my_array, 'length')     # => 4
  //   Opal.send(my_array, 'reverse!')   # => [4, 3, 2, 1]
  //
  // A missing method will be forwarded to the object via
  // method_missing.
  //
  // The result of either call with be returned.
  //
  // @param recv [Object] the ruby object
  // @param mid  [String] ruby method to call
  // @return [Object] forwards the return value of the method (or of method_missing)
  Opal.send = function(recv, mid) {
    var args_ary = new Array(Math.max(arguments.length - 2, 0));
    for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = arguments[i + 2]; }

    var func = recv['$' + mid];

    if (func) {
      return func.apply(recv, args_ary);
    }

    return recv.$method_missing.apply(recv, [mid].concat(args_ary));
  };

  Opal.block_send = function(recv, mid, block) {
    var args_ary = new Array(Math.max(arguments.length - 3, 0));
    for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = arguments[i + 3]; }

    var func = recv['$' + mid];

    if (func) {
      func.$$p = block;
      return func.apply(recv, args_ary);
    }

    return recv.$method_missing.apply(recv, [mid].concat(args_ary));
  };

  // Used to define methods on an object. This is a helper method, used by the
  // compiled source to define methods on special case objects when the compiler
  // can not determine the destination object, or the object is a Module
  // instance. This can get called by `Module#define_method` as well.
  //
  // ## Modules
  //
  // Any method defined on a module will come through this runtime helper.
  // The method is added to the module body, and the owner of the method is
  // set to be the module itself. This is used later when choosing which
  // method should show on a class if more than 1 included modules define
  // the same method. Finally, if the module is in `module_function` mode,
  // then the method is also defined onto the module itself.
  //
  // ## Classes
  //
  // This helper will only be called for classes when a method is being
  // defined indirectly; either through `Module#define_method`, or by a
  // literal `def` method inside an `instance_eval` or `class_eval` body. In
  // either case, the method is simply added to the class' prototype. A special
  // exception exists for `BasicObject` and `Object`. These two classes are
  // special because they are used in toll-free bridged classes. In each of
  // these two cases, extra work is required to define the methods on toll-free
  // bridged class' prototypes as well.
  //
  // ## Objects
  //
  // If a simple ruby object is the object, then the method is simply just
  // defined on the object as a singleton method. This would be the case when
  // a method is defined inside an `instance_eval` block.
  //
  // @param obj  [Object, Class] the actual obj to define method for
  // @param jsid [String] the JavaScript friendly method name (e.g. '$foo')
  // @param body [JS.Function] the literal JavaScript function used as method
  // @return [null]
  //
  Opal.defn = function(obj, jsid, body) {
    obj.$$proto[jsid] = body;
    // for super dispatcher, etc.
    body.$$owner = obj;

    if (obj.$$is_module) {
      Opal.donate(obj, jsid);

      if (obj.$$module_function) {
        Opal.defs(obj, jsid, body);
      }
    }

    if (obj.$__id__ && !obj.$__id__.$$stub) {
      var bridged = bridges[obj.$__id__()];

      if (bridged) {
        for (var i = bridged.length - 1; i >= 0; i--) {
          Opal.bridge_method(bridged[i], obj, jsid, body);
        }
      }
    }

    var singleton_of = obj.$$singleton_of;
    if (obj.$method_added && !obj.$method_added.$$stub && !singleton_of) {
      obj.$method_added(jsid.substr(1));
    }
    else if (singleton_of && singleton_of.$singleton_method_added && !singleton_of.$singleton_method_added.$$stub) {
      singleton_of.$singleton_method_added(jsid.substr(1));
    }

    return nil;
  };

  // Define a singleton method on the given object.
  Opal.defs = function(obj, jsid, body) {
    Opal.defn(Opal.get_singleton_class(obj), jsid, body)
  };

  Opal.def = function(obj, jsid, body) {
    // if instance_eval is invoked on a module/class, it sets inst_eval_mod
    if (!obj.$$eval && (obj.$$is_class || obj.$$is_module)) {
      Opal.defn(obj, jsid, body);
    }
    else {
      Opal.defs(obj, jsid, body);
    }
  };

  // Called from #remove_method.
  Opal.rdef = function(obj, jsid) {
    // TODO: remove from bridges as well

    if (!$hasOwn.call(obj.$$proto, jsid)) {
      throw Opal.NameError.$new("method '" + jsid.substr(1) + "' not defined in " + obj.$name());
    }

    delete obj.$$proto[jsid];

    if (obj.$$is_singleton) {
      if (obj.$$proto.$singleton_method_removed && !obj.$$proto.$singleton_method_removed.$$stub) {
        obj.$$proto.$singleton_method_removed(jsid.substr(1));
      }
    }
    else {
      if (obj.$method_removed && !obj.$method_removed.$$stub) {
        obj.$method_removed(jsid.substr(1));
      }
    }
  };

  // Called from #undef_method.
  Opal.udef = function(obj, jsid) {
    if (!obj.$$proto[jsid] || obj.$$proto[jsid].$$stub) {
      throw Opal.NameError.$new("method '" + jsid.substr(1) + "' not defined in " + obj.$name());
    }

    Opal.add_stub_for(obj.$$proto, jsid);

    if (obj.$$is_singleton) {
      if (obj.$$proto.$singleton_method_undefined && !obj.$$proto.$singleton_method_undefined.$$stub) {
        obj.$$proto.$singleton_method_undefined(jsid.substr(1));
      }
    }
    else {
      if (obj.$method_undefined && !obj.$method_undefined.$$stub) {
        obj.$method_undefined(jsid.substr(1));
      }
    }
  };

  Opal.alias = function(obj, name, old) {
    var id     = '$' + name,
        old_id = '$' + old,
        body   = obj.$$proto['$' + old];

    // instance_eval is being run on a class/module, so that need to alias class methods
    if (obj.$$eval) {
      return Opal.alias(Opal.get_singleton_class(obj), name, old);
    }

    if (typeof(body) !== "function" || body.$$stub) {
      var ancestor = obj.$$super;

      while (typeof(body) !== "function" && ancestor) {
        body     = ancestor[old_id];
        ancestor = ancestor.$$super;
      }

      if (typeof(body) !== "function" || body.$$stub) {
        throw Opal.NameError.$new("undefined method `" + old + "' for class `" + obj.$name() + "'")
      }
    }

    Opal.defn(obj, id, body);

    return obj;
  };

  Opal.alias_native = function(obj, name, native_name) {
    var id   = '$' + name,
        body = obj.$$proto[native_name];

    if (typeof(body) !== "function" || body.$$stub) {
      throw Opal.NameError.$new("undefined native method `" + native_name + "' for class `" + obj.$name() + "'")
    }

    Opal.defn(obj, id, body);

    return obj;
  };


  // Hashes
  // ------

  Opal.hash_init = function(hash) {
    hash.$$smap = {};
    hash.$$map  = {};
    hash.$$keys = [];
  };

  Opal.hash_clone = function(from_hash, to_hash) {
    to_hash.$$none = from_hash.$$none;
    to_hash.$$proc = from_hash.$$proc;

    for (var i = 0, keys = from_hash.$$keys, length = keys.length, key, value; i < length; i++) {
      key = from_hash.$$keys[i];

      if (key.$$is_string) {
        value = from_hash.$$smap[key];
      } else {
        value = key.value;
        key = key.key;
      }

      Opal.hash_put(to_hash, key, value);
    }
  };

  Opal.hash_put = function(hash, key, value) {
    if (key.$$is_string) {
      if (!hash.$$smap.hasOwnProperty(key)) {
        hash.$$keys.push(key);
      }
      hash.$$smap[key] = value;
      return;
    }

    var key_hash = key.$hash(), bucket, last_bucket;

    if (!hash.$$map.hasOwnProperty(key_hash)) {
      bucket = {key: key, key_hash: key_hash, value: value};
      hash.$$keys.push(bucket);
      hash.$$map[key_hash] = bucket;
      return;
    }

    bucket = hash.$$map[key_hash];

    while (bucket) {
      if (key === bucket.key || key['$eql?'](bucket.key)) {
        last_bucket = undefined;
        bucket.value = value;
        break;
      }
      last_bucket = bucket;
      bucket = bucket.next;
    }

    if (last_bucket) {
      bucket = {key: key, key_hash: key_hash, value: value};
      hash.$$keys.push(bucket);
      last_bucket.next = bucket;
    }
  };

  Opal.hash_get = function(hash, key) {
    if (key.$$is_string) {
      if (hash.$$smap.hasOwnProperty(key)) {
        return hash.$$smap[key];
      }
      return;
    }

    var key_hash = key.$hash(), bucket;

    if (hash.$$map.hasOwnProperty(key_hash)) {
      bucket = hash.$$map[key_hash];

      while (bucket) {
        if (key === bucket.key || key['$eql?'](bucket.key)) {
          return bucket.value;
        }
        bucket = bucket.next;
      }
    }
  };

  Opal.hash_delete = function(hash, key) {
    var i, keys = hash.$$keys, length = keys.length, value;

    if (key.$$is_string) {
      if (!hash.$$smap.hasOwnProperty(key)) {
        return;
      }

      for (i = 0; i < length; i++) {
        if (keys[i] === key) {
          keys.splice(i, 1);
          break;
        }
      }

      value = hash.$$smap[key];
      delete hash.$$smap[key];
      return value;
    }

    var key_hash = key.$hash();

    if (!hash.$$map.hasOwnProperty(key_hash)) {
      return;
    }

    var bucket = hash.$$map[key_hash], last_bucket;

    while (bucket) {
      if (key === bucket.key || key['$eql?'](bucket.key)) {
        value = bucket.value;

        for (i = 0; i < length; i++) {
          if (keys[i] === bucket) {
            keys.splice(i, 1);
            break;
          }
        }

        if (last_bucket && bucket.next) {
          last_bucket.next = bucket.next;
        }
        else if (last_bucket) {
          delete last_bucket.next;
        }
        else if (bucket.next) {
          hash.$$map[key_hash] = bucket.next;
        }
        else {
          delete hash.$$map[key_hash];
        }

        return value;
      }
      last_bucket = bucket;
      bucket = bucket.next;
    }
  };

  Opal.hash_rehash = function(hash) {
    for (var i = 0, length = hash.$$keys.length, key_hash, bucket, last_bucket; i < length; i++) {

      if (hash.$$keys[i].$$is_string) {
        continue;
      }

      key_hash = hash.$$keys[i].key.$hash();

      if (key_hash === hash.$$keys[i].key_hash) {
        continue;
      }

      bucket = hash.$$map[hash.$$keys[i].key_hash];
      last_bucket = undefined;

      while (bucket) {
        if (bucket === hash.$$keys[i]) {
          if (last_bucket && bucket.next) {
            last_bucket.next = bucket.next;
          }
          else if (last_bucket) {
            delete last_bucket.next;
          }
          else if (bucket.next) {
            hash.$$map[hash.$$keys[i].key_hash] = bucket.next;
          }
          else {
            delete hash.$$map[hash.$$keys[i].key_hash];
          }
          break;
        }
        last_bucket = bucket;
        bucket = bucket.next;
      }

      hash.$$keys[i].key_hash = key_hash;

      if (!hash.$$map.hasOwnProperty(key_hash)) {
        hash.$$map[key_hash] = hash.$$keys[i];
        continue;
      }

      bucket = hash.$$map[key_hash];
      last_bucket = undefined;

      while (bucket) {
        if (bucket === hash.$$keys[i]) {
          last_bucket = undefined;
          break;
        }
        last_bucket = bucket;
        bucket = bucket.next;
      }

      if (last_bucket) {
        last_bucket.next = hash.$$keys[i];
      }
    }
  };

  Opal.hash = function() {
    var arguments_length = arguments.length, args, hash, i, length, key, value;

    if (arguments_length === 1 && arguments[0].$$is_hash) {
      return arguments[0];
    }

    hash = new Opal.Hash.$$alloc();
    Opal.hash_init(hash);

    if (arguments_length === 1 && arguments[0].$$is_array) {
      args = arguments[0];
      length = args.length;

      for (i = 0; i < length; i++) {
        if (args[i].length !== 2) {
          throw Opal.ArgumentError.$new("value not of length 2: " + args[i].$inspect());
        }

        key = args[i][0];
        value = args[i][1];

        Opal.hash_put(hash, key, value);
      }

      return hash;
    }

    if (arguments_length === 1) {
      args = arguments[0];
      for (key in args) {
        if (args.hasOwnProperty(key)) {
          value = args[key];

          Opal.hash_put(hash, key, value);
        }
      }

      return hash;
    }

    if (arguments_length % 2 !== 0) {
      throw Opal.ArgumentError.$new("odd number of arguments for Hash");
    }

    for (i = 0; i < arguments_length; i += 2) {
      key = arguments[i];
      value = arguments[i + 1];

      Opal.hash_put(hash, key, value);
    }

    return hash;
  };

  // hash2 is a faster creator for hashes that just use symbols and
  // strings as keys. The map and keys array can be constructed at
  // compile time, so they are just added here by the constructor
  // function
  //
  Opal.hash2 = function(keys, smap) {
    var hash = new Opal.Hash.$$alloc();

    hash.$$smap = smap;
    hash.$$map  = {};
    hash.$$keys = keys;

    return hash;
  };

  // Create a new range instance with first and last values, and whether the
  // range excludes the last value.
  //
  Opal.range = function(first, last, exc) {
    var range         = new Opal.Range.$$alloc();
        range.begin   = first;
        range.end     = last;
        range.exclude = exc;

    return range;
  };

  Opal.ivar = function(name) {
    if (
        // properties
        name === "constructor" ||
        name === "displayName" ||
        name === "__count__" ||
        name === "__noSuchMethod__" ||
        name === "__parent__" ||
        name === "__proto__" ||

        // methods
        name === "hasOwnProperty" ||
        name === "valueOf"
       )
    {
      return name + "$";
    }

    return name;
  };


  // Require system
  // --------------

  Opal.modules         = {};
  Opal.loaded_features = ['corelib/runtime'];
  Opal.current_dir     = '.'
  Opal.require_table   = {'corelib/runtime': true};

  Opal.normalize = function(path) {
    var parts, part, new_parts = [], SEPARATOR = '/';

    if (Opal.current_dir !== '.') {
      path = Opal.current_dir.replace(/\/*$/, '/') + path;
    }

    path = path.replace(/\.(rb|opal|js)$/, '');
    parts = path.split(SEPARATOR);

    for (var i = 0, ii = parts.length; i < ii; i++) {
      part = parts[i];
      if (part === '') continue;
      (part === '..') ? new_parts.pop() : new_parts.push(part)
    }

    return new_parts.join(SEPARATOR);
  };

  Opal.loaded = function(paths) {
    var i, l, path;

    for (i = 0, l = paths.length; i < l; i++) {
      path = Opal.normalize(paths[i]);

      if (Opal.require_table[path]) {
        return;
      }

      Opal.loaded_features.push(path);
      Opal.require_table[path] = true;
    }
  };

  Opal.load = function(path) {
    path = Opal.normalize(path);

    Opal.loaded([path]);

    var module = Opal.modules[path];

    if (module) {
      module(Opal);
    }
    else {
      var severity = Opal.config.missing_require_severity;
      var message  = 'cannot load such file -- ' + path;

      if (severity === "error") {
        Opal.LoadError ? Opal.LoadError.$new(message) : function(){throw message}();
      }
      else if (severity === "warning") {
        console.warn('WARNING: LoadError: ' + message);
      }
    }

    return true;
  };

  Opal.require = function(path) {
    path = Opal.normalize(path);

    if (Opal.require_table[path]) {
      return false;
    }

    return Opal.load(path);
  };


  // Initialization
  // --------------

  // Constructors for *instances* of core objects
  Opal.boot_class_alloc('BasicObject', BasicObject_alloc);
  Opal.boot_class_alloc('Object',      Object_alloc,       BasicObject_alloc);
  Opal.boot_class_alloc('Module',      Module_alloc,       Object_alloc);
  Opal.boot_class_alloc('Class',       Class_alloc,        Module_alloc);

  // Constructors for *classes* of core objects
  Opal.BasicObject = BasicObject = Opal.setup_class_object('BasicObject', BasicObject_alloc, 'Class',       Class_alloc);
  Opal.Object      = _Object     = Opal.setup_class_object('Object',      Object_alloc,      'BasicObject', BasicObject.constructor);
  Opal.Module      = Module      = Opal.setup_class_object('Module',      Module_alloc,      'Object',      _Object.constructor);
  Opal.Class       = Class       = Opal.setup_class_object('Class',       Class_alloc,       'Module',      Module.constructor);

  Opal.constants.push("BasicObject");
  Opal.constants.push("Object");
  Opal.constants.push("Module");
  Opal.constants.push("Class");

  // Fix booted classes to use their metaclass
  BasicObject.$$class = Class;
  _Object.$$class     = Class;
  Module.$$class      = Class;
  Class.$$class       = Class;

  // Fix superclasses of booted classes
  BasicObject.$$super = null;
  _Object.$$super     = BasicObject;
  Module.$$super      = _Object;
  Class.$$super       = Module;

  BasicObject.$$parent = null;
  _Object.$$parent     = BasicObject;
  Module.$$parent      = _Object;
  Class.$$parent       = Module;

  Opal.base                = _Object;
  BasicObject.$$scope      = _Object.$$scope = Opal;
  BasicObject.$$orig_scope = _Object.$$orig_scope = Opal;

  Module.$$scope      = _Object.$$scope;
  Module.$$orig_scope = _Object.$$orig_scope;
  Class.$$scope       = _Object.$$scope;
  Class.$$orig_scope  = _Object.$$orig_scope;

  // Forward .toString() to #to_s
  _Object.$$proto.toString = function() {
    return this.$to_s();
  };

  // Make Kernel#require immediately available as it's needed to require all the
  // other corelib files.
  _Object.$$proto.$require = Opal.require;

  // Instantiate the top object
  Opal.top = new _Object.$$alloc();

  // Nil
  Opal.klass(_Object, _Object, 'NilClass', NilClass_alloc);
  nil = Opal.nil = new NilClass_alloc();
  nil.$$id = nil_id;
  nil.call = nil.apply = function() { throw Opal.LocalJumpError.$new('no block given'); };
  Opal.breaker  = new Error('unexpected break (old)');
  Opal.returner = new Error('unexpected return');

  TypeError.$$super = Error;
}).call(this);

if (typeof(global) !== 'undefined') {
  global.Opal = this.Opal;
  Opal.global = global;
}

if (typeof(window) !== 'undefined') {
  window.Opal = this.Opal;
  Opal.global = window;
}
;
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["corelib/helpers"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$new', '$class', '$===', '$respond_to?', '$raise', '$type_error', '$__send__', '$coerce_to', '$nil?', '$<=>', '$inspect', '$coerce_to!', '$!=', '$[]', '$upcase']);
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13;

    Opal.defs(self, '$bridge', TMP_1 = function ːbridge(klass, constructor) {
      var self = this;

      return Opal.bridge(klass, constructor);
    }, TMP_1.$$arity = 2);

    Opal.defs(self, '$type_error', TMP_2 = function ːtype_error(object, type, method, coerced) {
      var $a, $b, self = this;

      if (method == null) {
        method = nil;
      }
      if (coerced == null) {
        coerced = nil;
      }
      if ((($a = (($b = method !== false && method !== nil && method != null) ? coerced : method)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return $scope.get('TypeError').$new("can't convert " + (object.$class()) + " into " + (type) + " (" + (object.$class()) + "#" + (method) + " gives " + (coerced.$class()))
        } else {
        return $scope.get('TypeError').$new("no implicit conversion of " + (object.$class()) + " into " + (type))
      };
    }, TMP_2.$$arity = -3);

    Opal.defs(self, '$coerce_to', TMP_3 = function ːcoerce_to(object, type, method) {
      var $a, self = this;

      if ((($a = type['$==='](object)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return object};
      if ((($a = object['$respond_to?'](method)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise(self.$type_error(object, type))
      };
      return object.$__send__(method);
    }, TMP_3.$$arity = 3);

    Opal.defs(self, '$coerce_to!', TMP_4 = function(object, type, method) {
      var $a, self = this, coerced = nil;

      coerced = self.$coerce_to(object, type, method);
      if ((($a = type['$==='](coerced)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise(self.$type_error(object, type, method, coerced))
      };
      return coerced;
    }, TMP_4.$$arity = 3);

    Opal.defs(self, '$coerce_to?', TMP_5 = function(object, type, method) {
      var $a, self = this, coerced = nil;

      if ((($a = object['$respond_to?'](method)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return nil
      };
      coerced = self.$coerce_to(object, type, method);
      if ((($a = coerced['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil};
      if ((($a = type['$==='](coerced)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise(self.$type_error(object, type, method, coerced))
      };
      return coerced;
    }, TMP_5.$$arity = 3);

    Opal.defs(self, '$try_convert', TMP_6 = function ːtry_convert(object, type, method) {
      var $a, self = this;

      if ((($a = type['$==='](object)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return object};
      if ((($a = object['$respond_to?'](method)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return object.$__send__(method)
        } else {
        return nil
      };
    }, TMP_6.$$arity = 3);

    Opal.defs(self, '$compare', TMP_7 = function ːcompare(a, b) {
      var $a, self = this, compare = nil;

      compare = a['$<=>'](b);
      if ((($a = compare === nil) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (a.$class()) + " with " + (b.$class()) + " failed")};
      return compare;
    }, TMP_7.$$arity = 2);

    Opal.defs(self, '$destructure', TMP_8 = function ːdestructure(args) {
      var self = this;

      
      if (args.length == 1) {
        return args[0];
      }
      else if (args.$$is_array) {
        return args;
      }
      else {
        var args_ary = new Array(args.length);
        for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = args[i]; }

        return args_ary;
      }
    
    }, TMP_8.$$arity = 1);

    Opal.defs(self, '$respond_to?', TMP_9 = function(obj, method) {
      var self = this;

      
      if (obj == null || !obj.$$class) {
        return false;
      }
    
      return obj['$respond_to?'](method);
    }, TMP_9.$$arity = 2);

    Opal.defs(self, '$inspect', TMP_10 = function ːinspect(obj) {
      var self = this;

      
      if (obj === undefined) {
        return "undefined";
      }
      else if (obj === null) {
        return "null";
      }
      else if (!obj.$$class) {
        return obj.toString();
      }
      else {
        return obj.$inspect();
      }
    
    }, TMP_10.$$arity = 1);

    Opal.defs(self, '$instance_variable_name!', TMP_11 = function(name) {
      var $a, self = this;

      name = $scope.get('Opal')['$coerce_to!'](name, $scope.get('String'), "to_str");
      if ((($a = /^@[a-zA-Z_][a-zA-Z0-9_]*?$/.test(name)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('NameError').$new("'" + (name) + "' is not allowed as an instance variable name", name))
      };
      return name;
    }, TMP_11.$$arity = 1);

    Opal.defs(self, '$const_name!', TMP_12 = function(const_name) {
      var $a, self = this;

      const_name = $scope.get('Opal')['$coerce_to!'](const_name, $scope.get('String'), "to_str");
      if ((($a = const_name['$[]'](0)['$!='](const_name['$[]'](0).$upcase())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('NameError'), "wrong constant name " + (const_name))};
      return const_name;
    }, TMP_12.$$arity = 1);

    Opal.defs(self, '$pristine', TMP_13 = function ːpristine(owner_class, $a_rest) {
      var self = this, method_names;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      method_names = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        method_names[$arg_idx - 1] = arguments[$arg_idx];
      }
      
      var method_name;
      for (var i = method_names.length - 1; i >= 0; i--) {
        method_name = method_names[i];
        owner_class.$$proto['$'+method_name].$$pristine = true
      }
    
      return nil;
    }, TMP_13.$$arity = -2);
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["corelib/module"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range, $hash2 = Opal.hash2;

  Opal.add_stubs(['$===', '$raise', '$equal?', '$<', '$>', '$nil?', '$attr_reader', '$attr_writer', '$coerce_to!', '$new', '$const_name!', '$=~', '$inject', '$const_get', '$split', '$const_missing', '$==', '$!', '$start_with?', '$to_proc', '$lambda', '$bind', '$call', '$class', '$append_features', '$included', '$name', '$cover?', '$size', '$merge', '$compile', '$proc', '$to_s', '$__id__', '$constants', '$include?']);
  return (function($base, $super) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_22, TMP_23, TMP_24, TMP_25, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_41, TMP_42, TMP_43, TMP_44, TMP_45, TMP_46, TMP_47, TMP_48, TMP_49;

    Opal.defs(self, '$allocate', TMP_1 = function ːallocate() {
      var self = this;

      
      var module;

      module = Opal.module_allocate();
      Opal.create_scope(Opal.Module.$$scope, module, null);
      return module;
    
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$initialize', TMP_2 = function ːinitialize() {
      var self = this, $iter = TMP_2.$$p, block = $iter || nil;

      TMP_2.$$p = null;
      return Opal.module_initialize(self, block);
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$===', TMP_3 = function(object) {
      var $a, self = this;

      if ((($a = object == null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return false};
      return Opal.is_a(object, self);
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$<', TMP_4 = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Module')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "compared with non class/module")
      };
      
      var working = self,
          ancestors,
          i, length;

      if (working === other) {
        return false;
      }

      for (i = 0, ancestors = Opal.ancestors(self), length = ancestors.length; i < length; i++) {
        if (ancestors[i] === other) {
          return true;
        }
      }

      for (i = 0, ancestors = Opal.ancestors(other), length = ancestors.length; i < length; i++) {
        if (ancestors[i] === self) {
          return false;
        }
      }

      return nil;
    
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$<=', TMP_5 = function(other) {
      var $a, self = this;

      return ((($a = self['$equal?'](other)) !== false && $a !== nil && $a != null) ? $a : $rb_lt(self, other));
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$>', TMP_6 = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Module')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "compared with non class/module")
      };
      return $rb_lt(other, self);
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$>=', TMP_7 = function(other) {
      var $a, self = this;

      return ((($a = self['$equal?'](other)) !== false && $a !== nil && $a != null) ? $a : $rb_gt(self, other));
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$<=>', TMP_8 = function(other) {
      var $a, self = this, lt = nil;

      
      if (self === other) {
        return 0;
      }
    
      if ((($a = $scope.get('Module')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return nil
      };
      lt = $rb_lt(self, other);
      if ((($a = lt['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil};
      if (lt !== false && lt !== nil && lt != null) {
        return -1
        } else {
        return 1
      };
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$alias_method', TMP_9 = function ːalias_method(newname, oldname) {
      var self = this;

      Opal.alias(self, newname, oldname);
      return self;
    }, TMP_9.$$arity = 2);

    Opal.defn(self, '$alias_native', TMP_10 = function ːalias_native(mid, jsid) {
      var self = this;

      if (jsid == null) {
        jsid = mid;
      }
      Opal.alias_native(self, mid, jsid);
      return self;
    }, TMP_10.$$arity = -2);

    Opal.defn(self, '$ancestors', TMP_11 = function ːancestors() {
      var self = this;

      return Opal.ancestors(self);
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$append_features', TMP_12 = function ːappend_features(klass) {
      var self = this;

      Opal.append_features(self, klass);
      return self;
    }, TMP_12.$$arity = 1);

    Opal.defn(self, '$attr_accessor', TMP_13 = function ːattr_accessor($a_rest) {
      var $b, $c, self = this, names;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      names = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        names[$arg_idx - 0] = arguments[$arg_idx];
      }
      ($b = self).$attr_reader.apply($b, Opal.to_a(names));
      return ($c = self).$attr_writer.apply($c, Opal.to_a(names));
    }, TMP_13.$$arity = -1);

    Opal.alias(self, 'attr', 'attr_accessor');

    Opal.defn(self, '$attr_reader', TMP_14 = function ːattr_reader($a_rest) {
      var self = this, names;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      names = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        names[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var proto = self.$$proto;

      for (var i = names.length - 1; i >= 0; i--) {
        var name = names[i],
            id   = '$' + name,
            ivar = Opal.ivar(name);

        // the closure here is needed because name will change at the next
        // cycle, I wish we could use let.
        var body = (function(ivar) {
          return function() {
            if (this[ivar] == null) {
              return nil;
            }
            else {
              return this[ivar];
            }
          };
        })(ivar);

        // initialize the instance variable as nil
        proto[ivar] = nil;

        body.$$parameters = [];
        body.$$arity = 0;

        if (self.$$is_singleton) {
          proto.constructor.prototype[id] = body;
        }
        else {
          Opal.defn(self, id, body);
        }
      }
    
      return nil;
    }, TMP_14.$$arity = -1);

    Opal.defn(self, '$attr_writer', TMP_15 = function ːattr_writer($a_rest) {
      var self = this, names;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      names = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        names[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var proto = self.$$proto;

      for (var i = names.length - 1; i >= 0; i--) {
        var name = names[i],
            id   = '$' + name + '=',
            ivar = Opal.ivar(name);

        // the closure here is needed because name will change at the next
        // cycle, I wish we could use let.
        var body = (function(ivar){
          return function(value) {
            return this[ivar] = value;
          }
        })(ivar);

        body.$$parameters = [['req']];
        body.$$arity = 1;

        // initialize the instance variable as nil
        proto[ivar] = nil;

        if (self.$$is_singleton) {
          proto.constructor.prototype[id] = body;
        }
        else {
          Opal.defn(self, id, body);
        }
      }
    
      return nil;
    }, TMP_15.$$arity = -1);

    Opal.defn(self, '$autoload', TMP_16 = function ːautoload(const$, path) {
      var self = this;

      
      var autoloaders;

      if (!(autoloaders = self.$$autoload)) {
        autoloaders = self.$$autoload = {};
      }

      autoloaders[const$] = path;
      return nil;
    ;
    }, TMP_16.$$arity = 2);

    Opal.defn(self, '$class_variable_get', TMP_17 = function ːclass_variable_get(name) {
      var $a, self = this;

      name = $scope.get('Opal')['$coerce_to!'](name, $scope.get('String'), "to_str");
      if ((($a = name.length < 3 || name.slice(0,2) !== '@@') !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('NameError').$new("class vars should start with @@", name))};
      
      var value = Opal.cvars[name.slice(2)];
      (function() {if ((($a = value == null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('NameError').$new("uninitialized class variable @@a in", name))
        } else {
        return nil
      }; return nil; })()
      return value;
    
    }, TMP_17.$$arity = 1);

    Opal.defn(self, '$class_variable_set', TMP_18 = function ːclass_variable_set(name, value) {
      var $a, self = this;

      name = $scope.get('Opal')['$coerce_to!'](name, $scope.get('String'), "to_str");
      if ((($a = name.length < 3 || name.slice(0,2) !== '@@') !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('NameError'))};
      
      Opal.cvars[name.slice(2)] = value;
      return value;
    
    }, TMP_18.$$arity = 2);

    Opal.defn(self, '$constants', TMP_19 = function ːconstants() {
      var self = this;

      return self.$$scope.constants.slice(0);
    }, TMP_19.$$arity = 0);

    Opal.defn(self, '$const_defined?', TMP_20 = function(name, inherit) {
      var $a, self = this;

      if (inherit == null) {
        inherit = true;
      }
      name = $scope.get('Opal')['$const_name!'](name);
      if ((($a = name['$=~']((($scope.get('Opal')).$$scope.get('CONST_NAME_REGEXP')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('NameError').$new("wrong constant name " + (name), name))
      };
      
      var scopes = [self.$$scope];

      if (inherit || self === Opal.Object) {
        var parent = self.$$super;

        while (parent !== Opal.BasicObject) {
          scopes.push(parent.$$scope);

          parent = parent.$$super;
        }
      }

      for (var i = 0, length = scopes.length; i < length; i++) {
        if (scopes[i].hasOwnProperty(name)) {
          return true;
        }
      }

      return false;
    
    }, TMP_20.$$arity = -2);

    Opal.defn(self, '$const_get', TMP_22 = function ːconst_get(name, inherit) {
      var $a, $b, TMP_21, self = this;

      if (inherit == null) {
        inherit = true;
      }
      name = $scope.get('Opal')['$const_name!'](name);
      
      if (name.indexOf('::') === 0 && name !== '::'){
        name = name.slice(2);
      }
    
      if ((($a = name.indexOf('::') != -1 && name != '::') !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = name.$split("::")).$inject, $a.$$p = (TMP_21 = function(o, c){var self = TMP_21.$$s || this;
if (o == null) o = nil;if (c == null) c = nil;
        return o.$const_get(c)}, TMP_21.$$s = self, TMP_21.$$arity = 2, TMP_21), $a).call($b, self)};
      if ((($a = name['$=~']((($scope.get('Opal')).$$scope.get('CONST_NAME_REGEXP')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('NameError').$new("wrong constant name " + (name), name))
      };
      
      var scopes = [self.$$scope];

      if (inherit || self == Opal.Object) {
        var parent = self.$$super;

        while (parent !== Opal.BasicObject) {
          scopes.push(parent.$$scope);

          parent = parent.$$super;
        }
      }

      for (var i = 0, length = scopes.length; i < length; i++) {
        if (scopes[i].hasOwnProperty(name)) {
          return scopes[i][name];
        }
      }

      return self.$const_missing(name);
    
    }, TMP_22.$$arity = -2);

    Opal.defn(self, '$const_missing', TMP_23 = function ːconst_missing(name) {
      var self = this, full_const_name = nil;

      
      if (self.$$autoload) {
        var file = self.$$autoload[name];

        if (file) {
          self.$require(file);

          return self.$const_get(name);
        }
      }
    
      full_const_name = (function() {if (self['$==']($scope.get('Object'))) {
        return name
        } else {
        return "" + (self) + "::" + (name)
      }; return nil; })();
      return self.$raise($scope.get('NameError').$new("uninitialized constant " + (full_const_name), name));
    }, TMP_23.$$arity = 1);

    Opal.defn(self, '$const_set', TMP_24 = function ːconst_set(name, value) {
      var $a, $b, self = this;

      name = $scope.get('Opal')['$const_name!'](name);
      if ((($a = ((($b = (name['$=~']((($scope.get('Opal')).$$scope.get('CONST_NAME_REGEXP'))))['$!']()) !== false && $b !== nil && $b != null) ? $b : name['$start_with?']("::"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('NameError').$new("wrong constant name " + (name), name))};
      Opal.casgn(self, name, value);
      return value;
    }, TMP_24.$$arity = 2);

    Opal.defn(self, '$define_method', TMP_25 = function ːdefine_method(name, method) {
      var $a, $b, $c, TMP_26, self = this, $iter = TMP_25.$$p, block = $iter || nil, $case = nil;

      TMP_25.$$p = null;
      if ((($a = method === undefined && block === nil) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "tried to create a Proc object without a block")};
      ((($a = block) !== false && $a !== nil && $a != null) ? $a : block = (function() {$case = method;if ($scope.get('Proc')['$===']($case)) {return method}else if ($scope.get('Method')['$===']($case)) {return method.$to_proc().$$unbound;}else if ($scope.get('UnboundMethod')['$===']($case)) {return ($b = ($c = self).$lambda, $b.$$p = (TMP_26 = function($d_rest){var self = TMP_26.$$s || this, args, $e, bound = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      bound = method.$bind(self);
        return ($e = bound).$call.apply($e, Opal.to_a(args));}, TMP_26.$$s = self, TMP_26.$$arity = -1, TMP_26), $b).call($c)}else {return self.$raise($scope.get('TypeError'), "wrong argument type " + (block.$class()) + " (expected Proc/Method)")}})());
      
      var id = '$' + name;

      block.$$jsid        = name;
      block.$$s           = null;
      block.$$def         = block;
      block.$$define_meth = true;

      Opal.defn(self, id, block);

      return name;
    
    }, TMP_25.$$arity = -2);

    Opal.defn(self, '$remove_method', TMP_27 = function ːremove_method($a_rest) {
      var self = this, names;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      names = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        names[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      for (var i = 0, length = names.length; i < length; i++) {
        Opal.rdef(self, "$" + names[i]);
      }
    
      return self;
    }, TMP_27.$$arity = -1);

    Opal.defn(self, '$singleton_class?', TMP_28 = function() {
      var self = this;

      return !!self.$$is_singleton;
    }, TMP_28.$$arity = 0);

    Opal.defn(self, '$include', TMP_29 = function ːinclude($a_rest) {
      var self = this, mods;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      mods = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        mods[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      for (var i = mods.length - 1; i >= 0; i--) {
        var mod = mods[i];

        if (mod === self) {
          continue;
        }

        if (!mod.$$is_module) {
          self.$raise($scope.get('TypeError'), "wrong argument type " + ((mod).$class()) + " (expected Module)");
        }

        (mod).$append_features(self);
        (mod).$included(self);
      }
    
      return self;
    }, TMP_29.$$arity = -1);

    Opal.defn(self, '$included_modules', TMP_30 = function ːincluded_modules() {
      var self = this;

      
      var results;

      var module_chain = function(klass) {
        var included = [];

        for (var i = 0; i != klass.$$inc.length; i++) {
          var mod_or_class = klass.$$inc[i];
          included.push(mod_or_class);
          included = included.concat(module_chain(mod_or_class));
        }

        return included;
      };

      results = module_chain(self);

      // need superclass's modules
      if (self.$$is_class) {
          for (var cls = self; cls; cls = cls.$$super) {
            results = results.concat(module_chain(cls));
          }
      }

      return results;
    
    }, TMP_30.$$arity = 0);

    Opal.defn(self, '$include?', TMP_31 = function(mod) {
      var self = this;

      
      for (var cls = self; cls; cls = cls.$$super) {
        for (var i = 0; i != cls.$$inc.length; i++) {
          var mod2 = cls.$$inc[i];
          if (mod === mod2) {
            return true;
          }
        }
      }
      return false;
    
    }, TMP_31.$$arity = 1);

    Opal.defn(self, '$instance_method', TMP_32 = function ːinstance_method(name) {
      var self = this;

      
      var meth = self.$$proto['$' + name];

      if (!meth || meth.$$stub) {
        self.$raise($scope.get('NameError').$new("undefined method `" + (name) + "' for class `" + (self.$name()) + "'", name));
      }

      return $scope.get('UnboundMethod').$new(self, meth, name);
    
    }, TMP_32.$$arity = 1);

    Opal.defn(self, '$instance_methods', TMP_33 = function ːinstance_methods(include_super) {
      var self = this;

      if (include_super == null) {
        include_super = true;
      }
      
      var methods = [],
          proto   = self.$$proto;

      for (var prop in proto) {
        if (prop.charAt(0) !== '$') {
          continue;
        }

        if (typeof(proto[prop]) !== "function") {
          continue;
        }

        if (proto[prop].$$stub) {
          continue;
        }

        if (!self.$$is_module) {
          if (self !== Opal.BasicObject && proto[prop] === Opal.BasicObject.$$proto[prop]) {
            continue;
          }

          if (!include_super && !proto.hasOwnProperty(prop)) {
            continue;
          }

          if (!include_super && proto[prop].$$donated) {
            continue;
          }
        }

        methods.push(prop.substr(1));
      }

      return methods;
    
    }, TMP_33.$$arity = -1);

    Opal.defn(self, '$included', TMP_34 = function ːincluded(mod) {
      var self = this;

      return nil;
    }, TMP_34.$$arity = 1);

    Opal.defn(self, '$extended', TMP_35 = function ːextended(mod) {
      var self = this;

      return nil;
    }, TMP_35.$$arity = 1);

    Opal.defn(self, '$method_added', TMP_36 = function ːmethod_added($a_rest) {
      var self = this;

      return nil;
    }, TMP_36.$$arity = -1);

    Opal.defn(self, '$method_removed', TMP_37 = function ːmethod_removed($a_rest) {
      var self = this;

      return nil;
    }, TMP_37.$$arity = -1);

    Opal.defn(self, '$method_undefined', TMP_38 = function ːmethod_undefined($a_rest) {
      var self = this;

      return nil;
    }, TMP_38.$$arity = -1);

    Opal.defn(self, '$module_eval', TMP_39 = function ːmodule_eval($a_rest) {
      var $b, $c, TMP_40, self = this, args, $iter = TMP_39.$$p, block = $iter || nil, string = nil, file = nil, _lineno = nil, default_eval_options = nil, compiling_options = nil, compiled = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_39.$$p = null;
      if ((($b = ($c = block['$nil?'](), $c !== false && $c !== nil && $c != null ?!!Opal.compile : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        if ((($b = ($range(1, 3, false))['$cover?'](args.$size())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          } else {
          $scope.get('Kernel').$raise($scope.get('ArgumentError'), "wrong number of arguments (0 for 1..3)")
        };
        $b = Opal.to_a(args), string = ($b[0] == null ? nil : $b[0]), file = ($b[1] == null ? nil : $b[1]), _lineno = ($b[2] == null ? nil : $b[2]), $b;
        default_eval_options = $hash2(["file", "eval"], {"file": (((($b = file) !== false && $b !== nil && $b != null) ? $b : "(eval)")), "eval": true});
        compiling_options = Opal.hash({ arity_check: false }).$merge(default_eval_options);
        compiled = $scope.get('Opal').$compile(string, compiling_options);
        block = ($b = ($c = $scope.get('Kernel')).$proc, $b.$$p = (TMP_40 = function(){var self = TMP_40.$$s || this;

        
          return (function(self) {
            return eval(compiled);
          })(self)
        }, TMP_40.$$s = self, TMP_40.$$arity = 0, TMP_40), $b).call($c);
      } else if ((($b = $rb_gt(args.$size(), 0)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        $scope.get('Kernel').$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (args.$size()) + " for 0)")};
      
      var old = block.$$s,
          result;

      block.$$s = null;
      result = block.apply(self, [self]);
      block.$$s = old;

      return result;
    
    }, TMP_39.$$arity = -1);

    Opal.alias(self, 'class_eval', 'module_eval');

    Opal.defn(self, '$module_exec', TMP_41 = function ːmodule_exec($a_rest) {
      var self = this, args, $iter = TMP_41.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_41.$$p = null;
      
      if (block === nil) {
        self.$raise($scope.get('LocalJumpError'), "no block given")
      }

      var block_self = block.$$s, result;

      block.$$s = null;
      result = block.apply(self, args);
      block.$$s = block_self;

      return result;
    ;
    }, TMP_41.$$arity = -1);

    Opal.alias(self, 'class_exec', 'module_exec');

    Opal.defn(self, '$method_defined?', TMP_42 = function(method) {
      var self = this;

      
      var body = self.$$proto['$' + method];
      return (!!body) && !body.$$stub;
    
    }, TMP_42.$$arity = 1);

    Opal.defn(self, '$module_function', TMP_43 = function ːmodule_function($a_rest) {
      var self = this, methods;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      methods = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        methods[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      if (methods.length === 0) {
        self.$$module_function = true;
      }
      else {
        for (var i = 0, length = methods.length; i < length; i++) {
          var meth = methods[i],
              id   = '$' + meth,
              func = self.$$proto[id];

          Opal.defs(self, id, func);
        }
      }

      return self;
    
    }, TMP_43.$$arity = -1);

    Opal.defn(self, '$name', TMP_44 = function ːname() {
      var self = this;

      
      if (self.$$full_name) {
        return self.$$full_name;
      }

      var result = [], base = self;

      while (base) {
        if (base.$$name === nil) {
          return result.length === 0 ? nil : result.join('::');
        }

        result.unshift(base.$$name);

        base = base.$$base_module;

        if (base === Opal.Object) {
          break;
        }
      }

      if (result.length === 0) {
        return nil;
      }

      return self.$$full_name = result.join('::');
    
    }, TMP_44.$$arity = 0);

    Opal.defn(self, '$remove_class_variable', TMP_45 = function ːremove_class_variable($a_rest) {
      var self = this;

      return nil;
    }, TMP_45.$$arity = -1);

    Opal.defn(self, '$remove_const', TMP_46 = function ːremove_const(name) {
      var self = this;

      
      var old = self.$$scope[name];
      delete self.$$scope[name];
      return old;
    
    }, TMP_46.$$arity = 1);

    Opal.defn(self, '$to_s', TMP_47 = function ːto_s() {
      var $a, self = this;

      return ((($a = Opal.Module.$name.call(self)) !== false && $a !== nil && $a != null) ? $a : "#<" + (self.$$is_module ? 'Module' : 'Class') + ":0x" + (self.$__id__().$to_s(16)) + ">");
    }, TMP_47.$$arity = 0);

    Opal.defn(self, '$undef_method', TMP_48 = function ːundef_method($a_rest) {
      var self = this, names;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      names = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        names[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      for (var i = 0, length = names.length; i < length; i++) {
        Opal.udef(self, "$" + names[i]);
      }
    
      return self;
    }, TMP_48.$$arity = -1);

    return (Opal.defn(self, '$instance_variables', TMP_49 = function ːinstance_variables() {
      var self = this, consts = nil;

      consts = self.$constants();
      
      var result = [];

      for (var name in self) {
        if (self.hasOwnProperty(name) && name.charAt(0) !== '$' && name !== 'constructor' && !consts['$include?'](name)) {
          result.push('@' + name);
        }
      }

      return result;
    
    }, TMP_49.$$arity = 0), nil) && 'instance_variables';
  })($scope.base, null)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["corelib/class"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$allocate', '$name', '$to_s']);
  self.$require("corelib/module");
  return (function($base, $super) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6;

    Opal.defs(self, '$new', TMP_1 = function(superclass) {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil;

      if (superclass == null) {
        superclass = $scope.get('Object');
      }
      TMP_1.$$p = null;
      
      if (!superclass.$$is_class) {
        throw Opal.TypeError.$new("superclass must be a Class");
      }

      var alloc = Opal.boot_class_alloc(null, function(){}, superclass)
      var klass = Opal.setup_class_object(null, alloc, superclass.$$name, superclass.constructor);

      klass.$$super = superclass;
      klass.$$parent = superclass;

      // inherit scope from parent
      Opal.create_scope(superclass.$$scope, klass);

      superclass.$inherited(klass);
      Opal.module_initialize(klass, block);

      return klass;
    
    }, TMP_1.$$arity = -1);

    Opal.defn(self, '$allocate', TMP_2 = function ːallocate() {
      var self = this;

      
      var obj = new self.$$alloc();
      obj.$$id = Opal.uid();
      return obj;
    
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$inherited', TMP_3 = function ːinherited(cls) {
      var self = this;

      return nil;
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$new', TMP_4 = function($a_rest) {
      var self = this, args, $iter = TMP_4.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_4.$$p = null;
      
      var obj = self.$allocate();

      obj.$initialize.$$p = block;
      obj.$initialize.apply(obj, args);
      return obj;
    ;
    }, TMP_4.$$arity = -1);

    Opal.defn(self, '$superclass', TMP_5 = function ːsuperclass() {
      var self = this;

      return self.$$super || nil;
    }, TMP_5.$$arity = 0);

    return (Opal.defn(self, '$to_s', TMP_6 = function ːto_s() {
      var $a, $b, self = this, $iter = TMP_6.$$p, $yield = $iter || nil;

      TMP_6.$$p = null;
      
      var singleton_of = self.$$singleton_of;

      if (singleton_of && (singleton_of.$$is_class || singleton_of.$$is_module)) {
        return "#<Class:" + ((singleton_of).$name()) + ">";
      }
      else if (singleton_of) {
        // a singleton class created from an object
        return "#<Class:#<" + ((singleton_of.$$class).$name()) + ":0x" + ((singleton_of.$$id).$to_s(16)) + ">>";
      }
      return ($a = ($b = self, Opal.find_super_dispatcher(self, 'to_s', TMP_6, false)), $a.$$p = null, $a).call($b);
    
    }, TMP_6.$$arity = 0), nil) && 'to_s';
  })($scope.base, null);
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["corelib/basic_object"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range, $hash2 = Opal.hash2;

  Opal.add_stubs(['$==', '$!', '$nil?', '$cover?', '$size', '$raise', '$merge', '$compile', '$proc', '$>', '$new', '$inspect']);
  return (function($base, $super) {
    function $BasicObject(){};
    var self = $BasicObject = $klass($base, $super, 'BasicObject', $BasicObject);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14;

    Opal.defn(self, '$initialize', TMP_1 = function ːinitialize($a_rest) {
      var self = this;

      return nil;
    }, TMP_1.$$arity = -1);

    Opal.defn(self, '$==', TMP_2 = function(other) {
      var self = this;

      return self === other;
    }, TMP_2.$$arity = 1);

    Opal.defn(self, '$eql?', TMP_3 = function(other) {
      var self = this;

      return self['$=='](other);
    }, TMP_3.$$arity = 1);

    Opal.alias(self, 'equal?', '==');

    Opal.defn(self, '$__id__', TMP_4 = function ː__id__() {
      var self = this;

      return self.$$id || (self.$$id = Opal.uid());
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$__send__', TMP_5 = function ː__send__(symbol, $a_rest) {
      var self = this, args, $iter = TMP_5.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_5.$$p = null;
      
      var func = self['$' + symbol]

      if (func) {
        if (block !== nil) {
          func.$$p = block;
        }

        return func.apply(self, args);
      }

      if (block !== nil) {
        self.$method_missing.$$p = block;
      }

      return self.$method_missing.apply(self, [symbol].concat(args));
    
    }, TMP_5.$$arity = -2);

    Opal.defn(self, '$!', TMP_6 = function() {
      var self = this;

      return false;
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$!=', TMP_7 = function(other) {
      var self = this;

      return (self['$=='](other))['$!']();
    }, TMP_7.$$arity = 1);

    Opal.alias(self, 'equal?', '==');

    Opal.defn(self, '$instance_eval', TMP_8 = function ːinstance_eval($a_rest) {
      var $b, $c, TMP_9, self = this, args, $iter = TMP_8.$$p, block = $iter || nil, string = nil, file = nil, _lineno = nil, default_eval_options = nil, compiling_options = nil, compiled = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_8.$$p = null;
      if ((($b = ($c = block['$nil?'](), $c !== false && $c !== nil && $c != null ?!!Opal.compile : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        if ((($b = ($range(1, 3, false))['$cover?'](args.$size())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          } else {
          $scope.get('Kernel').$raise($scope.get('ArgumentError'), "wrong number of arguments (0 for 1..3)")
        };
        $b = Opal.to_a(args), string = ($b[0] == null ? nil : $b[0]), file = ($b[1] == null ? nil : $b[1]), _lineno = ($b[2] == null ? nil : $b[2]), $b;
        default_eval_options = $hash2(["file", "eval"], {"file": (((($b = file) !== false && $b !== nil && $b != null) ? $b : "(eval)")), "eval": true});
        compiling_options = Opal.hash({ arity_check: false }).$merge(default_eval_options);
        compiled = $scope.get('Opal').$compile(string, compiling_options);
        block = ($b = ($c = $scope.get('Kernel')).$proc, $b.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

        
          return (function(self) {
            return eval(compiled);
          })(self)
        }, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $b).call($c);
      } else if ((($b = $rb_gt(args.$size(), 0)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        $scope.get('Kernel').$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (args.$size()) + " for 0)")};
      
      var old = block.$$s,
          result;

      block.$$s = null;

      // Need to pass $$eval so that method definitions know if this is
      // being done on a class/module. Cannot be compiler driven since
      // send(:instance_eval) needs to work.
      if (self.$$is_class || self.$$is_module) {
        self.$$eval = true;
        try {
          result = block.call(self, self);
        }
        finally {
          self.$$eval = false;
        }
      }
      else {
        result = block.call(self, self);
      }

      block.$$s = old;

      return result;
    
    }, TMP_8.$$arity = -1);

    Opal.defn(self, '$instance_exec', TMP_10 = function ːinstance_exec($a_rest) {
      var self = this, args, $iter = TMP_10.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_10.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        $scope.get('Kernel').$raise($scope.get('ArgumentError'), "no block given")
      };
      
      var block_self = block.$$s,
          result;

      block.$$s = null;

      if (self.$$is_class || self.$$is_module) {
        self.$$eval = true;
        try {
          result = block.apply(self, args);
        }
        finally {
          self.$$eval = false;
        }
      }
      else {
        result = block.apply(self, args);
      }

      block.$$s = block_self;

      return result;
    
    }, TMP_10.$$arity = -1);

    Opal.defn(self, '$singleton_method_added', TMP_11 = function ːsingleton_method_added($a_rest) {
      var self = this;

      return nil;
    }, TMP_11.$$arity = -1);

    Opal.defn(self, '$singleton_method_removed', TMP_12 = function ːsingleton_method_removed($a_rest) {
      var self = this;

      return nil;
    }, TMP_12.$$arity = -1);

    Opal.defn(self, '$singleton_method_undefined', TMP_13 = function ːsingleton_method_undefined($a_rest) {
      var self = this;

      return nil;
    }, TMP_13.$$arity = -1);

    return (Opal.defn(self, '$method_missing', TMP_14 = function ːmethod_missing(symbol, $a_rest) {
      var $b, self = this, args, $iter = TMP_14.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_14.$$p = null;
      return $scope.get('Kernel').$raise($scope.get('NoMethodError').$new((function() {if ((($b = self.$inspect && !self.$inspect.$$stub) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        return "undefined method `" + (symbol) + "' for " + (self.$inspect()) + ":" + (self.$$class)
        } else {
        return "undefined method `" + (symbol) + "' for " + (self.$$class)
      }; return nil; })(), symbol));
    }, TMP_14.$$arity = -2), nil) && 'method_missing';
  })($scope.base, null)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["corelib/kernel"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $gvars = Opal.gvars, $hash2 = Opal.hash2, $klass = Opal.klass;

  Opal.add_stubs(['$raise', '$new', '$inspect', '$!', '$=~', '$==', '$object_id', '$class', '$coerce_to?', '$<<', '$allocate', '$copy_instance_variables', '$copy_singleton_methods', '$initialize_clone', '$initialize_copy', '$define_method', '$to_proc', '$singleton_class', '$initialize_dup', '$for', '$>', '$size', '$pop', '$call', '$append_features', '$extended', '$length', '$respond_to?', '$[]', '$nil?', '$to_a', '$to_int', '$fetch', '$Integer', '$Float', '$to_ary', '$to_str', '$coerce_to', '$to_s', '$__id__', '$instance_variable_name!', '$coerce_to!', '$===', '$enum_for', '$print', '$format', '$puts', '$each', '$<=', '$empty?', '$exception', '$kind_of?', '$respond_to_missing?', '$try_convert!', '$expand_path', '$join', '$start_with?', '$sym', '$arg', '$open', '$include']);
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_40, TMP_41, TMP_42, TMP_43, TMP_45, TMP_46, TMP_47, TMP_48, TMP_49, TMP_50, TMP_51, TMP_52, TMP_53, TMP_54, TMP_55, TMP_56, TMP_57, TMP_58, TMP_59, TMP_60, TMP_61, TMP_62, TMP_63;

    Opal.defn(self, '$method_missing', TMP_1 = function ːmethod_missing(symbol, $a_rest) {
      var self = this, args, $iter = TMP_1.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_1.$$p = null;
      return self.$raise($scope.get('NoMethodError').$new("undefined method `" + (symbol) + "' for " + (self.$inspect()), symbol, args));
    }, TMP_1.$$arity = -2);

    Opal.defn(self, '$=~', TMP_2 = function(obj) {
      var self = this;

      return false;
    }, TMP_2.$$arity = 1);

    Opal.defn(self, '$!~', TMP_3 = function(obj) {
      var self = this;

      return (self['$=~'](obj))['$!']();
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$===', TMP_4 = function(other) {
      var $a, self = this;

      return ((($a = self.$object_id()['$=='](other.$object_id())) !== false && $a !== nil && $a != null) ? $a : self['$=='](other));
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$<=>', TMP_5 = function(other) {
      var self = this;

      
      // set guard for infinite recursion
      self.$$comparable = true;

      var x = self['$=='](other);

      if (x && x !== nil) {
        return 0;
      }

      return nil;
    
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$method', TMP_6 = function ːmethod(name) {
      var self = this;

      
      var meth = self['$' + name];

      if (!meth || meth.$$stub) {
        self.$raise($scope.get('NameError').$new("undefined method `" + (name) + "' for class `" + (self.$class()) + "'", name));
      }

      return $scope.get('Method').$new(self, meth, name);
    
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$methods', TMP_7 = function ːmethods(all) {
      var self = this;

      if (all == null) {
        all = true;
      }
      
      var methods = [];

      for (var key in self) {
        if (key[0] == "$" && typeof(self[key]) === "function") {
          if (all == false || all === nil) {
            if (!Opal.hasOwnProperty.call(self, key)) {
              continue;
            }
          }
          if (self[key].$$stub === undefined) {
            methods.push(key.substr(1));
          }
        }
      }

      return methods;
    
    }, TMP_7.$$arity = -1);

    Opal.alias(self, 'public_methods', 'methods');

    Opal.defn(self, '$Array', TMP_8 = function ːArray(object) {
      var self = this;

      
      var coerced;

      if (object === nil) {
        return [];
      }

      if (object.$$is_array) {
        return object;
      }

      coerced = $scope.get('Opal')['$coerce_to?'](object, $scope.get('Array'), "to_ary");
      if (coerced !== nil) { return coerced; }

      coerced = $scope.get('Opal')['$coerce_to?'](object, $scope.get('Array'), "to_a");
      if (coerced !== nil) { return coerced; }

      return [object];
    
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$at_exit', TMP_9 = function ːat_exit() {
      var $a, self = this, $iter = TMP_9.$$p, block = $iter || nil;
      if ($gvars.__at_exit__ == null) $gvars.__at_exit__ = nil;

      TMP_9.$$p = null;
      ((($a = $gvars.__at_exit__) !== false && $a !== nil && $a != null) ? $a : $gvars.__at_exit__ = []);
      return $gvars.__at_exit__['$<<'](block);
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$caller', TMP_10 = function ːcaller() {
      var self = this;

      return [];
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$class', TMP_11 = function() {
      var self = this;

      return self.$$class;
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$copy_instance_variables', TMP_12 = function ːcopy_instance_variables(other) {
      var self = this;

      
      for (var name in other) {
        if (other.hasOwnProperty(name) && name.charAt(0) !== '$') {
          self[name] = other[name];
        }
      }
    
    }, TMP_12.$$arity = 1);

    Opal.defn(self, '$copy_singleton_methods', TMP_13 = function ːcopy_singleton_methods(other) {
      var self = this;

      
      var name;

      if (other.hasOwnProperty('$$meta')) {
        var other_singleton_class_proto = Opal.get_singleton_class(other).$$proto;
        var self_singleton_class_proto = Opal.get_singleton_class(self).$$proto;

        for (name in other_singleton_class_proto) {
          if (name.charAt(0) === '$' && other_singleton_class_proto.hasOwnProperty(name)) {
            self_singleton_class_proto[name] = other_singleton_class_proto[name];
          }
        }
      }

      for (name in other) {
        if (name.charAt(0) === '$' && name.charAt(1) !== '$' && other.hasOwnProperty(name)) {
          self[name] = other[name];
        }
      }
    
    }, TMP_13.$$arity = 1);

    Opal.defn(self, '$clone', TMP_14 = function ːclone() {
      var self = this, copy = nil;

      copy = self.$class().$allocate();
      copy.$copy_instance_variables(self);
      copy.$copy_singleton_methods(self);
      copy.$initialize_clone(self);
      return copy;
    }, TMP_14.$$arity = 0);

    Opal.defn(self, '$initialize_clone', TMP_15 = function ːinitialize_clone(other) {
      var self = this;

      return self.$initialize_copy(other);
    }, TMP_15.$$arity = 1);

    Opal.defn(self, '$define_singleton_method', TMP_16 = function ːdefine_singleton_method(name, method) {
      var $a, $b, self = this, $iter = TMP_16.$$p, block = $iter || nil;

      TMP_16.$$p = null;
      return ($a = ($b = self.$singleton_class()).$define_method, $a.$$p = block.$to_proc(), $a).call($b, name, method);
    }, TMP_16.$$arity = -2);

    Opal.defn(self, '$dup', TMP_17 = function ːdup() {
      var self = this, copy = nil;

      copy = self.$class().$allocate();
      copy.$copy_instance_variables(self);
      copy.$initialize_dup(self);
      return copy;
    }, TMP_17.$$arity = 0);

    Opal.defn(self, '$initialize_dup', TMP_18 = function ːinitialize_dup(other) {
      var self = this;

      return self.$initialize_copy(other);
    }, TMP_18.$$arity = 1);

    Opal.defn(self, '$enum_for', TMP_19 = function ːenum_for(method, $a_rest) {
      var $b, $c, self = this, args, $iter = TMP_19.$$p, block = $iter || nil;

      if (method == null) {
        method = "each";
      }
      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_19.$$p = null;
      return ($b = ($c = $scope.get('Enumerator')).$for, $b.$$p = block.$to_proc(), $b).apply($c, [self, method].concat(Opal.to_a(args)));
    }, TMP_19.$$arity = -1);

    Opal.alias(self, 'to_enum', 'enum_for');

    Opal.defn(self, '$equal?', TMP_20 = function(other) {
      var self = this;

      return self === other;
    }, TMP_20.$$arity = 1);

    Opal.defn(self, '$exit', TMP_21 = function ːexit(status) {
      var $a, $b, self = this, block = nil;
      if ($gvars.__at_exit__ == null) $gvars.__at_exit__ = nil;

      if (status == null) {
        status = true;
      }
      ((($a = $gvars.__at_exit__) !== false && $a !== nil && $a != null) ? $a : $gvars.__at_exit__ = []);
      while ((($b = $rb_gt($gvars.__at_exit__.$size(), 0)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
      block = $gvars.__at_exit__.$pop();
      block.$call();};
      if ((($a = status === true) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        status = 0};
      Opal.exit(status);
      return nil;
    }, TMP_21.$$arity = -1);

    Opal.defn(self, '$extend', TMP_22 = function ːextend($a_rest) {
      var self = this, mods;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      mods = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        mods[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var singleton = self.$singleton_class();

      for (var i = mods.length - 1; i >= 0; i--) {
        var mod = mods[i];

        if (!mod.$$is_module) {
          self.$raise($scope.get('TypeError'), "wrong argument type " + ((mod).$class()) + " (expected Module)");
        }

        (mod).$append_features(singleton);
        (mod).$extended(self);
      }
    ;
      return self;
    }, TMP_22.$$arity = -1);

    Opal.defn(self, '$format', TMP_23 = function ːformat(format_string, $a_rest) {
      var $b, $c, self = this, args, ary = nil;
      if ($gvars.DEBUG == null) $gvars.DEBUG = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ((($b = (($c = args.$length()['$=='](1)) ? args['$[]'](0)['$respond_to?']("to_ary") : args.$length()['$=='](1))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        ary = $scope.get('Opal')['$coerce_to?'](args['$[]'](0), $scope.get('Array'), "to_ary");
        if ((($b = ary['$nil?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          } else {
          args = ary.$to_a()
        };};
      
      var result = '',
          //used for slicing:
          begin_slice = 0,
          end_slice,
          //used for iterating over the format string:
          i,
          len = format_string.length,
          //used for processing field values:
          arg,
          str,
          //used for processing %g and %G fields:
          exponent,
          //used for keeping track of width and precision:
          width,
          precision,
          //used for holding temporary values:
          tmp_num,
          //used for processing %{} and %<> fileds:
          hash_parameter_key,
          closing_brace_char,
          //used for processing %b, %B, %o, %x, and %X fields:
          base_number,
          base_prefix,
          base_neg_zero_regex,
          base_neg_zero_digit,
          //used for processing arguments:
          next_arg,
          seq_arg_num = 1,
          pos_arg_num = 0,
          //used for keeping track of flags:
          flags,
          FNONE  = 0,
          FSHARP = 1,
          FMINUS = 2,
          FPLUS  = 4,
          FZERO  = 8,
          FSPACE = 16,
          FWIDTH = 32,
          FPREC  = 64,
          FPREC0 = 128;

      function CHECK_FOR_FLAGS() {
        if (flags&FWIDTH) { self.$raise($scope.get('ArgumentError'), "flag after width") }
        if (flags&FPREC0) { self.$raise($scope.get('ArgumentError'), "flag after precision") }
      }

      function CHECK_FOR_WIDTH() {
        if (flags&FWIDTH) { self.$raise($scope.get('ArgumentError'), "width given twice") }
        if (flags&FPREC0) { self.$raise($scope.get('ArgumentError'), "width after precision") }
      }

      function GET_NTH_ARG(num) {
        if (num >= args.length) { self.$raise($scope.get('ArgumentError'), "too few arguments") }
        return args[num];
      }

      function GET_NEXT_ARG() {
        switch (pos_arg_num) {
        case -1: self.$raise($scope.get('ArgumentError'), "unnumbered(" + (seq_arg_num) + ") mixed with numbered")
        case -2: self.$raise($scope.get('ArgumentError'), "unnumbered(" + (seq_arg_num) + ") mixed with named")
        }
        pos_arg_num = seq_arg_num++;
        return GET_NTH_ARG(pos_arg_num - 1);
      }

      function GET_POS_ARG(num) {
        if (pos_arg_num > 0) {
          self.$raise($scope.get('ArgumentError'), "numbered(" + (num) + ") after unnumbered(" + (pos_arg_num) + ")")
        }
        if (pos_arg_num === -2) {
          self.$raise($scope.get('ArgumentError'), "numbered(" + (num) + ") after named")
        }
        if (num < 1) {
          self.$raise($scope.get('ArgumentError'), "invalid index - " + (num) + "$")
        }
        pos_arg_num = -1;
        return GET_NTH_ARG(num - 1);
      }

      function GET_ARG() {
        return (next_arg === undefined ? GET_NEXT_ARG() : next_arg);
      }

      function READ_NUM(label) {
        var num, str = '';
        for (;; i++) {
          if (i === len) {
            self.$raise($scope.get('ArgumentError'), "malformed format string - %*[0-9]")
          }
          if (format_string.charCodeAt(i) < 48 || format_string.charCodeAt(i) > 57) {
            i--;
            num = parseInt(str, 10) || 0;
            if (num > 2147483647) {
              self.$raise($scope.get('ArgumentError'), "" + (label) + " too big")
            }
            return num;
          }
          str += format_string.charAt(i);
        }
      }

      function READ_NUM_AFTER_ASTER(label) {
        var arg, num = READ_NUM(label);
        if (format_string.charAt(i + 1) === '$') {
          i++;
          arg = GET_POS_ARG(num);
        } else {
          arg = GET_NEXT_ARG();
        }
        return (arg).$to_int();
      }

      for (i = format_string.indexOf('%'); i !== -1; i = format_string.indexOf('%', i)) {
        str = undefined;

        flags = FNONE;
        width = -1;
        precision = -1;
        next_arg = undefined;

        end_slice = i;

        i++;

        switch (format_string.charAt(i)) {
        case '%':
          begin_slice = i;
        case '':
        case '\n':
        case '\0':
          i++;
          continue;
        }

        format_sequence: for (; i < len; i++) {
          switch (format_string.charAt(i)) {

          case ' ':
            CHECK_FOR_FLAGS();
            flags |= FSPACE;
            continue format_sequence;

          case '#':
            CHECK_FOR_FLAGS();
            flags |= FSHARP;
            continue format_sequence;

          case '+':
            CHECK_FOR_FLAGS();
            flags |= FPLUS;
            continue format_sequence;

          case '-':
            CHECK_FOR_FLAGS();
            flags |= FMINUS;
            continue format_sequence;

          case '0':
            CHECK_FOR_FLAGS();
            flags |= FZERO;
            continue format_sequence;

          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
            tmp_num = READ_NUM('width');
            if (format_string.charAt(i + 1) === '$') {
              if (i + 2 === len) {
                str = '%';
                i++;
                break format_sequence;
              }
              if (next_arg !== undefined) {
                self.$raise($scope.get('ArgumentError'), "value given twice - %" + (tmp_num) + "$")
              }
              next_arg = GET_POS_ARG(tmp_num);
              i++;
            } else {
              CHECK_FOR_WIDTH();
              flags |= FWIDTH;
              width = tmp_num;
            }
            continue format_sequence;

          case '<':
          case '\{':
            closing_brace_char = (format_string.charAt(i) === '<' ? '>' : '\}');
            hash_parameter_key = '';

            i++;

            for (;; i++) {
              if (i === len) {
                self.$raise($scope.get('ArgumentError'), "malformed name - unmatched parenthesis")
              }
              if (format_string.charAt(i) === closing_brace_char) {

                if (pos_arg_num > 0) {
                  self.$raise($scope.get('ArgumentError'), "named " + (hash_parameter_key) + " after unnumbered(" + (pos_arg_num) + ")")
                }
                if (pos_arg_num === -1) {
                  self.$raise($scope.get('ArgumentError'), "named " + (hash_parameter_key) + " after numbered")
                }
                pos_arg_num = -2;

                if (args[0] === undefined || !args[0].$$is_hash) {
                  self.$raise($scope.get('ArgumentError'), "one hash required")
                }

                next_arg = (args[0]).$fetch(hash_parameter_key);

                if (closing_brace_char === '>') {
                  continue format_sequence;
                } else {
                  str = next_arg.toString();
                  if (precision !== -1) { str = str.slice(0, precision); }
                  if (flags&FMINUS) {
                    while (str.length < width) { str = str + ' '; }
                  } else {
                    while (str.length < width) { str = ' ' + str; }
                  }
                  break format_sequence;
                }
              }
              hash_parameter_key += format_string.charAt(i);
            }

          case '*':
            i++;
            CHECK_FOR_WIDTH();
            flags |= FWIDTH;
            width = READ_NUM_AFTER_ASTER('width');
            if (width < 0) {
              flags |= FMINUS;
              width = -width;
            }
            continue format_sequence;

          case '.':
            if (flags&FPREC0) {
              self.$raise($scope.get('ArgumentError'), "precision given twice")
            }
            flags |= FPREC|FPREC0;
            precision = 0;
            i++;
            if (format_string.charAt(i) === '*') {
              i++;
              precision = READ_NUM_AFTER_ASTER('precision');
              if (precision < 0) {
                flags &= ~FPREC;
              }
              continue format_sequence;
            }
            precision = READ_NUM('precision');
            continue format_sequence;

          case 'd':
          case 'i':
          case 'u':
            arg = self.$Integer(GET_ARG());
            if (arg >= 0) {
              str = arg.toString();
              while (str.length < precision) { str = '0' + str; }
              if (flags&FMINUS) {
                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && precision === -1) {
                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0)) { str = '0' + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                } else {
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            } else {
              str = (-arg).toString();
              while (str.length < precision) { str = '0' + str; }
              if (flags&FMINUS) {
                str = '-' + str;
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && precision === -1) {
                  while (str.length < width - 1) { str = '0' + str; }
                  str = '-' + str;
                } else {
                  str = '-' + str;
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            }
            break format_sequence;

          case 'b':
          case 'B':
          case 'o':
          case 'x':
          case 'X':
            switch (format_string.charAt(i)) {
            case 'b':
            case 'B':
              base_number = 2;
              base_prefix = '0b';
              base_neg_zero_regex = /^1+/;
              base_neg_zero_digit = '1';
              break;
            case 'o':
              base_number = 8;
              base_prefix = '0';
              base_neg_zero_regex = /^3?7+/;
              base_neg_zero_digit = '7';
              break;
            case 'x':
            case 'X':
              base_number = 16;
              base_prefix = '0x';
              base_neg_zero_regex = /^f+/;
              base_neg_zero_digit = 'f';
              break;
            }
            arg = self.$Integer(GET_ARG());
            if (arg >= 0) {
              str = arg.toString(base_number);
              while (str.length < precision) { str = '0' + str; }
              if (flags&FMINUS) {
                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && precision === -1) {
                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0) - ((flags&FSHARP && arg !== 0) ? base_prefix.length : 0)) { str = '0' + str; }
                  if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                } else {
                  if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            } else {
              if (flags&FPLUS || flags&FSPACE) {
                str = (-arg).toString(base_number);
                while (str.length < precision) { str = '0' + str; }
                if (flags&FMINUS) {
                  if (flags&FSHARP) { str = base_prefix + str; }
                  str = '-' + str;
                  while (str.length < width) { str = str + ' '; }
                } else {
                  if (flags&FZERO && precision === -1) {
                    while (str.length < width - 1 - (flags&FSHARP ? 2 : 0)) { str = '0' + str; }
                    if (flags&FSHARP) { str = base_prefix + str; }
                    str = '-' + str;
                  } else {
                    if (flags&FSHARP) { str = base_prefix + str; }
                    str = '-' + str;
                    while (str.length < width) { str = ' ' + str; }
                  }
                }
              } else {
                str = (arg >>> 0).toString(base_number).replace(base_neg_zero_regex, base_neg_zero_digit);
                while (str.length < precision - 2) { str = base_neg_zero_digit + str; }
                if (flags&FMINUS) {
                  str = '..' + str;
                  if (flags&FSHARP) { str = base_prefix + str; }
                  while (str.length < width) { str = str + ' '; }
                } else {
                  if (flags&FZERO && precision === -1) {
                    while (str.length < width - 2 - (flags&FSHARP ? base_prefix.length : 0)) { str = base_neg_zero_digit + str; }
                    str = '..' + str;
                    if (flags&FSHARP) { str = base_prefix + str; }
                  } else {
                    str = '..' + str;
                    if (flags&FSHARP) { str = base_prefix + str; }
                    while (str.length < width) { str = ' ' + str; }
                  }
                }
              }
            }
            if (format_string.charAt(i) === format_string.charAt(i).toUpperCase()) {
              str = str.toUpperCase();
            }
            break format_sequence;

          case 'f':
          case 'e':
          case 'E':
          case 'g':
          case 'G':
            arg = self.$Float(GET_ARG());
            if (arg >= 0 || isNaN(arg)) {
              if (arg === Infinity) {
                str = 'Inf';
              } else {
                switch (format_string.charAt(i)) {
                case 'f':
                  str = arg.toFixed(precision === -1 ? 6 : precision);
                  break;
                case 'e':
                case 'E':
                  str = arg.toExponential(precision === -1 ? 6 : precision);
                  break;
                case 'g':
                case 'G':
                  str = arg.toExponential();
                  exponent = parseInt(str.split('e')[1], 10);
                  if (!(exponent < -4 || exponent >= (precision === -1 ? 6 : precision))) {
                    str = arg.toPrecision(precision === -1 ? (flags&FSHARP ? 6 : undefined) : precision);
                  }
                  break;
                }
              }
              if (flags&FMINUS) {
                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && arg !== Infinity && !isNaN(arg)) {
                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0)) { str = '0' + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                } else {
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            } else {
              if (arg === -Infinity) {
                str = 'Inf';
              } else {
                switch (format_string.charAt(i)) {
                case 'f':
                  str = (-arg).toFixed(precision === -1 ? 6 : precision);
                  break;
                case 'e':
                case 'E':
                  str = (-arg).toExponential(precision === -1 ? 6 : precision);
                  break;
                case 'g':
                case 'G':
                  str = (-arg).toExponential();
                  exponent = parseInt(str.split('e')[1], 10);
                  if (!(exponent < -4 || exponent >= (precision === -1 ? 6 : precision))) {
                    str = (-arg).toPrecision(precision === -1 ? (flags&FSHARP ? 6 : undefined) : precision);
                  }
                  break;
                }
              }
              if (flags&FMINUS) {
                str = '-' + str;
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && arg !== -Infinity) {
                  while (str.length < width - 1) { str = '0' + str; }
                  str = '-' + str;
                } else {
                  str = '-' + str;
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            }
            if (format_string.charAt(i) === format_string.charAt(i).toUpperCase() && arg !== Infinity && arg !== -Infinity && !isNaN(arg)) {
              str = str.toUpperCase();
            }
            str = str.replace(/([eE][-+]?)([0-9])$/, '$10$2');
            break format_sequence;

          case 'a':
          case 'A':
            // Not implemented because there are no specs for this field type.
            self.$raise($scope.get('NotImplementedError'), "`A` and `a` format field types are not implemented in Opal yet")

          case 'c':
            arg = GET_ARG();
            if ((arg)['$respond_to?']("to_ary")) { arg = (arg).$to_ary()[0]; }
            if ((arg)['$respond_to?']("to_str")) {
              str = (arg).$to_str();
            } else {
              str = String.fromCharCode($scope.get('Opal').$coerce_to(arg, $scope.get('Integer'), "to_int"));
            }
            if (str.length !== 1) {
              self.$raise($scope.get('ArgumentError'), "%c requires a character")
            }
            if (flags&FMINUS) {
              while (str.length < width) { str = str + ' '; }
            } else {
              while (str.length < width) { str = ' ' + str; }
            }
            break format_sequence;

          case 'p':
            str = (GET_ARG()).$inspect();
            if (precision !== -1) { str = str.slice(0, precision); }
            if (flags&FMINUS) {
              while (str.length < width) { str = str + ' '; }
            } else {
              while (str.length < width) { str = ' ' + str; }
            }
            break format_sequence;

          case 's':
            str = (GET_ARG()).$to_s();
            if (precision !== -1) { str = str.slice(0, precision); }
            if (flags&FMINUS) {
              while (str.length < width) { str = str + ' '; }
            } else {
              while (str.length < width) { str = ' ' + str; }
            }
            break format_sequence;

          default:
            self.$raise($scope.get('ArgumentError'), "malformed format string - %" + (format_string.charAt(i)))
          }
        }

        if (str === undefined) {
          self.$raise($scope.get('ArgumentError'), "malformed format string - %")
        }

        result += format_string.slice(begin_slice, end_slice) + str;
        begin_slice = i + 1;
      }

      if ($gvars.DEBUG && pos_arg_num >= 0 && seq_arg_num < args.length) {
        self.$raise($scope.get('ArgumentError'), "too many arguments for format string")
      }

      return result + format_string.slice(begin_slice);
    ;
    }, TMP_23.$$arity = -2);

    Opal.defn(self, '$hash', TMP_24 = function ːhash() {
      var self = this;

      return self.$__id__();
    }, TMP_24.$$arity = 0);

    Opal.defn(self, '$initialize_copy', TMP_25 = function ːinitialize_copy(other) {
      var self = this;

      return nil;
    }, TMP_25.$$arity = 1);

    Opal.defn(self, '$inspect', TMP_26 = function ːinspect() {
      var self = this;

      return self.$to_s();
    }, TMP_26.$$arity = 0);

    Opal.defn(self, '$instance_of?', TMP_27 = function(klass) {
      var self = this;

      
      if (!klass.$$is_class && !klass.$$is_module) {
        self.$raise($scope.get('TypeError'), "class or module required");
      }

      return self.$$class === klass;
    ;
    }, TMP_27.$$arity = 1);

    Opal.defn(self, '$instance_variable_defined?', TMP_28 = function(name) {
      var self = this;

      name = $scope.get('Opal')['$instance_variable_name!'](name);
      return Opal.hasOwnProperty.call(self, name.substr(1));
    }, TMP_28.$$arity = 1);

    Opal.defn(self, '$instance_variable_get', TMP_29 = function ːinstance_variable_get(name) {
      var self = this;

      name = $scope.get('Opal')['$instance_variable_name!'](name);
      
      var ivar = self[Opal.ivar(name.substr(1))];

      return ivar == null ? nil : ivar;
    
    }, TMP_29.$$arity = 1);

    Opal.defn(self, '$instance_variable_set', TMP_30 = function ːinstance_variable_set(name, value) {
      var self = this;

      name = $scope.get('Opal')['$instance_variable_name!'](name);
      return self[Opal.ivar(name.substr(1))] = value;
    }, TMP_30.$$arity = 2);

    Opal.defn(self, '$remove_instance_variable', TMP_31 = function ːremove_instance_variable(name) {
      var self = this;

      name = $scope.get('Opal')['$instance_variable_name!'](name);
      
      var key = Opal.ivar(name.substr(1)),
          val;
      if (self.hasOwnProperty(key)) {
        val = self[key];
        delete self[key];
        return val;
      }
    
      return self.$raise($scope.get('NameError'), "instance variable " + (name) + " not defined");
    }, TMP_31.$$arity = 1);

    Opal.defn(self, '$instance_variables', TMP_32 = function ːinstance_variables() {
      var self = this;

      
      var result = [], ivar;

      for (var name in self) {
        if (self.hasOwnProperty(name) && name.charAt(0) !== '$') {
          if (name.substr(-1) === '$') {
            ivar = name.slice(0, name.length - 1);
          } else {
            ivar = name;
          }
          result.push('@' + ivar);
        }
      }

      return result;
    
    }, TMP_32.$$arity = 0);

    Opal.defn(self, '$Integer', TMP_33 = function ːInteger(value, base) {
      var self = this;

      
      var i, str, base_digits;

      if (!value.$$is_string) {
        if (base !== undefined) {
          self.$raise($scope.get('ArgumentError'), "base specified for non string value")
        }
        if (value === nil) {
          self.$raise($scope.get('TypeError'), "can't convert nil into Integer")
        }
        if (value.$$is_number) {
          if (value === Infinity || value === -Infinity || isNaN(value)) {
            self.$raise($scope.get('FloatDomainError'), value)
          }
          return Math.floor(value);
        }
        if (value['$respond_to?']("to_int")) {
          i = value.$to_int();
          if (i !== nil) {
            return i;
          }
        }
        return $scope.get('Opal')['$coerce_to!'](value, $scope.get('Integer'), "to_i");
      }

      if (base === undefined) {
        base = 0;
      } else {
        base = $scope.get('Opal').$coerce_to(base, $scope.get('Integer'), "to_int");
        if (base === 1 || base < 0 || base > 36) {
          self.$raise($scope.get('ArgumentError'), "invalid radix " + (base))
        }
      }

      str = value.toLowerCase();

      str = str.replace(/(\d)_(?=\d)/g, '$1');

      str = str.replace(/^(\s*[+-]?)(0[bodx]?)/, function (_, head, flag) {
        switch (flag) {
        case '0b':
          if (base === 0 || base === 2) {
            base = 2;
            return head;
          }
        case '0':
        case '0o':
          if (base === 0 || base === 8) {
            base = 8;
            return head;
          }
        case '0d':
          if (base === 0 || base === 10) {
            base = 10;
            return head;
          }
        case '0x':
          if (base === 0 || base === 16) {
            base = 16;
            return head;
          }
        }
        self.$raise($scope.get('ArgumentError'), "invalid value for Integer(): \"" + (value) + "\"")
      });

      base = (base === 0 ? 10 : base);

      base_digits = '0-' + (base <= 10 ? base - 1 : '9a-' + String.fromCharCode(97 + (base - 11)));

      if (!(new RegExp('^\\s*[+-]?[' + base_digits + ']+\\s*$')).test(str)) {
        self.$raise($scope.get('ArgumentError'), "invalid value for Integer(): \"" + (value) + "\"")
      }

      i = parseInt(str, base);

      if (isNaN(i)) {
        self.$raise($scope.get('ArgumentError'), "invalid value for Integer(): \"" + (value) + "\"")
      }

      return i;
    ;
    }, TMP_33.$$arity = -2);

    Opal.defn(self, '$Float', TMP_34 = function ːFloat(value) {
      var self = this;

      
      var str;

      if (value === nil) {
        self.$raise($scope.get('TypeError'), "can't convert nil into Float")
      }

      if (value.$$is_string) {
        str = value.toString();

        str = str.replace(/(\d)_(?=\d)/g, '$1');

        //Special case for hex strings only:
        if (/^\s*[-+]?0[xX][0-9a-fA-F]+\s*$/.test(str)) {
          return self.$Integer(str);
        }

        if (!/^\s*[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?\s*$/.test(str)) {
          self.$raise($scope.get('ArgumentError'), "invalid value for Float(): \"" + (value) + "\"")
        }

        return parseFloat(str);
      }

      return $scope.get('Opal')['$coerce_to!'](value, $scope.get('Float'), "to_f");
    
    }, TMP_34.$$arity = 1);

    Opal.defn(self, '$Hash', TMP_35 = function ːHash(arg) {
      var $a, $b, self = this;

      if ((($a = ((($b = arg['$nil?']()) !== false && $b !== nil && $b != null) ? $b : arg['$==']([]))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return $hash2([], {})};
      if ((($a = $scope.get('Hash')['$==='](arg)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return arg};
      return $scope.get('Opal')['$coerce_to!'](arg, $scope.get('Hash'), "to_hash");
    }, TMP_35.$$arity = 1);

    Opal.defn(self, '$is_a?', TMP_36 = function(klass) {
      var self = this;

      
      if (!klass.$$is_class && !klass.$$is_module) {
        self.$raise($scope.get('TypeError'), "class or module required");
      }

      return Opal.is_a(self, klass);
    ;
    }, TMP_36.$$arity = 1);

    Opal.alias(self, 'kind_of?', 'is_a?');

    Opal.defn(self, '$lambda', TMP_37 = function ːlambda() {
      var self = this, $iter = TMP_37.$$p, block = $iter || nil;

      TMP_37.$$p = null;
      block.$$is_lambda = true;
      return block;
    }, TMP_37.$$arity = 0);

    Opal.defn(self, '$load', TMP_38 = function ːload(file) {
      var self = this;

      file = $scope.get('Opal')['$coerce_to!'](file, $scope.get('String'), "to_str");
      return Opal.load(file);
    }, TMP_38.$$arity = 1);

    Opal.defn(self, '$loop', TMP_39 = function ːloop() {
      var self = this, $iter = TMP_39.$$p, $yield = $iter || nil;

      TMP_39.$$p = null;
      if (($yield !== nil)) {
        } else {
        return self.$enum_for("loop")
      };
      
      while (true) {
        Opal.yieldX($yield, [])
      }
    ;
      return self;
    }, TMP_39.$$arity = 0);

    Opal.defn(self, '$nil?', TMP_40 = function() {
      var self = this;

      return false;
    }, TMP_40.$$arity = 0);

    Opal.alias(self, 'object_id', '__id__');

    Opal.defn(self, '$printf', TMP_41 = function ːprintf($a_rest) {
      var $b, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ((($b = $rb_gt(args.$length(), 0)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        self.$print(($b = self).$format.apply($b, Opal.to_a(args)))};
      return nil;
    }, TMP_41.$$arity = -1);

    Opal.defn(self, '$proc', TMP_42 = function ːproc() {
      var self = this, $iter = TMP_42.$$p, block = $iter || nil;

      TMP_42.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        self.$raise($scope.get('ArgumentError'), "tried to create Proc object without a block")
      };
      block.$$is_lambda = false;
      return block;
    }, TMP_42.$$arity = 0);

    Opal.defn(self, '$puts', TMP_43 = function ːputs($a_rest) {
      var $b, self = this, strs;
      if ($gvars.stdout == null) $gvars.stdout = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      strs = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        strs[$arg_idx - 0] = arguments[$arg_idx];
      }
      return ($b = $gvars.stdout).$puts.apply($b, Opal.to_a(strs));
    }, TMP_43.$$arity = -1);

    Opal.defn(self, '$p', TMP_45 = function ːp($a_rest) {
      var $b, $c, TMP_44, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      ($b = ($c = args).$each, $b.$$p = (TMP_44 = function(obj){var self = TMP_44.$$s || this;
        if ($gvars.stdout == null) $gvars.stdout = nil;
if (obj == null) obj = nil;
      return $gvars.stdout.$puts(obj.$inspect())}, TMP_44.$$s = self, TMP_44.$$arity = 1, TMP_44), $b).call($c);
      if ((($b = $rb_le(args.$length(), 1)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        return args['$[]'](0)
        } else {
        return args
      };
    }, TMP_45.$$arity = -1);

    Opal.defn(self, '$print', TMP_46 = function ːprint($a_rest) {
      var $b, self = this, strs;
      if ($gvars.stdout == null) $gvars.stdout = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      strs = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        strs[$arg_idx - 0] = arguments[$arg_idx];
      }
      return ($b = $gvars.stdout).$print.apply($b, Opal.to_a(strs));
    }, TMP_46.$$arity = -1);

    Opal.defn(self, '$warn', TMP_47 = function ːwarn($a_rest) {
      var $b, $c, self = this, strs;
      if ($gvars.VERBOSE == null) $gvars.VERBOSE = nil;
      if ($gvars.stderr == null) $gvars.stderr = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      strs = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        strs[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ((($b = ((($c = $gvars.VERBOSE['$nil?']()) !== false && $c !== nil && $c != null) ? $c : strs['$empty?']())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        return nil
        } else {
        return ($b = $gvars.stderr).$puts.apply($b, Opal.to_a(strs))
      };
    }, TMP_47.$$arity = -1);

    Opal.defn(self, '$raise', TMP_48 = function ːraise(exception, string, _backtrace) {
      var self = this;
      if ($gvars["!"] == null) $gvars["!"] = nil;

      if (string == null) {
        string = nil;
      }
      if (_backtrace == null) {
        _backtrace = nil;
      }
      
      if (exception == null && $gvars["!"] !== nil) {
        throw $gvars["!"];
      }
      if (exception == null) {
        exception = $scope.get('RuntimeError').$new();
      }
      else if (exception.$$is_string) {
        exception = $scope.get('RuntimeError').$new(exception);
      }
      // using respond_to? and not an undefined check to avoid method_missing matching as true
      else if (exception.$$is_class && exception['$respond_to?']("exception")) {
        exception = exception.$exception(string);
      }
      else if (exception['$kind_of?']($scope.get('Exception'))) {
        // exception is fine
      }
      else {
        exception = $scope.get('TypeError').$new("exception class/object expected");
      }

      if ($gvars["!"] !== nil) {
        Opal.exceptions.push($gvars["!"]);
      }

      $gvars["!"] = exception;

      throw exception;
    ;
    }, TMP_48.$$arity = -1);

    Opal.alias(self, 'fail', 'raise');

    Opal.defn(self, '$rand', TMP_49 = function ːrand(max) {
      var self = this;

      
      if (max === undefined) {
        return Math.random();
      }
      else if (max.$$is_range) {
        var min = max.begin, range = max.end - min;
        if(!max.exclude) range++;

        return self.$rand(range) + min;
      }
      else {
        return Math.floor(Math.random() *
          Math.abs($scope.get('Opal').$coerce_to(max, $scope.get('Integer'), "to_int")));
      }
    
    }, TMP_49.$$arity = -1);

    Opal.defn(self, '$respond_to?', TMP_50 = function(name, include_all) {
      var $a, self = this;

      if (include_all == null) {
        include_all = false;
      }
      if ((($a = self['$respond_to_missing?'](name, include_all)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return true};
      
      var body = self['$' + name];

      if (typeof(body) === "function" && !body.$$stub) {
        return true;
      }
    
      return false;
    }, TMP_50.$$arity = -2);

    Opal.defn(self, '$respond_to_missing?', TMP_51 = function(method_name, include_all) {
      var self = this;

      if (include_all == null) {
        include_all = false;
      }
      return false;
    }, TMP_51.$$arity = -2);

    Opal.defn(self, '$require', TMP_52 = function ːrequire(file) {
      var self = this;

      file = $scope.get('Opal')['$coerce_to!'](file, $scope.get('String'), "to_str");
      return Opal.require(file);
    }, TMP_52.$$arity = 1);

    Opal.defn(self, '$require_relative', TMP_53 = function ːrequire_relative(file) {
      var self = this;

      $scope.get('Opal')['$try_convert!'](file, $scope.get('String'), "to_str");
      file = $scope.get('File').$expand_path($scope.get('File').$join(Opal.current_file, "..", file));
      return Opal.require(file);
    }, TMP_53.$$arity = 1);

    Opal.defn(self, '$require_tree', TMP_54 = function ːrequire_tree(path) {
      var self = this;

      path = $scope.get('File').$expand_path(path);
      if (path['$=='](".")) {
        path = ""};
      
      for (var name in Opal.modules) {
        if ((name)['$start_with?'](path)) {
          Opal.require(name);
        }
      }
    ;
      return nil;
    }, TMP_54.$$arity = 1);

    Opal.alias(self, 'send', '__send__');

    Opal.alias(self, 'public_send', '__send__');

    Opal.defn(self, '$singleton_class', TMP_55 = function ːsingleton_class() {
      var self = this;

      return Opal.get_singleton_class(self);
    }, TMP_55.$$arity = 0);

    Opal.defn(self, '$sleep', TMP_56 = function ːsleep(seconds) {
      var self = this;

      if (seconds == null) {
        seconds = nil;
      }
      
      if (seconds === nil) {
        self.$raise($scope.get('TypeError'), "can't convert NilClass into time interval")
      }
      if (!seconds.$$is_number) {
        self.$raise($scope.get('TypeError'), "can't convert " + (seconds.$class()) + " into time interval")
      }
      if (seconds < 0) {
        self.$raise($scope.get('ArgumentError'), "time interval must be positive")
      }
      var t = new Date();
      while (new Date() - t <= seconds * 1000);
      return seconds;
    ;
    }, TMP_56.$$arity = -1);

    Opal.alias(self, 'sprintf', 'format');

    Opal.alias(self, 'srand', 'rand');

    Opal.defn(self, '$String', TMP_57 = function ːString(str) {
      var $a, self = this;

      return ((($a = $scope.get('Opal')['$coerce_to?'](str, $scope.get('String'), "to_str")) !== false && $a !== nil && $a != null) ? $a : $scope.get('Opal')['$coerce_to!'](str, $scope.get('String'), "to_s"));
    }, TMP_57.$$arity = 1);

    Opal.defn(self, '$tap', TMP_58 = function ːtap() {
      var self = this, $iter = TMP_58.$$p, block = $iter || nil;

      TMP_58.$$p = null;
      Opal.yield1(block, self);
      return self;
    }, TMP_58.$$arity = 0);

    Opal.defn(self, '$to_proc', TMP_59 = function ːto_proc() {
      var self = this;

      return self;
    }, TMP_59.$$arity = 0);

    Opal.defn(self, '$to_s', TMP_60 = function ːto_s() {
      var self = this;

      return "#<" + (self.$class()) + ":0x" + (self.$__id__().$to_s(16)) + ">";
    }, TMP_60.$$arity = 0);

    Opal.defn(self, '$catch', TMP_61 = function(sym) {
      var self = this, $iter = TMP_61.$$p, $yield = $iter || nil, e = nil;

      TMP_61.$$p = null;
      try {
        return Opal.yieldX($yield, []);
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('UncaughtThrowError')])) {e = $err;
          try {
            if (e.$sym()['$=='](sym)) {
              return e.$arg()};
            return self.$raise();
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
    }, TMP_61.$$arity = 1);

    Opal.defn(self, '$throw', TMP_62 = function($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return self.$raise($scope.get('UncaughtThrowError').$new(args));
    }, TMP_62.$$arity = -1);

    Opal.defn(self, '$open', TMP_63 = function ːopen($a_rest) {
      var $b, $c, self = this, args, $iter = TMP_63.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_63.$$p = null;
      return ($b = ($c = $scope.get('File')).$open, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
    }, TMP_63.$$arity = -1);
  })($scope.base);
  return (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope;

    return self.$include($scope.get('Kernel'))
  })($scope.base, null);
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["corelib/error"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$new', '$clone', '$to_s', '$empty?', '$class', '$attr_reader', '$[]', '$>', '$length', '$inspect']);
  (function($base, $super) {
    function $Exception(){};
    var self = $Exception = $klass($base, $super, 'Exception', $Exception);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8;

    def.message = nil;
    Opal.defs(self, '$new', TMP_1 = function($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var message = (args.length > 0) ? args[0] : nil;
      var err = new self.$$alloc(message);

      if (Error.captureStackTrace) {
        Error.captureStackTrace(err);
      }

      err.name = self.$$name;
      err.$initialize.apply(err, args);
      return err;
    
    }, TMP_1.$$arity = -1);

    Opal.defs(self, '$exception', TMP_2 = function ːexception($a_rest) {
      var $b, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return ($b = self).$new.apply($b, Opal.to_a(args));
    }, TMP_2.$$arity = -1);

    Opal.defn(self, '$initialize', TMP_3 = function ːinitialize($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return self.message = (args.length > 0) ? args[0] : nil;
    }, TMP_3.$$arity = -1);

    Opal.defn(self, '$backtrace', TMP_4 = function ːbacktrace() {
      var self = this;

      
      var backtrace = self.stack;

      if (typeof(backtrace) === 'string') {
        return backtrace.split("\n").slice(0, 15);
      }
      else if (backtrace) {
        return backtrace.slice(0, 15);
      }

      return [];
    
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$exception', TMP_5 = function ːexception(str) {
      var self = this;

      if (str == null) {
        str = nil;
      }
      
      if (str === nil || self === str) {
        return self;
      }
      
      var cloned = self.$clone();
      cloned.message = str;
      return cloned;
    
    }, TMP_5.$$arity = -1);

    Opal.defn(self, '$message', TMP_6 = function ːmessage() {
      var self = this;

      return self.$to_s();
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$inspect', TMP_7 = function ːinspect() {
      var $a, self = this, as_str = nil;

      as_str = self.$to_s();
      if ((($a = as_str['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$class().$to_s()
        } else {
        return "#<" + (self.$class().$to_s()) + ": " + (self.$to_s()) + ">"
      };
    }, TMP_7.$$arity = 0);

    return (Opal.defn(self, '$to_s', TMP_8 = function ːto_s() {
      var $a, $b, self = this;

      return ((($a = (($b = self.message, $b !== false && $b !== nil && $b != null ?self.message.$to_s() : $b))) !== false && $a !== nil && $a != null) ? $a : self.$class().$to_s());
    }, TMP_8.$$arity = 0), nil) && 'to_s';
  })($scope.base, Error);
  (function($base, $super) {
    function $ScriptError(){};
    var self = $ScriptError = $klass($base, $super, 'ScriptError', $ScriptError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('Exception'));
  (function($base, $super) {
    function $SyntaxError(){};
    var self = $SyntaxError = $klass($base, $super, 'SyntaxError', $SyntaxError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('ScriptError'));
  (function($base, $super) {
    function $LoadError(){};
    var self = $LoadError = $klass($base, $super, 'LoadError', $LoadError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('ScriptError'));
  (function($base, $super) {
    function $NotImplementedError(){};
    var self = $NotImplementedError = $klass($base, $super, 'NotImplementedError', $NotImplementedError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('ScriptError'));
  (function($base, $super) {
    function $SystemExit(){};
    var self = $SystemExit = $klass($base, $super, 'SystemExit', $SystemExit);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('Exception'));
  (function($base, $super) {
    function $NoMemoryError(){};
    var self = $NoMemoryError = $klass($base, $super, 'NoMemoryError', $NoMemoryError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('Exception'));
  (function($base, $super) {
    function $SignalException(){};
    var self = $SignalException = $klass($base, $super, 'SignalException', $SignalException);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('Exception'));
  (function($base, $super) {
    function $Interrupt(){};
    var self = $Interrupt = $klass($base, $super, 'Interrupt', $Interrupt);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('Exception'));
  (function($base, $super) {
    function $SecurityError(){};
    var self = $SecurityError = $klass($base, $super, 'SecurityError', $SecurityError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('Exception'));
  (function($base, $super) {
    function $StandardError(){};
    var self = $StandardError = $klass($base, $super, 'StandardError', $StandardError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('Exception'));
  (function($base, $super) {
    function $ZeroDivisionError(){};
    var self = $ZeroDivisionError = $klass($base, $super, 'ZeroDivisionError', $ZeroDivisionError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $NameError(){};
    var self = $NameError = $klass($base, $super, 'NameError', $NameError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $NoMethodError(){};
    var self = $NoMethodError = $klass($base, $super, 'NoMethodError', $NoMethodError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('NameError'));
  (function($base, $super) {
    function $RuntimeError(){};
    var self = $RuntimeError = $klass($base, $super, 'RuntimeError', $RuntimeError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $LocalJumpError(){};
    var self = $LocalJumpError = $klass($base, $super, 'LocalJumpError', $LocalJumpError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $TypeError(){};
    var self = $TypeError = $klass($base, $super, 'TypeError', $TypeError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $ArgumentError(){};
    var self = $ArgumentError = $klass($base, $super, 'ArgumentError', $ArgumentError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $IndexError(){};
    var self = $IndexError = $klass($base, $super, 'IndexError', $IndexError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $StopIteration(){};
    var self = $StopIteration = $klass($base, $super, 'StopIteration', $StopIteration);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('IndexError'));
  (function($base, $super) {
    function $KeyError(){};
    var self = $KeyError = $klass($base, $super, 'KeyError', $KeyError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('IndexError'));
  (function($base, $super) {
    function $RangeError(){};
    var self = $RangeError = $klass($base, $super, 'RangeError', $RangeError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $FloatDomainError(){};
    var self = $FloatDomainError = $klass($base, $super, 'FloatDomainError', $FloatDomainError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('RangeError'));
  (function($base, $super) {
    function $IOError(){};
    var self = $IOError = $klass($base, $super, 'IOError', $IOError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $SystemCallError(){};
    var self = $SystemCallError = $klass($base, $super, 'SystemCallError', $SystemCallError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base) {
    var $Errno, self = $Errno = $module($base, 'Errno');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $EINVAL(){};
      var self = $EINVAL = $klass($base, $super, 'EINVAL', $EINVAL);

      var def = self.$$proto, $scope = self.$$scope, TMP_9;

      return (Opal.defs(self, '$new', TMP_9 = function() {
        var $a, $b, self = this, $iter = TMP_9.$$p, $yield = $iter || nil;

        TMP_9.$$p = null;
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'new', TMP_9, false, $EINVAL)), $a.$$p = null, $a).call($b, "Invalid argument");
      }, TMP_9.$$arity = 0), nil) && 'new'
    })($scope.base, $scope.get('SystemCallError'))
  })($scope.base);
  (function($base, $super) {
    function $UncaughtThrowError(){};
    var self = $UncaughtThrowError = $klass($base, $super, 'UncaughtThrowError', $UncaughtThrowError);

    var def = self.$$proto, $scope = self.$$scope, TMP_10;

    def.sym = nil;
    self.$attr_reader("sym", "arg");

    return (Opal.defn(self, '$initialize', TMP_10 = function ːinitialize(args) {
      var $a, $b, self = this, $iter = TMP_10.$$p, $yield = $iter || nil;

      TMP_10.$$p = null;
      self.sym = args['$[]'](0);
      if ((($a = $rb_gt(args.$length(), 1)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.arg = args['$[]'](1)};
      return ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_10, false)), $a.$$p = null, $a).call($b, "uncaught throw " + (self.sym.$inspect()));
    }, TMP_10.$$arity = 1), nil) && 'initialize';
  })($scope.base, $scope.get('ArgumentError'));
  (function($base, $super) {
    function $NameError(){};
    var self = $NameError = $klass($base, $super, 'NameError', $NameError);

    var def = self.$$proto, $scope = self.$$scope, TMP_11;

    self.$attr_reader("name");

    return (Opal.defn(self, '$initialize', TMP_11 = function ːinitialize(message, name) {
      var $a, $b, self = this, $iter = TMP_11.$$p, $yield = $iter || nil;

      if (name == null) {
        name = nil;
      }
      TMP_11.$$p = null;
      ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_11, false)), $a.$$p = null, $a).call($b, message);
      return self.name = name;
    }, TMP_11.$$arity = -2), nil) && 'initialize';
  })($scope.base, null);
  return (function($base, $super) {
    function $NoMethodError(){};
    var self = $NoMethodError = $klass($base, $super, 'NoMethodError', $NoMethodError);

    var def = self.$$proto, $scope = self.$$scope, TMP_12;

    self.$attr_reader("args");

    return (Opal.defn(self, '$initialize', TMP_12 = function ːinitialize(message, name, args) {
      var $a, $b, self = this, $iter = TMP_12.$$p, $yield = $iter || nil;

      if (name == null) {
        name = nil;
      }
      if (args == null) {
        args = [];
      }
      TMP_12.$$p = null;
      ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_12, false)), $a.$$p = null, $a).call($b, message, name);
      return self.args = args;
    }, TMP_12.$$arity = -2), nil) && 'initialize';
  })($scope.base, null);
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["corelib/constants"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.cdecl($scope, 'RUBY_PLATFORM', "opal");
  Opal.cdecl($scope, 'RUBY_ENGINE', "opal");
  Opal.cdecl($scope, 'RUBY_VERSION', "2.2.3");
  Opal.cdecl($scope, 'RUBY_ENGINE_VERSION', "0.10.0.rc2");
  Opal.cdecl($scope, 'RUBY_RELEASE_DATE', "2016-06-21");
  Opal.cdecl($scope, 'RUBY_PATCHLEVEL', 0);
  Opal.cdecl($scope, 'RUBY_REVISION', 0);
  Opal.cdecl($scope, 'RUBY_COPYRIGHT', "opal - Copyright (C) 2013-2015 Adam Beynon");
  return Opal.cdecl($scope, 'RUBY_DESCRIPTION', "opal " + ($scope.get('RUBY_ENGINE_VERSION')) + " (" + ($scope.get('RUBY_RELEASE_DATE')) + " revision " + ($scope.get('RUBY_REVISION')) + ")");
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["opal/base"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("corelib/runtime");
  self.$require("corelib/helpers");
  self.$require("corelib/module");
  self.$require("corelib/class");
  self.$require("corelib/basic_object");
  self.$require("corelib/kernel");
  self.$require("corelib/error");
  return self.$require("corelib/constants");
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["corelib/nil"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$raise', '$class', '$new', '$>', '$length', '$Rational']);
  (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18;

    def.$$meta = self;

    Opal.defn(self, '$!', TMP_1 = function() {
      var self = this;

      return true;
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$&', TMP_2 = function(other) {
      var self = this;

      return false;
    }, TMP_2.$$arity = 1);

    Opal.defn(self, '$|', TMP_3 = function(other) {
      var self = this;

      return other !== false && other !== nil;
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$^', TMP_4 = function(other) {
      var self = this;

      return other !== false && other !== nil;
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$==', TMP_5 = function(other) {
      var self = this;

      return other === nil;
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$dup', TMP_6 = function ːdup() {
      var self = this;

      return self.$raise($scope.get('TypeError'), "can't dup " + (self.$class()));
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$clone', TMP_7 = function ːclone() {
      var self = this;

      return self.$raise($scope.get('TypeError'), "can't clone " + (self.$class()));
    }, TMP_7.$$arity = 0);

    Opal.defn(self, '$inspect', TMP_8 = function ːinspect() {
      var self = this;

      return "nil";
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$nil?', TMP_9 = function() {
      var self = this;

      return true;
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$singleton_class', TMP_10 = function ːsingleton_class() {
      var self = this;

      return $scope.get('NilClass');
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$to_a', TMP_11 = function ːto_a() {
      var self = this;

      return [];
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$to_h', TMP_12 = function ːto_h() {
      var self = this;

      return Opal.hash();
    }, TMP_12.$$arity = 0);

    Opal.defn(self, '$to_i', TMP_13 = function ːto_i() {
      var self = this;

      return 0;
    }, TMP_13.$$arity = 0);

    Opal.alias(self, 'to_f', 'to_i');

    Opal.defn(self, '$to_s', TMP_14 = function ːto_s() {
      var self = this;

      return "";
    }, TMP_14.$$arity = 0);

    Opal.defn(self, '$to_c', TMP_15 = function ːto_c() {
      var self = this;

      return $scope.get('Complex').$new(0, 0);
    }, TMP_15.$$arity = 0);

    Opal.defn(self, '$rationalize', TMP_16 = function ːrationalize($a_rest) {
      var $b, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ((($b = $rb_gt(args.$length(), 1)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        self.$raise($scope.get('ArgumentError'))};
      return self.$Rational(0, 1);
    }, TMP_16.$$arity = -1);

    Opal.defn(self, '$to_r', TMP_17 = function ːto_r() {
      var self = this;

      return self.$Rational(0, 1);
    }, TMP_17.$$arity = 0);

    return (Opal.defn(self, '$instance_variables', TMP_18 = function ːinstance_variables() {
      var self = this;

      return [];
    }, TMP_18.$$arity = 0), nil) && 'instance_variables';
  })($scope.base, null);
  return Opal.cdecl($scope, 'NIL', nil);
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["corelib/boolean"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$raise', '$class']);
  (function($base, $super) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10;

    def.$$is_boolean = true;

    def.$$meta = self;

    Opal.defn(self, '$__id__', TMP_1 = function ː__id__() {
      var self = this;

      return self.valueOf() ? 2 : 0;
    }, TMP_1.$$arity = 0);

    Opal.alias(self, 'object_id', '__id__');

    Opal.defn(self, '$!', TMP_2 = function() {
      var self = this;

      return self != true;
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$&', TMP_3 = function(other) {
      var self = this;

      return (self == true) ? (other !== false && other !== nil) : false;
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$|', TMP_4 = function(other) {
      var self = this;

      return (self == true) ? true : (other !== false && other !== nil);
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$^', TMP_5 = function(other) {
      var self = this;

      return (self == true) ? (other === false || other === nil) : (other !== false && other !== nil);
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$==', TMP_6 = function(other) {
      var self = this;

      return (self == true) === other.valueOf();
    }, TMP_6.$$arity = 1);

    Opal.alias(self, 'equal?', '==');

    Opal.alias(self, 'eql?', '==');

    Opal.defn(self, '$singleton_class', TMP_7 = function ːsingleton_class() {
      var self = this;

      return $scope.get('Boolean');
    }, TMP_7.$$arity = 0);

    Opal.defn(self, '$to_s', TMP_8 = function ːto_s() {
      var self = this;

      return (self == true) ? 'true' : 'false';
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$dup', TMP_9 = function ːdup() {
      var self = this;

      return self.$raise($scope.get('TypeError'), "can't dup " + (self.$class()));
    }, TMP_9.$$arity = 0);

    return (Opal.defn(self, '$clone', TMP_10 = function ːclone() {
      var self = this;

      return self.$raise($scope.get('TypeError'), "can't clone " + (self.$class()));
    }, TMP_10.$$arity = 0), nil) && 'clone';
  })($scope.base, Boolean);
  Opal.cdecl($scope, 'TrueClass', $scope.get('Boolean'));
  Opal.cdecl($scope, 'FalseClass', $scope.get('Boolean'));
  Opal.cdecl($scope, 'TRUE', true);
  return Opal.cdecl($scope, 'FALSE', false);
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["corelib/comparable"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$===', '$>', '$<', '$equal?', '$<=>', '$normalize', '$raise', '$class']);
  return (function($base) {
    var $Comparable, self = $Comparable = $module($base, 'Comparable');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7;

    Opal.defs(self, '$normalize', TMP_1 = function ːnormalize(what) {
      var $a, self = this;

      if ((($a = $scope.get('Integer')['$==='](what)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return what};
      if ((($a = $rb_gt(what, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return 1};
      if ((($a = $rb_lt(what, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return -1};
      return 0;
    }, TMP_1.$$arity = 1);

    Opal.defn(self, '$==', TMP_2 = function(other) {
      var $a, self = this, cmp = nil;

      try {
        if ((($a = self['$equal?'](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return true};
        
      if (self["$<=>"] == Opal.Kernel["$<=>"]) {
        return false;
      }

      // check for infinite recursion
      if (self.$$comparable) {
        delete self.$$comparable;
        return false;
      }
    
        if ((($a = cmp = (self['$<=>'](other))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return false
        };
        return $scope.get('Comparable').$normalize(cmp) == 0;
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('StandardError')])) {
          try {
            return false
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
    }, TMP_2.$$arity = 1);

    Opal.defn(self, '$>', TMP_3 = function(other) {
      var $a, self = this, cmp = nil;

      if ((($a = cmp = (self['$<=>'](other))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $scope.get('Comparable').$normalize(cmp) > 0;
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$>=', TMP_4 = function(other) {
      var $a, self = this, cmp = nil;

      if ((($a = cmp = (self['$<=>'](other))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $scope.get('Comparable').$normalize(cmp) >= 0;
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$<', TMP_5 = function(other) {
      var $a, self = this, cmp = nil;

      if ((($a = cmp = (self['$<=>'](other))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $scope.get('Comparable').$normalize(cmp) < 0;
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$<=', TMP_6 = function(other) {
      var $a, self = this, cmp = nil;

      if ((($a = cmp = (self['$<=>'](other))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $scope.get('Comparable').$normalize(cmp) <= 0;
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$between?', TMP_7 = function(min, max) {
      var self = this;

      if ($rb_lt(self, min)) {
        return false};
      if ($rb_gt(self, max)) {
        return false};
      return true;
    }, TMP_7.$$arity = 2);
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["corelib/regexp"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$nil?', '$[]', '$raise', '$escape', '$options', '$to_str', '$new', '$join', '$coerce_to!', '$!', '$match', '$coerce_to?', '$begin', '$coerce_to', '$call', '$=~', '$attr_reader', '$===', '$inspect', '$to_a']);
  (function($base, $super) {
    function $RegexpError(){};
    var self = $RegexpError = $klass($base, $super, 'RegexpError', $RegexpError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $Regexp(){};
    var self = $Regexp = $klass($base, $super, 'Regexp', $Regexp);

    var def = self.$$proto, $scope = self.$$scope, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15;

    Opal.cdecl($scope, 'IGNORECASE', 1);

    Opal.cdecl($scope, 'MULTILINE', 4);

    def.$$is_regexp = true;

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5;

      Opal.defn(self, '$allocate', TMP_1 = function ːallocate() {
        var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, allocated = nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

        TMP_1.$$p = null;
        $zuper = [];
        
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        allocated = ($a = ($b = self, Opal.find_super_dispatcher(self, 'allocate', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
        allocated.uninitialized = true;
        return allocated;
      }, TMP_1.$$arity = 0);
      Opal.defn(self, '$escape', TMP_2 = function ːescape(string) {
        var self = this;

        
        return string.replace(/([-[\]\/{}()*+?.^$\\| ])/g, '\\$1')
                     .replace(/[\n]/g, '\\n')
                     .replace(/[\r]/g, '\\r')
                     .replace(/[\f]/g, '\\f')
                     .replace(/[\t]/g, '\\t');
      
      }, TMP_2.$$arity = 1);
      Opal.defn(self, '$last_match', TMP_3 = function ːlast_match(n) {
        var $a, self = this;
        if ($gvars["~"] == null) $gvars["~"] = nil;

        if (n == null) {
          n = nil;
        }
        if ((($a = n['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return $gvars["~"]
          } else {
          return $gvars["~"]['$[]'](n)
        };
      }, TMP_3.$$arity = -1);
      Opal.alias(self, 'quote', 'escape');
      Opal.defn(self, '$union', TMP_4 = function ːunion($a_rest) {
        var self = this, parts;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        parts = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          parts[$arg_idx - 0] = arguments[$arg_idx];
        }
        
        var is_first_part_array, quoted_validated, part, options, each_part_options;
        if (parts.length == 0) {
          return /(?!)/;
        }
        // cover the 2 arrays passed as arguments case
        is_first_part_array = parts[0].$$is_array;
        if (parts.length > 1 && is_first_part_array) {
          self.$raise($scope.get('TypeError'), "no implicit conversion of Array into String")
        }        
        // deal with splat issues (related to https://github.com/opal/opal/issues/858)
        if (is_first_part_array) {
          parts = parts[0];
        }
        options = undefined;
        quoted_validated = [];
        for (var i=0; i < parts.length; i++) {
          part = parts[i];
          if (part.$$is_string) {
            quoted_validated.push(self.$escape(part));
          }
          else if (part.$$is_regexp) {
            each_part_options = (part).$options();
            if (options != undefined && options != each_part_options) {
              self.$raise($scope.get('TypeError'), "All expressions must use the same options")
            }
            options = each_part_options;
            quoted_validated.push('('+part.source+')');
          }
          else {
            quoted_validated.push(self.$escape((part).$to_str()));
          }
        }
      
        return self.$new((quoted_validated).$join("|"), options);
      }, TMP_4.$$arity = -1);
      return (Opal.defn(self, '$new', TMP_5 = function(regexp, options) {
        var self = this;

        
        if (regexp.$$is_regexp) {
          return new RegExp(regexp);
        }

        regexp = $scope.get('Opal')['$coerce_to!'](regexp, $scope.get('String'), "to_str");

        if (regexp.charAt(regexp.length - 1) === '\\' && regexp.charAt(regexp.length - 2) !== '\\') {
          self.$raise($scope.get('RegexpError'), "too short escape sequence: /" + (regexp) + "/")
        }

        if (options === undefined || options['$!']()) {
          return new RegExp(regexp);
        }

        if (options.$$is_number) {
          var temp = '';
          if ($scope.get('IGNORECASE') & options) { temp += 'i'; }
          if ($scope.get('MULTILINE')  & options) { temp += 'm'; }
          options = temp;
        }
        else {
          options = 'i';
        }

        return new RegExp(regexp, options);
      ;
      }, TMP_5.$$arity = -2), nil) && 'new';
    })(Opal.get_singleton_class(self));

    Opal.defn(self, '$==', TMP_6 = function(other) {
      var self = this;

      return other.constructor == RegExp && self.toString() === other.toString();
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$===', TMP_7 = function(string) {
      var self = this;

      return self.$match($scope.get('Opal')['$coerce_to?'](string, $scope.get('String'), "to_str")) !== nil;
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$=~', TMP_8 = function(string) {
      var $a, self = this;
      if ($gvars["~"] == null) $gvars["~"] = nil;

      return ($a = self.$match(string), $a !== false && $a !== nil && $a != null ?$gvars["~"].$begin(0) : $a);
    }, TMP_8.$$arity = 1);

    Opal.alias(self, 'eql?', '==');

    Opal.defn(self, '$inspect', TMP_9 = function ːinspect() {
      var self = this;

      return self.toString();
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$match', TMP_10 = function ːmatch(string, pos) {
      var self = this, $iter = TMP_10.$$p, block = $iter || nil;
      if ($gvars["~"] == null) $gvars["~"] = nil;

      TMP_10.$$p = null;
      
      if (self.uninitialized) {
        self.$raise($scope.get('TypeError'), "uninitialized Regexp")
      }

      if (pos === undefined) {
        pos = 0;
      } else {
        pos = $scope.get('Opal').$coerce_to(pos, $scope.get('Integer'), "to_int");
      }

      if (string === nil) {
        return $gvars["~"] = nil;
      }

      string = $scope.get('Opal').$coerce_to(string, $scope.get('String'), "to_str");

      if (pos < 0) {
        pos += string.length;
        if (pos < 0) {
          return $gvars["~"] = nil;
        }
      }

      var source = self.source;
      var flags = 'g';
      // m flag + a . in Ruby will match white space, but in JS, it only matches beginning/ending of lines, so we get the equivalent here
      if (self.multiline) {
        source = source.replace('.', "[\\s\\S]");
        flags += 'm';
      }

      // global RegExp maintains state, so not using self/this
      var md, re = new RegExp(source, flags + (self.ignoreCase ? 'i' : ''));

      while (true) {
        md = re.exec(string);
        if (md === null) {
          return $gvars["~"] = nil;
        }
        if (md.index >= pos) {
          $gvars["~"] = $scope.get('MatchData').$new(re, md)
          return block === nil ? $gvars["~"] : block.$call($gvars["~"]);
        }
        re.lastIndex = md.index + 1;
      }
    ;
    }, TMP_10.$$arity = -2);

    Opal.defn(self, '$~', TMP_11 = function() {
      var self = this;
      if ($gvars._ == null) $gvars._ = nil;

      return self['$=~']($gvars._);
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$source', TMP_12 = function ːsource() {
      var self = this;

      return self.source;
    }, TMP_12.$$arity = 0);

    Opal.defn(self, '$options', TMP_13 = function ːoptions() {
      var self = this;

      
      if (self.uninitialized) {
        self.$raise($scope.get('TypeError'), "uninitialized Regexp")
      }
      var result = 0;
      // should be supported in IE6 according to https://msdn.microsoft.com/en-us/library/7f5z26w4(v=vs.94).aspx
      if (self.multiline) {
        result |= $scope.get('MULTILINE');
      }
      if (self.ignoreCase) {
        result |= $scope.get('IGNORECASE');
      }
      return result;
    ;
    }, TMP_13.$$arity = 0);

    Opal.defn(self, '$casefold?', TMP_14 = function() {
      var self = this;

      return self.ignoreCase;
    }, TMP_14.$$arity = 0);

    Opal.alias(self, 'to_s', 'source');

    return (Opal.defs(self, '$_load', TMP_15 = function ː_load(args) {
      var $a, self = this;

      return ($a = self).$new.apply($a, Opal.to_a(args));
    }, TMP_15.$$arity = 1), nil) && '_load';
  })($scope.base, RegExp);
  return (function($base, $super) {
    function $MatchData(){};
    var self = $MatchData = $klass($base, $super, 'MatchData', $MatchData);

    var def = self.$$proto, $scope = self.$$scope, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27;

    def.matches = nil;
    self.$attr_reader("post_match", "pre_match", "regexp", "string");

    Opal.defn(self, '$initialize', TMP_16 = function ːinitialize(regexp, match_groups) {
      var self = this;

      $gvars["~"] = self;
      self.regexp = regexp;
      self.begin = match_groups.index;
      self.string = match_groups.input;
      self.pre_match = match_groups.input.slice(0, match_groups.index);
      self.post_match = match_groups.input.slice(match_groups.index + match_groups[0].length);
      self.matches = [];
      
      for (var i = 0, length = match_groups.length; i < length; i++) {
        var group = match_groups[i];

        if (group == null) {
          self.matches.push(nil);
        }
        else {
          self.matches.push(group);
        }
      }
    
    }, TMP_16.$$arity = 2);

    Opal.defn(self, '$[]', TMP_17 = function($a_rest) {
      var $b, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return ($b = self.matches)['$[]'].apply($b, Opal.to_a(args));
    }, TMP_17.$$arity = -1);

    Opal.defn(self, '$offset', TMP_18 = function ːoffset(n) {
      var self = this;

      
      if (n !== 0) {
        self.$raise($scope.get('ArgumentError'), "MatchData#offset only supports 0th element")
      }
      return [self.begin, self.begin + self.matches[n].length];
    ;
    }, TMP_18.$$arity = 1);

    Opal.defn(self, '$==', TMP_19 = function(other) {
      var $a, $b, $c, $d, self = this;

      if ((($a = $scope.get('MatchData')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      return ($a = ($b = ($c = ($d = self.string == other.string, $d !== false && $d !== nil && $d != null ?self.regexp.toString() == other.regexp.toString() : $d), $c !== false && $c !== nil && $c != null ?self.pre_match == other.pre_match : $c), $b !== false && $b !== nil && $b != null ?self.post_match == other.post_match : $b), $a !== false && $a !== nil && $a != null ?self.begin == other.begin : $a);
    }, TMP_19.$$arity = 1);

    Opal.alias(self, 'eql?', '==');

    Opal.defn(self, '$begin', TMP_20 = function ːbegin(n) {
      var self = this;

      
      if (n !== 0) {
        self.$raise($scope.get('ArgumentError'), "MatchData#begin only supports 0th element")
      }
      return self.begin;
    ;
    }, TMP_20.$$arity = 1);

    Opal.defn(self, '$end', TMP_21 = function ːend(n) {
      var self = this;

      
      if (n !== 0) {
        self.$raise($scope.get('ArgumentError'), "MatchData#end only supports 0th element")
      }
      return self.begin + self.matches[n].length;
    ;
    }, TMP_21.$$arity = 1);

    Opal.defn(self, '$captures', TMP_22 = function ːcaptures() {
      var self = this;

      return self.matches.slice(1);
    }, TMP_22.$$arity = 0);

    Opal.defn(self, '$inspect', TMP_23 = function ːinspect() {
      var self = this;

      
      var str = "#<MatchData " + (self.matches[0]).$inspect();

      for (var i = 1, length = self.matches.length; i < length; i++) {
        str += " " + i + ":" + (self.matches[i]).$inspect();
      }

      return str + ">";
    ;
    }, TMP_23.$$arity = 0);

    Opal.defn(self, '$length', TMP_24 = function ːlength() {
      var self = this;

      return self.matches.length;
    }, TMP_24.$$arity = 0);

    Opal.alias(self, 'size', 'length');

    Opal.defn(self, '$to_a', TMP_25 = function ːto_a() {
      var self = this;

      return self.matches;
    }, TMP_25.$$arity = 0);

    Opal.defn(self, '$to_s', TMP_26 = function ːto_s() {
      var self = this;

      return self.matches[0];
    }, TMP_26.$$arity = 0);

    return (Opal.defn(self, '$values_at', TMP_27 = function ːvalues_at($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var i, a, index, values = [];

      for (i = 0; i < args.length; i++) {

        if (args[i].$$is_range) {
          a = (args[i]).$to_a();
          a.unshift(i, 1);
          Array.prototype.splice.apply(args, a);
        }

        index = $scope.get('Opal')['$coerce_to!'](args[i], $scope.get('Integer'), "to_int");

        if (index < 0) {
          index += self.matches.length;
          if (index < 0) {
            values.push(nil);
            continue;
          }
        }

        values.push(self.matches[index]);
      }

      return values;
    
    }, TMP_27.$$arity = -1), nil) && 'values_at';
  })($scope.base, null);
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["corelib/string"] = function(Opal) {
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$include', '$coerce_to?', '$coerce_to', '$raise', '$===', '$format', '$to_s', '$respond_to?', '$to_str', '$<=>', '$==', '$=~', '$new', '$empty?', '$ljust', '$ceil', '$/', '$+', '$rjust', '$floor', '$to_a', '$each_char', '$to_proc', '$coerce_to!', '$copy_singleton_methods', '$initialize_clone', '$initialize_dup', '$enum_for', '$size', '$chomp', '$[]', '$to_i', '$each_line', '$class', '$match', '$captures', '$proc', '$shift', '$__send__', '$succ', '$escape']);
  self.$require("corelib/comparable");
  self.$require("corelib/regexp");
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_40, TMP_41, TMP_42, TMP_43, TMP_44, TMP_45, TMP_46, TMP_47, TMP_48, TMP_49, TMP_50, TMP_51, TMP_52, TMP_53, TMP_54, TMP_55, TMP_56, TMP_57, TMP_58, TMP_59, TMP_61, TMP_62, TMP_63, TMP_64, TMP_65, TMP_66, TMP_67, TMP_68;

    def.length = nil;
    self.$include($scope.get('Comparable'));

    def.$$is_string = true;

    Opal.defn(self, '$__id__', TMP_1 = function ː__id__() {
      var self = this;

      return self.toString();
    }, TMP_1.$$arity = 0);

    Opal.alias(self, 'object_id', '__id__');

    Opal.defs(self, '$try_convert', TMP_2 = function ːtry_convert(what) {
      var self = this;

      return $scope.get('Opal')['$coerce_to?'](what, $scope.get('String'), "to_str");
    }, TMP_2.$$arity = 1);

    Opal.defs(self, '$new', TMP_3 = function(str) {
      var self = this;

      if (str == null) {
        str = "";
      }
      str = $scope.get('Opal').$coerce_to(str, $scope.get('String'), "to_str");
      return new String(str);
    }, TMP_3.$$arity = -1);

    Opal.defn(self, '$initialize', TMP_4 = function ːinitialize(str) {
      var self = this;

      
      if (str === undefined) {
        return self;
      }
    
      return self.$raise($scope.get('NotImplementedError'), "Mutable strings are not supported in Opal.");
    }, TMP_4.$$arity = -1);

    Opal.defn(self, '$%', TMP_5 = function(data) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](data)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = self).$format.apply($a, [self].concat(Opal.to_a(data)))
        } else {
        return self.$format(self, data)
      };
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$*', TMP_6 = function(count) {
      var self = this;

      
      count = $scope.get('Opal').$coerce_to(count, $scope.get('Integer'), "to_int");

      if (count < 0) {
        self.$raise($scope.get('ArgumentError'), "negative argument")
      }

      if (count === 0) {
        return '';
      }

      var result = '',
          string = self.toString();

      // All credit for the bit-twiddling magic code below goes to Mozilla
      // polyfill implementation of String.prototype.repeat() posted here:
      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat

      if (string.length * count >= 1 << 28) {
        self.$raise($scope.get('RangeError'), "multiply count must not overflow maximum string size")
      }

      for (;;) {
        if ((count & 1) === 1) {
          result += string;
        }
        count >>>= 1;
        if (count === 0) {
          break;
        }
        string += string;
      }

      return result;
    ;
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$+', TMP_7 = function(other) {
      var self = this;

      other = $scope.get('Opal').$coerce_to(other, $scope.get('String'), "to_str");
      return self + other.$to_s();
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$<=>', TMP_8 = function(other) {
      var $a, self = this;

      if ((($a = other['$respond_to?']("to_str")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_str().$to_s();
        return self > other ? 1 : (self < other ? -1 : 0);
        } else {
        
        var cmp = other['$<=>'](self);

        if (cmp === nil) {
          return nil;
        }
        else {
          return cmp > 0 ? -1 : (cmp < 0 ? 1 : 0);
        }
      ;
      };
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$==', TMP_9 = function(other) {
      var self = this;

      
      if (other.$$is_string) {
        return self.toString() === other.toString();
      }
      if ($scope.get('Opal')['$respond_to?'](other, "to_str")) {
        return other['$=='](self);
      }
      return false;
    ;
    }, TMP_9.$$arity = 1);

    Opal.alias(self, 'eql?', '==');

    Opal.alias(self, '===', '==');

    Opal.defn(self, '$=~', TMP_10 = function(other) {
      var self = this;

      
      if (other.$$is_string) {
        self.$raise($scope.get('TypeError'), "type mismatch: String given");
      }

      return other['$=~'](self);
    ;
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$[]', TMP_11 = function(index, length) {
      var self = this;

      
      var size = self.length, exclude;

      if (index.$$is_range) {
        exclude = index.exclude;
        length  = $scope.get('Opal').$coerce_to(index.end, $scope.get('Integer'), "to_int");
        index   = $scope.get('Opal').$coerce_to(index.begin, $scope.get('Integer'), "to_int");

        if (Math.abs(index) > size) {
          return nil;
        }

        if (index < 0) {
          index += size;
        }

        if (length < 0) {
          length += size;
        }

        if (!exclude) {
          length += 1;
        }

        length = length - index;

        if (length < 0) {
          length = 0;
        }

        return self.substr(index, length);
      }


      if (index.$$is_string) {
        if (length != null) {
          self.$raise($scope.get('TypeError'))
        }
        return self.indexOf(index) !== -1 ? index : nil;
      }


      if (index.$$is_regexp) {
        var match = self.match(index);

        if (match === null) {
          $gvars["~"] = nil
          return nil;
        }

        $gvars["~"] = $scope.get('MatchData').$new(index, match)

        if (length == null) {
          return match[0];
        }

        length = $scope.get('Opal').$coerce_to(length, $scope.get('Integer'), "to_int");

        if (length < 0 && -length < match.length) {
          return match[length += match.length];
        }

        if (length >= 0 && length < match.length) {
          return match[length];
        }

        return nil;
      }


      index = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");

      if (index < 0) {
        index += size;
      }

      if (length == null) {
        if (index >= size || index < 0) {
          return nil;
        }
        return self.substr(index, 1);
      }

      length = $scope.get('Opal').$coerce_to(length, $scope.get('Integer'), "to_int");

      if (length < 0) {
        return nil;
      }

      if (index > size || index < 0) {
        return nil;
      }

      return self.substr(index, length);
    
    }, TMP_11.$$arity = -2);

    Opal.alias(self, 'byteslice', '[]');

    Opal.defn(self, '$capitalize', TMP_12 = function ːcapitalize() {
      var self = this;

      return self.charAt(0).toUpperCase() + self.substr(1).toLowerCase();
    }, TMP_12.$$arity = 0);

    Opal.defn(self, '$casecmp', TMP_13 = function ːcasecmp(other) {
      var self = this;

      other = $scope.get('Opal').$coerce_to(other, $scope.get('String'), "to_str").$to_s();
      
      var ascii_only = /^[\x00-\x7F]*$/;
      if (ascii_only.test(self) && ascii_only.test(other)) {
        self = self.toLowerCase();
        other = other.toLowerCase();
      }
    
      return self['$<=>'](other);
    }, TMP_13.$$arity = 1);

    Opal.defn(self, '$center', TMP_14 = function ːcenter(width, padstr) {
      var $a, self = this;

      if (padstr == null) {
        padstr = " ";
      }
      width = $scope.get('Opal').$coerce_to(width, $scope.get('Integer'), "to_int");
      padstr = $scope.get('Opal').$coerce_to(padstr, $scope.get('String'), "to_str").$to_s();
      if ((($a = padstr['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "zero width padding")};
      if ((($a = width <= self.length) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self};
      
      var ljustified = self.$ljust($rb_divide(($rb_plus(width, self.length)), 2).$ceil(), padstr),
          rjustified = self.$rjust($rb_divide(($rb_plus(width, self.length)), 2).$floor(), padstr);

      return rjustified + ljustified.slice(self.length);
    ;
    }, TMP_14.$$arity = -2);

    Opal.defn(self, '$chars', TMP_15 = function ːchars() {
      var $a, $b, self = this, $iter = TMP_15.$$p, block = $iter || nil;

      TMP_15.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return self.$each_char().$to_a()
      };
      return ($a = ($b = self).$each_char, $a.$$p = block.$to_proc(), $a).call($b);
    }, TMP_15.$$arity = 0);

    Opal.defn(self, '$chomp', TMP_16 = function ːchomp(separator) {
      var $a, self = this;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"];
      }
      if ((($a = separator === nil || self.length === 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self};
      separator = $scope.get('Opal')['$coerce_to!'](separator, $scope.get('String'), "to_str").$to_s();
      
      if (separator === "\n") {
        return self.replace(/\r?\n?$/, '');
      }
      else if (separator === "") {
        return self.replace(/(\r?\n)+$/, '');
      }
      else if (self.length > separator.length) {
        var tail = self.substr(self.length - separator.length, separator.length);

        if (tail === separator) {
          return self.substr(0, self.length - separator.length);
        }
      }
    
      return self;
    }, TMP_16.$$arity = -1);

    Opal.defn(self, '$chop', TMP_17 = function ːchop() {
      var self = this;

      
      var length = self.length;

      if (length <= 1) {
        return "";
      }

      if (self.charAt(length - 1) === "\n" && self.charAt(length - 2) === "\r") {
        return self.substr(0, length - 2);
      }
      else {
        return self.substr(0, length - 1);
      }
    
    }, TMP_17.$$arity = 0);

    Opal.defn(self, '$chr', TMP_18 = function ːchr() {
      var self = this;

      return self.charAt(0);
    }, TMP_18.$$arity = 0);

    Opal.defn(self, '$clone', TMP_19 = function ːclone() {
      var self = this, copy = nil;

      copy = self.slice();
      copy.$copy_singleton_methods(self);
      copy.$initialize_clone(self);
      return copy;
    }, TMP_19.$$arity = 0);

    Opal.defn(self, '$dup', TMP_20 = function ːdup() {
      var self = this, copy = nil;

      copy = self.slice();
      copy.$initialize_dup(self);
      return copy;
    }, TMP_20.$$arity = 0);

    Opal.defn(self, '$count', TMP_21 = function ːcount($a_rest) {
      var self = this, sets;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      sets = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        sets[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      if (sets.length === 0) {
        self.$raise($scope.get('ArgumentError'), "ArgumentError: wrong number of arguments (0 for 1+)")
      }
      var char_class = char_class_from_char_sets(sets);
      if (char_class === null) {
        return 0;
      }
      return self.length - self.replace(new RegExp(char_class, 'g'), '').length;
    ;
    }, TMP_21.$$arity = -1);

    Opal.defn(self, '$delete', TMP_22 = function($a_rest) {
      var self = this, sets;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      sets = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        sets[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      if (sets.length === 0) {
        self.$raise($scope.get('ArgumentError'), "ArgumentError: wrong number of arguments (0 for 1+)")
      }
      var char_class = char_class_from_char_sets(sets);
      if (char_class === null) {
        return self;
      }
      return self.replace(new RegExp(char_class, 'g'), '');
    ;
    }, TMP_22.$$arity = -1);

    Opal.defn(self, '$downcase', TMP_23 = function ːdowncase() {
      var self = this;

      return self.toLowerCase();
    }, TMP_23.$$arity = 0);

    Opal.defn(self, '$each_char', TMP_24 = function ːeach_char() {
      var $a, $b, TMP_25, self = this, $iter = TMP_24.$$p, block = $iter || nil;

      TMP_24.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_25 = function(){var self = TMP_25.$$s || this;

        return self.$size()}, TMP_25.$$s = self, TMP_25.$$arity = 0, TMP_25), $a).call($b, "each_char")
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        Opal.yield1(block, self.charAt(i));
      }
    
      return self;
    }, TMP_24.$$arity = 0);

    Opal.defn(self, '$each_line', TMP_26 = function ːeach_line(separator) {
      var self = this, $iter = TMP_26.$$p, block = $iter || nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"];
      }
      TMP_26.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each_line", separator)
      };
      
      if (separator === nil) {
        Opal.yield1(block, self);

        return self;
      }

      separator = $scope.get('Opal').$coerce_to(separator, $scope.get('String'), "to_str")

      var a, i, n, length, chomped, trailing, splitted;

      if (separator.length === 0) {
        for (a = self.split(/(\n{2,})/), i = 0, n = a.length; i < n; i += 2) {
          if (a[i] || a[i + 1]) {
            Opal.yield1(block, (a[i] || "") + (a[i + 1] || ""));
          }
        }

        return self;
      }

      chomped  = self.$chomp(separator);
      trailing = self.length != chomped.length;
      splitted = chomped.split(separator);

      for (i = 0, length = splitted.length; i < length; i++) {
        if (i < length - 1 || trailing) {
          Opal.yield1(block, splitted[i] + separator);
        }
        else {
          Opal.yield1(block, splitted[i]);
        }
      }
    
      return self;
    }, TMP_26.$$arity = -1);

    Opal.defn(self, '$empty?', TMP_27 = function() {
      var self = this;

      return self.length === 0;
    }, TMP_27.$$arity = 0);

    Opal.defn(self, '$end_with?', TMP_28 = function($a_rest) {
      var self = this, suffixes;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      suffixes = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        suffixes[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      for (var i = 0, length = suffixes.length; i < length; i++) {
        var suffix = $scope.get('Opal').$coerce_to(suffixes[i], $scope.get('String'), "to_str").$to_s();

        if (self.length >= suffix.length &&
            self.substr(self.length - suffix.length, suffix.length) == suffix) {
          return true;
        }
      }
    
      return false;
    }, TMP_28.$$arity = -1);

    Opal.alias(self, 'eql?', '==');

    Opal.alias(self, 'equal?', '===');

    Opal.defn(self, '$gsub', TMP_29 = function ːgsub(pattern, replacement) {
      var self = this, $iter = TMP_29.$$p, block = $iter || nil;

      TMP_29.$$p = null;
      
      if (replacement === undefined && block === nil) {
        return self.$enum_for("gsub", pattern);
      }

      var result = '', match_data = nil, index = 0, match, _replacement;

      if (pattern.$$is_regexp) {
        pattern = new RegExp(pattern.source, 'gm' + (pattern.ignoreCase ? 'i' : ''));
      } else {
        pattern = $scope.get('Opal').$coerce_to(pattern, $scope.get('String'), "to_str");
        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gm');
      }

      while (true) {
        match = pattern.exec(self);

        if (match === null) {
          $gvars["~"] = nil
          result += self.slice(index);
          break;
        }

        match_data = $scope.get('MatchData').$new(pattern, match);

        if (replacement === undefined) {
          _replacement = block(match[0]);
        }
        else if (replacement.$$is_hash) {
          _replacement = (replacement)['$[]'](match[0]).$to_s();
        }
        else {
          if (!replacement.$$is_string) {
            replacement = $scope.get('Opal').$coerce_to(replacement, $scope.get('String'), "to_str");
          }
          _replacement = replacement.replace(/([\\]+)([0-9+&`'])/g, function (original, slashes, command) {
            if (slashes.length % 2 === 0) {
              return original;
            }
            switch (command) {
            case "+":
              for (var i = match.length - 1; i > 0; i--) {
                if (match[i] !== undefined) {
                  return slashes.slice(1) + match[i];
                }
              }
              return '';
            case "&": return slashes.slice(1) + match[0];
            case "`": return slashes.slice(1) + self.slice(0, match.index);
            case "'": return slashes.slice(1) + self.slice(match.index + match[0].length);
            default:  return slashes.slice(1) + (match[command] || '');
            }
          }).replace(/\\\\/g, '\\');
        }

        if (pattern.lastIndex === match.index) {
          result += (_replacement + self.slice(index, match.index + 1))
          pattern.lastIndex += 1;
        }
        else {
          result += (self.slice(index, match.index) + _replacement)
        }
        index = pattern.lastIndex;
      }

      $gvars["~"] = match_data
      return result;
    ;
    }, TMP_29.$$arity = -2);

    Opal.defn(self, '$hash', TMP_30 = function ːhash() {
      var self = this;

      return self.toString();
    }, TMP_30.$$arity = 0);

    Opal.defn(self, '$hex', TMP_31 = function ːhex() {
      var self = this;

      return self.$to_i(16);
    }, TMP_31.$$arity = 0);

    Opal.defn(self, '$include?', TMP_32 = function(other) {
      var self = this;

      
      if (!other.$$is_string) {
        other = $scope.get('Opal').$coerce_to(other, $scope.get('String'), "to_str")
      }
      return self.indexOf(other) !== -1;
    ;
    }, TMP_32.$$arity = 1);

    Opal.defn(self, '$index', TMP_33 = function ːindex(search, offset) {
      var self = this;

      
      var index,
          match,
          regex;

      if (offset === undefined) {
        offset = 0;
      } else {
        offset = $scope.get('Opal').$coerce_to(offset, $scope.get('Integer'), "to_int");
        if (offset < 0) {
          offset += self.length;
          if (offset < 0) {
            return nil;
          }
        }
      }

      if (search.$$is_regexp) {
        regex = new RegExp(search.source, 'gm' + (search.ignoreCase ? 'i' : ''));
        while (true) {
          match = regex.exec(self);
          if (match === null) {
            $gvars["~"] = nil;
            index = -1;
            break;
          }
          if (match.index >= offset) {
            $gvars["~"] = $scope.get('MatchData').$new(regex, match)
            index = match.index;
            break;
          }
          regex.lastIndex = match.index + 1;
        }
      } else {
        search = $scope.get('Opal').$coerce_to(search, $scope.get('String'), "to_str");
        if (search.length === 0 && offset > self.length) {
          index = -1;
        } else {
          index = self.indexOf(search, offset);
        }
      }

      return index === -1 ? nil : index;
    
    }, TMP_33.$$arity = -2);

    Opal.defn(self, '$inspect', TMP_34 = function ːinspect() {
      var self = this;

      
      var escapable = /[\\\"\x00-\x1f\x7f-\x9f\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
          meta = {
            '\u0007': '\\a',
            '\u001b': '\\e',
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '\v': '\\v',
            '"' : '\\"',
            '\\': '\\\\'
          },
          escaped = self.replace(escapable, function (chr) {
            return meta[chr] || '\\u' + ('0000' + chr.charCodeAt(0).toString(16).toUpperCase()).slice(-4);
          });
      return '"' + escaped.replace(/\#[\$\@\{]/g, '\\$&') + '"';
    
    }, TMP_34.$$arity = 0);

    Opal.defn(self, '$intern', TMP_35 = function ːintern() {
      var self = this;

      return self;
    }, TMP_35.$$arity = 0);

    Opal.defn(self, '$lines', TMP_36 = function ːlines(separator) {
      var $a, $b, self = this, $iter = TMP_36.$$p, block = $iter || nil, e = nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"];
      }
      TMP_36.$$p = null;
      e = ($a = ($b = self).$each_line, $a.$$p = block.$to_proc(), $a).call($b, separator);
      if (block !== false && block !== nil && block != null) {
        return self
        } else {
        return e.$to_a()
      };
    }, TMP_36.$$arity = -1);

    Opal.defn(self, '$length', TMP_37 = function ːlength() {
      var self = this;

      return self.length;
    }, TMP_37.$$arity = 0);

    Opal.defn(self, '$ljust', TMP_38 = function ːljust(width, padstr) {
      var $a, self = this;

      if (padstr == null) {
        padstr = " ";
      }
      width = $scope.get('Opal').$coerce_to(width, $scope.get('Integer'), "to_int");
      padstr = $scope.get('Opal').$coerce_to(padstr, $scope.get('String'), "to_str").$to_s();
      if ((($a = padstr['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "zero width padding")};
      if ((($a = width <= self.length) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self};
      
      var index  = -1,
          result = "";

      width -= self.length;

      while (++index < width) {
        result += padstr;
      }

      return self + result.slice(0, width);
    
    }, TMP_38.$$arity = -2);

    Opal.defn(self, '$lstrip', TMP_39 = function ːlstrip() {
      var self = this;

      return self.replace(/^\s*/, '');
    }, TMP_39.$$arity = 0);

    Opal.defn(self, '$match', TMP_40 = function ːmatch(pattern, pos) {
      var $a, $b, self = this, $iter = TMP_40.$$p, block = $iter || nil;

      TMP_40.$$p = null;
      if ((($a = ((($b = $scope.get('String')['$==='](pattern)) !== false && $b !== nil && $b != null) ? $b : pattern['$respond_to?']("to_str"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        pattern = $scope.get('Regexp').$new(pattern.$to_str())};
      if ((($a = $scope.get('Regexp')['$==='](pattern)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "wrong argument type " + (pattern.$class()) + " (expected Regexp)")
      };
      return ($a = ($b = pattern).$match, $a.$$p = block.$to_proc(), $a).call($b, self, pos);
    }, TMP_40.$$arity = -2);

    Opal.defn(self, '$next', TMP_41 = function ːnext() {
      var self = this;

      
      var i = self.length;
      if (i === 0) {
        return '';
      }
      var result = self;
      var first_alphanum_char_index = self.search(/[a-zA-Z0-9]/);
      var carry = false;
      var code;
      while (i--) {
        code = self.charCodeAt(i);
        if ((code >= 48 && code <= 57) ||
          (code >= 65 && code <= 90) ||
          (code >= 97 && code <= 122)) {
          switch (code) {
          case 57:
            carry = true;
            code = 48;
            break;
          case 90:
            carry = true;
            code = 65;
            break;
          case 122:
            carry = true;
            code = 97;
            break;
          default:
            carry = false;
            code += 1;
          }
        } else {
          if (first_alphanum_char_index === -1) {
            if (code === 255) {
              carry = true;
              code = 0;
            } else {
              carry = false;
              code += 1;
            }
          } else {
            carry = true;
          }
        }
        result = result.slice(0, i) + String.fromCharCode(code) + result.slice(i + 1);
        if (carry && (i === 0 || i === first_alphanum_char_index)) {
          switch (code) {
          case 65:
            break;
          case 97:
            break;
          default:
            code += 1;
          }
          if (i === 0) {
            result = String.fromCharCode(code) + result;
          } else {
            result = result.slice(0, i) + String.fromCharCode(code) + result.slice(i);
          }
          carry = false;
        }
        if (!carry) {
          break;
        }
      }
      return result;
    
    }, TMP_41.$$arity = 0);

    Opal.defn(self, '$oct', TMP_42 = function ːoct() {
      var self = this;

      
      var result,
          string = self,
          radix = 8;

      if (/^\s*_/.test(string)) {
        return 0;
      }

      string = string.replace(/^(\s*[+-]?)(0[bodx]?)(.+)$/i, function (original, head, flag, tail) {
        switch (tail.charAt(0)) {
        case '+':
        case '-':
          return original;
        case '0':
          if (tail.charAt(1) === 'x' && flag === '0x') {
            return original;
          }
        }
        switch (flag) {
        case '0b':
          radix = 2;
          break;
        case '0':
        case '0o':
          radix = 8;
          break;
        case '0d':
          radix = 10;
          break;
        case '0x':
          radix = 16;
          break;
        }
        return head + tail;
      });

      result = parseInt(string.replace(/_(?!_)/g, ''), radix);
      return isNaN(result) ? 0 : result;
    
    }, TMP_42.$$arity = 0);

    Opal.defn(self, '$ord', TMP_43 = function ːord() {
      var self = this;

      return self.charCodeAt(0);
    }, TMP_43.$$arity = 0);

    Opal.defn(self, '$partition', TMP_44 = function ːpartition(sep) {
      var self = this;

      
      var i, m;

      if (sep.$$is_regexp) {
        m = sep.exec(self);
        if (m === null) {
          i = -1;
        } else {
          $scope.get('MatchData').$new(sep, m);
          sep = m[0];
          i = m.index;
        }
      } else {
        sep = $scope.get('Opal').$coerce_to(sep, $scope.get('String'), "to_str");
        i = self.indexOf(sep);
      }

      if (i === -1) {
        return [self, '', ''];
      }

      return [
        self.slice(0, i),
        self.slice(i, i + sep.length),
        self.slice(i + sep.length)
      ];
    
    }, TMP_44.$$arity = 1);

    Opal.defn(self, '$reverse', TMP_45 = function ːreverse() {
      var self = this;

      return self.split('').reverse().join('');
    }, TMP_45.$$arity = 0);

    Opal.defn(self, '$rindex', TMP_46 = function ːrindex(search, offset) {
      var self = this;

      
      var i, m, r, _m;

      if (offset === undefined) {
        offset = self.length;
      } else {
        offset = $scope.get('Opal').$coerce_to(offset, $scope.get('Integer'), "to_int");
        if (offset < 0) {
          offset += self.length;
          if (offset < 0) {
            return nil;
          }
        }
      }

      if (search.$$is_regexp) {
        m = null;
        r = new RegExp(search.source, 'gm' + (search.ignoreCase ? 'i' : ''));
        while (true) {
          _m = r.exec(self);
          if (_m === null || _m.index > offset) {
            break;
          }
          m = _m;
          r.lastIndex = m.index + 1;
        }
        if (m === null) {
          $gvars["~"] = nil
          i = -1;
        } else {
          $scope.get('MatchData').$new(r, m);
          i = m.index;
        }
      } else {
        search = $scope.get('Opal').$coerce_to(search, $scope.get('String'), "to_str");
        i = self.lastIndexOf(search, offset);
      }

      return i === -1 ? nil : i;
    
    }, TMP_46.$$arity = -2);

    Opal.defn(self, '$rjust', TMP_47 = function ːrjust(width, padstr) {
      var $a, self = this;

      if (padstr == null) {
        padstr = " ";
      }
      width = $scope.get('Opal').$coerce_to(width, $scope.get('Integer'), "to_int");
      padstr = $scope.get('Opal').$coerce_to(padstr, $scope.get('String'), "to_str").$to_s();
      if ((($a = padstr['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "zero width padding")};
      if ((($a = width <= self.length) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self};
      
      var chars     = Math.floor(width - self.length),
          patterns  = Math.floor(chars / padstr.length),
          result    = Array(patterns + 1).join(padstr),
          remaining = chars - result.length;

      return result + padstr.slice(0, remaining) + self;
    
    }, TMP_47.$$arity = -2);

    Opal.defn(self, '$rpartition', TMP_48 = function ːrpartition(sep) {
      var self = this;

      
      var i, m, r, _m;

      if (sep.$$is_regexp) {
        m = null;
        r = new RegExp(sep.source, 'gm' + (sep.ignoreCase ? 'i' : ''));

        while (true) {
          _m = r.exec(self);
          if (_m === null) {
            break;
          }
          m = _m;
          r.lastIndex = m.index + 1;
        }

        if (m === null) {
          i = -1;
        } else {
          $scope.get('MatchData').$new(r, m);
          sep = m[0];
          i = m.index;
        }

      } else {
        sep = $scope.get('Opal').$coerce_to(sep, $scope.get('String'), "to_str");
        i = self.lastIndexOf(sep);
      }

      if (i === -1) {
        return ['', '', self];
      }

      return [
        self.slice(0, i),
        self.slice(i, i + sep.length),
        self.slice(i + sep.length)
      ];
    
    }, TMP_48.$$arity = 1);

    Opal.defn(self, '$rstrip', TMP_49 = function ːrstrip() {
      var self = this;

      return self.replace(/[\s\u0000]*$/, '');
    }, TMP_49.$$arity = 0);

    Opal.defn(self, '$scan', TMP_50 = function ːscan(pattern) {
      var self = this, $iter = TMP_50.$$p, block = $iter || nil;

      TMP_50.$$p = null;
      
      var result = [],
          match_data = nil,
          match;

      if (pattern.$$is_regexp) {
        pattern = new RegExp(pattern.source, 'gm' + (pattern.ignoreCase ? 'i' : ''));
      } else {
        pattern = $scope.get('Opal').$coerce_to(pattern, $scope.get('String'), "to_str");
        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gm');
      }

      while ((match = pattern.exec(self)) != null) {
        match_data = $scope.get('MatchData').$new(pattern, match);
        if (block === nil) {
          match.length == 1 ? result.push(match[0]) : result.push((match_data).$captures());
        } else {
          match.length == 1 ? block(match[0]) : block.call(self, (match_data).$captures());
        }
        if (pattern.lastIndex === match.index) {
          pattern.lastIndex += 1;
        }
      }

      $gvars["~"] = match_data

      return (block !== nil ? self : result);
    
    }, TMP_50.$$arity = 1);

    Opal.alias(self, 'size', 'length');

    Opal.alias(self, 'slice', '[]');

    Opal.defn(self, '$split', TMP_51 = function ːsplit(pattern, limit) {
      var $a, self = this;
      if ($gvars[";"] == null) $gvars[";"] = nil;

      
      if (self.length === 0) {
        return [];
      }

      if (limit === undefined) {
        limit = 0;
      } else {
        limit = $scope.get('Opal')['$coerce_to!'](limit, $scope.get('Integer'), "to_int");
        if (limit === 1) {
          return [self];
        }
      }

      if (pattern === undefined || pattern === nil) {
        pattern = ((($a = $gvars[";"]) !== false && $a !== nil && $a != null) ? $a : " ");
      }

      var result = [],
          string = self.toString(),
          index = 0,
          match,
          i;

      if (pattern.$$is_regexp) {
        pattern = new RegExp(pattern.source, 'gm' + (pattern.ignoreCase ? 'i' : ''));
      } else {
        pattern = $scope.get('Opal').$coerce_to(pattern, $scope.get('String'), "to_str").$to_s();
        if (pattern === ' ') {
          pattern = /\s+/gm;
          string = string.replace(/^\s+/, '');
        } else {
          pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gm');
        }
      }

      result = string.split(pattern);

      if (result.length === 1 && result[0] === string) {
        return result;
      }

      while ((i = result.indexOf(undefined)) !== -1) {
        result.splice(i, 1);
      }

      if (limit === 0) {
        while (result[result.length - 1] === '') {
          result.length -= 1;
        }
        return result;
      }

      match = pattern.exec(string);

      if (limit < 0) {
        if (match !== null && match[0] === '' && pattern.source.indexOf('(?=') === -1) {
          for (i = 0; i < match.length; i++) {
            result.push('');
          }
        }
        return result;
      }

      if (match !== null && match[0] === '') {
        result.splice(limit - 1, result.length - 1, result.slice(limit - 1).join(''));
        return result;
      }

      if (limit >= result.length) {
        return result;
      }

      i = 0;
      while (match !== null) {
        i++;
        index = pattern.lastIndex;
        if (i + 1 === limit) {
          break;
        }
        match = pattern.exec(string);
      }
      result.splice(limit - 1, result.length - 1, string.slice(index));
      return result;
    
    }, TMP_51.$$arity = -1);

    Opal.defn(self, '$squeeze', TMP_52 = function ːsqueeze($a_rest) {
      var self = this, sets;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      sets = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        sets[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      if (sets.length === 0) {
        return self.replace(/(.)\1+/g, '$1');
      }
      var char_class = char_class_from_char_sets(sets);
      if (char_class === null) {
        return self;
      }
      return self.replace(new RegExp('(' + char_class + ')\\1+', 'g'), '$1');
    
    }, TMP_52.$$arity = -1);

    Opal.defn(self, '$start_with?', TMP_53 = function($a_rest) {
      var self = this, prefixes;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      prefixes = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        prefixes[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      for (var i = 0, length = prefixes.length; i < length; i++) {
        var prefix = $scope.get('Opal').$coerce_to(prefixes[i], $scope.get('String'), "to_str").$to_s();

        if (self.indexOf(prefix) === 0) {
          return true;
        }
      }

      return false;
    
    }, TMP_53.$$arity = -1);

    Opal.defn(self, '$strip', TMP_54 = function ːstrip() {
      var self = this;

      return self.replace(/^\s*/, '').replace(/[\s\u0000]*$/, '');
    }, TMP_54.$$arity = 0);

    Opal.defn(self, '$sub', TMP_55 = function ːsub(pattern, replacement) {
      var self = this, $iter = TMP_55.$$p, block = $iter || nil;

      TMP_55.$$p = null;
      
      if (!pattern.$$is_regexp) {
        pattern = $scope.get('Opal').$coerce_to(pattern, $scope.get('String'), "to_str");
        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'));
      }

      var result = pattern.exec(self);

      if (result === null) {
        $gvars["~"] = nil
        return self.toString();
      }

      $scope.get('MatchData').$new(pattern, result)

      if (replacement === undefined) {
        if (block === nil) {
          self.$raise($scope.get('ArgumentError'), "wrong number of arguments (1 for 2)")
        }
        return self.slice(0, result.index) + block(result[0]) + self.slice(result.index + result[0].length);
      }

      if (replacement.$$is_hash) {
        return self.slice(0, result.index) + (replacement)['$[]'](result[0]).$to_s() + self.slice(result.index + result[0].length);
      }

      replacement = $scope.get('Opal').$coerce_to(replacement, $scope.get('String'), "to_str");

      replacement = replacement.replace(/([\\]+)([0-9+&`'])/g, function (original, slashes, command) {
        if (slashes.length % 2 === 0) {
          return original;
        }
        switch (command) {
        case "+":
          for (var i = result.length - 1; i > 0; i--) {
            if (result[i] !== undefined) {
              return slashes.slice(1) + result[i];
            }
          }
          return '';
        case "&": return slashes.slice(1) + result[0];
        case "`": return slashes.slice(1) + self.slice(0, result.index);
        case "'": return slashes.slice(1) + self.slice(result.index + result[0].length);
        default:  return slashes.slice(1) + (result[command] || '');
        }
      }).replace(/\\\\/g, '\\');

      return self.slice(0, result.index) + replacement + self.slice(result.index + result[0].length);
    ;
    }, TMP_55.$$arity = -2);

    Opal.alias(self, 'succ', 'next');

    Opal.defn(self, '$sum', TMP_56 = function ːsum(n) {
      var self = this;

      if (n == null) {
        n = 16;
      }
      
      n = $scope.get('Opal').$coerce_to(n, $scope.get('Integer'), "to_int");

      var result = 0,
          length = self.length,
          i = 0;

      for (; i < length; i++) {
        result += self.charCodeAt(i);
      }

      if (n <= 0) {
        return result;
      }

      return result & (Math.pow(2, n) - 1);
    ;
    }, TMP_56.$$arity = -1);

    Opal.defn(self, '$swapcase', TMP_57 = function ːswapcase() {
      var self = this;

      
      var str = self.replace(/([a-z]+)|([A-Z]+)/g, function($0,$1,$2) {
        return $1 ? $0.toUpperCase() : $0.toLowerCase();
      });

      if (self.constructor === String) {
        return str;
      }

      return self.$class().$new(str);
    
    }, TMP_57.$$arity = 0);

    Opal.defn(self, '$to_f', TMP_58 = function ːto_f() {
      var self = this;

      
      if (self.charAt(0) === '_') {
        return 0;
      }

      var result = parseFloat(self.replace(/_/g, ''));

      if (isNaN(result) || result == Infinity || result == -Infinity) {
        return 0;
      }
      else {
        return result;
      }
    
    }, TMP_58.$$arity = 0);

    Opal.defn(self, '$to_i', TMP_59 = function ːto_i(base) {
      var self = this;

      if (base == null) {
        base = 10;
      }
      
      var result,
          string = self.toLowerCase(),
          radix = $scope.get('Opal').$coerce_to(base, $scope.get('Integer'), "to_int");

      if (radix === 1 || radix < 0 || radix > 36) {
        self.$raise($scope.get('ArgumentError'), "invalid radix " + (radix))
      }

      if (/^\s*_/.test(string)) {
        return 0;
      }

      string = string.replace(/^(\s*[+-]?)(0[bodx]?)(.+)$/, function (original, head, flag, tail) {
        switch (tail.charAt(0)) {
        case '+':
        case '-':
          return original;
        case '0':
          if (tail.charAt(1) === 'x' && flag === '0x' && (radix === 0 || radix === 16)) {
            return original;
          }
        }
        switch (flag) {
        case '0b':
          if (radix === 0 || radix === 2) {
            radix = 2;
            return head + tail;
          }
          break;
        case '0':
        case '0o':
          if (radix === 0 || radix === 8) {
            radix = 8;
            return head + tail;
          }
          break;
        case '0d':
          if (radix === 0 || radix === 10) {
            radix = 10;
            return head + tail;
          }
          break;
        case '0x':
          if (radix === 0 || radix === 16) {
            radix = 16;
            return head + tail;
          }
          break;
        }
        return original
      });

      result = parseInt(string.replace(/_(?!_)/g, ''), radix);
      return isNaN(result) ? 0 : result;
    ;
    }, TMP_59.$$arity = -1);

    Opal.defn(self, '$to_proc', TMP_61 = function ːto_proc() {
      var $a, $b, TMP_60, self = this, sym = nil;

      sym = self;
      return ($a = ($b = self).$proc, $a.$$p = (TMP_60 = function($c_rest){var self = TMP_60.$$s || this, block, args, $d, $e, obj = nil;

        block = TMP_60.$$p || nil, TMP_60.$$p = null;
        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      if ((($d = args['$empty?']()) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          self.$raise($scope.get('ArgumentError'), "no receiver given")};
        obj = args.$shift();
        return ($d = ($e = obj).$__send__, $d.$$p = block.$to_proc(), $d).apply($e, [sym].concat(Opal.to_a(args)));}, TMP_60.$$s = self, TMP_60.$$arity = -1, TMP_60), $a).call($b);
    }, TMP_61.$$arity = 0);

    Opal.defn(self, '$to_s', TMP_62 = function ːto_s() {
      var self = this;

      return self.toString();
    }, TMP_62.$$arity = 0);

    Opal.alias(self, 'to_str', 'to_s');

    Opal.alias(self, 'to_sym', 'intern');

    Opal.defn(self, '$tr', TMP_63 = function ːtr(from, to) {
      var self = this;

      from = $scope.get('Opal').$coerce_to(from, $scope.get('String'), "to_str").$to_s();
      to = $scope.get('Opal').$coerce_to(to, $scope.get('String'), "to_str").$to_s();
      
      if (from.length == 0 || from === to) {
        return self;
      }

      var i, in_range, c, ch, start, end, length;
      var subs = {};
      var from_chars = from.split('');
      var from_length = from_chars.length;
      var to_chars = to.split('');
      var to_length = to_chars.length;

      var inverse = false;
      var global_sub = null;
      if (from_chars[0] === '^' && from_chars.length > 1) {
        inverse = true;
        from_chars.shift();
        global_sub = to_chars[to_length - 1]
        from_length -= 1;
      }

      var from_chars_expanded = [];
      var last_from = null;
      in_range = false;
      for (i = 0; i < from_length; i++) {
        ch = from_chars[i];
        if (last_from == null) {
          last_from = ch;
          from_chars_expanded.push(ch);
        }
        else if (ch === '-') {
          if (last_from === '-') {
            from_chars_expanded.push('-');
            from_chars_expanded.push('-');
          }
          else if (i == from_length - 1) {
            from_chars_expanded.push('-');
          }
          else {
            in_range = true;
          }
        }
        else if (in_range) {
          start = last_from.charCodeAt(0);
          end = ch.charCodeAt(0);
          if (start > end) {
            self.$raise($scope.get('ArgumentError'), "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
          }
          for (c = start + 1; c < end; c++) {
            from_chars_expanded.push(String.fromCharCode(c));
          }
          from_chars_expanded.push(ch);
          in_range = null;
          last_from = null;
        }
        else {
          from_chars_expanded.push(ch);
        }
      }

      from_chars = from_chars_expanded;
      from_length = from_chars.length;

      if (inverse) {
        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = true;
        }
      }
      else {
        if (to_length > 0) {
          var to_chars_expanded = [];
          var last_to = null;
          in_range = false;
          for (i = 0; i < to_length; i++) {
            ch = to_chars[i];
            if (last_to == null) {
              last_to = ch;
              to_chars_expanded.push(ch);
            }
            else if (ch === '-') {
              if (last_to === '-') {
                to_chars_expanded.push('-');
                to_chars_expanded.push('-');
              }
              else if (i == to_length - 1) {
                to_chars_expanded.push('-');
              }
              else {
                in_range = true;
              }
            }
            else if (in_range) {
              start = last_to.charCodeAt(0);
              end = ch.charCodeAt(0);
              if (start > end) {
                self.$raise($scope.get('ArgumentError'), "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
              }
              for (c = start + 1; c < end; c++) {
                to_chars_expanded.push(String.fromCharCode(c));
              }
              to_chars_expanded.push(ch);
              in_range = null;
              last_to = null;
            }
            else {
              to_chars_expanded.push(ch);
            }
          }

          to_chars = to_chars_expanded;
          to_length = to_chars.length;
        }

        var length_diff = from_length - to_length;
        if (length_diff > 0) {
          var pad_char = (to_length > 0 ? to_chars[to_length - 1] : '');
          for (i = 0; i < length_diff; i++) {
            to_chars.push(pad_char);
          }
        }

        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = to_chars[i];
        }
      }

      var new_str = ''
      for (i = 0, length = self.length; i < length; i++) {
        ch = self.charAt(i);
        var sub = subs[ch];
        if (inverse) {
          new_str += (sub == null ? global_sub : ch);
        }
        else {
          new_str += (sub != null ? sub : ch);
        }
      }
      return new_str;
    
    }, TMP_63.$$arity = 2);

    Opal.defn(self, '$tr_s', TMP_64 = function ːtr_s(from, to) {
      var self = this;

      from = $scope.get('Opal').$coerce_to(from, $scope.get('String'), "to_str").$to_s();
      to = $scope.get('Opal').$coerce_to(to, $scope.get('String'), "to_str").$to_s();
      
      if (from.length == 0) {
        return self;
      }

      var i, in_range, c, ch, start, end, length;
      var subs = {};
      var from_chars = from.split('');
      var from_length = from_chars.length;
      var to_chars = to.split('');
      var to_length = to_chars.length;

      var inverse = false;
      var global_sub = null;
      if (from_chars[0] === '^' && from_chars.length > 1) {
        inverse = true;
        from_chars.shift();
        global_sub = to_chars[to_length - 1]
        from_length -= 1;
      }

      var from_chars_expanded = [];
      var last_from = null;
      in_range = false;
      for (i = 0; i < from_length; i++) {
        ch = from_chars[i];
        if (last_from == null) {
          last_from = ch;
          from_chars_expanded.push(ch);
        }
        else if (ch === '-') {
          if (last_from === '-') {
            from_chars_expanded.push('-');
            from_chars_expanded.push('-');
          }
          else if (i == from_length - 1) {
            from_chars_expanded.push('-');
          }
          else {
            in_range = true;
          }
        }
        else if (in_range) {
          start = last_from.charCodeAt(0);
          end = ch.charCodeAt(0);
          if (start > end) {
            self.$raise($scope.get('ArgumentError'), "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
          }
          for (c = start + 1; c < end; c++) {
            from_chars_expanded.push(String.fromCharCode(c));
          }
          from_chars_expanded.push(ch);
          in_range = null;
          last_from = null;
        }
        else {
          from_chars_expanded.push(ch);
        }
      }

      from_chars = from_chars_expanded;
      from_length = from_chars.length;

      if (inverse) {
        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = true;
        }
      }
      else {
        if (to_length > 0) {
          var to_chars_expanded = [];
          var last_to = null;
          in_range = false;
          for (i = 0; i < to_length; i++) {
            ch = to_chars[i];
            if (last_from == null) {
              last_from = ch;
              to_chars_expanded.push(ch);
            }
            else if (ch === '-') {
              if (last_to === '-') {
                to_chars_expanded.push('-');
                to_chars_expanded.push('-');
              }
              else if (i == to_length - 1) {
                to_chars_expanded.push('-');
              }
              else {
                in_range = true;
              }
            }
            else if (in_range) {
              start = last_from.charCodeAt(0);
              end = ch.charCodeAt(0);
              if (start > end) {
                self.$raise($scope.get('ArgumentError'), "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
              }
              for (c = start + 1; c < end; c++) {
                to_chars_expanded.push(String.fromCharCode(c));
              }
              to_chars_expanded.push(ch);
              in_range = null;
              last_from = null;
            }
            else {
              to_chars_expanded.push(ch);
            }
          }

          to_chars = to_chars_expanded;
          to_length = to_chars.length;
        }

        var length_diff = from_length - to_length;
        if (length_diff > 0) {
          var pad_char = (to_length > 0 ? to_chars[to_length - 1] : '');
          for (i = 0; i < length_diff; i++) {
            to_chars.push(pad_char);
          }
        }

        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = to_chars[i];
        }
      }
      var new_str = ''
      var last_substitute = null
      for (i = 0, length = self.length; i < length; i++) {
        ch = self.charAt(i);
        var sub = subs[ch]
        if (inverse) {
          if (sub == null) {
            if (last_substitute == null) {
              new_str += global_sub;
              last_substitute = true;
            }
          }
          else {
            new_str += ch;
            last_substitute = null;
          }
        }
        else {
          if (sub != null) {
            if (last_substitute == null || last_substitute !== sub) {
              new_str += sub;
              last_substitute = sub;
            }
          }
          else {
            new_str += ch;
            last_substitute = null;
          }
        }
      }
      return new_str;
    
    }, TMP_64.$$arity = 2);

    Opal.defn(self, '$upcase', TMP_65 = function ːupcase() {
      var self = this;

      return self.toUpperCase();
    }, TMP_65.$$arity = 0);

    Opal.defn(self, '$upto', TMP_66 = function ːupto(stop, excl) {
      var self = this, $iter = TMP_66.$$p, block = $iter || nil;

      if (excl == null) {
        excl = false;
      }
      TMP_66.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("upto", stop, excl)
      };
      stop = $scope.get('Opal').$coerce_to(stop, $scope.get('String'), "to_str");
      
      var a, b, s = self.toString();

      if (s.length === 1 && stop.length === 1) {

        a = s.charCodeAt(0);
        b = stop.charCodeAt(0);

        while (a <= b) {
          if (excl && a === b) {
            break;
          }

          block(String.fromCharCode(a));

          a += 1;
        }

      } else if (parseInt(s, 10).toString() === s && parseInt(stop, 10).toString() === stop) {

        a = parseInt(s, 10);
        b = parseInt(stop, 10);

        while (a <= b) {
          if (excl && a === b) {
            break;
          }

          block(a.toString());

          a += 1;
        }

      } else {

        while (s.length <= stop.length && s <= stop) {
          if (excl && s === stop) {
            break;
          }

          block(s);

          s = (s).$succ();
        }

      }
      return self;
    
    }, TMP_66.$$arity = -2);

    
    function char_class_from_char_sets(sets) {
      function explode_sequences_in_character_set(set) {
        var result = '',
            i, len = set.length,
            curr_char,
            skip_next_dash,
            char_code_from,
            char_code_upto,
            char_code;
        for (i = 0; i < len; i++) {
          curr_char = set.charAt(i);
          if (curr_char === '-' && i > 0 && i < (len - 1) && !skip_next_dash) {
            char_code_from = set.charCodeAt(i - 1);
            char_code_upto = set.charCodeAt(i + 1);
            if (char_code_from > char_code_upto) {
              self.$raise($scope.get('ArgumentError'), "invalid range \"" + (char_code_from) + "-" + (char_code_upto) + "\" in string transliteration")
            }
            for (char_code = char_code_from + 1; char_code < char_code_upto + 1; char_code++) {
              result += String.fromCharCode(char_code);
            }
            skip_next_dash = true;
            i++;
          } else {
            skip_next_dash = (curr_char === '\\');
            result += curr_char;
          }
        }
        return result;
      }

      function intersection(setA, setB) {
        if (setA.length === 0) {
          return setB;
        }
        var result = '',
            i, len = setA.length,
            chr;
        for (i = 0; i < len; i++) {
          chr = setA.charAt(i);
          if (setB.indexOf(chr) !== -1) {
            result += chr;
          }
        }
        return result;
      }

      var i, len, set, neg, chr, tmp,
          pos_intersection = '',
          neg_intersection = '';

      for (i = 0, len = sets.length; i < len; i++) {
        set = $scope.get('Opal').$coerce_to(sets[i], $scope.get('String'), "to_str");
        neg = (set.charAt(0) === '^' && set.length > 1);
        set = explode_sequences_in_character_set(neg ? set.slice(1) : set);
        if (neg) {
          neg_intersection = intersection(neg_intersection, set);
        } else {
          pos_intersection = intersection(pos_intersection, set);
        }
      }

      if (pos_intersection.length > 0 && neg_intersection.length > 0) {
        tmp = '';
        for (i = 0, len = pos_intersection.length; i < len; i++) {
          chr = pos_intersection.charAt(i);
          if (neg_intersection.indexOf(chr) === -1) {
            tmp += chr;
          }
        }
        pos_intersection = tmp;
        neg_intersection = '';
      }

      if (pos_intersection.length > 0) {
        return '[' + $scope.get('Regexp').$escape(pos_intersection) + ']';
      }

      if (neg_intersection.length > 0) {
        return '[^' + $scope.get('Regexp').$escape(neg_intersection) + ']';
      }

      return null;
    }
  

    Opal.defn(self, '$instance_variables', TMP_67 = function ːinstance_variables() {
      var self = this;

      return [];
    }, TMP_67.$$arity = 0);

    return (Opal.defs(self, '$_load', TMP_68 = function ː_load($a_rest) {
      var $b, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return ($b = self).$new.apply($b, Opal.to_a(args));
    }, TMP_68.$$arity = -1), nil) && '_load';
  })($scope.base, String);
  return Opal.cdecl($scope, 'Symbol', $scope.get('String'));
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["corelib/enumerable"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$each', '$destructure', '$raise', '$new', '$yield', '$dup', '$enum_for', '$enumerator_size', '$flatten', '$map', '$proc', '$==', '$nil?', '$respond_to?', '$coerce_to!', '$>', '$*', '$coerce_to', '$try_convert', '$<', '$+', '$-', '$to_enum', '$ceil', '$/', '$size', '$===', '$<<', '$[]', '$[]=', '$inspect', '$__send__', '$<=>', '$first', '$reverse', '$sort', '$to_proc', '$compare', '$call', '$to_a', '$lambda', '$sort!', '$map!', '$zip']);
  return (function($base) {
    var $Enumerable, self = $Enumerable = $module($base, 'Enumerable');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_4, TMP_7, TMP_10, TMP_12, TMP_15, TMP_19, TMP_21, TMP_23, TMP_24, TMP_25, TMP_27, TMP_29, TMP_31, TMP_33, TMP_35, TMP_36, TMP_38, TMP_43, TMP_44, TMP_45, TMP_48, TMP_49, TMP_51, TMP_52, TMP_53, TMP_54, TMP_56, TMP_57, TMP_59, TMP_61, TMP_62, TMP_65, TMP_68, TMP_70, TMP_72, TMP_74, TMP_76, TMP_78, TMP_83, TMP_84, TMP_86;

    Opal.defn(self, '$all?', TMP_1 = function() {try {

      var $a, $b, TMP_2, $c, TMP_3, self = this, $iter = TMP_1.$$p, block = $iter || nil;

      TMP_1.$$p = null;
      if ((block !== nil)) {
        ($a = ($b = self).$each, $a.$$p = (TMP_2 = function($c_rest){var self = TMP_2.$$s || this, value, $d;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ((($d = Opal.yieldX(block, Opal.to_a(value))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            return nil
            } else {
            Opal.ret(false)
          }}, TMP_2.$$s = self, TMP_2.$$arity = -1, TMP_2), $a).call($b)
        } else {
        ($a = ($c = self).$each, $a.$$p = (TMP_3 = function($d_rest){var self = TMP_3.$$s || this, value, $e;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ((($e = $scope.get('Opal').$destructure(value)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            return nil
            } else {
            Opal.ret(false)
          }}, TMP_3.$$s = self, TMP_3.$$arity = -1, TMP_3), $a).call($c)
      };
      return true;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$any?', TMP_4 = function() {try {

      var $a, $b, TMP_5, $c, TMP_6, self = this, $iter = TMP_4.$$p, block = $iter || nil;

      TMP_4.$$p = null;
      if ((block !== nil)) {
        ($a = ($b = self).$each, $a.$$p = (TMP_5 = function($c_rest){var self = TMP_5.$$s || this, value, $d;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ((($d = Opal.yieldX(block, Opal.to_a(value))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            Opal.ret(true)
            } else {
            return nil
          }}, TMP_5.$$s = self, TMP_5.$$arity = -1, TMP_5), $a).call($b)
        } else {
        ($a = ($c = self).$each, $a.$$p = (TMP_6 = function($d_rest){var self = TMP_6.$$s || this, value, $e;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ((($e = $scope.get('Opal').$destructure(value)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            Opal.ret(true)
            } else {
            return nil
          }}, TMP_6.$$s = self, TMP_6.$$arity = -1, TMP_6), $a).call($c)
      };
      return false;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$chunk', TMP_7 = function ːchunk(state) {
      var $a, $b, TMP_8, self = this, $iter = TMP_7.$$p, original_block = $iter || nil;

      TMP_7.$$p = null;
      if (original_block !== false && original_block !== nil && original_block != null) {
        } else {
        $scope.get('Kernel').$raise($scope.get('ArgumentError'), "no block given")
      };
      return ($a = ($b = Opal.get('Enumerator')).$new, $a.$$p = (TMP_8 = function(yielder){var self = TMP_8.$$s || this, $c, $d, TMP_9;
if (yielder == null) yielder = nil;
      
        var block, previous = nil, accumulate = [];

        if (state == undefined || state === nil) {
          block = original_block;
        } else {
          block = ($c = ($d = $scope.get('Proc')).$new, $c.$$p = (TMP_9 = function(val){var self = TMP_9.$$s || this;
if (val == null) val = nil;
        return original_block.$yield(val, state.$dup())}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $c).call($d)
        }

        function releaseAccumulate() {
          if (accumulate.length > 0) {
            yielder.$yield(previous, accumulate)
          }
        }

        self.$each.$$p = function(value) {
          var key = Opal.yield1(block, value);

          if (key === nil) {
            releaseAccumulate();
            accumulate = [];
            previous = nil;
          } else {
            if (previous === nil || previous === key) {
              accumulate.push(value);
            } else {
              releaseAccumulate();
              accumulate = [value];
            }

            previous = key;
          }
        }

        self.$each();

        releaseAccumulate();
      ;}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $a).call($b);
    }, TMP_7.$$arity = -1);

    Opal.defn(self, '$collect', TMP_10 = function ːcollect() {
      var $a, $b, TMP_11, self = this, $iter = TMP_10.$$p, block = $iter || nil;

      TMP_10.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

        return self.$enumerator_size()}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $a).call($b, "collect")
      };
      
      var result = [];

      self.$each.$$p = function() {
        var value = Opal.yieldX(block, arguments);

        result.push(value);
      };

      self.$each();

      return result;
    
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$collect_concat', TMP_12 = function ːcollect_concat() {
      var $a, $b, TMP_13, $c, TMP_14, self = this, $iter = TMP_12.$$p, block = $iter || nil;

      TMP_12.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;

        return self.$enumerator_size()}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $a).call($b, "collect_concat")
      };
      return ($a = ($c = self).$map, $a.$$p = (TMP_14 = function(item){var self = TMP_14.$$s || this;
if (item == null) item = nil;
      return Opal.yield1(block, item);}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($c).$flatten(1);
    }, TMP_12.$$arity = 0);

    Opal.defn(self, '$count', TMP_15 = function ːcount(object) {
      var $a, $b, TMP_16, $c, TMP_17, $d, TMP_18, self = this, $iter = TMP_15.$$p, block = $iter || nil, result = nil;

      TMP_15.$$p = null;
      result = 0;
      if ((($a = object != null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        block = ($a = ($b = self).$proc, $a.$$p = (TMP_16 = function($c_rest){var self = TMP_16.$$s || this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
        return $scope.get('Opal').$destructure(args)['$=='](object)}, TMP_16.$$s = self, TMP_16.$$arity = -1, TMP_16), $a).call($b)
      } else if ((($a = block['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        block = ($a = ($c = self).$proc, $a.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this;

        return true}, TMP_17.$$s = self, TMP_17.$$arity = 0, TMP_17), $a).call($c)};
      ($a = ($d = self).$each, $a.$$p = (TMP_18 = function($e_rest){var self = TMP_18.$$s || this, args, $f;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      if ((($f = Opal.yieldX(block, args)) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
          return result++;
          } else {
          return nil
        }}, TMP_18.$$s = self, TMP_18.$$arity = -1, TMP_18), $a).call($d);
      return result;
    }, TMP_15.$$arity = -1);

    Opal.defn(self, '$cycle', TMP_19 = function ːcycle(n) {
      var $a, $b, TMP_20, self = this, $iter = TMP_19.$$p, block = $iter || nil;

      if (n == null) {
        n = nil;
      }
      TMP_19.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_20 = function(){var self = TMP_20.$$s || this, $c;

        if (n['$=='](nil)) {
            if ((($c = self['$respond_to?']("size")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return (($scope.get('Float')).$$scope.get('INFINITY'))
              } else {
              return nil
            }
            } else {
            n = $scope.get('Opal')['$coerce_to!'](n, $scope.get('Integer'), "to_int");
            if ((($c = $rb_gt(n, 0)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return $rb_times(self.$enumerator_size(), n)
              } else {
              return 0
            };
          }}, TMP_20.$$s = self, TMP_20.$$arity = 0, TMP_20), $a).call($b, "cycle", n)
      };
      if ((($a = n['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        n = $scope.get('Opal')['$coerce_to!'](n, $scope.get('Integer'), "to_int");
        if ((($a = n <= 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil};
      };
      
      var result,
          all = [], i, length, value;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        all.push(param);
      }

      self.$each();

      if (result !== undefined) {
        return result;
      }

      if (all.length === 0) {
        return nil;
      }

      if (n === nil) {
        while (true) {
          for (i = 0, length = all.length; i < length; i++) {
            value = Opal.yield1(block, all[i]);
          }
        }
      }
      else {
        while (n > 1) {
          for (i = 0, length = all.length; i < length; i++) {
            value = Opal.yield1(block, all[i]);
          }

          n--;
        }
      }
    
    }, TMP_19.$$arity = -1);

    Opal.defn(self, '$detect', TMP_21 = function ːdetect(ifnone) {try {

      var $a, $b, TMP_22, self = this, $iter = TMP_21.$$p, block = $iter || nil;

      TMP_21.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("detect", ifnone)
      };
      ($a = ($b = self).$each, $a.$$p = (TMP_22 = function($c_rest){var self = TMP_22.$$s || this, args, $d, value = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      value = $scope.get('Opal').$destructure(args);
        if ((($d = Opal.yield1(block, value)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          Opal.ret(value)
          } else {
          return nil
        };}, TMP_22.$$s = self, TMP_22.$$arity = -1, TMP_22), $a).call($b);
      
      if (ifnone !== undefined) {
        if (typeof(ifnone) === 'function') {
          return ifnone();
        } else {
          return ifnone;
        }
      }
    
      return nil;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_21.$$arity = -1);

    Opal.defn(self, '$drop', TMP_23 = function ːdrop(number) {
      var $a, self = this;

      number = $scope.get('Opal').$coerce_to(number, $scope.get('Integer'), "to_int");
      if ((($a = number < 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "attempt to drop negative size")};
      
      var result  = [],
          current = 0;

      self.$each.$$p = function() {
        if (number <= current) {
          result.push($scope.get('Opal').$destructure(arguments));
        }

        current++;
      };

      self.$each()

      return result;
    
    }, TMP_23.$$arity = 1);

    Opal.defn(self, '$drop_while', TMP_24 = function ːdrop_while() {
      var $a, self = this, $iter = TMP_24.$$p, block = $iter || nil;

      TMP_24.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("drop_while")
      };
      
      var result   = [],
          dropping = true;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments);

        if (dropping) {
          var value = Opal.yield1(block, param);

          if ((($a = value) === nil || $a == null || ($a.$$is_boolean && $a == false))) {
            dropping = false;
            result.push(param);
          }
        }
        else {
          result.push(param);
        }
      };

      self.$each();

      return result;
    
    }, TMP_24.$$arity = 0);

    Opal.defn(self, '$each_cons', TMP_25 = function ːeach_cons(n) {
      var $a, $b, TMP_26, self = this, $iter = TMP_25.$$p, block = $iter || nil;

      TMP_25.$$p = null;
      if ((($a = arguments.length != 1) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (arguments.length) + " for 1)")};
      n = $scope.get('Opal').$try_convert(n, $scope.get('Integer'), "to_int");
      if ((($a = n <= 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "invalid size")};
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_26 = function(){var self = TMP_26.$$s || this, $c, $d, enum_size = nil;

        enum_size = self.$enumerator_size();
          if ((($c = enum_size['$nil?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return nil
          } else if ((($c = ((($d = enum_size['$=='](0)) !== false && $d !== nil && $d != null) ? $d : $rb_lt(enum_size, n))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return 0
            } else {
            return $rb_plus($rb_minus(enum_size, n), 1)
          };}, TMP_26.$$s = self, TMP_26.$$arity = 0, TMP_26), $a).call($b, "each_cons", n)
      };
      
      var buffer = [], result = nil;

      self.$each.$$p = function() {
        var element = $scope.get('Opal').$destructure(arguments);
        buffer.push(element);
        if (buffer.length > n) {
          buffer.shift();
        }
        if (buffer.length == n) {
          Opal.yield1(block, buffer.slice(0, n));
        }
      }

      self.$each();

      return result;
    
    }, TMP_25.$$arity = 1);

    Opal.defn(self, '$each_entry', TMP_27 = function ːeach_entry($a_rest) {
      var $b, $c, TMP_28, self = this, data, $iter = TMP_27.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      data = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        data[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_27.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($b = ($c = self).$to_enum, $b.$$p = (TMP_28 = function(){var self = TMP_28.$$s || this;

        return self.$enumerator_size()}, TMP_28.$$s = self, TMP_28.$$arity = 0, TMP_28), $b).apply($c, ["each_entry"].concat(Opal.to_a(data)))
      };
      
      self.$each.$$p = function() {
        var item = $scope.get('Opal').$destructure(arguments);

        Opal.yield1(block, item);
      }

      self.$each.apply(self, data);

      return self;
    ;
    }, TMP_27.$$arity = -1);

    Opal.defn(self, '$each_slice', TMP_29 = function ːeach_slice(n) {
      var $a, $b, TMP_30, self = this, $iter = TMP_29.$$p, block = $iter || nil;

      TMP_29.$$p = null;
      n = $scope.get('Opal').$coerce_to(n, $scope.get('Integer'), "to_int");
      if ((($a = n <= 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "invalid slice size")};
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_30 = function(){var self = TMP_30.$$s || this, $c;

        if ((($c = self['$respond_to?']("size")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return ($rb_divide(self.$size(), n)).$ceil()
            } else {
            return nil
          }}, TMP_30.$$s = self, TMP_30.$$arity = 0, TMP_30), $a).call($b, "each_slice", n)
      };
      
      var result,
          slice = []

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments);

        slice.push(param);

        if (slice.length === n) {
          Opal.yield1(block, slice);
          slice = [];
        }
      };

      self.$each();

      if (result !== undefined) {
        return result;
      }

      // our "last" group, if smaller than n then won't have been yielded
      if (slice.length > 0) {
        Opal.yield1(block, slice);
      }
    ;
      return nil;
    }, TMP_29.$$arity = 1);

    Opal.defn(self, '$each_with_index', TMP_31 = function ːeach_with_index($a_rest) {
      var $b, $c, TMP_32, self = this, args, $iter = TMP_31.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_31.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($b = ($c = self).$enum_for, $b.$$p = (TMP_32 = function(){var self = TMP_32.$$s || this;

        return self.$enumerator_size()}, TMP_32.$$s = self, TMP_32.$$arity = 0, TMP_32), $b).apply($c, ["each_with_index"].concat(Opal.to_a(args)))
      };
      
      var result,
          index = 0;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments);

        block(param, index);

        index++;
      };

      self.$each.apply(self, args);

      if (result !== undefined) {
        return result;
      }
    
      return self;
    }, TMP_31.$$arity = -1);

    Opal.defn(self, '$each_with_object', TMP_33 = function ːeach_with_object(object) {
      var $a, $b, TMP_34, self = this, $iter = TMP_33.$$p, block = $iter || nil;

      TMP_33.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_34 = function(){var self = TMP_34.$$s || this;

        return self.$enumerator_size()}, TMP_34.$$s = self, TMP_34.$$arity = 0, TMP_34), $a).call($b, "each_with_object", object)
      };
      
      var result;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments);

        block(param, object);
      };

      self.$each();

      if (result !== undefined) {
        return result;
      }
    
      return object;
    }, TMP_33.$$arity = 1);

    Opal.defn(self, '$entries', TMP_35 = function ːentries($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var result = [];

      self.$each.$$p = function() {
        result.push($scope.get('Opal').$destructure(arguments));
      };

      self.$each.apply(self, args);

      return result;
    
    }, TMP_35.$$arity = -1);

    Opal.alias(self, 'find', 'detect');

    Opal.defn(self, '$find_all', TMP_36 = function ːfind_all() {
      var $a, $b, TMP_37, self = this, $iter = TMP_36.$$p, block = $iter || nil;

      TMP_36.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_37 = function(){var self = TMP_37.$$s || this;

        return self.$enumerator_size()}, TMP_37.$$s = self, TMP_37.$$arity = 0, TMP_37), $a).call($b, "find_all")
      };
      
      var result = [];

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if ((($a = value) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result.push(param);
        }
      };

      self.$each();

      return result;
    
    }, TMP_36.$$arity = 0);

    Opal.defn(self, '$find_index', TMP_38 = function ːfind_index(object) {try {

      var $a, $b, TMP_39, $c, TMP_40, self = this, $iter = TMP_38.$$p, block = $iter || nil, index = nil;

      TMP_38.$$p = null;
      if ((($a = object === undefined && block === nil) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$enum_for("find_index")};
      index = 0;
      if ((($a = object != null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        ($a = ($b = self).$each, $a.$$p = (TMP_39 = function($c_rest){var self = TMP_39.$$s || this, value;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ($scope.get('Opal').$destructure(value)['$=='](object)) {
            Opal.ret(index)};
          return index += 1;}, TMP_39.$$s = self, TMP_39.$$arity = -1, TMP_39), $a).call($b)
        } else {
        ($a = ($c = self).$each, $a.$$p = (TMP_40 = function($d_rest){var self = TMP_40.$$s || this, value, $e;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ((($e = Opal.yieldX(block, Opal.to_a(value))) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            Opal.ret(index)};
          return index += 1;}, TMP_40.$$s = self, TMP_40.$$arity = -1, TMP_40), $a).call($c)
      };
      return nil;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_38.$$arity = -1);

    Opal.defn(self, '$first', TMP_43 = function ːfirst(number) {try {

      var $a, $b, TMP_41, $c, TMP_42, self = this, result = nil, current = nil;

      if ((($a = number === undefined) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = self).$each, $a.$$p = (TMP_41 = function(value){var self = TMP_41.$$s || this;
if (value == null) value = nil;
        Opal.ret(value)}, TMP_41.$$s = self, TMP_41.$$arity = 1, TMP_41), $a).call($b)
        } else {
        result = [];
        number = $scope.get('Opal').$coerce_to(number, $scope.get('Integer'), "to_int");
        if ((($a = number < 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('ArgumentError'), "attempt to take negative size")};
        if ((($a = number == 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return []};
        current = 0;
        ($a = ($c = self).$each, $a.$$p = (TMP_42 = function($d_rest){var self = TMP_42.$$s || this, args, $e;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
        result.push($scope.get('Opal').$destructure(args));
          if ((($e = number <= ++current) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            Opal.ret(result)
            } else {
            return nil
          };}, TMP_42.$$s = self, TMP_42.$$arity = -1, TMP_42), $a).call($c);
        return result;
      };
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_43.$$arity = -1);

    Opal.alias(self, 'flat_map', 'collect_concat');

    Opal.defn(self, '$grep', TMP_44 = function ːgrep(pattern) {
      var $a, self = this, $iter = TMP_44.$$p, block = $iter || nil;

      TMP_44.$$p = null;
      
      var result = [];

      if (block !== nil) {
        self.$each.$$p = function() {
          var param = $scope.get('Opal').$destructure(arguments),
              value = pattern['$==='](param);

          if ((($a = value) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            value = Opal.yield1(block, param);

            result.push(value);
          }
        };
      }
      else {
        self.$each.$$p = function() {
          var param = $scope.get('Opal').$destructure(arguments),
              value = pattern['$==='](param);

          if ((($a = value) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result.push(param);
          }
        };
      }

      self.$each();

      return result;
    ;
    }, TMP_44.$$arity = 1);

    Opal.defn(self, '$group_by', TMP_45 = function ːgroup_by() {
      var $a, $b, TMP_46, $c, $d, self = this, $iter = TMP_45.$$p, block = $iter || nil, hash = nil;

      TMP_45.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_46 = function(){var self = TMP_46.$$s || this;

        return self.$enumerator_size()}, TMP_46.$$s = self, TMP_46.$$arity = 0, TMP_46), $a).call($b, "group_by")
      };
      hash = $scope.get('Hash').$new();
      
      var result;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        (($a = value, $c = hash, ((($d = $c['$[]']($a)) !== false && $d !== nil && $d != null) ? $d : $c['$[]=']($a, []))))['$<<'](param);
      }

      self.$each();

      if (result !== undefined) {
        return result;
      }
    
      return hash;
    }, TMP_45.$$arity = 0);

    Opal.defn(self, '$include?', TMP_48 = function(obj) {try {

      var $a, $b, TMP_47, self = this;

      ($a = ($b = self).$each, $a.$$p = (TMP_47 = function($c_rest){var self = TMP_47.$$s || this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      if ($scope.get('Opal').$destructure(args)['$=='](obj)) {
          Opal.ret(true)
          } else {
          return nil
        }}, TMP_47.$$s = self, TMP_47.$$arity = -1, TMP_47), $a).call($b);
      return false;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_48.$$arity = 1);

    Opal.defn(self, '$inject', TMP_49 = function ːinject(object, sym) {
      var self = this, $iter = TMP_49.$$p, block = $iter || nil;

      TMP_49.$$p = null;
      
      var result = object;

      if (block !== nil && sym === undefined) {
        self.$each.$$p = function() {
          var value = $scope.get('Opal').$destructure(arguments);

          if (result === undefined) {
            result = value;
            return;
          }

          value = Opal.yieldX(block, [result, value]);

          result = value;
        };
      }
      else {
        if (sym === undefined) {
          if (!$scope.get('Symbol')['$==='](object)) {
            self.$raise($scope.get('TypeError'), "" + (object.$inspect()) + " is not a Symbol");
          }

          sym    = object;
          result = undefined;
        }

        self.$each.$$p = function() {
          var value = $scope.get('Opal').$destructure(arguments);

          if (result === undefined) {
            result = value;
            return;
          }

          result = (result).$__send__(sym, value);
        };
      }

      self.$each();

      return result == undefined ? nil : result;
    ;
    }, TMP_49.$$arity = -1);

    Opal.defn(self, '$lazy', TMP_51 = function ːlazy() {
      var $a, $b, TMP_50, self = this;

      return ($a = ($b = (($scope.get('Enumerator')).$$scope.get('Lazy'))).$new, $a.$$p = (TMP_50 = function(enum$, $c_rest){var self = TMP_50.$$s || this, args, $d;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }if (enum$ == null) enum$ = nil;
      return ($d = enum$).$yield.apply($d, Opal.to_a(args))}, TMP_50.$$s = self, TMP_50.$$arity = -2, TMP_50), $a).call($b, self, self.$enumerator_size());
    }, TMP_51.$$arity = 0);

    Opal.defn(self, '$enumerator_size', TMP_52 = function ːenumerator_size() {
      var $a, self = this;

      if ((($a = self['$respond_to?']("size")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$size()
        } else {
        return nil
      };
    }, TMP_52.$$arity = 0);

    Opal.alias(self, 'map', 'collect');

    Opal.defn(self, '$max', TMP_53 = function ːmax(n) {
      var $a, $b, self = this, $iter = TMP_53.$$p, block = $iter || nil;

      TMP_53.$$p = null;
      
      if (n === undefined || n === nil) {
        var result, value;

        self.$each.$$p = function() {
          var item = $scope.get('Opal').$destructure(arguments);

          if (result === undefined) {
            result = item;
            return;
          }

          if (block !== nil) {
            value = Opal.yieldX(block, [item, result]);
          } else {
            value = (item)['$<=>'](result);
          }

          if (value === nil) {
            self.$raise($scope.get('ArgumentError'), "comparison failed");
          }

          if (value > 0) {
            result = item;
          }
        }

        self.$each();

        if (result === undefined) {
          return nil;
        } else {
          return result;
        }
      }
    
      n = $scope.get('Opal').$coerce_to(n, $scope.get('Integer'), "to_int");
      return ($a = ($b = self).$sort, $a.$$p = block.$to_proc(), $a).call($b).$reverse().$first(n);
    }, TMP_53.$$arity = -1);

    Opal.defn(self, '$max_by', TMP_54 = function ːmax_by() {
      var $a, $b, TMP_55, self = this, $iter = TMP_54.$$p, block = $iter || nil;

      TMP_54.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_55 = function(){var self = TMP_55.$$s || this;

        return self.$enumerator_size()}, TMP_55.$$s = self, TMP_55.$$arity = 0, TMP_55), $a).call($b, "max_by")
      };
      
      var result,
          by;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if (result === undefined) {
          result = param;
          by     = value;
          return;
        }

        if ((value)['$<=>'](by) > 0) {
          result = param
          by     = value;
        }
      };

      self.$each();

      return result === undefined ? nil : result;
    
    }, TMP_54.$$arity = 0);

    Opal.alias(self, 'member?', 'include?');

    Opal.defn(self, '$min', TMP_56 = function ːmin() {
      var self = this, $iter = TMP_56.$$p, block = $iter || nil;

      TMP_56.$$p = null;
      
      var result;

      if (block !== nil) {
        self.$each.$$p = function() {
          var param = $scope.get('Opal').$destructure(arguments);

          if (result === undefined) {
            result = param;
            return;
          }

          var value = block(param, result);

          if (value === nil) {
            self.$raise($scope.get('ArgumentError'), "comparison failed");
          }

          if (value < 0) {
            result = param;
          }
        };
      }
      else {
        self.$each.$$p = function() {
          var param = $scope.get('Opal').$destructure(arguments);

          if (result === undefined) {
            result = param;
            return;
          }

          if ($scope.get('Opal').$compare(param, result) < 0) {
            result = param;
          }
        };
      }

      self.$each();

      return result === undefined ? nil : result;
    
    }, TMP_56.$$arity = 0);

    Opal.defn(self, '$min_by', TMP_57 = function ːmin_by() {
      var $a, $b, TMP_58, self = this, $iter = TMP_57.$$p, block = $iter || nil;

      TMP_57.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_58 = function(){var self = TMP_58.$$s || this;

        return self.$enumerator_size()}, TMP_58.$$s = self, TMP_58.$$arity = 0, TMP_58), $a).call($b, "min_by")
      };
      
      var result,
          by;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if (result === undefined) {
          result = param;
          by     = value;
          return;
        }

        if ((value)['$<=>'](by) < 0) {
          result = param
          by     = value;
        }
      };

      self.$each();

      return result === undefined ? nil : result;
    
    }, TMP_57.$$arity = 0);

    Opal.defn(self, '$minmax', TMP_59 = function ːminmax() {
      var $a, $b, $c, TMP_60, self = this, $iter = TMP_59.$$p, block = $iter || nil;

      TMP_59.$$p = null;
      ((($a = block) !== false && $a !== nil && $a != null) ? $a : block = ($b = ($c = self).$proc, $b.$$p = (TMP_60 = function(a, b){var self = TMP_60.$$s || this;
if (a == null) a = nil;if (b == null) b = nil;
      return a['$<=>'](b)}, TMP_60.$$s = self, TMP_60.$$arity = 2, TMP_60), $b).call($c));
      
      var min = nil, max = nil, first_time = true;

      self.$each.$$p = function() {
        var element = $scope.get('Opal').$destructure(arguments);
        if (first_time) {
          min = max = element;
          first_time = false;
        } else {
          var min_cmp = block.$call(min, element);

          if (min_cmp === nil) {
            self.$raise($scope.get('ArgumentError'), "comparison failed")
          } else if (min_cmp > 0) {
            min = element;
          }

          var max_cmp = block.$call(max, element);

          if (max_cmp === nil) {
            self.$raise($scope.get('ArgumentError'), "comparison failed")
          } else if (max_cmp < 0) {
            max = element;
          }
        }
      }

      self.$each();

      return [min, max];
    
    }, TMP_59.$$arity = 0);

    Opal.defn(self, '$minmax_by', TMP_61 = function ːminmax_by() {
      var self = this, $iter = TMP_61.$$p, block = $iter || nil;

      TMP_61.$$p = null;
      return self.$raise($scope.get('NotImplementedError'));
    }, TMP_61.$$arity = 0);

    Opal.defn(self, '$none?', TMP_62 = function() {try {

      var $a, $b, TMP_63, $c, TMP_64, self = this, $iter = TMP_62.$$p, block = $iter || nil;

      TMP_62.$$p = null;
      if ((block !== nil)) {
        ($a = ($b = self).$each, $a.$$p = (TMP_63 = function($c_rest){var self = TMP_63.$$s || this, value, $d;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ((($d = Opal.yieldX(block, Opal.to_a(value))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            Opal.ret(false)
            } else {
            return nil
          }}, TMP_63.$$s = self, TMP_63.$$arity = -1, TMP_63), $a).call($b)
        } else {
        ($a = ($c = self).$each, $a.$$p = (TMP_64 = function($d_rest){var self = TMP_64.$$s || this, value, $e;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ((($e = $scope.get('Opal').$destructure(value)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            Opal.ret(false)
            } else {
            return nil
          }}, TMP_64.$$s = self, TMP_64.$$arity = -1, TMP_64), $a).call($c)
      };
      return true;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_62.$$arity = 0);

    Opal.defn(self, '$one?', TMP_65 = function() {try {

      var $a, $b, TMP_66, $c, TMP_67, self = this, $iter = TMP_65.$$p, block = $iter || nil, count = nil;

      TMP_65.$$p = null;
      count = 0;
      if ((block !== nil)) {
        ($a = ($b = self).$each, $a.$$p = (TMP_66 = function($c_rest){var self = TMP_66.$$s || this, value, $d;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ((($d = Opal.yieldX(block, Opal.to_a(value))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            count = $rb_plus(count, 1);
            if ((($d = $rb_gt(count, 1)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              Opal.ret(false)
              } else {
              return nil
            };
            } else {
            return nil
          }}, TMP_66.$$s = self, TMP_66.$$arity = -1, TMP_66), $a).call($b)
        } else {
        ($a = ($c = self).$each, $a.$$p = (TMP_67 = function($d_rest){var self = TMP_67.$$s || this, value, $e;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ((($e = $scope.get('Opal').$destructure(value)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            count = $rb_plus(count, 1);
            if ((($e = $rb_gt(count, 1)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
              Opal.ret(false)
              } else {
              return nil
            };
            } else {
            return nil
          }}, TMP_67.$$s = self, TMP_67.$$arity = -1, TMP_67), $a).call($c)
      };
      return count['$=='](1);
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_65.$$arity = 0);

    Opal.defn(self, '$partition', TMP_68 = function ːpartition() {
      var $a, $b, TMP_69, self = this, $iter = TMP_68.$$p, block = $iter || nil;

      TMP_68.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_69 = function(){var self = TMP_69.$$s || this;

        return self.$enumerator_size()}, TMP_69.$$s = self, TMP_69.$$arity = 0, TMP_69), $a).call($b, "partition")
      };
      
      var truthy = [], falsy = [], result;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if ((($a = value) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          truthy.push(param);
        }
        else {
          falsy.push(param);
        }
      };

      self.$each();

      return [truthy, falsy];
    
    }, TMP_68.$$arity = 0);

    Opal.alias(self, 'reduce', 'inject');

    Opal.defn(self, '$reject', TMP_70 = function ːreject() {
      var $a, $b, TMP_71, self = this, $iter = TMP_70.$$p, block = $iter || nil;

      TMP_70.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_71 = function(){var self = TMP_71.$$s || this;

        return self.$enumerator_size()}, TMP_71.$$s = self, TMP_71.$$arity = 0, TMP_71), $a).call($b, "reject")
      };
      
      var result = [];

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if ((($a = value) === nil || $a == null || ($a.$$is_boolean && $a == false))) {
          result.push(param);
        }
      };

      self.$each();

      return result;
    
    }, TMP_70.$$arity = 0);

    Opal.defn(self, '$reverse_each', TMP_72 = function ːreverse_each() {
      var $a, $b, TMP_73, self = this, $iter = TMP_72.$$p, block = $iter || nil;

      TMP_72.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_73 = function(){var self = TMP_73.$$s || this;

        return self.$enumerator_size()}, TMP_73.$$s = self, TMP_73.$$arity = 0, TMP_73), $a).call($b, "reverse_each")
      };
      
      var result = [];

      self.$each.$$p = function() {
        result.push(arguments);
      };

      self.$each();

      for (var i = result.length - 1; i >= 0; i--) {
        Opal.yieldX(block, result[i]);
      }

      return result;
    
    }, TMP_72.$$arity = 0);

    Opal.alias(self, 'select', 'find_all');

    Opal.defn(self, '$slice_before', TMP_74 = function ːslice_before(pattern) {
      var $a, $b, TMP_75, self = this, $iter = TMP_74.$$p, block = $iter || nil;

      TMP_74.$$p = null;
      if ((($a = pattern === undefined && block === nil || arguments.length > 1) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (arguments.length) + " for 1)")};
      return ($a = ($b = $scope.get('Enumerator')).$new, $a.$$p = (TMP_75 = function(e){var self = TMP_75.$$s || this, $c;
if (e == null) e = nil;
      
        var slice = [];

        if (block !== nil) {
          if (pattern === undefined) {
            self.$each.$$p = function() {
              var param = $scope.get('Opal').$destructure(arguments),
                  value = Opal.yield1(block, param);

              if ((($c = value) !== nil && $c != null && (!$c.$$is_boolean || $c == true)) && slice.length > 0) {
                e['$<<'](slice);
                slice = [];
              }

              slice.push(param);
            };
          }
          else {
            self.$each.$$p = function() {
              var param = $scope.get('Opal').$destructure(arguments),
                  value = block(param, pattern.$dup());

              if ((($c = value) !== nil && $c != null && (!$c.$$is_boolean || $c == true)) && slice.length > 0) {
                e['$<<'](slice);
                slice = [];
              }

              slice.push(param);
            };
          }
        }
        else {
          self.$each.$$p = function() {
            var param = $scope.get('Opal').$destructure(arguments),
                value = pattern['$==='](param);

            if ((($c = value) !== nil && $c != null && (!$c.$$is_boolean || $c == true)) && slice.length > 0) {
              e['$<<'](slice);
              slice = [];
            }

            slice.push(param);
          };
        }

        self.$each();

        if (slice.length > 0) {
          e['$<<'](slice);
        }
      ;}, TMP_75.$$s = self, TMP_75.$$arity = 1, TMP_75), $a).call($b);
    }, TMP_74.$$arity = -1);

    Opal.defn(self, '$sort', TMP_76 = function ːsort() {
      var $a, $b, TMP_77, $c, self = this, $iter = TMP_76.$$p, block = $iter || nil, ary = nil;

      TMP_76.$$p = null;
      ary = self.$to_a();
      if ((block !== nil)) {
        } else {
        block = ($a = ($b = self).$lambda, $a.$$p = (TMP_77 = function(a, b){var self = TMP_77.$$s || this;
if (a == null) a = nil;if (b == null) b = nil;
        return a['$<=>'](b)}, TMP_77.$$s = self, TMP_77.$$arity = 2, TMP_77), $a).call($b)
      };
      return ($a = ($c = ary).$sort, $a.$$p = block.$to_proc(), $a).call($c);
    }, TMP_76.$$arity = 0);

    Opal.defn(self, '$sort_by', TMP_78 = function ːsort_by() {
      var $a, $b, TMP_79, $c, TMP_80, $d, TMP_81, $e, TMP_82, self = this, $iter = TMP_78.$$p, block = $iter || nil, dup = nil;

      TMP_78.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_79 = function(){var self = TMP_79.$$s || this;

        return self.$enumerator_size()}, TMP_79.$$s = self, TMP_79.$$arity = 0, TMP_79), $a).call($b, "sort_by")
      };
      dup = ($a = ($c = self).$map, $a.$$p = (TMP_80 = function(){var self = TMP_80.$$s || this, $yielded, arg = nil;

      arg = $scope.get('Opal').$destructure(arguments);
        ($yielded = Opal.yield1(block, arg));return [$yielded, arg];}, TMP_80.$$s = self, TMP_80.$$arity = 0, TMP_80), $a).call($c);
      ($a = ($d = dup)['$sort!'], $a.$$p = (TMP_81 = function(a, b){var self = TMP_81.$$s || this;
if (a == null) a = nil;if (b == null) b = nil;
      return (a[0])['$<=>'](b[0])}, TMP_81.$$s = self, TMP_81.$$arity = 2, TMP_81), $a).call($d);
      return ($a = ($e = dup)['$map!'], $a.$$p = (TMP_82 = function(i){var self = TMP_82.$$s || this;
if (i == null) i = nil;
      return i[1];}, TMP_82.$$s = self, TMP_82.$$arity = 1, TMP_82), $a).call($e);
    }, TMP_78.$$arity = 0);

    Opal.defn(self, '$take', TMP_83 = function ːtake(num) {
      var self = this;

      return self.$first(num);
    }, TMP_83.$$arity = 1);

    Opal.defn(self, '$take_while', TMP_84 = function ːtake_while() {try {

      var $a, $b, TMP_85, self = this, $iter = TMP_84.$$p, block = $iter || nil, result = nil;

      TMP_84.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return self.$enum_for("take_while")
      };
      result = [];
      return ($a = ($b = self).$each, $a.$$p = (TMP_85 = function($c_rest){var self = TMP_85.$$s || this, args, $d, value = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      value = $scope.get('Opal').$destructure(args);
        if ((($d = Opal.yield1(block, value)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          } else {
          Opal.ret(result)
        };
        return result.push(value);}, TMP_85.$$s = self, TMP_85.$$arity = -1, TMP_85), $a).call($b);
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_84.$$arity = 0);

    Opal.alias(self, 'to_a', 'entries');

    Opal.defn(self, '$zip', TMP_86 = function ːzip($a_rest) {
      var $b, self = this, others, $iter = TMP_86.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      others = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        others[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_86.$$p = null;
      return ($b = self.$to_a()).$zip.apply($b, Opal.to_a(others));
    }, TMP_86.$$arity = -1);
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["corelib/enumerator"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include', '$allocate', '$new', '$to_proc', '$coerce_to', '$nil?', '$empty?', '$+', '$class', '$__send__', '$===', '$call', '$enum_for', '$size', '$destructure', '$inspect', '$[]', '$raise', '$yield', '$each', '$enumerator_size', '$respond_to?', '$try_convert', '$<', '$for']);
  self.$require("corelib/enumerable");
  return (function($base, $super) {
    function $Enumerator(){};
    var self = $Enumerator = $klass($base, $super, 'Enumerator', $Enumerator);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_7;

    def.size = def.args = def.object = def.method = nil;
    self.$include($scope.get('Enumerable'));

    def.$$is_enumerator = true;

    Opal.defs(self, '$for', TMP_1 = function(object, method, $a_rest) {
      var self = this, args, $iter = TMP_1.$$p, block = $iter || nil;

      if (method == null) {
        method = "each";
      }
      var $args_len = arguments.length, $rest_len = $args_len - 2;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 2; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 2] = arguments[$arg_idx];
      }
      TMP_1.$$p = null;
      
      var obj = self.$allocate();

      obj.object = object;
      obj.size   = block;
      obj.method = method;
      obj.args   = args;

      return obj;
    ;
    }, TMP_1.$$arity = -2);

    Opal.defn(self, '$initialize', TMP_2 = function ːinitialize($a_rest) {
      var $b, $c, self = this, $iter = TMP_2.$$p, block = $iter || nil;

      TMP_2.$$p = null;
      if (block !== false && block !== nil && block != null) {
        self.object = ($b = ($c = $scope.get('Generator')).$new, $b.$$p = block.$to_proc(), $b).call($c);
        self.method = "each";
        self.args = [];
        self.size = arguments[0] || nil;
        if ((($b = self.size) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return self.size = $scope.get('Opal').$coerce_to(self.size, $scope.get('Integer'), "to_int")
          } else {
          return nil
        };
        } else {
        self.object = arguments[0];
        self.method = arguments[1] || "each";
        self.args = $slice.call(arguments, 2);
        return self.size = nil;
      };
    }, TMP_2.$$arity = -1);

    Opal.defn(self, '$each', TMP_3 = function ːeach($a_rest) {
      var $b, $c, $d, self = this, args, $iter = TMP_3.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_3.$$p = null;
      if ((($b = ($c = block['$nil?'](), $c !== false && $c !== nil && $c != null ?args['$empty?']() : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        return self};
      args = $rb_plus(self.args, args);
      if ((($b = block['$nil?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        return ($b = self.$class()).$new.apply($b, [self.object, self.method].concat(Opal.to_a(args)))};
      return ($c = ($d = self.object).$__send__, $c.$$p = block.$to_proc(), $c).apply($d, [self.method].concat(Opal.to_a(args)));
    }, TMP_3.$$arity = -1);

    Opal.defn(self, '$size', TMP_4 = function ːsize() {
      var $a, self = this;

      if ((($a = $scope.get('Proc')['$==='](self.size)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = self.size).$call.apply($a, Opal.to_a(self.args))
        } else {
        return self.size
      };
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$with_index', TMP_5 = function ːwith_index(offset) {
      var $a, $b, TMP_6, self = this, $iter = TMP_5.$$p, block = $iter || nil;

      if (offset == null) {
        offset = 0;
      }
      TMP_5.$$p = null;
      if (offset !== false && offset !== nil && offset != null) {
        offset = $scope.get('Opal').$coerce_to(offset, $scope.get('Integer'), "to_int")
        } else {
        offset = 0
      };
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

        return self.$size()}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($b, "with_index", offset)
      };
      
      var result, index = offset;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = block(param, index);

        index++;

        return value;
      }

      return self.$each();
    
    }, TMP_5.$$arity = -1);

    Opal.alias(self, 'with_object', 'each_with_object');

    Opal.defn(self, '$inspect', TMP_7 = function ːinspect() {
      var $a, self = this, result = nil;

      result = "#<" + (self.$class()) + ": " + (self.object.$inspect()) + ":" + (self.method);
      if ((($a = self.args['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        result = $rb_plus(result, "(" + (self.args.$inspect()['$[]']($scope.get('Range').$new(1, -2))) + ")")
      };
      return $rb_plus(result, ">");
    }, TMP_7.$$arity = 0);

    (function($base, $super) {
      function $Generator(){};
      var self = $Generator = $klass($base, $super, 'Generator', $Generator);

      var def = self.$$proto, $scope = self.$$scope, TMP_8, TMP_9;

      def.block = nil;
      self.$include($scope.get('Enumerable'));

      Opal.defn(self, '$initialize', TMP_8 = function ːinitialize() {
        var self = this, $iter = TMP_8.$$p, block = $iter || nil;

        TMP_8.$$p = null;
        if (block !== false && block !== nil && block != null) {
          } else {
          self.$raise($scope.get('LocalJumpError'), "no block given")
        };
        return self.block = block;
      }, TMP_8.$$arity = 0);

      return (Opal.defn(self, '$each', TMP_9 = function ːeach($a_rest) {
        var $b, $c, self = this, args, $iter = TMP_9.$$p, block = $iter || nil, yielder = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        TMP_9.$$p = null;
        yielder = ($b = ($c = $scope.get('Yielder')).$new, $b.$$p = block.$to_proc(), $b).call($c);
        
        try {
          args.unshift(yielder);

          Opal.yieldX(self.block, args);
        }
        catch (e) {
          if (e === $breaker) {
            return $breaker.$v;
          }
          else {
            throw e;
          }
        }
      ;
        return self;
      }, TMP_9.$$arity = -1), nil) && 'each';
    })($scope.base, null);

    (function($base, $super) {
      function $Yielder(){};
      var self = $Yielder = $klass($base, $super, 'Yielder', $Yielder);

      var def = self.$$proto, $scope = self.$$scope, TMP_10, TMP_11, TMP_12;

      def.block = nil;
      Opal.defn(self, '$initialize', TMP_10 = function ːinitialize() {
        var self = this, $iter = TMP_10.$$p, block = $iter || nil;

        TMP_10.$$p = null;
        return self.block = block;
      }, TMP_10.$$arity = 0);

      Opal.defn(self, '$yield', TMP_11 = function($a_rest) {
        var self = this, values;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        values = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          values[$arg_idx - 0] = arguments[$arg_idx];
        }
        
        var value = Opal.yieldX(self.block, values);

        if (value === $breaker) {
          throw $breaker;
        }

        return value;
      ;
      }, TMP_11.$$arity = -1);

      return (Opal.defn(self, '$<<', TMP_12 = function($a_rest) {
        var $b, self = this, values;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        values = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          values[$arg_idx - 0] = arguments[$arg_idx];
        }
        ($b = self).$yield.apply($b, Opal.to_a(values));
        return self;
      }, TMP_12.$$arity = -1), nil) && '<<';
    })($scope.base, null);

    return (function($base, $super) {
      function $Lazy(){};
      var self = $Lazy = $klass($base, $super, 'Lazy', $Lazy);

      var def = self.$$proto, $scope = self.$$scope, TMP_13, TMP_16, TMP_17, TMP_19, TMP_24, TMP_25, TMP_27, TMP_28, TMP_30, TMP_33, TMP_36, TMP_37, TMP_39;

      def.enumerator = nil;
      (function($base, $super) {
        function $StopLazyError(){};
        var self = $StopLazyError = $klass($base, $super, 'StopLazyError', $StopLazyError);

        var def = self.$$proto, $scope = self.$$scope;

        return nil;
      })($scope.base, $scope.get('Exception'));

      Opal.defn(self, '$initialize', TMP_13 = function ːinitialize(object, size) {
        var $a, $b, TMP_14, self = this, $iter = TMP_13.$$p, block = $iter || nil;

        if (size == null) {
          size = nil;
        }
        TMP_13.$$p = null;
        if ((block !== nil)) {
          } else {
          self.$raise($scope.get('ArgumentError'), "tried to call lazy new without a block")
        };
        self.enumerator = object;
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_13, false)), $a.$$p = (TMP_14 = function(yielder, $c_rest){var self = TMP_14.$$s || this, each_args, $d, $e, TMP_15;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          each_args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            each_args[$arg_idx - 1] = arguments[$arg_idx];
          }if (yielder == null) yielder = nil;
        try {
            return ($d = ($e = object).$each, $d.$$p = (TMP_15 = function($c_rest){var self = TMP_15.$$s || this, args;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
            
              args.unshift(yielder);

              Opal.yieldX(block, args);
            ;}, TMP_15.$$s = self, TMP_15.$$arity = -1, TMP_15), $d).apply($e, Opal.to_a(each_args))
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('Exception')])) {
              try {
                return nil
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }}, TMP_14.$$s = self, TMP_14.$$arity = -2, TMP_14), $a).call($b, size);
      }, TMP_13.$$arity = -2);

      Opal.alias(self, 'force', 'to_a');

      Opal.defn(self, '$lazy', TMP_16 = function ːlazy() {
        var self = this;

        return self;
      }, TMP_16.$$arity = 0);

      Opal.defn(self, '$collect', TMP_17 = function ːcollect() {
        var $a, $b, TMP_18, self = this, $iter = TMP_17.$$p, block = $iter || nil;

        TMP_17.$$p = null;
        if (block !== false && block !== nil && block != null) {
          } else {
          self.$raise($scope.get('ArgumentError'), "tried to call lazy map without a block")
        };
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_18 = function(enum$, $c_rest){var self = TMP_18.$$s || this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        
          var value = Opal.yieldX(block, args);

          enum$.$yield(value);
        }, TMP_18.$$s = self, TMP_18.$$arity = -2, TMP_18), $a).call($b, self, self.$enumerator_size());
      }, TMP_17.$$arity = 0);

      Opal.defn(self, '$collect_concat', TMP_19 = function ːcollect_concat() {
        var $a, $b, TMP_20, self = this, $iter = TMP_19.$$p, block = $iter || nil;

        TMP_19.$$p = null;
        if (block !== false && block !== nil && block != null) {
          } else {
          self.$raise($scope.get('ArgumentError'), "tried to call lazy map without a block")
        };
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_20 = function(enum$, $c_rest){var self = TMP_20.$$s || this, args, $d, $e, TMP_21, $f, TMP_22;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        
          var value = Opal.yieldX(block, args);

          if ((value)['$respond_to?']("force") && (value)['$respond_to?']("each")) {
            ($d = ($e = (value)).$each, $d.$$p = (TMP_21 = function(v){var self = TMP_21.$$s || this;
if (v == null) v = nil;
          return enum$.$yield(v)}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21), $d).call($e)
          }
          else {
            var array = $scope.get('Opal').$try_convert(value, $scope.get('Array'), "to_ary");

            if (array === nil) {
              enum$.$yield(value);
            }
            else {
              ($d = ($f = (value)).$each, $d.$$p = (TMP_22 = function(v){var self = TMP_22.$$s || this;
if (v == null) v = nil;
          return enum$.$yield(v)}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22), $d).call($f);
            }
          }
        ;}, TMP_20.$$s = self, TMP_20.$$arity = -2, TMP_20), $a).call($b, self, nil);
      }, TMP_19.$$arity = 0);

      Opal.defn(self, '$drop', TMP_24 = function ːdrop(n) {
        var $a, $b, TMP_23, self = this, current_size = nil, set_size = nil, dropped = nil;

        n = $scope.get('Opal').$coerce_to(n, $scope.get('Integer'), "to_int");
        if ((($a = $rb_lt(n, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('ArgumentError'), "attempt to drop negative size")};
        current_size = self.$enumerator_size();
        set_size = (function() {if ((($a = $scope.get('Integer')['$==='](current_size)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $rb_lt(n, current_size)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return n
            } else {
            return current_size
          }
          } else {
          return current_size
        }; return nil; })();
        dropped = 0;
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_23 = function(enum$, $c_rest){var self = TMP_23.$$s || this, args, $d;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        if ((($d = $rb_lt(dropped, n)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            return dropped = $rb_plus(dropped, 1)
            } else {
            return ($d = enum$).$yield.apply($d, Opal.to_a(args))
          }}, TMP_23.$$s = self, TMP_23.$$arity = -2, TMP_23), $a).call($b, self, set_size);
      }, TMP_24.$$arity = 1);

      Opal.defn(self, '$drop_while', TMP_25 = function ːdrop_while() {
        var $a, $b, TMP_26, self = this, $iter = TMP_25.$$p, block = $iter || nil, succeeding = nil;

        TMP_25.$$p = null;
        if (block !== false && block !== nil && block != null) {
          } else {
          self.$raise($scope.get('ArgumentError'), "tried to call lazy drop_while without a block")
        };
        succeeding = true;
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_26 = function(enum$, $c_rest){var self = TMP_26.$$s || this, args, $d, $e;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        if (succeeding !== false && succeeding !== nil && succeeding != null) {
            
            var value = Opal.yieldX(block, args);

            if ((($d = value) === nil || $d == null || ($d.$$is_boolean && $d == false))) {
              succeeding = false;

              ($d = enum$).$yield.apply($d, Opal.to_a(args));
            }
          
            } else {
            return ($e = enum$).$yield.apply($e, Opal.to_a(args))
          }}, TMP_26.$$s = self, TMP_26.$$arity = -2, TMP_26), $a).call($b, self, nil);
      }, TMP_25.$$arity = 0);

      Opal.defn(self, '$enum_for', TMP_27 = function ːenum_for(method, $a_rest) {
        var $b, $c, self = this, args, $iter = TMP_27.$$p, block = $iter || nil;

        if (method == null) {
          method = "each";
        }
        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        TMP_27.$$p = null;
        return ($b = ($c = self.$class()).$for, $b.$$p = block.$to_proc(), $b).apply($c, [self, method].concat(Opal.to_a(args)));
      }, TMP_27.$$arity = -1);

      Opal.defn(self, '$find_all', TMP_28 = function ːfind_all() {
        var $a, $b, TMP_29, self = this, $iter = TMP_28.$$p, block = $iter || nil;

        TMP_28.$$p = null;
        if (block !== false && block !== nil && block != null) {
          } else {
          self.$raise($scope.get('ArgumentError'), "tried to call lazy select without a block")
        };
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_29 = function(enum$, $c_rest){var self = TMP_29.$$s || this, args, $d;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        
          var value = Opal.yieldX(block, args);

          if ((($d = value) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            ($d = enum$).$yield.apply($d, Opal.to_a(args));
          }
        ;}, TMP_29.$$s = self, TMP_29.$$arity = -2, TMP_29), $a).call($b, self, nil);
      }, TMP_28.$$arity = 0);

      Opal.alias(self, 'flat_map', 'collect_concat');

      Opal.defn(self, '$grep', TMP_30 = function ːgrep(pattern) {
        var $a, $b, TMP_31, $c, TMP_32, self = this, $iter = TMP_30.$$p, block = $iter || nil;

        TMP_30.$$p = null;
        if (block !== false && block !== nil && block != null) {
          return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_31 = function(enum$, $c_rest){var self = TMP_31.$$s || this, args, $d;

            var $args_len = arguments.length, $rest_len = $args_len - 1;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 1] = arguments[$arg_idx];
            }if (enum$ == null) enum$ = nil;
          
            var param = $scope.get('Opal').$destructure(args),
                value = pattern['$==='](param);

            if ((($d = value) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              value = Opal.yield1(block, param);

              enum$.$yield(Opal.yield1(block, param));
            }
          ;}, TMP_31.$$s = self, TMP_31.$$arity = -2, TMP_31), $a).call($b, self, nil)
          } else {
          return ($a = ($c = $scope.get('Lazy')).$new, $a.$$p = (TMP_32 = function(enum$, $d_rest){var self = TMP_32.$$s || this, args, $e;

            var $args_len = arguments.length, $rest_len = $args_len - 1;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 1] = arguments[$arg_idx];
            }if (enum$ == null) enum$ = nil;
          
            var param = $scope.get('Opal').$destructure(args),
                value = pattern['$==='](param);

            if ((($e = value) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
              enum$.$yield(param);
            }
          ;}, TMP_32.$$s = self, TMP_32.$$arity = -2, TMP_32), $a).call($c, self, nil)
        };
      }, TMP_30.$$arity = 1);

      Opal.alias(self, 'map', 'collect');

      Opal.alias(self, 'select', 'find_all');

      Opal.defn(self, '$reject', TMP_33 = function ːreject() {
        var $a, $b, TMP_34, self = this, $iter = TMP_33.$$p, block = $iter || nil;

        TMP_33.$$p = null;
        if (block !== false && block !== nil && block != null) {
          } else {
          self.$raise($scope.get('ArgumentError'), "tried to call lazy reject without a block")
        };
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_34 = function(enum$, $c_rest){var self = TMP_34.$$s || this, args, $d;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        
          var value = Opal.yieldX(block, args);

          if ((($d = value) === nil || $d == null || ($d.$$is_boolean && $d == false))) {
            ($d = enum$).$yield.apply($d, Opal.to_a(args));
          }
        ;}, TMP_34.$$s = self, TMP_34.$$arity = -2, TMP_34), $a).call($b, self, nil);
      }, TMP_33.$$arity = 0);

      Opal.defn(self, '$take', TMP_36 = function ːtake(n) {
        var $a, $b, TMP_35, self = this, current_size = nil, set_size = nil, taken = nil;

        n = $scope.get('Opal').$coerce_to(n, $scope.get('Integer'), "to_int");
        if ((($a = $rb_lt(n, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('ArgumentError'), "attempt to take negative size")};
        current_size = self.$enumerator_size();
        set_size = (function() {if ((($a = $scope.get('Integer')['$==='](current_size)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $rb_lt(n, current_size)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return n
            } else {
            return current_size
          }
          } else {
          return current_size
        }; return nil; })();
        taken = 0;
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_35 = function(enum$, $c_rest){var self = TMP_35.$$s || this, args, $d;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        if ((($d = $rb_lt(taken, n)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            ($d = enum$).$yield.apply($d, Opal.to_a(args));
            return taken = $rb_plus(taken, 1);
            } else {
            return self.$raise($scope.get('StopLazyError'))
          }}, TMP_35.$$s = self, TMP_35.$$arity = -2, TMP_35), $a).call($b, self, set_size);
      }, TMP_36.$$arity = 1);

      Opal.defn(self, '$take_while', TMP_37 = function ːtake_while() {
        var $a, $b, TMP_38, self = this, $iter = TMP_37.$$p, block = $iter || nil;

        TMP_37.$$p = null;
        if (block !== false && block !== nil && block != null) {
          } else {
          self.$raise($scope.get('ArgumentError'), "tried to call lazy take_while without a block")
        };
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_38 = function(enum$, $c_rest){var self = TMP_38.$$s || this, args, $d;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        
          var value = Opal.yieldX(block, args);

          if ((($d = value) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            ($d = enum$).$yield.apply($d, Opal.to_a(args));
          }
          else {
            self.$raise($scope.get('StopLazyError'));
          }
        ;}, TMP_38.$$s = self, TMP_38.$$arity = -2, TMP_38), $a).call($b, self, nil);
      }, TMP_37.$$arity = 0);

      Opal.alias(self, 'to_enum', 'enum_for');

      return (Opal.defn(self, '$inspect', TMP_39 = function ːinspect() {
        var self = this;

        return "#<" + (self.$class()) + ": " + (self.enumerator.$inspect()) + ">";
      }, TMP_39.$$arity = 0), nil) && 'inspect';
    })($scope.base, self);
  })($scope.base, null);
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["corelib/numeric"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include', '$instance_of?', '$class', '$Float', '$coerce', '$===', '$raise', '$__send__', '$equal?', '$coerce_to!', '$-@', '$**', '$-', '$*', '$div', '$<', '$ceil', '$to_f', '$denominator', '$to_r', '$==', '$floor', '$/', '$%', '$Complex', '$zero?', '$numerator', '$abs', '$arg', '$round', '$to_i', '$truncate', '$>']);
  self.$require("corelib/comparable");
  return (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36;

    self.$include($scope.get('Comparable'));

    Opal.defn(self, '$coerce', TMP_1 = function ːcoerce(other) {
      var $a, self = this;

      if ((($a = other['$instance_of?'](self.$class())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return [other, self]};
      return [self.$Float(other), self.$Float(self)];
    }, TMP_1.$$arity = 1);

    Opal.defn(self, '$__coerced__', TMP_2 = function ː__coerced__(method, other) {
      var $a, $b, self = this, a = nil, b = nil, $case = nil;

      try {
        $b = other.$coerce(self), $a = Opal.to_ary($b), a = ($a[0] == null ? nil : $a[0]), b = ($a[1] == null ? nil : $a[1]), $b
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('StandardError')])) {
          try {
            $case = method;if ("+"['$===']($case) || "-"['$===']($case) || "*"['$===']($case) || "/"['$===']($case) || "%"['$===']($case) || "&"['$===']($case) || "|"['$===']($case) || "^"['$===']($case) || "**"['$===']($case)) {self.$raise($scope.get('TypeError'), "" + (other.$class()) + " can't be coerce into Numeric")}else if (">"['$===']($case) || ">="['$===']($case) || "<"['$===']($case) || "<="['$===']($case) || "<=>"['$===']($case)) {self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")}
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
      return a.$__send__(method, b);
    }, TMP_2.$$arity = 2);

    Opal.defn(self, '$<=>', TMP_3 = function(other) {
      var $a, self = this;

      if ((($a = self['$equal?'](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return 0};
      return nil;
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$[]', TMP_4 = function(bit) {
      var self = this, min = nil, max = nil;

      bit = $scope.get('Opal')['$coerce_to!'](bit, $scope.get('Integer'), "to_int");
      min = ((2)['$**'](30))['$-@']();
      max = $rb_minus(((2)['$**'](30)), 1);
      return (bit < min || bit > max) ? 0 : (self >> bit) % 2;
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$+@', TMP_5 = function() {
      var self = this;

      return self;
    }, TMP_5.$$arity = 0);

    Opal.defn(self, '$-@', TMP_6 = function() {
      var self = this;

      return $rb_minus(0, self);
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$%', TMP_7 = function(other) {
      var self = this;

      return $rb_minus(self, $rb_times(other, self.$div(other)));
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$abs', TMP_8 = function ːabs() {
      var self = this;

      if ($rb_lt(self, 0)) {
        return self['$-@']()
        } else {
        return self
      };
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$abs2', TMP_9 = function ːabs2() {
      var self = this;

      return $rb_times(self, self);
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$angle', TMP_10 = function ːangle() {
      var self = this;

      if ($rb_lt(self, 0)) {
        return (($scope.get('Math')).$$scope.get('PI'))
        } else {
        return 0
      };
    }, TMP_10.$$arity = 0);

    Opal.alias(self, 'arg', 'angle');

    Opal.defn(self, '$ceil', TMP_11 = function ːceil() {
      var self = this;

      return self.$to_f().$ceil();
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$conj', TMP_12 = function ːconj() {
      var self = this;

      return self;
    }, TMP_12.$$arity = 0);

    Opal.alias(self, 'conjugate', 'conj');

    Opal.defn(self, '$denominator', TMP_13 = function ːdenominator() {
      var self = this;

      return self.$to_r().$denominator();
    }, TMP_13.$$arity = 0);

    Opal.defn(self, '$div', TMP_14 = function ːdiv(other) {
      var self = this;

      if (other['$=='](0)) {
        self.$raise($scope.get('ZeroDivisionError'), "divided by o")};
      return ($rb_divide(self, other)).$floor();
    }, TMP_14.$$arity = 1);

    Opal.defn(self, '$divmod', TMP_15 = function ːdivmod(other) {
      var self = this;

      return [self.$div(other), self['$%'](other)];
    }, TMP_15.$$arity = 1);

    Opal.defn(self, '$fdiv', TMP_16 = function ːfdiv(other) {
      var self = this;

      return $rb_divide(self.$to_f(), other);
    }, TMP_16.$$arity = 1);

    Opal.defn(self, '$floor', TMP_17 = function ːfloor() {
      var self = this;

      return self.$to_f().$floor();
    }, TMP_17.$$arity = 0);

    Opal.defn(self, '$i', TMP_18 = function ːi() {
      var self = this;

      return self.$Complex(0, self);
    }, TMP_18.$$arity = 0);

    Opal.defn(self, '$imag', TMP_19 = function ːimag() {
      var self = this;

      return 0;
    }, TMP_19.$$arity = 0);

    Opal.alias(self, 'imaginary', 'imag');

    Opal.defn(self, '$integer?', TMP_20 = function() {
      var self = this;

      return false;
    }, TMP_20.$$arity = 0);

    Opal.alias(self, 'magnitude', 'abs');

    Opal.alias(self, 'modulo', '%');

    Opal.defn(self, '$nonzero?', TMP_21 = function() {
      var $a, self = this;

      if ((($a = self['$zero?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil
        } else {
        return self
      };
    }, TMP_21.$$arity = 0);

    Opal.defn(self, '$numerator', TMP_22 = function ːnumerator() {
      var self = this;

      return self.$to_r().$numerator();
    }, TMP_22.$$arity = 0);

    Opal.alias(self, 'phase', 'arg');

    Opal.defn(self, '$polar', TMP_23 = function ːpolar() {
      var self = this;

      return [self.$abs(), self.$arg()];
    }, TMP_23.$$arity = 0);

    Opal.defn(self, '$quo', TMP_24 = function ːquo(other) {
      var self = this;

      return $rb_divide($scope.get('Opal')['$coerce_to!'](self, $scope.get('Rational'), "to_r"), other);
    }, TMP_24.$$arity = 1);

    Opal.defn(self, '$real', TMP_25 = function ːreal() {
      var self = this;

      return self;
    }, TMP_25.$$arity = 0);

    Opal.defn(self, '$real?', TMP_26 = function() {
      var self = this;

      return true;
    }, TMP_26.$$arity = 0);

    Opal.defn(self, '$rect', TMP_27 = function ːrect() {
      var self = this;

      return [self, 0];
    }, TMP_27.$$arity = 0);

    Opal.alias(self, 'rectangular', 'rect');

    Opal.defn(self, '$round', TMP_28 = function ːround(digits) {
      var self = this;

      return self.$to_f().$round(digits);
    }, TMP_28.$$arity = -1);

    Opal.defn(self, '$to_c', TMP_29 = function ːto_c() {
      var self = this;

      return self.$Complex(self, 0);
    }, TMP_29.$$arity = 0);

    Opal.defn(self, '$to_int', TMP_30 = function ːto_int() {
      var self = this;

      return self.$to_i();
    }, TMP_30.$$arity = 0);

    Opal.defn(self, '$truncate', TMP_31 = function ːtruncate() {
      var self = this;

      return self.$to_f().$truncate();
    }, TMP_31.$$arity = 0);

    Opal.defn(self, '$zero?', TMP_32 = function() {
      var self = this;

      return self['$=='](0);
    }, TMP_32.$$arity = 0);

    Opal.defn(self, '$positive?', TMP_33 = function() {
      var self = this;

      return $rb_gt(self, 0);
    }, TMP_33.$$arity = 0);

    Opal.defn(self, '$negative?', TMP_34 = function() {
      var self = this;

      return $rb_lt(self, 0);
    }, TMP_34.$$arity = 0);

    Opal.defn(self, '$dup', TMP_35 = function ːdup() {
      var self = this;

      return self.$raise($scope.get('TypeError'), "can't dup " + (self.$class()));
    }, TMP_35.$$arity = 0);

    return (Opal.defn(self, '$clone', TMP_36 = function ːclone() {
      var self = this;

      return self.$raise($scope.get('TypeError'), "can't clone " + (self.$class()));
    }, TMP_36.$$arity = 0), nil) && 'clone';
  })($scope.base, null);
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["corelib/array"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$include', '$to_a', '$raise', '$===', '$replace', '$respond_to?', '$to_ary', '$coerce_to', '$coerce_to?', '$join', '$to_str', '$class', '$clone', '$hash', '$<=>', '$==', '$object_id', '$inspect', '$enum_for', '$coerce_to!', '$>', '$*', '$enumerator_size', '$empty?', '$size', '$eql?', '$length', '$begin', '$end', '$exclude_end?', '$flatten', '$__id__', '$[]', '$to_s', '$new', '$!', '$>=', '$**', '$delete_if', '$to_proc', '$each', '$reverse', '$rotate', '$rand', '$at', '$keep_if', '$shuffle!', '$dup', '$<', '$sort', '$sort_by', '$!=', '$times', '$[]=', '$<<', '$values', '$kind_of?', '$last', '$first', '$upto', '$reject', '$pristine']);
  self.$require("corelib/enumerable");
  self.$require("corelib/numeric");
  return (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_19, TMP_20, TMP_21, TMP_22, TMP_24, TMP_26, TMP_28, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_37, TMP_38, TMP_39, TMP_41, TMP_43, TMP_44, TMP_45, TMP_46, TMP_47, TMP_48, TMP_49, TMP_50, TMP_51, TMP_52, TMP_53, TMP_54, TMP_55, TMP_56, TMP_58, TMP_59, TMP_60, TMP_62, TMP_64, TMP_65, TMP_66, TMP_67, TMP_68, TMP_70, TMP_72, TMP_73, TMP_74, TMP_75, TMP_77, TMP_78, TMP_79, TMP_82, TMP_83, TMP_85, TMP_87, TMP_88, TMP_89, TMP_90, TMP_91, TMP_92, TMP_93, TMP_95, TMP_96, TMP_97, TMP_98, TMP_101, TMP_102, TMP_103, TMP_104, TMP_107, TMP_108, TMP_109, TMP_111;

    def.length = nil;
    self.$include($scope.get('Enumerable'));

    def.$$is_array = true;

    
    function toArraySubclass(obj, klass) {
      if (klass.$$name === Opal.Array) {
        return obj;
      } else {
        return klass.$allocate().$replace((obj).$to_a());
      }
    }
  

    Opal.defs(self, '$[]', TMP_1 = function($a_rest) {
      var self = this, objects;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      objects = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        objects[$arg_idx - 0] = arguments[$arg_idx];
      }
      return toArraySubclass(objects, self);
    }, TMP_1.$$arity = -1);

    Opal.defn(self, '$initialize', TMP_2 = function ːinitialize(size, obj) {
      var $a, self = this, $iter = TMP_2.$$p, block = $iter || nil;

      if (size == null) {
        size = nil;
      }
      if (obj == null) {
        obj = nil;
      }
      TMP_2.$$p = null;
      if ((($a = arguments.length > 2) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (arguments.length) + " for 0..2)")};
      
      if (arguments.length === 0) {
        self.splice(0, self.length);
        return self;
      }
    
      if ((($a = arguments.length === 1) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = $scope.get('Array')['$==='](size)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$replace(size.$to_a());
          return self;
        } else if ((($a = size['$respond_to?']("to_ary")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$replace(size.$to_ary());
          return self;}};
      size = $scope.get('Opal').$coerce_to(size, $scope.get('Integer'), "to_int");
      if ((($a = size < 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "negative array size")};
      
      self.splice(0, self.length);
      var i, value;

      if (block === nil) {
        for (i = 0; i < size; i++) {
          self.push(obj);
        }
      }
      else {
        for (i = 0, value; i < size; i++) {
          value = block(i);
          self[i] = value;
        }
      }

      return self;
    
    }, TMP_2.$$arity = -1);

    Opal.defs(self, '$try_convert', TMP_3 = function ːtry_convert(obj) {
      var self = this;

      return $scope.get('Opal')['$coerce_to?'](obj, $scope.get('Array'), "to_ary");
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$&', TMP_4 = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = $scope.get('Opal').$coerce_to(other, $scope.get('Array'), "to_ary").$to_a()
      };
      
      var result = [], hash = $hash2([], {}), i, length, item;

      for (i = 0, length = other.length; i < length; i++) {
        Opal.hash_put(hash, other[i], true);
      }

      for (i = 0, length = self.length; i < length; i++) {
        item = self[i];
        if (Opal.hash_delete(hash, item) !== undefined) {
          result.push(item);
        }
      }

      return result;
    ;
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$|', TMP_5 = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = $scope.get('Opal').$coerce_to(other, $scope.get('Array'), "to_ary").$to_a()
      };
      
      var hash = $hash2([], {}), i, length, item;

      for (i = 0, length = self.length; i < length; i++) {
        Opal.hash_put(hash, self[i], true);
      }

      for (i = 0, length = other.length; i < length; i++) {
        Opal.hash_put(hash, other[i], true);
      }

      return hash.$keys();
    ;
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$*', TMP_6 = function(other) {
      var $a, self = this;

      if ((($a = other['$respond_to?']("to_str")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$join(other.$to_str())};
      other = $scope.get('Opal').$coerce_to(other, $scope.get('Integer'), "to_int");
      if ((($a = other < 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "negative argument")};
      
      var result = [],
          converted = self.$to_a();

      for (var i = 0; i < other; i++) {
        result = result.concat(converted);
      }

      return toArraySubclass(result, self.$class());
    ;
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$+', TMP_7 = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = $scope.get('Opal').$coerce_to(other, $scope.get('Array'), "to_ary").$to_a()
      };
      return self.concat(other);
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$-', TMP_8 = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = $scope.get('Opal').$coerce_to(other, $scope.get('Array'), "to_ary").$to_a()
      };
      if ((($a = self.length === 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return []};
      if ((($a = other.length === 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$clone().$to_a()};
      
      var result = [], hash = $hash2([], {}), i, length, item;

      for (i = 0, length = other.length; i < length; i++) {
        Opal.hash_put(hash, other[i], true);
      }

      for (i = 0, length = self.length; i < length; i++) {
        item = self[i];
        if (Opal.hash_get(hash, item) === undefined) {
          result.push(item);
        }
      }

      return result;
    ;
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$<<', TMP_9 = function(object) {
      var self = this;

      self.push(object);
      return self;
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$<=>', TMP_10 = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_a()
      } else if ((($a = other['$respond_to?']("to_ary")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_ary().$to_a()
        } else {
        return nil
      };
      
      if (self.$hash() === other.$hash()) {
        return 0;
      }

      var count = Math.min(self.length, other.length);

      for (var i = 0; i < count; i++) {
        var tmp = (self[i])['$<=>'](other[i]);

        if (tmp !== 0) {
          return tmp;
        }
      }

      return (self.length)['$<=>'](other.length);
    ;
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$==', TMP_11 = function(other) {
      var self = this;

      
      var recursed = {};

      function _eqeq(array, other) {
        var i, length, a, b;

        if (array === other)
          return true;

        if (!other.$$is_array) {
          if ($scope.get('Opal')['$respond_to?'](other, "to_ary")) {
            return (other)['$=='](array);
          } else {
            return false;
          }
        }

        if (array.constructor !== Array)
          array = (array).$to_a();
        if (other.constructor !== Array)
          other = (other).$to_a();

        if (array.length !== other.length) {
          return false;
        }

        recursed[(array).$object_id()] = true;

        for (i = 0, length = array.length; i < length; i++) {
          a = array[i];
          b = other[i];
          if (a.$$is_array) {
            if (b.$$is_array && b.length !== a.length) {
              return false;
            }
            if (!recursed.hasOwnProperty((a).$object_id())) {
              if (!_eqeq(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$=='](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eqeq(self, other);
    ;
    }, TMP_11.$$arity = 1);

    Opal.defn(self, '$[]', TMP_12 = function(index, length) {
      var self = this;

      
      var size = self.length,
          exclude, from, to, result;

      if (index.$$is_range) {
        exclude = index.exclude;
        from    = $scope.get('Opal').$coerce_to(index.begin, $scope.get('Integer'), "to_int");
        to      = $scope.get('Opal').$coerce_to(index.end, $scope.get('Integer'), "to_int");

        if (from < 0) {
          from += size;

          if (from < 0) {
            return nil;
          }
        }

        if (from > size) {
          return nil;
        }

        if (to < 0) {
          to += size;

          if (to < 0) {
            return [];
          }
        }

        if (!exclude) {
          to += 1;
        }

        result = self.slice(from, to)
      }
      else {
        index = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");

        if (index < 0) {
          index += size;

          if (index < 0) {
            return nil;
          }
        }

        if (length === undefined) {
          if (index >= size || index < 0) {
            return nil;
          }

          return self[index];
        }
        else {
          length = $scope.get('Opal').$coerce_to(length, $scope.get('Integer'), "to_int");

          if (length < 0 || index > size || index < 0) {
            return nil;
          }

          result = self.slice(index, index + length);
        }
      }

      return toArraySubclass(result, self.$class())
    ;
    }, TMP_12.$$arity = -2);

    Opal.defn(self, '$[]=', TMP_13 = function(index, value, extra) {
      var $a, self = this, data = nil, length = nil;

      
      var i, size = self.length;
    
      if ((($a = $scope.get('Range')['$==='](index)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = $scope.get('Array')['$==='](value)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          data = value.$to_a()
        } else if ((($a = value['$respond_to?']("to_ary")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          data = value.$to_ary().$to_a()
          } else {
          data = [value]
        };
        
        var exclude = index.exclude,
            from    = $scope.get('Opal').$coerce_to(index.begin, $scope.get('Integer'), "to_int"),
            to      = $scope.get('Opal').$coerce_to(index.end, $scope.get('Integer'), "to_int");

        if (from < 0) {
          from += size;

          if (from < 0) {
            self.$raise($scope.get('RangeError'), "" + (index.$inspect()) + " out of range");
          }
        }

        if (to < 0) {
          to += size;
        }

        if (!exclude) {
          to += 1;
        }

        if (from > size) {
          for (i = size; i < from; i++) {
            self[i] = nil;
          }
        }

        if (to < 0) {
          self.splice.apply(self, [from, 0].concat(data));
        }
        else {
          self.splice.apply(self, [from, to - from].concat(data));
        }

        return value;
      ;
        } else {
        if ((($a = extra === undefined) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          length = 1
          } else {
          length = value;
          value = extra;
          if ((($a = $scope.get('Array')['$==='](value)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            data = value.$to_a()
          } else if ((($a = value['$respond_to?']("to_ary")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            data = value.$to_ary().$to_a()
            } else {
            data = [value]
          };
        };
        
        var old;

        index  = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");
        length = $scope.get('Opal').$coerce_to(length, $scope.get('Integer'), "to_int");

        if (index < 0) {
          old    = index;
          index += size;

          if (index < 0) {
            self.$raise($scope.get('IndexError'), "index " + (old) + " too small for array; minimum " + (-self.length));
          }
        }

        if (length < 0) {
          self.$raise($scope.get('IndexError'), "negative length (" + (length) + ")")
        }

        if (index > size) {
          for (i = size; i < index; i++) {
            self[i] = nil;
          }
        }

        if (extra === undefined) {
          self[index] = value;
        }
        else {
          self.splice.apply(self, [index, length].concat(data));
        }

        return value;
      
      };
    }, TMP_13.$$arity = -3);

    Opal.defn(self, '$assoc', TMP_14 = function ːassoc(object) {
      var self = this;

      
      for (var i = 0, length = self.length, item; i < length; i++) {
        if (item = self[i], item.length && (item[0])['$=='](object)) {
          return item;
        }
      }

      return nil;
    
    }, TMP_14.$$arity = 1);

    Opal.defn(self, '$at', TMP_15 = function ːat(index) {
      var self = this;

      index = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");
      
      if (index < 0) {
        index += self.length;
      }

      if (index < 0 || index >= self.length) {
        return nil;
      }

      return self[index];
    
    }, TMP_15.$$arity = 1);

    Opal.defn(self, '$bsearch', TMP_16 = function ːbsearch() {
      var self = this, $iter = TMP_16.$$p, block = $iter || nil;

      TMP_16.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("bsearch")
      };
      
      var min = 0,
          max = self.length,
          mid,
          val,
          ret,
          smaller = false,
          satisfied = nil;

      while (min < max) {
        mid = min + Math.floor((max - min) / 2);
        val = self[mid];
        ret = block(val);

        if (ret === true) {
          satisfied = val;
          smaller = true;
        }
        else if (ret === false || ret === nil) {
          smaller = false;
        }
        else if (ret.$$is_number) {
          if (ret === 0) { return val; }
          smaller = (ret < 0);
        }
        else {
          self.$raise($scope.get('TypeError'), "wrong argument type " + ((ret).$class()) + " (must be numeric, true, false or nil)")
        }

        if (smaller) { max = mid; } else { min = mid + 1; }
      }

      return satisfied;
    
    }, TMP_16.$$arity = 0);

    Opal.defn(self, '$cycle', TMP_17 = function ːcycle(n) {
      var $a, $b, TMP_18, $c, self = this, $iter = TMP_17.$$p, block = $iter || nil;

      if (n == null) {
        n = nil;
      }
      TMP_17.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_18 = function(){var self = TMP_18.$$s || this, $c;

        if (n['$=='](nil)) {
            return (($scope.get('Float')).$$scope.get('INFINITY'))
            } else {
            n = $scope.get('Opal')['$coerce_to!'](n, $scope.get('Integer'), "to_int");
            if ((($c = $rb_gt(n, 0)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return $rb_times(self.$enumerator_size(), n)
              } else {
              return 0
            };
          }}, TMP_18.$$s = self, TMP_18.$$arity = 0, TMP_18), $a).call($b, "cycle", n)
      };
      if ((($a = ((($c = self['$empty?']()) !== false && $c !== nil && $c != null) ? $c : n['$=='](0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil};
      
      var i, length, value;

      if (n === nil) {
        while (true) {
          for (i = 0, length = self.length; i < length; i++) {
            value = Opal.yield1(block, self[i]);
          }
        }
      }
      else {
        n = $scope.get('Opal')['$coerce_to!'](n, $scope.get('Integer'), "to_int");
        if (n <= 0) {
          return self;
        }

        while (n > 0) {
          for (i = 0, length = self.length; i < length; i++) {
            value = Opal.yield1(block, self[i]);
          }

          n--;
        }
      }
    
      return self;
    }, TMP_17.$$arity = -1);

    Opal.defn(self, '$clear', TMP_19 = function ːclear() {
      var self = this;

      self.splice(0, self.length);
      return self;
    }, TMP_19.$$arity = 0);

    Opal.defn(self, '$count', TMP_20 = function ːcount(object) {
      var $a, $b, self = this, $iter = TMP_20.$$p, block = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      if (object == null) {
        object = nil;
      }
      TMP_20.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if ((($a = ((($b = object) !== false && $b !== nil && $b != null) ? $b : block)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'count', TMP_20, false)), $a.$$p = $iter, $a).apply($b, $zuper)
        } else {
        return self.$size()
      };
    }, TMP_20.$$arity = -1);

    Opal.defn(self, '$initialize_copy', TMP_21 = function ːinitialize_copy(other) {
      var self = this;

      return self.$replace(other);
    }, TMP_21.$$arity = 1);

    Opal.defn(self, '$collect', TMP_22 = function ːcollect() {
      var $a, $b, TMP_23, self = this, $iter = TMP_22.$$p, block = $iter || nil;

      TMP_22.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_23 = function(){var self = TMP_23.$$s || this;

        return self.$size()}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23), $a).call($b, "collect")
      };
      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, self[i]);
        result.push(value);
      }

      return result;
    
    }, TMP_22.$$arity = 0);

    Opal.defn(self, '$collect!', TMP_24 = function() {
      var $a, $b, TMP_25, self = this, $iter = TMP_24.$$p, block = $iter || nil;

      TMP_24.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_25 = function(){var self = TMP_25.$$s || this;

        return self.$size()}, TMP_25.$$s = self, TMP_25.$$arity = 0, TMP_25), $a).call($b, "collect!")
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, self[i]);
        self[i] = value;
      }
    
      return self;
    }, TMP_24.$$arity = 0);

    
    function binomial_coefficient(n, k) {
      if (n === k || k === 0) {
        return 1;
      }

      if (k > 0 && n > k) {
        return binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k);
      }

      return 0;
    }
  

    Opal.defn(self, '$combination', TMP_26 = function ːcombination(n) {
      var $a, $b, TMP_27, self = this, $iter = TMP_26.$$p, $yield = $iter || nil, num = nil;

      TMP_26.$$p = null;
      num = $scope.get('Opal')['$coerce_to!'](n, $scope.get('Integer'), "to_int");
      if (($yield !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_27 = function(){var self = TMP_27.$$s || this;

        return binomial_coefficient(self.length, num);}, TMP_27.$$s = self, TMP_27.$$arity = 0, TMP_27), $a).call($b, "combination", num)
      };
      
      var i, length, stack, chosen, lev, done, next;

      if (num === 0) {
        Opal.yield1($yield, [])
      } else if (num === 1) {
        for (i = 0, length = self.length; i < length; i++) {
          Opal.yield1($yield, [self[i]])
        }
      }
      else if (num === self.length) {
        Opal.yield1($yield, self.slice())
      }
      else if (num >= 0 && num < self.length) {
        stack = [];
        for (i = 0; i <= num + 1; i++) {
          stack.push(0);
        }

        chosen = [];
        lev = 0;
        done = false;
        stack[0] = -1;

        while (!done) {
          chosen[lev] = self[stack[lev+1]];
          while (lev < num - 1) {
            lev++;
            next = stack[lev+1] = stack[lev] + 1;
            chosen[lev] = self[next];
          }
          Opal.yield1($yield, chosen.slice())
          lev++;
          do {
            done = (lev === 0);
            stack[lev]++;
            lev--;
          } while ( stack[lev+1] + num === self.length + lev + 1 );
        }
      }
    ;
      return self;
    }, TMP_26.$$arity = 1);

    Opal.defn(self, '$repeated_combination', TMP_28 = function ːrepeated_combination(n) {
      var $a, $b, TMP_29, self = this, $iter = TMP_28.$$p, $yield = $iter || nil, num = nil;

      TMP_28.$$p = null;
      num = $scope.get('Opal')['$coerce_to!'](n, $scope.get('Integer'), "to_int");
      if (($yield !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_29 = function(){var self = TMP_29.$$s || this;

        return binomial_coefficient(self.length + num - 1, num);}, TMP_29.$$s = self, TMP_29.$$arity = 0, TMP_29), $a).call($b, "repeated_combination", num)
      };
      
      function iterate(max, from, buffer, self) {
        if (buffer.length == max) {
          var copy = buffer.slice();
          Opal.yield1($yield, copy)
          return;
        }
        for (var i = from; i < self.length; i++) {
          buffer.push(self[i]);
          iterate(max, i, buffer, self);
          buffer.pop();
        }
      }

      if (num >= 0) {
        iterate(num, 0, [], self);
      }
    
      return self;
    }, TMP_28.$$arity = 1);

    Opal.defn(self, '$compact', TMP_30 = function ːcompact() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length, item; i < length; i++) {
        if ((item = self[i]) !== nil) {
          result.push(item);
        }
      }

      return result;
    
    }, TMP_30.$$arity = 0);

    Opal.defn(self, '$compact!', TMP_31 = function() {
      var self = this;

      
      var original = self.length;

      for (var i = 0, length = self.length; i < length; i++) {
        if (self[i] === nil) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }

      return self.length === original ? nil : self;
    
    }, TMP_31.$$arity = 0);

    Opal.defn(self, '$concat', TMP_32 = function ːconcat(other) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = $scope.get('Opal').$coerce_to(other, $scope.get('Array'), "to_ary").$to_a()
      };
      
      for (var i = 0, length = other.length; i < length; i++) {
        self.push(other[i]);
      }
    
      return self;
    }, TMP_32.$$arity = 1);

    Opal.defn(self, '$delete', TMP_33 = function(object) {
      var self = this, $iter = TMP_33.$$p, $yield = $iter || nil;

      TMP_33.$$p = null;
      
      var original = self.length;

      for (var i = 0, length = original; i < length; i++) {
        if ((self[i])['$=='](object)) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }

      if (self.length === original) {
        if (($yield !== nil)) {
          return Opal.yieldX($yield, []);
        }
        return nil;
      }
      return object;
    ;
    }, TMP_33.$$arity = 1);

    Opal.defn(self, '$delete_at', TMP_34 = function ːdelete_at(index) {
      var self = this;

      
      index = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");

      if (index < 0) {
        index += self.length;
      }

      if (index < 0 || index >= self.length) {
        return nil;
      }

      var result = self[index];

      self.splice(index, 1);

      return result;
    ;
    }, TMP_34.$$arity = 1);

    Opal.defn(self, '$delete_if', TMP_35 = function ːdelete_if() {
      var $a, $b, TMP_36, self = this, $iter = TMP_35.$$p, block = $iter || nil;

      TMP_35.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_36 = function(){var self = TMP_36.$$s || this;

        return self.$size()}, TMP_36.$$s = self, TMP_36.$$arity = 0, TMP_36), $a).call($b, "delete_if")
      };
      
      for (var i = 0, length = self.length, value; i < length; i++) {
        value = block(self[i]);

        if (value !== false && value !== nil) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }
    
      return self;
    }, TMP_35.$$arity = 0);

    Opal.defn(self, '$drop', TMP_37 = function ːdrop(number) {
      var self = this;

      
      if (number < 0) {
        self.$raise($scope.get('ArgumentError'))
      }

      return self.slice(number);
    ;
    }, TMP_37.$$arity = 1);

    Opal.defn(self, '$dup', TMP_38 = function ːdup() {
      var $a, $b, self = this, $iter = TMP_38.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_38.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      
      if (
        self.$$class === Opal.Array &&
        self.$allocate.$$pristine &&
        self.$copy_instance_variables.$$pristine &&
        self.$initialize_dup.$$pristine
      ) return self.slice(0);
    
      return ($a = ($b = self, Opal.find_super_dispatcher(self, 'dup', TMP_38, false)), $a.$$p = $iter, $a).apply($b, $zuper);
    }, TMP_38.$$arity = 0);

    Opal.defn(self, '$each', TMP_39 = function ːeach() {
      var $a, $b, TMP_40, self = this, $iter = TMP_39.$$p, block = $iter || nil;

      TMP_39.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_40 = function(){var self = TMP_40.$$s || this;

        return self.$size()}, TMP_40.$$s = self, TMP_40.$$arity = 0, TMP_40), $a).call($b, "each")
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, self[i]);
      }
    
      return self;
    }, TMP_39.$$arity = 0);

    Opal.defn(self, '$each_index', TMP_41 = function ːeach_index() {
      var $a, $b, TMP_42, self = this, $iter = TMP_41.$$p, block = $iter || nil;

      TMP_41.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_42 = function(){var self = TMP_42.$$s || this;

        return self.$size()}, TMP_42.$$s = self, TMP_42.$$arity = 0, TMP_42), $a).call($b, "each_index")
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, i);
      }
    
      return self;
    }, TMP_41.$$arity = 0);

    Opal.defn(self, '$empty?', TMP_43 = function() {
      var self = this;

      return self.length === 0;
    }, TMP_43.$$arity = 0);

    Opal.defn(self, '$eql?', TMP_44 = function(other) {
      var self = this;

      
      var recursed = {};

      function _eql(array, other) {
        var i, length, a, b;

        if (!other.$$is_array) {
          return false;
        }

        other = other.$to_a();

        if (array.length !== other.length) {
          return false;
        }

        recursed[(array).$object_id()] = true;

        for (i = 0, length = array.length; i < length; i++) {
          a = array[i];
          b = other[i];
          if (a.$$is_array) {
            if (b.$$is_array && b.length !== a.length) {
              return false;
            }
            if (!recursed.hasOwnProperty((a).$object_id())) {
              if (!_eql(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$eql?'](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eql(self, other);
    
    }, TMP_44.$$arity = 1);

    Opal.defn(self, '$fetch', TMP_45 = function ːfetch(index, defaults) {
      var self = this, $iter = TMP_45.$$p, block = $iter || nil;

      TMP_45.$$p = null;
      
      var original = index;

      index = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");

      if (index < 0) {
        index += self.length;
      }

      if (index >= 0 && index < self.length) {
        return self[index];
      }

      if (block !== nil) {
        return block(original);
      }

      if (defaults != null) {
        return defaults;
      }

      if (self.length === 0) {
        self.$raise($scope.get('IndexError'), "index " + (original) + " outside of array bounds: 0...0")
      }
      else {
        self.$raise($scope.get('IndexError'), "index " + (original) + " outside of array bounds: -" + (self.length) + "..." + (self.length));
      }
    ;
    }, TMP_45.$$arity = -2);

    Opal.defn(self, '$fill', TMP_46 = function ːfill($a_rest) {
      var $b, $c, self = this, args, $iter = TMP_46.$$p, block = $iter || nil, one = nil, two = nil, obj = nil, left = nil, right = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_46.$$p = null;
      
      var i, length, value;
    
      if (block !== false && block !== nil && block != null) {
        if ((($b = args.length > 2) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (args.$length()) + " for 0..2)")};
        $c = args, $b = Opal.to_ary($c), one = ($b[0] == null ? nil : $b[0]), two = ($b[1] == null ? nil : $b[1]), $c;
        } else {
        if ((($b = args.length == 0) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          self.$raise($scope.get('ArgumentError'), "wrong number of arguments (0 for 1..3)")
        } else if ((($b = args.length > 3) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (args.$length()) + " for 1..3)")};
        $c = args, $b = Opal.to_ary($c), obj = ($b[0] == null ? nil : $b[0]), one = ($b[1] == null ? nil : $b[1]), two = ($b[2] == null ? nil : $b[2]), $c;
      };
      if ((($b = $scope.get('Range')['$==='](one)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        if (two !== false && two !== nil && two != null) {
          self.$raise($scope.get('TypeError'), "length invalid with range")};
        left = $scope.get('Opal').$coerce_to(one.$begin(), $scope.get('Integer'), "to_int");
        if ((($b = left < 0) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          left += self.length;};
        if ((($b = left < 0) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          self.$raise($scope.get('RangeError'), "" + (one.$inspect()) + " out of range")};
        right = $scope.get('Opal').$coerce_to(one.$end(), $scope.get('Integer'), "to_int");
        if ((($b = right < 0) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          right += self.length;};
        if ((($b = one['$exclude_end?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          } else {
          right += 1;
        };
        if ((($b = right <= left) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return self};
      } else if (one !== false && one !== nil && one != null) {
        left = $scope.get('Opal').$coerce_to(one, $scope.get('Integer'), "to_int");
        if ((($b = left < 0) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          left += self.length;};
        if ((($b = left < 0) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          left = 0};
        if (two !== false && two !== nil && two != null) {
          right = $scope.get('Opal').$coerce_to(two, $scope.get('Integer'), "to_int");
          if ((($b = right == 0) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return self};
          right += left;
          } else {
          right = self.length
        };
        } else {
        left = 0;
        right = self.length;
      };
      if ((($b = left > self.length) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        
        for (i = self.length; i < right; i++) {
          self[i] = nil;
        }
      ;};
      if ((($b = right > self.length) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        self.length = right};
      if (block !== false && block !== nil && block != null) {
        
        for (length = self.length; left < right; left++) {
          value = block(left);
          self[left] = value;
        }
      ;
        } else {
        
        for (length = self.length; left < right; left++) {
          self[left] = obj;
        }
      ;
      };
      return self;
    }, TMP_46.$$arity = -1);

    Opal.defn(self, '$first', TMP_47 = function ːfirst(count) {
      var self = this;

      
      if (count == null) {
        return self.length === 0 ? nil : self[0];
      }

      count = $scope.get('Opal').$coerce_to(count, $scope.get('Integer'), "to_int");

      if (count < 0) {
        self.$raise($scope.get('ArgumentError'), "negative array size");
      }

      return self.slice(0, count);
    
    }, TMP_47.$$arity = -1);

    Opal.defn(self, '$flatten', TMP_48 = function ːflatten(level) {
      var self = this;

      
      function _flatten(array, level) {
        var result = [],
            i, length,
            item, ary;

        array = (array).$to_a();

        for (i = 0, length = array.length; i < length; i++) {
          item = array[i];

          if (!$scope.get('Opal')['$respond_to?'](item, "to_ary")) {
            result.push(item);
            continue;
          }

          ary = (item).$to_ary();

          if (ary === nil) {
            result.push(item);
            continue;
          }

          if (!ary.$$is_array) {
            self.$raise($scope.get('TypeError'));
          }

          if (ary === self) {
            self.$raise($scope.get('ArgumentError'));
          }

          switch (level) {
          case undefined:
            result = result.concat(_flatten(ary));
            break;
          case 0:
            result.push(ary);
            break;
          default:
            result.push.apply(result, _flatten(ary, level - 1));
          }
        }
        return result;
      }

      if (level !== undefined) {
        level = $scope.get('Opal').$coerce_to(level, $scope.get('Integer'), "to_int");
      }

      return toArraySubclass(_flatten(self, level), self.$class());
    
    }, TMP_48.$$arity = -1);

    Opal.defn(self, '$flatten!', TMP_49 = function(level) {
      var self = this;

      
      var flattened = self.$flatten(level);

      if (self.length == flattened.length) {
        for (var i = 0, length = self.length; i < length; i++) {
          if (self[i] !== flattened[i]) {
            break;
          }
        }

        if (i == length) {
          return nil;
        }
      }

      self.$replace(flattened);
    ;
      return self;
    }, TMP_49.$$arity = -1);

    Opal.defn(self, '$hash', TMP_50 = function ːhash() {
      var self = this;

      
      var top = (Opal.hash_ids == undefined),
          result = ['A'],
          hash_id = self.$object_id(),
          item, i, key;

      try {
        if (top) {
          Opal.hash_ids = {};
        }

        if (Opal.hash_ids.hasOwnProperty(hash_id)) {
          return 'self';
        }

        for (key in Opal.hash_ids) {
          if (Opal.hash_ids.hasOwnProperty(key)) {
            item = Opal.hash_ids[key];
            if (self['$eql?'](item)) {
              return 'self';
            }
          }
        }

        Opal.hash_ids[hash_id] = self;

        for (i = 0; i < self.length; i++) {
          item = self[i];
          result.push(item.$hash());
        }

        return result.join(',');
      } finally {
        if (top) {
          delete Opal.hash_ids;
        }
      }
    
    }, TMP_50.$$arity = 0);

    Opal.defn(self, '$include?', TMP_51 = function(member) {
      var self = this;

      
      for (var i = 0, length = self.length; i < length; i++) {
        if ((self[i])['$=='](member)) {
          return true;
        }
      }

      return false;
    
    }, TMP_51.$$arity = 1);

    Opal.defn(self, '$index', TMP_52 = function ːindex(object) {
      var self = this, $iter = TMP_52.$$p, block = $iter || nil;

      TMP_52.$$p = null;
      
      var i, length, value;

      if (object != null) {
        for (i = 0, length = self.length; i < length; i++) {
          if ((self[i])['$=='](object)) {
            return i;
          }
        }
      }
      else if (block !== nil) {
        for (i = 0, length = self.length; i < length; i++) {
          value = block(self[i]);

          if (value !== false && value !== nil) {
            return i;
          }
        }
      }
      else {
        return self.$enum_for("index");
      }

      return nil;
    
    }, TMP_52.$$arity = -1);

    Opal.defn(self, '$insert', TMP_53 = function ːinsert(index, $a_rest) {
      var self = this, objects;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      objects = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        objects[$arg_idx - 1] = arguments[$arg_idx];
      }
      
      index = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");

      if (objects.length > 0) {
        if (index < 0) {
          index += self.length + 1;

          if (index < 0) {
            self.$raise($scope.get('IndexError'), "" + (index) + " is out of bounds");
          }
        }
        if (index > self.length) {
          for (var i = self.length; i < index; i++) {
            self.push(nil);
          }
        }

        self.splice.apply(self, [index, 0].concat(objects));
      }
    ;
      return self;
    }, TMP_53.$$arity = -2);

    Opal.defn(self, '$inspect', TMP_54 = function ːinspect() {
      var self = this;

      
      var result = [],
          id     = self.$__id__();

      for (var i = 0, length = self.length; i < length; i++) {
        var item = self['$[]'](i);

        if ((item).$__id__() === id) {
          result.push('[...]');
        }
        else {
          result.push((item).$inspect());
        }
      }

      return '[' + result.join(', ') + ']';
    ;
    }, TMP_54.$$arity = 0);

    Opal.defn(self, '$join', TMP_55 = function ːjoin(sep) {
      var $a, self = this;
      if ($gvars[","] == null) $gvars[","] = nil;

      if (sep == null) {
        sep = nil;
      }
      if ((($a = self.length === 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ""};
      if ((($a = sep === nil) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        sep = $gvars[","]};
      
      var result = [];
      var i, length, item, tmp;

      for (i = 0, length = self.length; i < length; i++) {
        item = self[i];

        if ($scope.get('Opal')['$respond_to?'](item, "to_str")) {
          tmp = (item).$to_str();

          if (tmp !== nil) {
            result.push((tmp).$to_s());

            continue;
          }
        }

        if ($scope.get('Opal')['$respond_to?'](item, "to_ary")) {
          tmp = (item).$to_ary();

          if (tmp === self) {
            self.$raise($scope.get('ArgumentError'));
          }

          if (tmp !== nil) {
            result.push((tmp).$join(sep));

            continue;
          }
        }

        if ($scope.get('Opal')['$respond_to?'](item, "to_s")) {
          tmp = (item).$to_s();

          if (tmp !== nil) {
            result.push(tmp);

            continue;
          }
        }

        self.$raise($scope.get('NoMethodError').$new("" + ($scope.get('Opal').$inspect(item)) + " doesn't respond to #to_str, #to_ary or #to_s", "to_str"));
      }

      if (sep === nil) {
        return result.join('');
      }
      else {
        return result.join($scope.get('Opal')['$coerce_to!'](sep, $scope.get('String'), "to_str").$to_s());
      }
    ;
    }, TMP_55.$$arity = -1);

    Opal.defn(self, '$keep_if', TMP_56 = function ːkeep_if() {
      var $a, $b, TMP_57, self = this, $iter = TMP_56.$$p, block = $iter || nil;

      TMP_56.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_57 = function(){var self = TMP_57.$$s || this;

        return self.$size()}, TMP_57.$$s = self, TMP_57.$$arity = 0, TMP_57), $a).call($b, "keep_if")
      };
      
      for (var i = 0, length = self.length, value; i < length; i++) {
        value = block(self[i]);

        if (value === false || value === nil) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }
    
      return self;
    }, TMP_56.$$arity = 0);

    Opal.defn(self, '$last', TMP_58 = function ːlast(count) {
      var self = this;

      
      if (count == null) {
        return self.length === 0 ? nil : self[self.length - 1];
      }

      count = $scope.get('Opal').$coerce_to(count, $scope.get('Integer'), "to_int");

      if (count < 0) {
        self.$raise($scope.get('ArgumentError'), "negative array size");
      }

      if (count > self.length) {
        count = self.length;
      }

      return self.slice(self.length - count, self.length);
    
    }, TMP_58.$$arity = -1);

    Opal.defn(self, '$length', TMP_59 = function ːlength() {
      var self = this;

      return self.length;
    }, TMP_59.$$arity = 0);

    Opal.alias(self, 'map', 'collect');

    Opal.alias(self, 'map!', 'collect!');

    
    // Returns the product of from, from-1, ..., from - how_many + 1.
    function descending_factorial(from, how_many) {
      var count = how_many >= 0 ? 1 : 0;
      while (how_many) {
        count *= from;
        from--;
        how_many--;
      }
      return count;
    }
  

    Opal.defn(self, '$permutation', TMP_60 = function ːpermutation(num) {
      var $a, $b, TMP_61, self = this, $iter = TMP_60.$$p, block = $iter || nil, perm = nil, used = nil;

      TMP_60.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_61 = function(){var self = TMP_61.$$s || this;

        return descending_factorial(self.length, num === undefined ? self.length : num);}, TMP_61.$$s = self, TMP_61.$$arity = 0, TMP_61), $a).call($b, "permutation", num)
      };
      
      var permute, offensive, output;

      if (num === undefined) {
        num = self.length;
      }
      else {
        num = $scope.get('Opal').$coerce_to(num, $scope.get('Integer'), "to_int")
      }

      if (num < 0 || self.length < num) {
        // no permutations, yield nothing
      }
      else if (num === 0) {
        // exactly one permutation: the zero-length array
        Opal.yield1(block, [])
      }
      else if (num === 1) {
        // this is a special, easy case
        for (var i = 0; i < self.length; i++) {
          Opal.yield1(block, [self[i]])
        }
      }
      else {
        // this is the general case
        perm = $scope.get('Array').$new(num)
        used = $scope.get('Array').$new(self.length, false)

        permute = function(num, perm, index, used, blk) {
          self = this;
          for(var i = 0; i < self.length; i++){
            if(used['$[]'](i)['$!']()) {
              perm[index] = i;
              if(index < num - 1) {
                used[i] = true;
                permute.call(self, num, perm, index + 1, used, blk);
                used[i] = false;
              }
              else {
                output = [];
                for (var j = 0; j < perm.length; j++) {
                  output.push(self[perm[j]]);
                }
                Opal.yield1(blk, output);
              }
            }
          }
        }

        if ((block !== nil)) {
          // offensive (both definitions) copy.
          offensive = self.slice();
          permute.call(offensive, num, perm, 0, used, block);
        }
        else {
          permute.call(self, num, perm, 0, used, block);
        }
      }
    ;
      return self;
    }, TMP_60.$$arity = -1);

    Opal.defn(self, '$repeated_permutation', TMP_62 = function ːrepeated_permutation(n) {
      var $a, $b, TMP_63, self = this, $iter = TMP_62.$$p, $yield = $iter || nil, num = nil;

      TMP_62.$$p = null;
      num = $scope.get('Opal')['$coerce_to!'](n, $scope.get('Integer'), "to_int");
      if (($yield !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_63 = function(){var self = TMP_63.$$s || this, $c;

        if ((($c = $rb_ge(num, 0)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return self.$size()['$**'](num)
            } else {
            return 0
          }}, TMP_63.$$s = self, TMP_63.$$arity = 0, TMP_63), $a).call($b, "repeated_permutation", num)
      };
      
      function iterate(max, buffer, self) {
        if (buffer.length == max) {
          var copy = buffer.slice();
          Opal.yield1($yield, copy)
          return;
        }
        for (var i = 0; i < self.length; i++) {
          buffer.push(self[i]);
          iterate(max, buffer, self);
          buffer.pop();
        }
      }

      iterate(num, [], self.slice());
    
      return self;
    }, TMP_62.$$arity = 1);

    Opal.defn(self, '$pop', TMP_64 = function ːpop(count) {
      var $a, self = this;

      if ((($a = count === undefined) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = self.length === 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil};
        return self.pop();};
      count = $scope.get('Opal').$coerce_to(count, $scope.get('Integer'), "to_int");
      if ((($a = count < 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "negative array size")};
      if ((($a = self.length === 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return []};
      if ((($a = count > self.length) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.splice(0, self.length);
        } else {
        return self.splice(self.length - count, self.length);
      };
    }, TMP_64.$$arity = -1);

    Opal.defn(self, '$product', TMP_65 = function ːproduct($a_rest) {
      var self = this, args, $iter = TMP_65.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_65.$$p = null;
      
      var result = (block !== nil) ? null : [],
          n = args.length + 1,
          counters = new Array(n),
          lengths  = new Array(n),
          arrays   = new Array(n),
          i, m, subarray, len, resultlen = 1;

      arrays[0] = self;
      for (i = 1; i < n; i++) {
        arrays[i] = $scope.get('Opal').$coerce_to(args[i - 1], $scope.get('Array'), "to_ary");
      }

      for (i = 0; i < n; i++) {
        len = arrays[i].length;
        if (len === 0) {
          return result || self;
        }
        resultlen *= len;
        if (resultlen > 2147483647) {
          self.$raise($scope.get('RangeError'), "too big to product")
        }
        lengths[i] = len;
        counters[i] = 0;
      }

      outer_loop: for (;;) {
        subarray = [];
        for (i = 0; i < n; i++) {
          subarray.push(arrays[i][counters[i]]);
        }
        if (result) {
          result.push(subarray);
        } else {
          Opal.yield1(block, subarray)
        }
        m = n - 1;
        counters[m]++;
        while (counters[m] === lengths[m]) {
          counters[m] = 0;
          if (--m < 0) break outer_loop;
          counters[m]++;
        }
      }

      return result || self;
    ;
    }, TMP_65.$$arity = -1);

    Opal.defn(self, '$push', TMP_66 = function ːpush($a_rest) {
      var self = this, objects;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      objects = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        objects[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      for (var i = 0, length = objects.length; i < length; i++) {
        self.push(objects[i]);
      }
    
      return self;
    }, TMP_66.$$arity = -1);

    Opal.defn(self, '$rassoc', TMP_67 = function ːrassoc(object) {
      var self = this;

      
      for (var i = 0, length = self.length, item; i < length; i++) {
        item = self[i];

        if (item.length && item[1] !== undefined) {
          if ((item[1])['$=='](object)) {
            return item;
          }
        }
      }

      return nil;
    
    }, TMP_67.$$arity = 1);

    Opal.defn(self, '$reject', TMP_68 = function ːreject() {
      var $a, $b, TMP_69, self = this, $iter = TMP_68.$$p, block = $iter || nil;

      TMP_68.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_69 = function(){var self = TMP_69.$$s || this;

        return self.$size()}, TMP_69.$$s = self, TMP_69.$$arity = 0, TMP_69), $a).call($b, "reject")
      };
      
      var result = [];

      for (var i = 0, length = self.length, value; i < length; i++) {
        value = block(self[i]);

        if (value === false || value === nil) {
          result.push(self[i]);
        }
      }
      return result;
    
    }, TMP_68.$$arity = 0);

    Opal.defn(self, '$reject!', TMP_70 = function() {
      var $a, $b, TMP_71, $c, self = this, $iter = TMP_70.$$p, block = $iter || nil, original = nil;

      TMP_70.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_71 = function(){var self = TMP_71.$$s || this;

        return self.$size()}, TMP_71.$$s = self, TMP_71.$$arity = 0, TMP_71), $a).call($b, "reject!")
      };
      original = self.$length();
      ($a = ($c = self).$delete_if, $a.$$p = block.$to_proc(), $a).call($c);
      if (self.$length()['$=='](original)) {
        return nil
        } else {
        return self
      };
    }, TMP_70.$$arity = 0);

    Opal.defn(self, '$replace', TMP_72 = function ːreplace(other) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = $scope.get('Opal').$coerce_to(other, $scope.get('Array'), "to_ary").$to_a()
      };
      
      self.splice(0, self.length);
      self.push.apply(self, other);
    
      return self;
    }, TMP_72.$$arity = 1);

    Opal.defn(self, '$reverse', TMP_73 = function ːreverse() {
      var self = this;

      return self.slice(0).reverse();
    }, TMP_73.$$arity = 0);

    Opal.defn(self, '$reverse!', TMP_74 = function() {
      var self = this;

      return self.reverse();
    }, TMP_74.$$arity = 0);

    Opal.defn(self, '$reverse_each', TMP_75 = function ːreverse_each() {
      var $a, $b, TMP_76, $c, self = this, $iter = TMP_75.$$p, block = $iter || nil;

      TMP_75.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_76 = function(){var self = TMP_76.$$s || this;

        return self.$size()}, TMP_76.$$s = self, TMP_76.$$arity = 0, TMP_76), $a).call($b, "reverse_each")
      };
      ($a = ($c = self.$reverse()).$each, $a.$$p = block.$to_proc(), $a).call($c);
      return self;
    }, TMP_75.$$arity = 0);

    Opal.defn(self, '$rindex', TMP_77 = function ːrindex(object) {
      var self = this, $iter = TMP_77.$$p, block = $iter || nil;

      TMP_77.$$p = null;
      
      var i, value;

      if (object != null) {
        for (i = self.length - 1; i >= 0; i--) {
          if (i >= self.length) {
            break;
          }
          if ((self[i])['$=='](object)) {
            return i;
          }
        }
      }
      else if (block !== nil) {
        for (i = self.length - 1; i >= 0; i--) {
          if (i >= self.length) {
            break;
          }

          value = block(self[i]);

          if (value !== false && value !== nil) {
            return i;
          }
        }
      }
      else if (object == null) {
        return self.$enum_for("rindex");
      }

      return nil;
    
    }, TMP_77.$$arity = -1);

    Opal.defn(self, '$rotate', TMP_78 = function ːrotate(n) {
      var self = this;

      if (n == null) {
        n = 1;
      }
      n = $scope.get('Opal').$coerce_to(n, $scope.get('Integer'), "to_int");
      
      var ary, idx, firstPart, lastPart;

      if (self.length === 1) {
        return self.slice();
      }
      if (self.length === 0) {
        return [];
      }

      ary = self.slice();
      idx = n % ary.length;

      firstPart = ary.slice(idx);
      lastPart = ary.slice(0, idx);
      return firstPart.concat(lastPart);
    
    }, TMP_78.$$arity = -1);

    Opal.defn(self, '$rotate!', TMP_79 = function(cnt) {
      var self = this, ary = nil;

      if (cnt == null) {
        cnt = 1;
      }
      
      if (self.length === 0 || self.length === 1) {
        return self;
      }
    
      cnt = $scope.get('Opal').$coerce_to(cnt, $scope.get('Integer'), "to_int");
      ary = self.$rotate(cnt);
      return self.$replace(ary);
    }, TMP_79.$$arity = -1);

    (function($base, $super) {
      function $SampleRandom(){};
      var self = $SampleRandom = $klass($base, $super, 'SampleRandom', $SampleRandom);

      var def = self.$$proto, $scope = self.$$scope, TMP_80, TMP_81;

      def.rng = nil;
      Opal.defn(self, '$initialize', TMP_80 = function ːinitialize(rng) {
        var self = this;

        return self.rng = rng;
      }, TMP_80.$$arity = 1);

      return (Opal.defn(self, '$rand', TMP_81 = function ːrand(size) {
        var $a, self = this, random = nil;

        random = $scope.get('Opal').$coerce_to(self.rng.$rand(size), $scope.get('Integer'), "to_int");
        if ((($a = random < 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('RangeError'), "random value must be >= 0")};
        if ((($a = random < size) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$raise($scope.get('RangeError'), "random value must be less than Array size")
        };
        return random;
      }, TMP_81.$$arity = 1), nil) && 'rand';
    })($scope.base, null);

    Opal.defn(self, '$sample', TMP_82 = function ːsample(count, options) {
      var $a, $b, self = this, o = nil, rng = nil;

      if ((($a = count === undefined) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$at($scope.get('Kernel').$rand(self.length))};
      if ((($a = options === undefined) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = (o = $scope.get('Opal')['$coerce_to?'](count, $scope.get('Hash'), "to_hash"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          options = o;
          count = nil;
          } else {
          options = nil;
          count = $scope.get('Opal').$coerce_to(count, $scope.get('Integer'), "to_int");
        }
        } else {
        count = $scope.get('Opal').$coerce_to(count, $scope.get('Integer'), "to_int");
        options = $scope.get('Opal').$coerce_to(options, $scope.get('Hash'), "to_hash");
      };
      if ((($a = (($b = count !== false && count !== nil && count != null) ? count < 0 : count)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "count must be greater than 0")};
      if (options !== false && options !== nil && options != null) {
        rng = options['$[]']("random")};
      if ((($a = (($b = rng !== false && rng !== nil && rng != null) ? rng['$respond_to?']("rand") : rng)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        rng = $scope.get('SampleRandom').$new(rng)
        } else {
        rng = $scope.get('Kernel')
      };
      if (count !== false && count !== nil && count != null) {
        } else {
        return self[rng.$rand(self.length)]
      };
      

      var abandon, spin, result, i, j, k, targetIndex, oldValue;

      if (count > self.length) {
        count = self.length;
      }

      switch (count) {
        case 0:
          return [];
          break;
        case 1:
          return [self[rng.$rand(self.length)]];
          break;
        case 2:
          i = rng.$rand(self.length);
          j = rng.$rand(self.length);
          if (i === j) {
            j = i === 0 ? i + 1 : i - 1;
          }
          return [self[i], self[j]];
          break;
        default:
          if (self.length / count > 3) {
            abandon = false;
            spin = 0;

            result = $scope.get('Array').$new(count);
            i = 1;

            result[0] = rng.$rand(self.length);
            while (i < count) {
              k = rng.$rand(self.length);
              j = 0;

              while (j < i) {
                while (k === result[j]) {
                  spin++;
                  if (spin > 100) {
                    abandon = true;
                    break;
                  }
                  k = rng.$rand(self.length);
                }
                if (abandon) { break; }

                j++;
              }

              if (abandon) { break; }

              result[i] = k;

              i++;
            }

            if (!abandon) {
              i = 0;
              while (i < count) {
                result[i] = self[result[i]];
                i++;
              }

              return result;
            }
          }

          result = self.slice();

          for (var c = 0; c < count; c++) {
            targetIndex = rng.$rand(self.length);
            oldValue = result[c];
            result[c] = result[targetIndex];
            result[targetIndex] = oldValue;
          }

          return count === self.length ? result : (result)['$[]'](0, count);
      }
    
    }, TMP_82.$$arity = -1);

    Opal.defn(self, '$select', TMP_83 = function ːselect() {
      var $a, $b, TMP_84, self = this, $iter = TMP_83.$$p, block = $iter || nil;

      TMP_83.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_84 = function(){var self = TMP_84.$$s || this;

        return self.$size()}, TMP_84.$$s = self, TMP_84.$$arity = 0, TMP_84), $a).call($b, "select")
      };
      
      var result = [];

      for (var i = 0, length = self.length, item, value; i < length; i++) {
        item = self[i];

        value = Opal.yield1(block, item);

        if (value !== false && value !== nil) {
          result.push(item);
        }
      }

      return result;
    
    }, TMP_83.$$arity = 0);

    Opal.defn(self, '$select!', TMP_85 = function() {
      var $a, $b, TMP_86, $c, self = this, $iter = TMP_85.$$p, block = $iter || nil;

      TMP_85.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_86 = function(){var self = TMP_86.$$s || this;

        return self.$size()}, TMP_86.$$s = self, TMP_86.$$arity = 0, TMP_86), $a).call($b, "select!")
      };
      
      var original = self.length;
      ($a = ($c = self).$keep_if, $a.$$p = block.$to_proc(), $a).call($c);
      return self.length === original ? nil : self;
    
    }, TMP_85.$$arity = 0);

    Opal.defn(self, '$shift', TMP_87 = function ːshift(count) {
      var $a, self = this;

      if ((($a = count === undefined) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = self.length === 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil};
        return self.shift();};
      count = $scope.get('Opal').$coerce_to(count, $scope.get('Integer'), "to_int");
      if ((($a = count < 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "negative array size")};
      if ((($a = self.length === 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return []};
      return self.splice(0, count);
    }, TMP_87.$$arity = -1);

    Opal.alias(self, 'size', 'length');

    Opal.defn(self, '$shuffle', TMP_88 = function ːshuffle(rng) {
      var self = this;

      return self.$dup().$to_a()['$shuffle!'](rng);
    }, TMP_88.$$arity = -1);

    Opal.defn(self, '$shuffle!', TMP_89 = function(rng) {
      var self = this;

      
      var randgen, i = self.length, j, tmp;

      if (rng !== undefined) {
        rng = $scope.get('Opal')['$coerce_to?'](rng, $scope.get('Hash'), "to_hash");

        if (rng !== nil) {
          rng = rng['$[]']("random");

          if (rng !== nil && rng['$respond_to?']("rand")) {
            randgen = rng;
          }
        }
      }

      while (i) {
        if (randgen) {
          j = randgen.$rand(i).$to_int();

          if (j < 0) {
            self.$raise($scope.get('RangeError'), "random number too small " + (j))
          }

          if (j >= i) {
            self.$raise($scope.get('RangeError'), "random number too big " + (j))
          }
        }
        else {
          j = Math.floor(Math.random() * i);
        }

        tmp = self[--i];
        self[i] = self[j];
        self[j] = tmp;
      }

      return self;
    ;
    }, TMP_89.$$arity = -1);

    Opal.alias(self, 'slice', '[]');

    Opal.defn(self, '$slice!', TMP_90 = function(index, length) {
      var $a, self = this, result = nil, range = nil, range_start = nil, range_end = nil, start = nil;

      result = nil;
      if ((($a = length === undefined) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = $scope.get('Range')['$==='](index)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          range = index;
          result = self['$[]'](range);
          range_start = $scope.get('Opal').$coerce_to(range.$begin(), $scope.get('Integer'), "to_int");
          range_end = $scope.get('Opal').$coerce_to(range.$end(), $scope.get('Integer'), "to_int");
          
          if (range_start < 0) {
            range_start += self.length;
          }

          if (range_end < 0) {
            range_end += self.length;
          } else if (range_end >= self.length) {
            range_end = self.length - 1;
            if (range.exclude) {
              range_end += 1;
            }
          }

          var range_length = range_end - range_start;
          if (range.exclude) {
            range_end -= 1;
          } else {
            range_length += 1;
          }

          if (range_start < self.length && range_start >= 0 && range_end < self.length && range_end >= 0 && range_length > 0) {
            self.splice(range_start, range_length);
          }
        
          } else {
          start = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");
          
          if (start < 0) {
            start += self.length;
          }

          if (start < 0 || start >= self.length) {
            return nil;
          }

          result = self[start];

          if (start === 0) {
            self.shift();
          } else {
            self.splice(start, 1);
          }
        
        }
        } else {
        start = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");
        length = $scope.get('Opal').$coerce_to(length, $scope.get('Integer'), "to_int");
        
        if (length < 0) {
          return nil;
        }

        var end = start + length;

        result = self['$[]'](start, length);

        if (start < 0) {
          start += self.length;
        }

        if (start + length > self.length) {
          length = self.length - start;
        }

        if (start < self.length && start >= 0) {
          self.splice(start, length);
        }
      
      };
      return result;
    }, TMP_90.$$arity = -2);

    Opal.defn(self, '$sort', TMP_91 = function ːsort() {
      var $a, self = this, $iter = TMP_91.$$p, block = $iter || nil;

      TMP_91.$$p = null;
      if ((($a = self.length > 1) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return self
      };
      
      if (block === nil) {
        block = function(a, b) {
          return (a)['$<=>'](b);
        };
      }

      return self.slice().sort(function(x, y) {
        var ret = block(x, y);

        if (ret === nil) {
          self.$raise($scope.get('ArgumentError'), "comparison of " + ((x).$inspect()) + " with " + ((y).$inspect()) + " failed");
        }

        return $rb_gt(ret, 0) ? 1 : ($rb_lt(ret, 0) ? -1 : 0);
      });
    ;
    }, TMP_91.$$arity = 0);

    Opal.defn(self, '$sort!', TMP_92 = function() {
      var $a, $b, self = this, $iter = TMP_92.$$p, block = $iter || nil;

      TMP_92.$$p = null;
      
      var result;

      if ((block !== nil)) {
        result = ($a = ($b = (self.slice())).$sort, $a.$$p = block.$to_proc(), $a).call($b);
      }
      else {
        result = (self.slice()).$sort();
      }

      self.length = 0;
      for(var i = 0, length = result.length; i < length; i++) {
        self.push(result[i]);
      }

      return self;
    ;
    }, TMP_92.$$arity = 0);

    Opal.defn(self, '$sort_by!', TMP_93 = function() {
      var $a, $b, TMP_94, $c, self = this, $iter = TMP_93.$$p, block = $iter || nil;

      TMP_93.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_94 = function(){var self = TMP_94.$$s || this;

        return self.$size()}, TMP_94.$$s = self, TMP_94.$$arity = 0, TMP_94), $a).call($b, "sort_by!")
      };
      return self.$replace(($a = ($c = self).$sort_by, $a.$$p = block.$to_proc(), $a).call($c));
    }, TMP_93.$$arity = 0);

    Opal.defn(self, '$take', TMP_95 = function ːtake(count) {
      var self = this;

      
      if (count < 0) {
        self.$raise($scope.get('ArgumentError'));
      }

      return self.slice(0, count);
    ;
    }, TMP_95.$$arity = 1);

    Opal.defn(self, '$take_while', TMP_96 = function ːtake_while() {
      var self = this, $iter = TMP_96.$$p, block = $iter || nil;

      TMP_96.$$p = null;
      
      var result = [];

      for (var i = 0, length = self.length, item, value; i < length; i++) {
        item = self[i];

        value = block(item);

        if (value === false || value === nil) {
          return result;
        }

        result.push(item);
      }

      return result;
    
    }, TMP_96.$$arity = 0);

    Opal.defn(self, '$to_a', TMP_97 = function ːto_a() {
      var self = this;

      return self;
    }, TMP_97.$$arity = 0);

    Opal.alias(self, 'to_ary', 'to_a');

    Opal.defn(self, '$to_h', TMP_98 = function ːto_h() {
      var self = this;

      
      var i, len = self.length, ary, key, val, hash = $hash2([], {});

      for (i = 0; i < len; i++) {
        ary = $scope.get('Opal')['$coerce_to?'](self[i], $scope.get('Array'), "to_ary");
        if (!ary.$$is_array) {
          self.$raise($scope.get('TypeError'), "wrong element type " + ((ary).$class()) + " at " + (i) + " (expected array)")
        }
        if (ary.length !== 2) {
          self.$raise($scope.get('ArgumentError'), "wrong array length at " + (i) + " (expected 2, was " + ((ary).$length()) + ")")
        }
        key = ary[0];
        val = ary[1];
        Opal.hash_put(hash, key, val);
      }

      return hash;
    ;
    }, TMP_98.$$arity = 0);

    Opal.alias(self, 'to_s', 'inspect');

    Opal.defn(self, '$transpose', TMP_101 = function ːtranspose() {
      var $a, $b, TMP_99, self = this, result = nil, max = nil;

      if ((($a = self['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return []};
      result = [];
      max = nil;
      ($a = ($b = self).$each, $a.$$p = (TMP_99 = function(row){var self = TMP_99.$$s || this, $c, $d, TMP_100;
if (row == null) row = nil;
      if ((($c = $scope.get('Array')['$==='](row)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          row = row.$to_a()
          } else {
          row = $scope.get('Opal').$coerce_to(row, $scope.get('Array'), "to_ary").$to_a()
        };
        ((($c = max) !== false && $c !== nil && $c != null) ? $c : max = row.length);
        if ((($c = (row.length)['$!='](max)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          self.$raise($scope.get('IndexError'), "element size differs (" + (row.length) + " should be " + (max))};
        return ($c = ($d = (row.length)).$times, $c.$$p = (TMP_100 = function(i){var self = TMP_100.$$s || this, $e, $f, $g, entry = nil;
if (i == null) i = nil;
        entry = (($e = i, $f = result, ((($g = $f['$[]']($e)) !== false && $g !== nil && $g != null) ? $g : $f['$[]=']($e, []))));
          return entry['$<<'](row.$at(i));}, TMP_100.$$s = self, TMP_100.$$arity = 1, TMP_100), $c).call($d);}, TMP_99.$$s = self, TMP_99.$$arity = 1, TMP_99), $a).call($b);
      return result;
    }, TMP_101.$$arity = 0);

    Opal.defn(self, '$uniq', TMP_102 = function ːuniq() {
      var self = this, $iter = TMP_102.$$p, block = $iter || nil;

      TMP_102.$$p = null;
      
      var hash = $hash2([], {}), i, length, item, key;

      if (block === nil) {
        for (i = 0, length = self.length; i < length; i++) {
          item = self[i];
          if (Opal.hash_get(hash, item) === undefined) {
            Opal.hash_put(hash, item, item);
          }
        }
      }
      else {
        for (i = 0, length = self.length; i < length; i++) {
          item = self[i];
          key = Opal.yield1(block, item);
          if (Opal.hash_get(hash, key) === undefined) {
            Opal.hash_put(hash, key, item);
          }
        }
      }

      return toArraySubclass((hash).$values(), self.$class());
    ;
    }, TMP_102.$$arity = 0);

    Opal.defn(self, '$uniq!', TMP_103 = function() {
      var self = this, $iter = TMP_103.$$p, block = $iter || nil;

      TMP_103.$$p = null;
      
      var original_length = self.length, hash = $hash2([], {}), i, length, item, key;

      for (i = 0, length = original_length; i < length; i++) {
        item = self[i];
        key = (block === nil ? item : Opal.yield1(block, item));

        if (Opal.hash_get(hash, key) === undefined) {
          Opal.hash_put(hash, key, item);
          continue;
        }

        self.splice(i, 1);
        length--;
        i--;
      }

      return self.length === original_length ? nil : self;
    ;
    }, TMP_103.$$arity = 0);

    Opal.defn(self, '$unshift', TMP_104 = function ːunshift($a_rest) {
      var self = this, objects;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      objects = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        objects[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      for (var i = objects.length - 1; i >= 0; i--) {
        self.unshift(objects[i]);
      }
    
      return self;
    }, TMP_104.$$arity = -1);

    Opal.defn(self, '$values_at', TMP_107 = function ːvalues_at($a_rest) {
      var $b, $c, TMP_105, self = this, args, out = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      out = [];
      ($b = ($c = args).$each, $b.$$p = (TMP_105 = function(elem){var self = TMP_105.$$s || this, $a, $d, TMP_106, finish = nil, start = nil, i = nil;
if (elem == null) elem = nil;
      if ((($a = elem['$kind_of?']($scope.get('Range'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          finish = $scope.get('Opal').$coerce_to(elem.$last(), $scope.get('Integer'), "to_int");
          start = $scope.get('Opal').$coerce_to(elem.$first(), $scope.get('Integer'), "to_int");
          
          if (start < 0) {
            start = start + self.length;
            return nil;;
          }
        
          
          if (finish < 0) {
            finish = finish + self.length;
          }
          if (elem['$exclude_end?']()) {
            finish--;
          }
          if (finish < start) {
            return nil;;
          }
        
          return ($a = ($d = start).$upto, $a.$$p = (TMP_106 = function(i){var self = TMP_106.$$s || this;
if (i == null) i = nil;
          return out['$<<'](self.$at(i))}, TMP_106.$$s = self, TMP_106.$$arity = 1, TMP_106), $a).call($d, finish);
          } else {
          i = $scope.get('Opal').$coerce_to(elem, $scope.get('Integer'), "to_int");
          return out['$<<'](self.$at(i));
        }}, TMP_105.$$s = self, TMP_105.$$arity = 1, TMP_105), $b).call($c);
      return out;
    }, TMP_107.$$arity = -1);

    Opal.defn(self, '$zip', TMP_108 = function ːzip($a_rest) {
      var $b, self = this, others, $iter = TMP_108.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      others = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        others[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_108.$$p = null;
      
      var result = [], size = self.length, part, o, i, j, jj;

      for (j = 0, jj = others.length; j < jj; j++) {
        o = others[j];
        if (o.$$is_array) {
          continue;
        }
        if (o.$$is_enumerator) {
          if (o.$size() === Infinity) {
            others[j] = o.$take(size);
          } else {
            others[j] = o.$to_a();
          }
          continue;
        }
        others[j] = (((($b = $scope.get('Opal')['$coerce_to?'](o, $scope.get('Array'), "to_ary")) !== false && $b !== nil && $b != null) ? $b : $scope.get('Opal')['$coerce_to!'](o, $scope.get('Enumerator'), "each"))).$to_a();
      }

      for (i = 0; i < size; i++) {
        part = [self[i]];

        for (j = 0, jj = others.length; j < jj; j++) {
          o = others[j][i];

          if (o == null) {
            o = nil;
          }

          part[j + 1] = o;
        }

        result[i] = part;
      }

      if (block !== nil) {
        for (i = 0; i < size; i++) {
          block(result[i]);
        }

        return nil;
      }

      return result;
    
    }, TMP_108.$$arity = -1);

    Opal.defs(self, '$inherited', TMP_109 = function ːinherited(klass) {
      var self = this;

      
      klass.$$proto.$to_a = function() {
        return this.slice(0, this.length);
      }
    
    }, TMP_109.$$arity = 1);

    Opal.defn(self, '$instance_variables', TMP_111 = function ːinstance_variables() {
      var $a, $b, TMP_110, $c, $d, self = this, $iter = TMP_111.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_111.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      return ($a = ($b = ($c = ($d = self, Opal.find_super_dispatcher(self, 'instance_variables', TMP_111, false)), $c.$$p = $iter, $c).apply($d, $zuper)).$reject, $a.$$p = (TMP_110 = function(ivar){var self = TMP_110.$$s || this, $c;
if (ivar == null) ivar = nil;
      return ((($c = /^@\d+$/.test(ivar)) !== false && $c !== nil && $c != null) ? $c : ivar['$==']("@length"))}, TMP_110.$$s = self, TMP_110.$$arity = 1, TMP_110), $a).call($b);
    }, TMP_111.$$arity = 0);

    return $scope.get('Opal').$pristine(self, "allocate", "copy_instance_variables", "initialize_dup");
  })($scope.base, Array);
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["corelib/hash"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include', '$coerce_to?', '$[]', '$merge!', '$allocate', '$raise', '$==', '$coerce_to!', '$lambda?', '$abs', '$arity', '$call', '$enum_for', '$size', '$inspect', '$flatten', '$eql?', '$default', '$to_proc', '$dup', '$===', '$default_proc', '$default_proc=', '$default=', '$alias_method']);
  self.$require("corelib/enumerable");
  return (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_18, TMP_20, TMP_22, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_36, TMP_37, TMP_38, TMP_39, TMP_40, TMP_41, TMP_42, TMP_44, TMP_46, TMP_47, TMP_49, TMP_51, TMP_52, TMP_53, TMP_54, TMP_55;

    self.$include($scope.get('Enumerable'));

    def.$$is_hash = true;

    Opal.defs(self, '$[]', TMP_1 = function($a_rest) {
      var self = this, argv;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      argv = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        argv[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var hash, argc = argv.length, i;

      if (argc === 1) {
        hash = $scope.get('Opal')['$coerce_to?'](argv['$[]'](0), $scope.get('Hash'), "to_hash");
        if (hash !== nil) {
          return self.$allocate()['$merge!'](hash);
        }

        argv = $scope.get('Opal')['$coerce_to?'](argv['$[]'](0), $scope.get('Array'), "to_ary");
        if (argv === nil) {
          self.$raise($scope.get('ArgumentError'), "odd number of arguments for Hash")
        }

        argc = argv.length;
        hash = self.$allocate();

        for (i = 0; i < argc; i++) {
          if (!argv[i].$$is_array) continue;
          switch(argv[i].length) {
          case 1:
            hash.$store(argv[i][0], nil);
            break;
          case 2:
            hash.$store(argv[i][0], argv[i][1]);
            break;
          default:
            self.$raise($scope.get('ArgumentError'), "invalid number of elements (" + (argv[i].length) + " for 1..2)")
          }
        }

        return hash;
      }

      if (argc % 2 !== 0) {
        self.$raise($scope.get('ArgumentError'), "odd number of arguments for Hash")
      }

      hash = self.$allocate();

      for (i = 0; i < argc; i += 2) {
        hash.$store(argv[i], argv[i + 1]);
      }

      return hash;
    ;
    }, TMP_1.$$arity = -1);

    Opal.defs(self, '$allocate', TMP_2 = function ːallocate() {
      var self = this;

      
      var hash = new self.$$alloc();

      Opal.hash_init(hash);

      hash.$$none = nil;
      hash.$$proc = nil;

      return hash;
    
    }, TMP_2.$$arity = 0);

    Opal.defs(self, '$try_convert', TMP_3 = function ːtry_convert(obj) {
      var self = this;

      return $scope.get('Opal')['$coerce_to?'](obj, $scope.get('Hash'), "to_hash");
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$initialize', TMP_4 = function ːinitialize(defaults) {
      var self = this, $iter = TMP_4.$$p, block = $iter || nil;

      TMP_4.$$p = null;
      
      if (defaults !== undefined && block !== nil) {
        self.$raise($scope.get('ArgumentError'), "wrong number of arguments (1 for 0)")
      }
      self.$$none = (defaults === undefined ? nil : defaults);
      self.$$proc = block;
    ;
      return self;
    }, TMP_4.$$arity = -1);

    Opal.defn(self, '$==', TMP_5 = function(other) {
      var self = this;

      
      if (self === other) {
        return true;
      }

      if (!other.$$is_hash) {
        return false;
      }

      if (self.$$keys.length !== other.$$keys.length) {
        return false;
      }

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, other_value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
          other_value = other.$$smap[key];
        } else {
          value = key.value;
          other_value = Opal.hash_get(other, key.key);
        }

        if (other_value === undefined || !value['$eql?'](other_value)) {
          return false;
        }
      }

      return true;
    
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$[]', TMP_6 = function(key) {
      var self = this;

      
      var value = Opal.hash_get(self, key);

      if (value !== undefined) {
        return value;
      }

      return self.$default(key);
    
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$[]=', TMP_7 = function(key, value) {
      var self = this;

      
      Opal.hash_put(self, key, value);
      return value;
    
    }, TMP_7.$$arity = 2);

    Opal.defn(self, '$assoc', TMP_8 = function ːassoc(object) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          if ((key)['$=='](object)) {
            return [key, self.$$smap[key]];
          }
        } else {
          if ((key.key)['$=='](object)) {
            return [key.key, key.value];
          }
        }
      }

      return nil;
    
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$clear', TMP_9 = function ːclear() {
      var self = this;

      
      Opal.hash_init(self);
      return self;
    
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$clone', TMP_10 = function ːclone() {
      var self = this;

      
      var hash = new self.$$class.$$alloc();

      Opal.hash_init(hash);
      Opal.hash_clone(self, hash);

      return hash;
    
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$default', TMP_11 = function(key) {
      var self = this;

      
      if (key !== undefined && self.$$proc !== nil && self.$$proc !== undefined) {
        return self.$$proc.$call(self, key);
      }
      if (self.$$none === undefined) {
        return nil;
      }
      return self.$$none;
    
    }, TMP_11.$$arity = -1);

    Opal.defn(self, '$default=', TMP_12 = function(object) {
      var self = this;

      
      self.$$proc = nil;
      self.$$none = object;

      return object;
    
    }, TMP_12.$$arity = 1);

    Opal.defn(self, '$default_proc', TMP_13 = function ːdefault_proc() {
      var self = this;

      
      if (self.$$proc !== undefined) {
        return self.$$proc;
      }
      return nil;
    
    }, TMP_13.$$arity = 0);

    Opal.defn(self, '$default_proc=', TMP_14 = function(proc) {
      var self = this;

      
      if (proc !== nil) {
        proc = $scope.get('Opal')['$coerce_to!'](proc, $scope.get('Proc'), "to_proc");

        if (proc['$lambda?']() && proc.$arity().$abs() !== 2) {
          self.$raise($scope.get('TypeError'), "default_proc takes two arguments");
        }
      }

      self.$$none = nil;
      self.$$proc = proc;

      return proc;
    ;
    }, TMP_14.$$arity = 1);

    Opal.defn(self, '$delete', TMP_15 = function(key) {
      var self = this, $iter = TMP_15.$$p, block = $iter || nil;

      TMP_15.$$p = null;
      
      var value = Opal.hash_delete(self, key);

      if (value !== undefined) {
        return value;
      }

      if (block !== nil) {
        return block.$call(key);
      }

      return nil;
    
    }, TMP_15.$$arity = 1);

    Opal.defn(self, '$delete_if', TMP_16 = function ːdelete_if() {
      var $a, $b, TMP_17, self = this, $iter = TMP_16.$$p, block = $iter || nil;

      TMP_16.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this;

        return self.$size()}, TMP_17.$$s = self, TMP_17.$$arity = 0, TMP_17), $a).call($b, "delete_if")
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj !== false && obj !== nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            length--;
            i--;
          }
        }
      }

      return self;
    
    }, TMP_16.$$arity = 0);

    Opal.alias(self, 'dup', 'clone');

    Opal.defn(self, '$each', TMP_18 = function ːeach() {
      var $a, $b, TMP_19, self = this, $iter = TMP_18.$$p, block = $iter || nil;

      TMP_18.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_19 = function(){var self = TMP_19.$$s || this;

        return self.$size()}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19), $a).call($b, "each")
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        Opal.yield1(block, [key, value]);
      }

      return self;
    
    }, TMP_18.$$arity = 0);

    Opal.defn(self, '$each_key', TMP_20 = function ːeach_key() {
      var $a, $b, TMP_21, self = this, $iter = TMP_20.$$p, block = $iter || nil;

      TMP_20.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_21 = function(){var self = TMP_21.$$s || this;

        return self.$size()}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21), $a).call($b, "each_key")
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        block(key.$$is_string ? key : key.key);
      }

      return self;
    
    }, TMP_20.$$arity = 0);

    Opal.alias(self, 'each_pair', 'each');

    Opal.defn(self, '$each_value', TMP_22 = function ːeach_value() {
      var $a, $b, TMP_23, self = this, $iter = TMP_22.$$p, block = $iter || nil;

      TMP_22.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_23 = function(){var self = TMP_23.$$s || this;

        return self.$size()}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23), $a).call($b, "each_value")
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        block(key.$$is_string ? self.$$smap[key] : key.value);
      }

      return self;
    
    }, TMP_22.$$arity = 0);

    Opal.defn(self, '$empty?', TMP_24 = function() {
      var self = this;

      return self.$$keys.length === 0;
    }, TMP_24.$$arity = 0);

    Opal.alias(self, 'eql?', '==');

    Opal.defn(self, '$fetch', TMP_25 = function ːfetch(key, defaults) {
      var self = this, $iter = TMP_25.$$p, block = $iter || nil;

      TMP_25.$$p = null;
      
      var value = Opal.hash_get(self, key);

      if (value !== undefined) {
        return value;
      }

      if (block !== nil) {
        return block(key);
      }

      if (defaults !== undefined) {
        return defaults;
      }
    
      return self.$raise($scope.get('KeyError'), "key not found: " + (key.$inspect()));
    }, TMP_25.$$arity = -2);

    Opal.defn(self, '$flatten', TMP_26 = function ːflatten(level) {
      var self = this;

      if (level == null) {
        level = 1;
      }
      level = $scope.get('Opal')['$coerce_to!'](level, $scope.get('Integer'), "to_int");
      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push(key);

        if (value.$$is_array) {
          if (level === 1) {
            result.push(value);
            continue;
          }

          result = result.concat((value).$flatten(level - 2));
          continue;
        }

        result.push(value);
      }

      return result;
    
    }, TMP_26.$$arity = -1);

    Opal.defn(self, '$has_key?', TMP_27 = function(key) {
      var self = this;

      return Opal.hash_get(self, key) !== undefined;
    }, TMP_27.$$arity = 1);

    Opal.defn(self, '$has_value?', TMP_28 = function(value) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (((key.$$is_string ? self.$$smap[key] : key.value))['$=='](value)) {
          return true;
        }
      }

      return false;
    
    }, TMP_28.$$arity = 1);

    Opal.defn(self, '$hash', TMP_29 = function ːhash() {
      var self = this;

      
      var top = (Opal.hash_ids === undefined),
          hash_id = self.$object_id(),
          result = ['Hash'],
          key, item;

      try {
        if (top) {
          Opal.hash_ids = {};
        }

        if (Opal.hash_ids.hasOwnProperty(hash_id)) {
          return 'self';
        }

        for (key in Opal.hash_ids) {
          if (Opal.hash_ids.hasOwnProperty(key)) {
            item = Opal.hash_ids[key];
            if (self['$eql?'](item)) {
              return 'self';
            }
          }
        }

        Opal.hash_ids[hash_id] = self;

        for (var i = 0, keys = self.$$keys, length = keys.length; i < length; i++) {
          key = keys[i];

          if (key.$$is_string) {
            result.push([key, self.$$smap[key].$hash()]);
          } else {
            result.push([key.key_hash, key.value.$hash()]);
          }
        }

        return result.sort().join();

      } finally {
        if (top) {
          delete Opal.hash_ids;
        }
      }
    
    }, TMP_29.$$arity = 0);

    Opal.alias(self, 'include?', 'has_key?');

    Opal.defn(self, '$index', TMP_30 = function ːindex(object) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        if ((value)['$=='](object)) {
          return key;
        }
      }

      return nil;
    
    }, TMP_30.$$arity = 1);

    Opal.defn(self, '$indexes', TMP_31 = function ːindexes($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var result = [];

      for (var i = 0, length = args.length, key, value; i < length; i++) {
        key = args[i];
        value = Opal.hash_get(self, key);

        if (value === undefined) {
          result.push(self.$default());
          continue;
        }

        result.push(value);
      }

      return result;
    
    }, TMP_31.$$arity = -1);

    Opal.alias(self, 'indices', 'indexes');

    var inspect_ids;

    Opal.defn(self, '$inspect', TMP_32 = function ːinspect() {
      var self = this;

      
      var top = (inspect_ids === undefined),
          hash_id = self.$object_id(),
          result = [];

      try {
        if (top) {
          inspect_ids = {};
        }

        if (inspect_ids.hasOwnProperty(hash_id)) {
          return '{...}';
        }

        inspect_ids[hash_id] = true;

        for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
          key = keys[i];

          if (key.$$is_string) {
            value = self.$$smap[key];
          } else {
            value = key.value;
            key = key.key;
          }

          result.push(key.$inspect() + '=>' + value.$inspect());
        }

        return '{' + result.join(', ') + '}';

      } finally {
        if (top) {
          inspect_ids = undefined;
        }
      }
    
    }, TMP_32.$$arity = 0);

    Opal.defn(self, '$invert', TMP_33 = function ːinvert() {
      var self = this;

      
      var hash = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        Opal.hash_put(hash, value, key);
      }

      return hash;
    
    }, TMP_33.$$arity = 0);

    Opal.defn(self, '$keep_if', TMP_34 = function ːkeep_if() {
      var $a, $b, TMP_35, self = this, $iter = TMP_34.$$p, block = $iter || nil;

      TMP_34.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_35 = function(){var self = TMP_35.$$s || this;

        return self.$size()}, TMP_35.$$s = self, TMP_35.$$arity = 0, TMP_35), $a).call($b, "keep_if")
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj === false || obj === nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            length--;
            i--;
          }
        }
      }

      return self;
    
    }, TMP_34.$$arity = 0);

    Opal.alias(self, 'key', 'index');

    Opal.alias(self, 'key?', 'has_key?');

    Opal.defn(self, '$keys', TMP_36 = function ːkeys() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          result.push(key);
        } else {
          result.push(key.key);
        }
      }

      return result;
    
    }, TMP_36.$$arity = 0);

    Opal.defn(self, '$length', TMP_37 = function ːlength() {
      var self = this;

      return self.$$keys.length;
    }, TMP_37.$$arity = 0);

    Opal.alias(self, 'member?', 'has_key?');

    Opal.defn(self, '$merge', TMP_38 = function ːmerge(other) {
      var $a, $b, self = this, $iter = TMP_38.$$p, block = $iter || nil;

      TMP_38.$$p = null;
      return ($a = ($b = self.$dup())['$merge!'], $a.$$p = block.$to_proc(), $a).call($b, other);
    }, TMP_38.$$arity = 1);

    Opal.defn(self, '$merge!', TMP_39 = function(other) {
      var self = this, $iter = TMP_39.$$p, block = $iter || nil;

      TMP_39.$$p = null;
      
      if (!$scope.get('Hash')['$==='](other)) {
        other = $scope.get('Opal')['$coerce_to!'](other, $scope.get('Hash'), "to_hash");
      }

      var i, other_keys = other.$$keys, length = other_keys.length, key, value, other_value;

      if (block === nil) {
        for (i = 0; i < length; i++) {
          key = other_keys[i];

          if (key.$$is_string) {
            other_value = other.$$smap[key];
          } else {
            other_value = key.value;
            key = key.key;
          }

          Opal.hash_put(self, key, other_value);
        }

        return self;
      }

      for (i = 0; i < length; i++) {
        key = other_keys[i];

        if (key.$$is_string) {
          other_value = other.$$smap[key];
        } else {
          other_value = key.value;
          key = key.key;
        }

        value = Opal.hash_get(self, key);

        if (value === undefined) {
          Opal.hash_put(self, key, other_value);
          continue;
        }

        Opal.hash_put(self, key, block(key, value, other_value));
      }

      return self;
    ;
    }, TMP_39.$$arity = 1);

    Opal.defn(self, '$rassoc', TMP_40 = function ːrassoc(object) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        if ((value)['$=='](object)) {
          return [key, value];
        }
      }

      return nil;
    
    }, TMP_40.$$arity = 1);

    Opal.defn(self, '$rehash', TMP_41 = function ːrehash() {
      var self = this;

      
      Opal.hash_rehash(self);
      return self;
    
    }, TMP_41.$$arity = 0);

    Opal.defn(self, '$reject', TMP_42 = function ːreject() {
      var $a, $b, TMP_43, self = this, $iter = TMP_42.$$p, block = $iter || nil;

      TMP_42.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_43 = function(){var self = TMP_43.$$s || this;

        return self.$size()}, TMP_43.$$s = self, TMP_43.$$arity = 0, TMP_43), $a).call($b, "reject")
      };
      
      var hash = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj === false || obj === nil) {
          Opal.hash_put(hash, key, value);
        }
      }

      return hash;
    
    }, TMP_42.$$arity = 0);

    Opal.defn(self, '$reject!', TMP_44 = function() {
      var $a, $b, TMP_45, self = this, $iter = TMP_44.$$p, block = $iter || nil;

      TMP_44.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_45 = function(){var self = TMP_45.$$s || this;

        return self.$size()}, TMP_45.$$s = self, TMP_45.$$arity = 0, TMP_45), $a).call($b, "reject!")
      };
      
      var changes_were_made = false;

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj !== false && obj !== nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            changes_were_made = true;
            length--;
            i--;
          }
        }
      }

      return changes_were_made ? self : nil;
    
    }, TMP_44.$$arity = 0);

    Opal.defn(self, '$replace', TMP_46 = function ːreplace(other) {
      var $a, $b, self = this;

      other = $scope.get('Opal')['$coerce_to!'](other, $scope.get('Hash'), "to_hash");
      
      Opal.hash_init(self);

      for (var i = 0, other_keys = other.$$keys, length = other_keys.length, key, value, other_value; i < length; i++) {
        key = other_keys[i];

        if (key.$$is_string) {
          other_value = other.$$smap[key];
        } else {
          other_value = key.value;
          key = key.key;
        }

        Opal.hash_put(self, key, other_value);
      }
    
      if ((($a = other.$default_proc()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        (($a = [other.$default_proc()]), $b = self, $b['$default_proc='].apply($b, $a), $a[$a.length-1])
        } else {
        (($a = [other.$default()]), $b = self, $b['$default='].apply($b, $a), $a[$a.length-1])
      };
      return self;
    }, TMP_46.$$arity = 1);

    Opal.defn(self, '$select', TMP_47 = function ːselect() {
      var $a, $b, TMP_48, self = this, $iter = TMP_47.$$p, block = $iter || nil;

      TMP_47.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_48 = function(){var self = TMP_48.$$s || this;

        return self.$size()}, TMP_48.$$s = self, TMP_48.$$arity = 0, TMP_48), $a).call($b, "select")
      };
      
      var hash = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj !== false && obj !== nil) {
          Opal.hash_put(hash, key, value);
        }
      }

      return hash;
    
    }, TMP_47.$$arity = 0);

    Opal.defn(self, '$select!', TMP_49 = function() {
      var $a, $b, TMP_50, self = this, $iter = TMP_49.$$p, block = $iter || nil;

      TMP_49.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_50 = function(){var self = TMP_50.$$s || this;

        return self.$size()}, TMP_50.$$s = self, TMP_50.$$arity = 0, TMP_50), $a).call($b, "select!")
      };
      
      var result = nil;

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj === false || obj === nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            length--;
            i--;
          }
          result = self;
        }
      }

      return result;
    
    }, TMP_49.$$arity = 0);

    Opal.defn(self, '$shift', TMP_51 = function ːshift() {
      var self = this;

      
      var keys = self.$$keys,
          key;

      if (keys.length > 0) {
        key = keys[0];

        key = key.$$is_string ? key : key.key;

        return [key, Opal.hash_delete(self, key)];
      }

      return self.$default(nil);
    
    }, TMP_51.$$arity = 0);

    Opal.alias(self, 'size', 'length');

    self.$alias_method("store", "[]=");

    Opal.defn(self, '$to_a', TMP_52 = function ːto_a() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push([key, value]);
      }

      return result;
    
    }, TMP_52.$$arity = 0);

    Opal.defn(self, '$to_h', TMP_53 = function ːto_h() {
      var self = this;

      
      if (self.$$class === Opal.Hash) {
        return self;
      }

      var hash = new Opal.Hash.$$alloc();

      Opal.hash_init(hash);
      Opal.hash_clone(self, hash);

      return hash;
    
    }, TMP_53.$$arity = 0);

    Opal.defn(self, '$to_hash', TMP_54 = function ːto_hash() {
      var self = this;

      return self;
    }, TMP_54.$$arity = 0);

    Opal.alias(self, 'to_s', 'inspect');

    Opal.alias(self, 'update', 'merge!');

    Opal.alias(self, 'value?', 'has_value?');

    Opal.alias(self, 'values_at', 'indexes');

    return (Opal.defn(self, '$values', TMP_55 = function ːvalues() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          result.push(self.$$smap[key]);
        } else {
          result.push(key.value);
        }
      }

      return result;
    
    }, TMP_55.$$arity = 0), nil) && 'values';
  })($scope.base, null);
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["corelib/number"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$bridge', '$raise', '$class', '$Float', '$respond_to?', '$coerce_to!', '$__coerced__', '$===', '$!', '$>', '$**', '$new', '$<', '$to_f', '$==', '$nan?', '$infinite?', '$enum_for', '$+', '$-', '$gcd', '$lcm', '$/', '$frexp', '$to_i', '$ldexp', '$rationalize', '$*', '$<<', '$to_r', '$-@', '$size', '$<=', '$>=']);
  self.$require("corelib/numeric");
  (function($base, $super) {
    function $Number(){};
    var self = $Number = $klass($base, $super, 'Number', $Number);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_40, TMP_41, TMP_42, TMP_43, TMP_44, TMP_45, TMP_46, TMP_47, TMP_48, TMP_49, TMP_50, TMP_51, TMP_52, TMP_54, TMP_55, TMP_56, TMP_57, TMP_58, TMP_59, TMP_61, TMP_62, TMP_63, TMP_64, TMP_65, TMP_66, TMP_67;

    $scope.get('Opal').$bridge(self, Number);

    Number.prototype.$$is_number = true;

    Opal.defn(self, '$coerce', TMP_1 = function ːcoerce(other) {
      var self = this;

      
      if (other === nil) {
        self.$raise($scope.get('TypeError'), "can't convert " + (other.$class()) + " into Float");
      }
      else if (other.$$is_string) {
        return [self.$Float(other), self];
      }
      else if (other['$respond_to?']("to_f")) {
        return [$scope.get('Opal')['$coerce_to!'](other, $scope.get('Float'), "to_f"), self];
      }
      else if (other.$$is_number) {
        return [other, self];
      }
      else {
        self.$raise($scope.get('TypeError'), "can't convert " + (other.$class()) + " into Float");
      }
    ;
    }, TMP_1.$$arity = 1);

    Opal.defn(self, '$__id__', TMP_2 = function ː__id__() {
      var self = this;

      return (self * 2) + 1;
    }, TMP_2.$$arity = 0);

    Opal.alias(self, 'object_id', '__id__');

    Opal.defn(self, '$+', TMP_3 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self + other;
      }
      else {
        return self.$__coerced__("+", other);
      }
    
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$-', TMP_4 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self - other;
      }
      else {
        return self.$__coerced__("-", other);
      }
    
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$*', TMP_5 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self * other;
      }
      else {
        return self.$__coerced__("*", other);
      }
    
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$/', TMP_6 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self / other;
      }
      else {
        return self.$__coerced__("/", other);
      }
    
    }, TMP_6.$$arity = 1);

    Opal.alias(self, 'fdiv', '/');

    Opal.defn(self, '$%', TMP_7 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        if (other == -Infinity) {
          return other;
        }
        else if (other == 0) {
          self.$raise($scope.get('ZeroDivisionError'), "divided by 0");
        }
        else if (other < 0 || self < 0) {
          return (self % other + other) % other;
        }
        else {
          return self % other;
        }
      }
      else {
        return self.$__coerced__("%", other);
      }
    
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$&', TMP_8 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self & other;
      }
      else {
        return self.$__coerced__("&", other);
      }
    
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$|', TMP_9 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self | other;
      }
      else {
        return self.$__coerced__("|", other);
      }
    
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$^', TMP_10 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self ^ other;
      }
      else {
        return self.$__coerced__("^", other);
      }
    
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$<', TMP_11 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self < other;
      }
      else {
        return self.$__coerced__("<", other);
      }
    
    }, TMP_11.$$arity = 1);

    Opal.defn(self, '$<=', TMP_12 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self <= other;
      }
      else {
        return self.$__coerced__("<=", other);
      }
    
    }, TMP_12.$$arity = 1);

    Opal.defn(self, '$>', TMP_13 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self > other;
      }
      else {
        return self.$__coerced__(">", other);
      }
    
    }, TMP_13.$$arity = 1);

    Opal.defn(self, '$>=', TMP_14 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self >= other;
      }
      else {
        return self.$__coerced__(">=", other);
      }
    
    }, TMP_14.$$arity = 1);

    
    var spaceship_operator = function(self, other) {
      if (other.$$is_number) {
        if (isNaN(self) || isNaN(other)) {
          return nil;
        }

        if (self > other) {
          return 1;
        } else if (self < other) {
          return -1;
        } else {
          return 0;
        }
      }
      else {
        return self.$__coerced__("<=>", other);
      }
    }
  

    Opal.defn(self, '$<=>', TMP_15 = function(other) {
      var self = this;

      try {
        
      return spaceship_operator(self, other);
    
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('ArgumentError')])) {
          try {
            return nil
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
    }, TMP_15.$$arity = 1);

    Opal.defn(self, '$<<', TMP_16 = function(count) {
      var self = this;

      count = $scope.get('Opal')['$coerce_to!'](count, $scope.get('Integer'), "to_int");
      return count > 0 ? self << count : self >> -count;
    }, TMP_16.$$arity = 1);

    Opal.defn(self, '$>>', TMP_17 = function(count) {
      var self = this;

      count = $scope.get('Opal')['$coerce_to!'](count, $scope.get('Integer'), "to_int");
      return count > 0 ? self >> count : self << -count;
    }, TMP_17.$$arity = 1);

    Opal.defn(self, '$[]', TMP_18 = function(bit) {
      var self = this;

      bit = $scope.get('Opal')['$coerce_to!'](bit, $scope.get('Integer'), "to_int");
      
      if (bit < 0) {
        return 0;
      }
      if (bit >= 32) {
        return self < 0 ? 1 : 0;
      }
      return (self >> bit) & 1;
    ;
    }, TMP_18.$$arity = 1);

    Opal.defn(self, '$+@', TMP_19 = function() {
      var self = this;

      return +self;
    }, TMP_19.$$arity = 0);

    Opal.defn(self, '$-@', TMP_20 = function() {
      var self = this;

      return -self;
    }, TMP_20.$$arity = 0);

    Opal.defn(self, '$~', TMP_21 = function() {
      var self = this;

      return ~self;
    }, TMP_21.$$arity = 0);

    Opal.defn(self, '$**', TMP_22 = function(other) {
      var $a, $b, $c, self = this;

      if ((($a = $scope.get('Integer')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = ((($b = ($scope.get('Integer')['$==='](self))['$!']()) !== false && $b !== nil && $b != null) ? $b : $rb_gt(other, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return Math.pow(self, other);
          } else {
          return $scope.get('Rational').$new(self, 1)['$**'](other)
        }
      } else if ((($a = (($b = $rb_lt(self, 0)) ? (((($c = $scope.get('Float')['$==='](other)) !== false && $c !== nil && $c != null) ? $c : $scope.get('Rational')['$==='](other))) : $rb_lt(self, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return $scope.get('Complex').$new(self, 0)['$**'](other.$to_f())
      } else if ((($a = other.$$is_number != null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return Math.pow(self, other);
        } else {
        return self.$__coerced__("**", other)
      };
    }, TMP_22.$$arity = 1);

    Opal.defn(self, '$==', TMP_23 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self == Number(other);
      }
      else if (other['$respond_to?']("==")) {
        return other['$=='](self);
      }
      else {
        return false;
      }
    ;
    }, TMP_23.$$arity = 1);

    Opal.defn(self, '$abs', TMP_24 = function ːabs() {
      var self = this;

      return Math.abs(self);
    }, TMP_24.$$arity = 0);

    Opal.defn(self, '$abs2', TMP_25 = function ːabs2() {
      var self = this;

      return Math.abs(self * self);
    }, TMP_25.$$arity = 0);

    Opal.defn(self, '$angle', TMP_26 = function ːangle() {
      var $a, self = this;

      if ((($a = self['$nan?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self};
      
      if (self == 0) {
        if (1 / self > 0) {
          return 0;
        }
        else {
          return Math.PI;
        }
      }
      else if (self < 0) {
        return Math.PI;
      }
      else {
        return 0;
      }
    
    }, TMP_26.$$arity = 0);

    Opal.alias(self, 'arg', 'angle');

    Opal.alias(self, 'phase', 'angle');

    Opal.defn(self, '$bit_length', TMP_27 = function ːbit_length() {
      var $a, self = this;

      if ((($a = $scope.get('Integer')['$==='](self)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('NoMethodError').$new("undefined method `bit_length` for " + (self) + ":Float", "bit_length"))
      };
      
      if (self === 0 || self === -1) {
        return 0;
      }

      var result = 0,
          value  = self < 0 ? ~self : self;

      while (value != 0) {
        result   += 1;
        value  >>>= 1;
      }

      return result;
    
    }, TMP_27.$$arity = 0);

    Opal.defn(self, '$ceil', TMP_28 = function ːceil() {
      var self = this;

      return Math.ceil(self);
    }, TMP_28.$$arity = 0);

    Opal.defn(self, '$chr', TMP_29 = function ːchr(encoding) {
      var self = this;

      return String.fromCharCode(self);
    }, TMP_29.$$arity = -1);

    Opal.defn(self, '$denominator', TMP_30 = function ːdenominator() {
      var $a, $b, self = this, $iter = TMP_30.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_30.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if ((($a = ((($b = self['$nan?']()) !== false && $b !== nil && $b != null) ? $b : self['$infinite?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return 1
        } else {
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'denominator', TMP_30, false)), $a.$$p = $iter, $a).apply($b, $zuper)
      };
    }, TMP_30.$$arity = 0);

    Opal.defn(self, '$downto', TMP_31 = function ːdownto(stop) {
      var $a, $b, TMP_32, self = this, $iter = TMP_31.$$p, block = $iter || nil;

      TMP_31.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_32 = function(){var self = TMP_32.$$s || this, $c;

        if ((($c = $scope.get('Numeric')['$==='](stop)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            } else {
            self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
          };
          if ((($c = $rb_gt(stop, self)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return 0
            } else {
            return $rb_plus($rb_minus(self, stop), 1)
          };}, TMP_32.$$s = self, TMP_32.$$arity = 0, TMP_32), $a).call($b, "downto", stop)
      };
      
      if (!stop.$$is_number) {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
      }
      for (var i = self; i >= stop; i--) {
        block(i);
      }
    ;
      return self;
    }, TMP_31.$$arity = 1);

    Opal.alias(self, 'eql?', '==');

    Opal.defn(self, '$equal?', TMP_33 = function(other) {
      var $a, self = this;

      return ((($a = self['$=='](other)) !== false && $a !== nil && $a != null) ? $a : isNaN(self) && isNaN(other));
    }, TMP_33.$$arity = 1);

    Opal.defn(self, '$even?', TMP_34 = function() {
      var self = this;

      return self % 2 === 0;
    }, TMP_34.$$arity = 0);

    Opal.defn(self, '$floor', TMP_35 = function ːfloor() {
      var self = this;

      return Math.floor(self);
    }, TMP_35.$$arity = 0);

    Opal.defn(self, '$gcd', TMP_36 = function ːgcd(other) {
      var $a, self = this;

      if ((($a = $scope.get('Integer')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "not an integer")
      };
      
      var min = Math.abs(self),
          max = Math.abs(other);

      while (min > 0) {
        var tmp = min;

        min = max % min;
        max = tmp;
      }

      return max;
    
    }, TMP_36.$$arity = 1);

    Opal.defn(self, '$gcdlcm', TMP_37 = function ːgcdlcm(other) {
      var self = this;

      return [self.$gcd(), self.$lcm()];
    }, TMP_37.$$arity = 1);

    Opal.defn(self, '$integer?', TMP_38 = function() {
      var self = this;

      return self % 1 === 0;
    }, TMP_38.$$arity = 0);

    Opal.defn(self, '$is_a?', TMP_39 = function(klass) {
      var $a, $b, self = this, $iter = TMP_39.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_39.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if ((($a = (($b = klass['$==']($scope.get('Fixnum'))) ? $scope.get('Integer')['$==='](self) : klass['$==']($scope.get('Fixnum')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return true};
      if ((($a = (($b = klass['$==']($scope.get('Integer'))) ? $scope.get('Integer')['$==='](self) : klass['$==']($scope.get('Integer')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return true};
      if ((($a = (($b = klass['$==']($scope.get('Float'))) ? $scope.get('Float')['$==='](self) : klass['$==']($scope.get('Float')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return true};
      return ($a = ($b = self, Opal.find_super_dispatcher(self, 'is_a?', TMP_39, false)), $a.$$p = $iter, $a).apply($b, $zuper);
    }, TMP_39.$$arity = 1);

    Opal.alias(self, 'kind_of?', 'is_a?');

    Opal.defn(self, '$instance_of?', TMP_40 = function(klass) {
      var $a, $b, self = this, $iter = TMP_40.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_40.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if ((($a = (($b = klass['$==']($scope.get('Fixnum'))) ? $scope.get('Integer')['$==='](self) : klass['$==']($scope.get('Fixnum')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return true};
      if ((($a = (($b = klass['$==']($scope.get('Integer'))) ? $scope.get('Integer')['$==='](self) : klass['$==']($scope.get('Integer')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return true};
      if ((($a = (($b = klass['$==']($scope.get('Float'))) ? $scope.get('Float')['$==='](self) : klass['$==']($scope.get('Float')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return true};
      return ($a = ($b = self, Opal.find_super_dispatcher(self, 'instance_of?', TMP_40, false)), $a.$$p = $iter, $a).apply($b, $zuper);
    }, TMP_40.$$arity = 1);

    Opal.defn(self, '$lcm', TMP_41 = function ːlcm(other) {
      var $a, self = this;

      if ((($a = $scope.get('Integer')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "not an integer")
      };
      
      if (self == 0 || other == 0) {
        return 0;
      }
      else {
        return Math.abs(self * other / self.$gcd(other));
      }
    
    }, TMP_41.$$arity = 1);

    Opal.alias(self, 'magnitude', 'abs');

    Opal.alias(self, 'modulo', '%');

    Opal.defn(self, '$next', TMP_42 = function ːnext() {
      var self = this;

      return self + 1;
    }, TMP_42.$$arity = 0);

    Opal.defn(self, '$nonzero?', TMP_43 = function() {
      var self = this;

      return self == 0 ? nil : self;
    }, TMP_43.$$arity = 0);

    Opal.defn(self, '$numerator', TMP_44 = function ːnumerator() {
      var $a, $b, self = this, $iter = TMP_44.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_44.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if ((($a = ((($b = self['$nan?']()) !== false && $b !== nil && $b != null) ? $b : self['$infinite?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self
        } else {
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'numerator', TMP_44, false)), $a.$$p = $iter, $a).apply($b, $zuper)
      };
    }, TMP_44.$$arity = 0);

    Opal.defn(self, '$odd?', TMP_45 = function() {
      var self = this;

      return self % 2 !== 0;
    }, TMP_45.$$arity = 0);

    Opal.defn(self, '$ord', TMP_46 = function ːord() {
      var self = this;

      return self;
    }, TMP_46.$$arity = 0);

    Opal.defn(self, '$pred', TMP_47 = function ːpred() {
      var self = this;

      return self - 1;
    }, TMP_47.$$arity = 0);

    Opal.defn(self, '$quo', TMP_48 = function ːquo(other) {
      var $a, $b, self = this, $iter = TMP_48.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_48.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if ((($a = $scope.get('Integer')['$==='](self)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'quo', TMP_48, false)), $a.$$p = $iter, $a).apply($b, $zuper)
        } else {
        return $rb_divide(self, other)
      };
    }, TMP_48.$$arity = 1);

    Opal.defn(self, '$rationalize', TMP_49 = function ːrationalize(eps) {
      var $a, $b, self = this, f = nil, n = nil;

      
      if (arguments.length > 1) {
        self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (arguments.length) + " for 0..1)");
      }
    ;
      if ((($a = $scope.get('Integer')['$==='](self)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return $scope.get('Rational').$new(self, 1)
      } else if ((($a = self['$infinite?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('FloatDomainError'), "Infinity")
      } else if ((($a = self['$nan?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('FloatDomainError'), "NaN")
      } else if ((($a = eps == null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        $b = $scope.get('Math').$frexp(self), $a = Opal.to_ary($b), f = ($a[0] == null ? nil : $a[0]), n = ($a[1] == null ? nil : $a[1]), $b;
        f = $scope.get('Math').$ldexp(f, (($scope.get('Float')).$$scope.get('MANT_DIG'))).$to_i();
        n = $rb_minus(n, (($scope.get('Float')).$$scope.get('MANT_DIG')));
        return $scope.get('Rational').$new($rb_times(2, f), (1)['$<<'](($rb_minus(1, n)))).$rationalize($scope.get('Rational').$new(1, (1)['$<<'](($rb_minus(1, n)))));
        } else {
        return self.$to_r().$rationalize(eps)
      };
    }, TMP_49.$$arity = -1);

    Opal.defn(self, '$round', TMP_50 = function ːround(ndigits) {
      var $a, $b, self = this, _ = nil, exp = nil;

      if ((($a = $scope.get('Integer')['$==='](self)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = ndigits == null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self};
        if ((($a = ($b = $scope.get('Float')['$==='](ndigits), $b !== false && $b !== nil && $b != null ?ndigits['$infinite?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('RangeError'), "Infinity")};
        ndigits = $scope.get('Opal')['$coerce_to!'](ndigits, $scope.get('Integer'), "to_int");
        if ((($a = $rb_lt(ndigits, (($scope.get('Integer')).$$scope.get('MIN')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('RangeError'), "out of bounds")};
        if ((($a = ndigits >= 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self};
        ndigits = ndigits['$-@']();
        
        if (0.415241 * ndigits - 0.125 > self.$size()) {
          return 0;
        }

        var f = Math.pow(10, ndigits),
            x = Math.floor((Math.abs(x) + f / 2) / f) * f;

        return self < 0 ? -x : x;
      ;
        } else {
        if ((($a = ($b = self['$nan?'](), $b !== false && $b !== nil && $b != null ?ndigits == null : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('FloatDomainError'), "NaN")};
        ndigits = $scope.get('Opal')['$coerce_to!'](ndigits || 0, $scope.get('Integer'), "to_int");
        if ((($a = $rb_le(ndigits, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = self['$nan?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$raise($scope.get('RangeError'), "NaN")
          } else if ((($a = self['$infinite?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$raise($scope.get('FloatDomainError'), "Infinity")}
        } else if (ndigits['$=='](0)) {
          return Math.round(self)
        } else if ((($a = ((($b = self['$nan?']()) !== false && $b !== nil && $b != null) ? $b : self['$infinite?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self};
        $b = $scope.get('Math').$frexp(self), $a = Opal.to_ary($b), _ = ($a[0] == null ? nil : $a[0]), exp = ($a[1] == null ? nil : $a[1]), $b;
        if ((($a = $rb_ge(ndigits, $rb_minus(($rb_plus((($scope.get('Float')).$$scope.get('DIG')), 2)), ((function() {if ((($b = $rb_gt(exp, 0)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return $rb_divide(exp, 4)
          } else {
          return $rb_minus($rb_divide(exp, 3), 1)
        }; return nil; })())))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self};
        if ((($a = $rb_lt(ndigits, ((function() {if ((($b = $rb_gt(exp, 0)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return $rb_plus($rb_divide(exp, 3), 1)
          } else {
          return $rb_divide(exp, 4)
        }; return nil; })())['$-@']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return 0};
        return Math.round(self * Math.pow(10, ndigits)) / Math.pow(10, ndigits);
      };
    }, TMP_50.$$arity = -1);

    Opal.defn(self, '$step', TMP_51 = function ːstep(limit, step) {
      var $a, self = this, $iter = TMP_51.$$p, block = $iter || nil;

      if (step == null) {
        step = 1;
      }
      TMP_51.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return self.$enum_for("step", limit, step)
      };
      if ((($a = step == 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "step cannot be 0")};
      
      var value = self;

      if (limit === Infinity || limit === -Infinity) {
        block(value);
        return self;
      }

      if (step > 0) {
        while (value <= limit) {
          block(value);
          value += step;
        }
      }
      else {
        while (value >= limit) {
          block(value);
          value += step;
        }
      }
    
      return self;
    }, TMP_51.$$arity = -2);

    Opal.alias(self, 'succ', 'next');

    Opal.defn(self, '$times', TMP_52 = function ːtimes() {
      var $a, $b, TMP_53, self = this, $iter = TMP_52.$$p, block = $iter || nil;

      TMP_52.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_53 = function(){var self = TMP_53.$$s || this;

        return self}, TMP_53.$$s = self, TMP_53.$$arity = 0, TMP_53), $a).call($b, "times")
      };
      
      for (var i = 0; i < self; i++) {
        block(i);
      }
    
      return self;
    }, TMP_52.$$arity = 0);

    Opal.defn(self, '$to_f', TMP_54 = function ːto_f() {
      var self = this;

      return self;
    }, TMP_54.$$arity = 0);

    Opal.defn(self, '$to_i', TMP_55 = function ːto_i() {
      var self = this;

      return parseInt(self, 10);
    }, TMP_55.$$arity = 0);

    Opal.alias(self, 'to_int', 'to_i');

    Opal.defn(self, '$to_r', TMP_56 = function ːto_r() {
      var $a, $b, self = this, f = nil, e = nil;

      if ((($a = $scope.get('Integer')['$==='](self)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return $scope.get('Rational').$new(self, 1)
        } else {
        $b = $scope.get('Math').$frexp(self), $a = Opal.to_ary($b), f = ($a[0] == null ? nil : $a[0]), e = ($a[1] == null ? nil : $a[1]), $b;
        f = $scope.get('Math').$ldexp(f, (($scope.get('Float')).$$scope.get('MANT_DIG'))).$to_i();
        e = $rb_minus(e, (($scope.get('Float')).$$scope.get('MANT_DIG')));
        return ($rb_times(f, ((($scope.get('Float')).$$scope.get('RADIX'))['$**'](e)))).$to_r();
      };
    }, TMP_56.$$arity = 0);

    Opal.defn(self, '$to_s', TMP_57 = function ːto_s(base) {
      var $a, $b, self = this;

      if (base == null) {
        base = 10;
      }
      if ((($a = ((($b = $rb_lt(base, 2)) !== false && $b !== nil && $b != null) ? $b : $rb_gt(base, 36))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "base must be between 2 and 36")};
      return self.toString(base);
    }, TMP_57.$$arity = -1);

    Opal.alias(self, 'truncate', 'to_i');

    Opal.alias(self, 'inspect', 'to_s');

    Opal.defn(self, '$divmod', TMP_58 = function ːdivmod(other) {
      var $a, $b, self = this, $iter = TMP_58.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_58.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if ((($a = ((($b = self['$nan?']()) !== false && $b !== nil && $b != null) ? $b : other['$nan?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('FloatDomainError'), "NaN")
      } else if ((($a = self['$infinite?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('FloatDomainError'), "Infinity")
        } else {
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'divmod', TMP_58, false)), $a.$$p = $iter, $a).apply($b, $zuper)
      };
    }, TMP_58.$$arity = 1);

    Opal.defn(self, '$upto', TMP_59 = function ːupto(stop) {
      var $a, $b, TMP_60, self = this, $iter = TMP_59.$$p, block = $iter || nil;

      TMP_59.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_60 = function(){var self = TMP_60.$$s || this, $c;

        if ((($c = $scope.get('Numeric')['$==='](stop)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            } else {
            self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
          };
          if ((($c = $rb_lt(stop, self)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return 0
            } else {
            return $rb_plus($rb_minus(stop, self), 1)
          };}, TMP_60.$$s = self, TMP_60.$$arity = 0, TMP_60), $a).call($b, "upto", stop)
      };
      
      if (!stop.$$is_number) {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
      }
      for (var i = self; i <= stop; i++) {
        block(i);
      }
    ;
      return self;
    }, TMP_59.$$arity = 1);

    Opal.defn(self, '$zero?', TMP_61 = function() {
      var self = this;

      return self == 0;
    }, TMP_61.$$arity = 0);

    Opal.defn(self, '$size', TMP_62 = function ːsize() {
      var self = this;

      return 4;
    }, TMP_62.$$arity = 0);

    Opal.defn(self, '$nan?', TMP_63 = function() {
      var self = this;

      return isNaN(self);
    }, TMP_63.$$arity = 0);

    Opal.defn(self, '$finite?', TMP_64 = function() {
      var self = this;

      return self != Infinity && self != -Infinity && !isNaN(self);
    }, TMP_64.$$arity = 0);

    Opal.defn(self, '$infinite?', TMP_65 = function() {
      var self = this;

      
      if (self == Infinity) {
        return +1;
      }
      else if (self == -Infinity) {
        return -1;
      }
      else {
        return nil;
      }
    
    }, TMP_65.$$arity = 0);

    Opal.defn(self, '$positive?', TMP_66 = function() {
      var self = this;

      return self == Infinity || 1 / self > 0;
    }, TMP_66.$$arity = 0);

    return (Opal.defn(self, '$negative?', TMP_67 = function() {
      var self = this;

      return self == -Infinity || 1 / self < 0;
    }, TMP_67.$$arity = 0), nil) && 'negative?';
  })($scope.base, $scope.get('Numeric'));
  Opal.cdecl($scope, 'Fixnum', $scope.get('Number'));
  (function($base, $super) {
    function $Integer(){};
    var self = $Integer = $klass($base, $super, 'Integer', $Integer);

    var def = self.$$proto, $scope = self.$$scope, TMP_68;

    Opal.defs(self, '$===', TMP_68 = function(other) {
      var self = this;

      
      if (!other.$$is_number) {
        return false;
      }

      return (other % 1) === 0;
    
    }, TMP_68.$$arity = 1);

    Opal.cdecl($scope, 'MAX', Math.pow(2, 30) - 1);

    return Opal.cdecl($scope, 'MIN', -Math.pow(2, 30));
  })($scope.base, $scope.get('Numeric'));
  return (function($base, $super) {
    function $Float(){};
    var self = $Float = $klass($base, $super, 'Float', $Float);

    var def = self.$$proto, $scope = self.$$scope, TMP_69, $a;

    Opal.defs(self, '$===', TMP_69 = function(other) {
      var self = this;

      return !!other.$$is_number;
    }, TMP_69.$$arity = 1);

    Opal.cdecl($scope, 'INFINITY', Infinity);

    Opal.cdecl($scope, 'MAX', Number.MAX_VALUE);

    Opal.cdecl($scope, 'MIN', Number.MIN_VALUE);

    Opal.cdecl($scope, 'NAN', NaN);

    Opal.cdecl($scope, 'DIG', 15);

    Opal.cdecl($scope, 'MANT_DIG', 53);

    Opal.cdecl($scope, 'RADIX', 2);

    if ((($a = (typeof(Number.EPSILON) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      return Opal.cdecl($scope, 'EPSILON', Number.EPSILON)
      } else {
      return Opal.cdecl($scope, 'EPSILON', 2.2204460492503130808472633361816E-16)
    };
  })($scope.base, $scope.get('Numeric'));
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["corelib/range"] = function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include', '$attr_reader', '$<=>', '$raise', '$include?', '$<=', '$<', '$enum_for', '$upto', '$to_proc', '$succ', '$!', '$==', '$===', '$exclude_end?', '$eql?', '$begin', '$end', '$-', '$abs', '$to_i', '$inspect', '$[]']);
  self.$require("corelib/enumerable");
  return (function($base, $super) {
    function $Range(){};
    var self = $Range = $klass($base, $super, 'Range', $Range);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13;

    def.begin = def.exclude = def.end = nil;
    self.$include($scope.get('Enumerable'));

    def.$$is_range = true;

    self.$attr_reader("begin", "end");

    Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(first, last, exclude) {
      var $a, self = this;

      if (exclude == null) {
        exclude = false;
      }
      if ((($a = first['$<=>'](last)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'))
      };
      self.begin = first;
      self.end = last;
      return self.exclude = exclude;
    }, TMP_1.$$arity = -3);

    Opal.defn(self, '$==', TMP_2 = function(other) {
      var self = this;

      
      if (!other.$$is_range) {
        return false;
      }

      return self.exclude === other.exclude &&
             self.begin   ==  other.begin &&
             self.end     ==  other.end;
    
    }, TMP_2.$$arity = 1);

    Opal.defn(self, '$===', TMP_3 = function(value) {
      var self = this;

      return self['$include?'](value);
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$cover?', TMP_4 = function(value) {
      var $a, $b, self = this;

      return ($a = $rb_le(self.begin, value), $a !== false && $a !== nil && $a != null ?((function() {if ((($b = self.exclude) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        return $rb_lt(value, self.end)
        } else {
        return $rb_le(value, self.end)
      }; return nil; })()) : $a);
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$each', TMP_5 = function ːeach() {
      var $a, $b, $c, self = this, $iter = TMP_5.$$p, block = $iter || nil, current = nil, last = nil;

      TMP_5.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each")
      };
      
      var i, limit;

      if (self.begin.$$is_number && self.end.$$is_number) {
        if (self.begin % 1 !== 0 || self.end % 1 !== 0) {
          self.$raise($scope.get('TypeError'), "can't iterate from Float")
        }

        for (i = self.begin, limit = self.end + (function() {if ((($a = self.exclude) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return 0
        } else {
        return 1
      }; return nil; })(); i < limit; i++) {
          block(i);
        }

        return self;
      }

      if (self.begin.$$is_string && self.end.$$is_string) {
        ($a = ($b = self.begin).$upto, $a.$$p = block.$to_proc(), $a).call($b, self.end, self.exclude)
        return self;
      }
    ;
      current = self.begin;
      last = self.end;
      while ((($c = $rb_lt(current, last)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
      Opal.yield1(block, current);
      current = current.$succ();};
      if ((($a = ($c = self.exclude['$!'](), $c !== false && $c !== nil && $c != null ?current['$=='](last) : $c)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        Opal.yield1(block, current)};
      return self;
    }, TMP_5.$$arity = 0);

    Opal.defn(self, '$eql?', TMP_6 = function(other) {
      var $a, $b, self = this;

      if ((($a = $scope.get('Range')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      return ($a = ($b = self.exclude['$==='](other['$exclude_end?']()), $b !== false && $b !== nil && $b != null ?self.begin['$eql?'](other.$begin()) : $b), $a !== false && $a !== nil && $a != null ?self.end['$eql?'](other.$end()) : $a);
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$exclude_end?', TMP_7 = function() {
      var self = this;

      return self.exclude;
    }, TMP_7.$$arity = 0);

    Opal.alias(self, 'first', 'begin');

    Opal.alias(self, 'include?', 'cover?');

    Opal.alias(self, 'last', 'end');

    Opal.defn(self, '$max', TMP_8 = function ːmax() {
      var $a, $b, self = this, $iter = TMP_8.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_8.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if (($yield !== nil)) {
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'max', TMP_8, false)), $a.$$p = $iter, $a).apply($b, $zuper)
        } else {
        return self.exclude ? self.end - 1 : self.end;
      };
    }, TMP_8.$$arity = 0);

    Opal.alias(self, 'member?', 'cover?');

    Opal.defn(self, '$min', TMP_9 = function ːmin() {
      var $a, $b, self = this, $iter = TMP_9.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_9.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if (($yield !== nil)) {
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'min', TMP_9, false)), $a.$$p = $iter, $a).apply($b, $zuper)
        } else {
        return self.begin
      };
    }, TMP_9.$$arity = 0);

    Opal.alias(self, 'member?', 'include?');

    Opal.defn(self, '$size', TMP_10 = function ːsize() {
      var $a, $b, self = this, _begin = nil, _end = nil, infinity = nil;

      _begin = self.begin;
      _end = self.end;
      if ((($a = self.exclude) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        _end = $rb_minus(_end, 1)};
      if ((($a = ($b = $scope.get('Numeric')['$==='](_begin), $b !== false && $b !== nil && $b != null ?$scope.get('Numeric')['$==='](_end) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return nil
      };
      if ((($a = $rb_lt(_end, _begin)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return 0};
      infinity = (($scope.get('Float')).$$scope.get('INFINITY'));
      if ((($a = ((($b = infinity['$=='](_begin.$abs())) !== false && $b !== nil && $b != null) ? $b : _end.$abs()['$=='](infinity))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return infinity};
      return ((Math.abs(_end - _begin) + 1)).$to_i();
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$step', TMP_11 = function ːstep(n) {
      var self = this;

      if (n == null) {
        n = 1;
      }
      return self.$raise($scope.get('NotImplementedError'));
    }, TMP_11.$$arity = -1);

    Opal.defn(self, '$to_s', TMP_12 = function ːto_s() {
      var self = this;

      return self.begin.$inspect() + (self.exclude ? '...' : '..') + self.end.$inspect();
    }, TMP_12.$$arity = 0);

    Opal.alias(self, 'inspect', 'to_s');

    return (Opal.defn(self, '$marshal_load', TMP_13 = function ːmarshal_load(args) {
      var self = this;

      self.begin = args['$[]']("begin");
      self.end = args['$[]']("end");
      return self.exclude = args['$[]']("excl");
    }, TMP_13.$$arity = 1), nil) && 'marshal_load';
  })($scope.base, null);
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["corelib/proc"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$raise', '$coerce_to!']);
  return (function($base, $super) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10;

    def.$$is_proc = true;

    def.$$is_lambda = false;

    Opal.defs(self, '$new', TMP_1 = function() {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil;

      TMP_1.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        self.$raise($scope.get('ArgumentError'), "tried to create a Proc object without a block")
      };
      return block;
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$call', TMP_2 = function ːcall($a_rest) {
      var self = this, args, $iter = TMP_2.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_2.$$p = null;
      
      if (block !== nil) {
        self.$$p = block;
      }

      var result, $brk = self.$$brk;

      if ($brk) {
        try {
          if (self.$$is_lambda) {
            result = self.apply(null, args);
          }
          else {
            result = Opal.yieldX(self, args);
          }
        } catch (err) {
          if (err === $brk) {
            return $brk.$v
          }
          else {
            throw err
          }
        }
      }
      else {
        if (self.$$is_lambda) {
          result = self.apply(null, args);
        }
        else {
          result = Opal.yieldX(self, args);
        }
      }

      return result;
    
    }, TMP_2.$$arity = -1);

    Opal.alias(self, '[]', 'call');

    Opal.alias(self, '===', 'call');

    Opal.alias(self, 'yield', 'call');

    Opal.defn(self, '$to_proc', TMP_3 = function ːto_proc() {
      var self = this;

      return self;
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$lambda?', TMP_4 = function() {
      var self = this;

      return !!self.$$is_lambda;
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$arity', TMP_5 = function ːarity() {
      var self = this;

      
      if (self.$$is_curried) {
        return -1;
      } else {
        return self.$$arity;
      }
    
    }, TMP_5.$$arity = 0);

    Opal.defn(self, '$source_location', TMP_6 = function ːsource_location() {
      var self = this;

      if (self.$$is_curried) { return nil; }
      return nil;
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$binding', TMP_7 = function ːbinding() {
      var self = this;

      if (self.$$is_curried) { self.$raise($scope.get('ArgumentError'), "Can't create Binding") };
      return nil;
    }, TMP_7.$$arity = 0);

    Opal.defn(self, '$parameters', TMP_8 = function ːparameters() {
      var self = this;

      
      if (self.$$is_curried) {
        return [["rest"]];
      } else if (self.$$parameters) {
        if (self.$$is_lambda) {
          return self.$$parameters;
        } else {
          var result = [], i, length;

          for (i = 0, length = self.$$parameters.length; i < length; i++) {
            var parameter = self.$$parameters[i];

            if (parameter[0] === 'req') {
              // required arguments always have name
              parameter = ['opt', parameter[1]];
            }

            result.push(parameter);
          }

          return result;
        }
      } else {
        return [];
      }
    ;
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$curry', TMP_9 = function ːcurry(arity) {
      var self = this;

      
      if (arity === undefined) {
        arity = self.length;
      }
      else {
        arity = $scope.get('Opal')['$coerce_to!'](arity, $scope.get('Integer'), "to_int");
        if (self.$$is_lambda && arity !== self.length) {
          self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (arity) + " for " + (self.length) + ")")
        }
      }

      function curried () {
        var args = $slice.call(arguments),
            length = args.length,
            result;

        if (length > arity && self.$$is_lambda && !self.$$is_curried) {
          self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (length) + " for " + (arity) + ")")
        }

        if (length >= arity) {
          return self.$call.apply(self, args);
        }

        result = function () {
          return curried.apply(null,
            args.concat($slice.call(arguments)));
        }
        result.$$is_lambda = self.$$is_lambda;
        result.$$is_curried = true;

        return result;
      };

      curried.$$is_lambda = self.$$is_lambda;
      curried.$$is_curried = true;
      return curried;
    
    }, TMP_9.$$arity = -1);

    Opal.defn(self, '$dup', TMP_10 = function ːdup() {
      var self = this;

      
      var original_proc = self.$$original_proc || self,
          proc = function () {
            return original_proc.apply(this, arguments);
          };

      for (var prop in self) {
        if (self.hasOwnProperty(prop)) {
          proc[prop] = self[prop];
        }
      }

      return proc;
    
    }, TMP_10.$$arity = 0);

    return Opal.alias(self, 'clone', 'dup');
  })($scope.base, Function)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["corelib/method"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$class', '$arity', '$new', '$name']);
  (function($base, $super) {
    function $Method(){};
    var self = $Method = $klass($base, $super, 'Method', $Method);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7;

    def.method = def.receiver = def.owner = def.name = nil;
    self.$attr_reader("owner", "receiver", "name");

    Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(receiver, method, name) {
      var self = this;

      self.receiver = receiver;
      self.owner = receiver.$class();
      self.name = name;
      return self.method = method;
    }, TMP_1.$$arity = 3);

    Opal.defn(self, '$arity', TMP_2 = function ːarity() {
      var self = this;

      return self.method.$arity();
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$parameters', TMP_3 = function ːparameters() {
      var self = this;

      return self.method.$$parameters;
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$call', TMP_4 = function ːcall($a_rest) {
      var self = this, args, $iter = TMP_4.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_4.$$p = null;
      
      self.method.$$p = block;

      return self.method.apply(self.receiver, args);
    ;
    }, TMP_4.$$arity = -1);

    Opal.alias(self, '[]', 'call');

    Opal.defn(self, '$unbind', TMP_5 = function ːunbind() {
      var self = this;

      return $scope.get('UnboundMethod').$new(self.owner, self.method, self.name);
    }, TMP_5.$$arity = 0);

    Opal.defn(self, '$to_proc', TMP_6 = function ːto_proc() {
      var self = this;

      
      var proc = function () { return self.$call.apply(self, $slice.call(arguments)); };
      proc.$$unbound = self.method;
      proc.$$is_lambda = true;
      return proc;
    
    }, TMP_6.$$arity = 0);

    return (Opal.defn(self, '$inspect', TMP_7 = function ːinspect() {
      var self = this;

      return "#<Method: " + (self.receiver.$class()) + "#" + (self.name) + ">";
    }, TMP_7.$$arity = 0), nil) && 'inspect';
  })($scope.base, null);
  return (function($base, $super) {
    function $UnboundMethod(){};
    var self = $UnboundMethod = $klass($base, $super, 'UnboundMethod', $UnboundMethod);

    var def = self.$$proto, $scope = self.$$scope, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12;

    def.method = def.name = def.owner = nil;
    self.$attr_reader("owner", "name");

    Opal.defn(self, '$initialize', TMP_8 = function ːinitialize(owner, method, name) {
      var self = this;

      self.owner = owner;
      self.method = method;
      return self.name = name;
    }, TMP_8.$$arity = 3);

    Opal.defn(self, '$arity', TMP_9 = function ːarity() {
      var self = this;

      return self.method.$arity();
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$parameters', TMP_10 = function ːparameters() {
      var self = this;

      return self.method.$$parameters;
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$bind', TMP_11 = function ːbind(object) {
      var self = this;

      return $scope.get('Method').$new(object, self.method, self.name);
    }, TMP_11.$$arity = 1);

    return (Opal.defn(self, '$inspect', TMP_12 = function ːinspect() {
      var self = this;

      return "#<UnboundMethod: " + (self.owner.$name()) + "#" + (self.name) + ">";
    }, TMP_12.$$arity = 0), nil) && 'inspect';
  })($scope.base, null);
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["corelib/variables"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $gvars = Opal.gvars, $hash2 = Opal.hash2;

  Opal.add_stubs(['$new']);
  $gvars["&"] = $gvars["~"] = $gvars["`"] = $gvars["'"] = nil;
  $gvars.LOADED_FEATURES = $gvars["\""] = Opal.loaded_features;
  $gvars.LOAD_PATH = $gvars[":"] = [];
  $gvars["/"] = "\n";
  $gvars[","] = nil;
  Opal.cdecl($scope, 'ARGV', []);
  Opal.cdecl($scope, 'ARGF', $scope.get('Object').$new());
  Opal.cdecl($scope, 'ENV', $hash2([], {}));
  $gvars.VERBOSE = false;
  $gvars.DEBUG = false;
  return $gvars.SAFE = 0;
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["opal/regexp_anchors"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$==', '$new']);
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'REGEXP_START', (function() {if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
      return "^"}; return nil; })());

    Opal.cdecl($scope, 'REGEXP_END', (function() {if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
      return "$"}; return nil; })());

    Opal.cdecl($scope, 'FORBIDDEN_STARTING_IDENTIFIER_CHARS', "\\u0001-\\u002F\\u003A-\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");

    Opal.cdecl($scope, 'FORBIDDEN_ENDING_IDENTIFIER_CHARS', "\\u0001-\\u0020\\u0022-\\u002F\\u003A-\\u003E\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");

    Opal.cdecl($scope, 'INLINE_IDENTIFIER_REGEXP', $scope.get('Regexp').$new("[^" + ($scope.get('FORBIDDEN_STARTING_IDENTIFIER_CHARS')) + "]*[^" + ($scope.get('FORBIDDEN_ENDING_IDENTIFIER_CHARS')) + "]"));

    Opal.cdecl($scope, 'FORBIDDEN_CONST_NAME_CHARS', "\\u0001-\\u0020\\u0021-\\u002F\\u003B-\\u003F\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");

    Opal.cdecl($scope, 'CONST_NAME_REGEXP', $scope.get('Regexp').$new("" + ($scope.get('REGEXP_START')) + "(::)?[A-Z][^" + ($scope.get('FORBIDDEN_CONST_NAME_CHARS')) + "]*" + ($scope.get('REGEXP_END'))));
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["opal/mini"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("opal/base");
  self.$require("corelib/nil");
  self.$require("corelib/boolean");
  self.$require("corelib/string");
  self.$require("corelib/comparable");
  self.$require("corelib/enumerable");
  self.$require("corelib/enumerator");
  self.$require("corelib/array");
  self.$require("corelib/hash");
  self.$require("corelib/number");
  self.$require("corelib/range");
  self.$require("corelib/proc");
  self.$require("corelib/method");
  self.$require("corelib/regexp");
  self.$require("corelib/variables");
  return self.$require("opal/regexp_anchors");
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["corelib/string/inheritance"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$new', '$allocate', '$initialize', '$to_proc', '$__send__', '$class', '$clone', '$respond_to?', '$==', '$inspect', '$+', '$*', '$map', '$split', '$enum_for', '$each_line', '$to_a', '$%', '$-']);
  self.$require("corelib/string");
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    return (Opal.defs(self, '$inherited', TMP_1 = function ːinherited(klass) {
      var self = this, replace = nil;

      replace = $scope.get('Class').$new((($scope.get('String')).$$scope.get('Wrapper')));
      
      klass.$$proto         = replace.$$proto;
      klass.$$proto.$$class = klass;
      klass.$$alloc         = replace.$$alloc;
      klass.$$parent        = (($scope.get('String')).$$scope.get('Wrapper'));

      klass.$allocate = replace.$allocate;
      klass.$new      = replace.$new;
    
    }, TMP_1.$$arity = 1), nil) && 'inherited'
  })($scope.base, null);
  return (function($base, $super) {
    function $Wrapper(){};
    var self = $Wrapper = $klass($base, $super, 'Wrapper', $Wrapper);

    var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_15, TMP_16, TMP_17, TMP_19, TMP_20, TMP_21;

    def.literal = nil;
    def.$$is_string = true;

    Opal.defs(self, '$allocate', TMP_2 = function ːallocate(string) {
      var $a, $b, self = this, $iter = TMP_2.$$p, $yield = $iter || nil, obj = nil;

      if (string == null) {
        string = "";
      }
      TMP_2.$$p = null;
      obj = ($a = ($b = self, Opal.find_super_dispatcher(self, 'allocate', TMP_2, false, $Wrapper)), $a.$$p = null, $a).call($b);
      obj.literal = string;
      return obj;
    }, TMP_2.$$arity = -1);

    Opal.defs(self, '$new', TMP_3 = function($a_rest) {
      var $b, $c, self = this, args, $iter = TMP_3.$$p, block = $iter || nil, obj = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_3.$$p = null;
      obj = self.$allocate();
      ($b = ($c = obj).$initialize, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
      return obj;
    }, TMP_3.$$arity = -1);

    Opal.defs(self, '$[]', TMP_4 = function($a_rest) {
      var self = this, objects;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      objects = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        objects[$arg_idx - 0] = arguments[$arg_idx];
      }
      return self.$allocate(objects);
    }, TMP_4.$$arity = -1);

    Opal.defn(self, '$initialize', TMP_5 = function ːinitialize(string) {
      var self = this;

      if (string == null) {
        string = "";
      }
      return self.literal = string;
    }, TMP_5.$$arity = -1);

    Opal.defn(self, '$method_missing', TMP_6 = function ːmethod_missing($a_rest) {
      var $b, $c, self = this, args, $iter = TMP_6.$$p, block = $iter || nil, result = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_6.$$p = null;
      result = ($b = ($c = self.literal).$__send__, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
      if ((($b = result.$$is_string != null) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        if ((($b = result == self.literal) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return self
          } else {
          return self.$class().$allocate(result)
        }
        } else {
        return result
      };
    }, TMP_6.$$arity = -1);

    Opal.defn(self, '$initialize_copy', TMP_7 = function ːinitialize_copy(other) {
      var self = this;

      return self.literal = (other.literal).$clone();
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$respond_to?', TMP_8 = function(name, $a_rest) {
      var $b, $c, $d, self = this, $iter = TMP_8.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_8.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      return ((($b = ($c = ($d = self, Opal.find_super_dispatcher(self, 'respond_to?', TMP_8, false)), $c.$$p = $iter, $c).apply($d, $zuper)) !== false && $b !== nil && $b != null) ? $b : self.literal['$respond_to?'](name));
    }, TMP_8.$$arity = -2);

    Opal.defn(self, '$==', TMP_9 = function(other) {
      var self = this;

      return self.literal['$=='](other);
    }, TMP_9.$$arity = 1);

    Opal.alias(self, 'eql?', '==');

    Opal.alias(self, '===', '==');

    Opal.defn(self, '$to_s', TMP_10 = function ːto_s() {
      var self = this;

      return self.literal;
    }, TMP_10.$$arity = 0);

    Opal.alias(self, 'to_str', 'to_s');

    Opal.defn(self, '$inspect', TMP_11 = function ːinspect() {
      var self = this;

      return self.literal.$inspect();
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$+', TMP_12 = function(other) {
      var self = this;

      return $rb_plus(self.literal, other);
    }, TMP_12.$$arity = 1);

    Opal.defn(self, '$*', TMP_13 = function(other) {
      var self = this;

      
      var result = $rb_times(self.literal, other);

      if (result.$$is_string) {
        return self.$class().$allocate(result)
      }
      else {
        return result;
      }
    ;
    }, TMP_13.$$arity = 1);

    Opal.defn(self, '$split', TMP_15 = function ːsplit(pattern, limit) {
      var $a, $b, TMP_14, self = this;

      return ($a = ($b = self.literal.$split(pattern, limit)).$map, $a.$$p = (TMP_14 = function(str){var self = TMP_14.$$s || this;
if (str == null) str = nil;
      return self.$class().$allocate(str)}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($b);
    }, TMP_15.$$arity = -1);

    Opal.defn(self, '$replace', TMP_16 = function ːreplace(string) {
      var self = this;

      return self.literal = string;
    }, TMP_16.$$arity = 1);

    Opal.defn(self, '$each_line', TMP_17 = function ːeach_line(separator) {
      var $a, $b, TMP_18, self = this, $iter = TMP_17.$$p, $yield = $iter || nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"];
      }
      TMP_17.$$p = null;
      if (($yield !== nil)) {
        } else {
        return self.$enum_for("each_line", separator)
      };
      return ($a = ($b = self.literal).$each_line, $a.$$p = (TMP_18 = function(str){var self = TMP_18.$$s || this;
if (str == null) str = nil;
      return Opal.yield1($yield, self.$class().$allocate(str));}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18), $a).call($b, separator);
    }, TMP_17.$$arity = -1);

    Opal.defn(self, '$lines', TMP_19 = function ːlines(separator) {
      var $a, $b, self = this, $iter = TMP_19.$$p, block = $iter || nil, e = nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"];
      }
      TMP_19.$$p = null;
      e = ($a = ($b = self).$each_line, $a.$$p = block.$to_proc(), $a).call($b, separator);
      if (block !== false && block !== nil && block != null) {
        return self
        } else {
        return e.$to_a()
      };
    }, TMP_19.$$arity = -1);

    Opal.defn(self, '$%', TMP_20 = function(data) {
      var self = this;

      return self.literal['$%'](data);
    }, TMP_20.$$arity = 1);

    return (Opal.defn(self, '$instance_variables', TMP_21 = function ːinstance_variables() {
      var $a, $b, self = this, $iter = TMP_21.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_21.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      return $rb_minus(($a = ($b = self, Opal.find_super_dispatcher(self, 'instance_variables', TMP_21, false)), $a.$$p = $iter, $a).apply($b, $zuper), ["@literal"]);
    }, TMP_21.$$arity = 0), nil) && 'instance_variables';
  })($scope.get('String'), null);
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["corelib/string/encoding"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var $a, $b, TMP_13, $c, TMP_16, $d, TMP_19, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$+', '$[]', '$new', '$to_proc', '$each', '$const_set', '$sub', '$upcase', '$const_get', '$===', '$==', '$name', '$include?', '$names', '$constants', '$raise', '$attr_accessor', '$attr_reader', '$register', '$length', '$bytes', '$to_a', '$each_byte', '$bytesize', '$enum_for', '$force_encoding', '$dup', '$coerce_to!', '$find', '$nil?', '$getbyte']);
  self.$require("corelib/string");
  (function($base, $super) {
    function $Encoding(){};
    var self = $Encoding = $klass($base, $super, 'Encoding', $Encoding);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12;

    def.ascii = def.dummy = def.name = nil;
    Opal.defs(self, '$register', TMP_1 = function ːregister(name, options) {
      var $a, $b, $c, TMP_2, self = this, $iter = TMP_1.$$p, block = $iter || nil, names = nil, encoding = nil;

      if (options == null) {
        options = $hash2([], {});
      }
      TMP_1.$$p = null;
      names = $rb_plus([name], (((($a = options['$[]']("aliases")) !== false && $a !== nil && $a != null) ? $a : [])));
      encoding = ($a = ($b = $scope.get('Class')).$new, $a.$$p = block.$to_proc(), $a).call($b, self).$new(name, names, ((($a = options['$[]']("ascii")) !== false && $a !== nil && $a != null) ? $a : false), ((($a = options['$[]']("dummy")) !== false && $a !== nil && $a != null) ? $a : false));
      return ($a = ($c = names).$each, $a.$$p = (TMP_2 = function(name){var self = TMP_2.$$s || this;
if (name == null) name = nil;
      return self.$const_set(name.$sub("-", "_"), encoding)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($c);
    }, TMP_1.$$arity = -2);

    Opal.defs(self, '$find', TMP_4 = function ːfind(name) {try {

      var $a, $b, TMP_3, self = this, upcase = nil;

      upcase = name.$upcase();
      ($a = ($b = self.$constants()).$each, $a.$$p = (TMP_3 = function(const$){var self = TMP_3.$$s || this, $c, $d, encoding = nil;
if (const$ == null) const$ = nil;
      encoding = self.$const_get(const$);
        if ((($c = $scope.get('Encoding')['$==='](encoding)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          } else {
          return nil;
        };
        if ((($c = ((($d = encoding.$name()['$=='](upcase)) !== false && $d !== nil && $d != null) ? $d : encoding.$names()['$include?'](upcase))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          Opal.ret(encoding)
          } else {
          return nil
        };}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b);
      return self.$raise($scope.get('ArgumentError'), "unknown encoding name - " + (name));
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_4.$$arity = 1);

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      return self.$attr_accessor("default_external")
    })(Opal.get_singleton_class(self));

    self.$attr_reader("name", "names");

    Opal.defn(self, '$initialize', TMP_5 = function ːinitialize(name, names, ascii, dummy) {
      var self = this;

      self.name = name;
      self.names = names;
      self.ascii = ascii;
      return self.dummy = dummy;
    }, TMP_5.$$arity = 4);

    Opal.defn(self, '$ascii_compatible?', TMP_6 = function() {
      var self = this;

      return self.ascii;
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$dummy?', TMP_7 = function() {
      var self = this;

      return self.dummy;
    }, TMP_7.$$arity = 0);

    Opal.defn(self, '$to_s', TMP_8 = function ːto_s() {
      var self = this;

      return self.name;
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$inspect', TMP_9 = function ːinspect() {
      var $a, self = this;

      return "#<Encoding:" + (self.name) + ((function() {if ((($a = self.dummy) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return " (dummy)"
        } else {
        return nil
      }; return nil; })()) + ">";
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$each_byte', TMP_10 = function ːeach_byte($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'));
    }, TMP_10.$$arity = -1);

    Opal.defn(self, '$getbyte', TMP_11 = function ːgetbyte($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'));
    }, TMP_11.$$arity = -1);

    Opal.defn(self, '$bytesize', TMP_12 = function ːbytesize($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'));
    }, TMP_12.$$arity = -1);

    (function($base, $super) {
      function $EncodingError(){};
      var self = $EncodingError = $klass($base, $super, 'EncodingError', $EncodingError);

      var def = self.$$proto, $scope = self.$$scope;

      return nil;
    })($scope.base, $scope.get('StandardError'));

    return (function($base, $super) {
      function $CompatibilityError(){};
      var self = $CompatibilityError = $klass($base, $super, 'CompatibilityError', $CompatibilityError);

      var def = self.$$proto, $scope = self.$$scope;

      return nil;
    })($scope.base, $scope.get('EncodingError'));
  })($scope.base, null);
  ($a = ($b = $scope.get('Encoding')).$register, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this, TMP_14, TMP_15;

  Opal.def(self, '$each_byte', TMP_14 = function ːeach_byte(string) {
      var self = this, $iter = TMP_14.$$p, block = $iter || nil;

      TMP_14.$$p = null;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);

        if (code <= 0x7f) {
          Opal.yield1(block, code);
        }
        else {
          var encoded = encodeURIComponent(string.charAt(i)).substr(1).split('%');

          for (var j = 0, encoded_length = encoded.length; j < encoded_length; j++) {
            Opal.yield1(block, parseInt(encoded[j], 16));
          }
        }
      }
    
    }, TMP_14.$$arity = 1);
    return (Opal.def(self, '$bytesize', TMP_15 = function ːbytesize() {
      var self = this;

      return self.$bytes().$length();
    }, TMP_15.$$arity = 0), nil) && 'bytesize';}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $a).call($b, "UTF-8", $hash2(["aliases", "ascii"], {"aliases": ["CP65001"], "ascii": true}));
  ($a = ($c = $scope.get('Encoding')).$register, $a.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this, TMP_17, TMP_18;

  Opal.def(self, '$each_byte', TMP_17 = function ːeach_byte(string) {
      var self = this, $iter = TMP_17.$$p, block = $iter || nil;

      TMP_17.$$p = null;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);

        Opal.yield1(block, code & 0xff);
        Opal.yield1(block, code >> 8);
      }
    
    }, TMP_17.$$arity = 1);
    return (Opal.def(self, '$bytesize', TMP_18 = function ːbytesize() {
      var self = this;

      return self.$bytes().$length();
    }, TMP_18.$$arity = 0), nil) && 'bytesize';}, TMP_16.$$s = self, TMP_16.$$arity = 0, TMP_16), $a).call($c, "UTF-16LE");
  ($a = ($d = $scope.get('Encoding')).$register, $a.$$p = (TMP_19 = function(){var self = TMP_19.$$s || this, TMP_20, TMP_21;

  Opal.def(self, '$each_byte', TMP_20 = function ːeach_byte(string) {
      var self = this, $iter = TMP_20.$$p, block = $iter || nil;

      TMP_20.$$p = null;
      
      for (var i = 0, length = string.length; i < length; i++) {
        Opal.yield1(block, string.charCodeAt(i) & 0xff);
      }
    
    }, TMP_20.$$arity = 1);
    return (Opal.def(self, '$bytesize', TMP_21 = function ːbytesize() {
      var self = this;

      return self.$bytes().$length();
    }, TMP_21.$$arity = 0), nil) && 'bytesize';}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19), $a).call($d, "ASCII-8BIT", $hash2(["aliases", "ascii"], {"aliases": ["BINARY"], "ascii": true}));
  return (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28;

    def.encoding = nil;
    String.prototype.encoding = (($scope.get('Encoding')).$$scope.get('UTF_16LE'));

    Opal.defn(self, '$bytes', TMP_22 = function ːbytes() {
      var self = this;

      return self.$each_byte().$to_a();
    }, TMP_22.$$arity = 0);

    Opal.defn(self, '$bytesize', TMP_23 = function ːbytesize() {
      var self = this;

      return self.encoding.$bytesize(self);
    }, TMP_23.$$arity = 0);

    Opal.defn(self, '$each_byte', TMP_24 = function ːeach_byte() {
      var $a, $b, self = this, $iter = TMP_24.$$p, block = $iter || nil;

      TMP_24.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each_byte")
      };
      ($a = ($b = self.encoding).$each_byte, $a.$$p = block.$to_proc(), $a).call($b, self);
      return self;
    }, TMP_24.$$arity = 0);

    Opal.defn(self, '$encode', TMP_25 = function ːencode(encoding) {
      var self = this;

      return self.$dup().$force_encoding(encoding);
    }, TMP_25.$$arity = 1);

    Opal.defn(self, '$encoding', TMP_26 = function ːencoding() {
      var self = this;

      return self.encoding;
    }, TMP_26.$$arity = 0);

    Opal.defn(self, '$force_encoding', TMP_27 = function ːforce_encoding(encoding) {
      var $a, self = this;

      encoding = $scope.get('Opal')['$coerce_to!'](encoding, $scope.get('String'), "to_str");
      encoding = $scope.get('Encoding').$find(encoding);
      if (encoding['$=='](self.encoding)) {
        return self};
      if ((($a = encoding['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "unknown encoding name - " + (encoding))};
      
      var result = new String(self);
      result.encoding = encoding;

      return result;
    
    }, TMP_27.$$arity = 1);

    return (Opal.defn(self, '$getbyte', TMP_28 = function ːgetbyte(idx) {
      var self = this;

      return self.encoding.$getbyte(self, idx);
    }, TMP_28.$$arity = 1), nil) && 'getbyte';
  })($scope.base, null);
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["corelib/math"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$new', '$raise', '$Float', '$type_error', '$Integer', '$module_function', '$checked', '$float!', '$===', '$gamma', '$-', '$integer!', '$/', '$infinite?']);
  return (function($base) {
    var $Math, self = $Math = $module($base, 'Math');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, $a, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29;

    Opal.cdecl($scope, 'E', Math.E);

    Opal.cdecl($scope, 'PI', Math.PI);

    Opal.cdecl($scope, 'DomainError', $scope.get('Class').$new($scope.get('StandardError')));

    Opal.defs(self, '$checked', TMP_1 = function ːchecked(method, $a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      
      if (isNaN(args[0]) || (args.length == 2 && isNaN(args[1]))) {
        return NaN;
      }

      var result = Math[method].apply(null, args);

      if (isNaN(result)) {
        self.$raise($scope.get('DomainError'), "Numerical argument is out of domain - \"" + (method) + "\"");
      }

      return result;
    
    }, TMP_1.$$arity = -2);

    Opal.defs(self, '$float!', TMP_2 = function(value) {
      var self = this;

      try {
        return self.$Float(value)
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('ArgumentError')])) {
          try {
            return self.$raise($scope.get('Opal').$type_error(value, $scope.get('Float')))
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
    }, TMP_2.$$arity = 1);

    Opal.defs(self, '$integer!', TMP_3 = function(value) {
      var self = this;

      try {
        return self.$Integer(value)
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('ArgumentError')])) {
          try {
            return self.$raise($scope.get('Opal').$type_error(value, $scope.get('Integer')))
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
    }, TMP_3.$$arity = 1);

    self.$module_function();

    Opal.defn(self, '$acos', TMP_4 = function ːacos(x) {
      var self = this;

      return $scope.get('Math').$checked("acos", $scope.get('Math')['$float!'](x));
    }, TMP_4.$$arity = 1);

    if ((($a = (typeof(Math.acosh) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.acosh = function(x) {
        return Math.log(x + Math.sqrt(x * x - 1));
      }
    
    };

    Opal.defn(self, '$acosh', TMP_5 = function ːacosh(x) {
      var self = this;

      return $scope.get('Math').$checked("acosh", $scope.get('Math')['$float!'](x));
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$asin', TMP_6 = function ːasin(x) {
      var self = this;

      return $scope.get('Math').$checked("asin", $scope.get('Math')['$float!'](x));
    }, TMP_6.$$arity = 1);

    if ((($a = (typeof(Math.asinh) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.asinh = function(x) {
        return Math.log(x + Math.sqrt(x * x + 1))
      }
    ;
    };

    Opal.defn(self, '$asinh', TMP_7 = function ːasinh(x) {
      var self = this;

      return $scope.get('Math').$checked("asinh", $scope.get('Math')['$float!'](x));
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$atan', TMP_8 = function ːatan(x) {
      var self = this;

      return $scope.get('Math').$checked("atan", $scope.get('Math')['$float!'](x));
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$atan2', TMP_9 = function ːatan2(y, x) {
      var self = this;

      return $scope.get('Math').$checked("atan2", $scope.get('Math')['$float!'](y), $scope.get('Math')['$float!'](x));
    }, TMP_9.$$arity = 2);

    if ((($a = (typeof(Math.atanh) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.atanh = function(x) {
        return 0.5 * Math.log((1 + x) / (1 - x));
      }
    
    };

    Opal.defn(self, '$atanh', TMP_10 = function ːatanh(x) {
      var self = this;

      return $scope.get('Math').$checked("atanh", $scope.get('Math')['$float!'](x));
    }, TMP_10.$$arity = 1);

    if ((($a = (typeof(Math.cbrt) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.cbrt = function(x) {
        if (x == 0) {
          return 0;
        }

        if (x < 0) {
          return -Math.cbrt(-x);
        }

        var r  = x,
            ex = 0;

        while (r < 0.125) {
          r *= 8;
          ex--;
        }

        while (r > 1.0) {
          r *= 0.125;
          ex++;
        }

        r = (-0.46946116 * r + 1.072302) * r + 0.3812513;

        while (ex < 0) {
          r *= 0.5;
          ex++;
        }

        while (ex > 0) {
          r *= 2;
          ex--;
        }

        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);
        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);
        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);
        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);

        return r;
      }
    
    };

    Opal.defn(self, '$cbrt', TMP_11 = function ːcbrt(x) {
      var self = this;

      return $scope.get('Math').$checked("cbrt", $scope.get('Math')['$float!'](x));
    }, TMP_11.$$arity = 1);

    Opal.defn(self, '$cos', TMP_12 = function ːcos(x) {
      var self = this;

      return $scope.get('Math').$checked("cos", $scope.get('Math')['$float!'](x));
    }, TMP_12.$$arity = 1);

    if ((($a = (typeof(Math.cosh) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.cosh = function(x) {
        return (Math.exp(x) + Math.exp(-x)) / 2;
      }
    
    };

    Opal.defn(self, '$cosh', TMP_13 = function ːcosh(x) {
      var self = this;

      return $scope.get('Math').$checked("cosh", $scope.get('Math')['$float!'](x));
    }, TMP_13.$$arity = 1);

    if ((($a = (typeof(Math.erf) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.erf = function(x) {
        var A1 =  0.254829592,
            A2 = -0.284496736,
            A3 =  1.421413741,
            A4 = -1.453152027,
            A5 =  1.061405429,
            P  =  0.3275911;

        var sign = 1;

        if (x < 0) {
            sign = -1;
        }

        x = Math.abs(x);

        var t = 1.0 / (1.0 + P * x);
        var y = 1.0 - (((((A5 * t + A4) * t) + A3) * t + A2) * t + A1) * t * Math.exp(-x * x);

        return sign * y;
      }
    
    };

    Opal.defn(self, '$erf', TMP_14 = function ːerf(x) {
      var self = this;

      return $scope.get('Math').$checked("erf", $scope.get('Math')['$float!'](x));
    }, TMP_14.$$arity = 1);

    if ((($a = (typeof(Math.erfc) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.erfc = function(x) {
        var z = Math.abs(x),
            t = 1.0 / (0.5 * z + 1.0);

        var A1 = t * 0.17087277 + -0.82215223,
            A2 = t * A1 + 1.48851587,
            A3 = t * A2 + -1.13520398,
            A4 = t * A3 + 0.27886807,
            A5 = t * A4 + -0.18628806,
            A6 = t * A5 + 0.09678418,
            A7 = t * A6 + 0.37409196,
            A8 = t * A7 + 1.00002368,
            A9 = t * A8,
            A10 = -z * z - 1.26551223 + A9;

        var a = t * Math.exp(A10);

        if (x < 0.0) {
          return 2.0 - a;
        }
        else {
          return a;
        }
      }
    
    };

    Opal.defn(self, '$erfc', TMP_15 = function ːerfc(x) {
      var self = this;

      return $scope.get('Math').$checked("erfc", $scope.get('Math')['$float!'](x));
    }, TMP_15.$$arity = 1);

    Opal.defn(self, '$exp', TMP_16 = function ːexp(x) {
      var self = this;

      return $scope.get('Math').$checked("exp", $scope.get('Math')['$float!'](x));
    }, TMP_16.$$arity = 1);

    Opal.defn(self, '$frexp', TMP_17 = function ːfrexp(x) {
      var self = this;

      x = $scope.get('Math')['$float!'](x);
      
      if (isNaN(x)) {
        return [NaN, 0];
      }

      var ex   = Math.floor(Math.log(Math.abs(x)) / Math.log(2)) + 1,
          frac = x / Math.pow(2, ex);

      return [frac, ex];
    
    }, TMP_17.$$arity = 1);

    Opal.defn(self, '$gamma', TMP_18 = function ːgamma(n) {
      var self = this;

      n = $scope.get('Math')['$float!'](n);
      
      var i, t, x, value, result, twoN, threeN, fourN, fiveN;

      var G = 4.7421875;

      var P = [
         0.99999999999999709182,
         57.156235665862923517,
        -59.597960355475491248,
         14.136097974741747174,
        -0.49191381609762019978,
         0.33994649984811888699e-4,
         0.46523628927048575665e-4,
        -0.98374475304879564677e-4,
         0.15808870322491248884e-3,
        -0.21026444172410488319e-3,
         0.21743961811521264320e-3,
        -0.16431810653676389022e-3,
         0.84418223983852743293e-4,
        -0.26190838401581408670e-4,
         0.36899182659531622704e-5
      ];


      if (isNaN(n)) {
        return NaN;
      }

      if (n === 0 && 1 / n < 0) {
        return -Infinity;
      }

      if (n === -1 || n === -Infinity) {
        self.$raise($scope.get('DomainError'), "Numerical argument is out of domain - \"gamma\"");
      }

      if ($scope.get('Integer')['$==='](n)) {
        if (n <= 0) {
          return isFinite(n) ? Infinity : NaN;
        }

        if (n > 171) {
          return Infinity;
        }

        value  = n - 2;
        result = n - 1;

        while (value > 1) {
          result *= value;
          value--;
        }

        if (result == 0) {
          result = 1;
        }

        return result;
      }

      if (n < 0.5) {
        return Math.PI / (Math.sin(Math.PI * n) * $scope.get('Math').$gamma($rb_minus(1, n)));
      }

      if (n >= 171.35) {
        return Infinity;
      }

      if (n > 85.0) {
        twoN   = n * n;
        threeN = twoN * n;
        fourN  = threeN * n;
        fiveN  = fourN * n;

        return Math.sqrt(2 * Math.PI / n) * Math.pow((n / Math.E), n) *
          (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) -
          571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) +
          5246819 / (75246796800 * fiveN * n));
      }

      n -= 1;
      x  = P[0];

      for (i = 1; i < P.length; ++i) {
        x += P[i] / (n + i);
      }

      t = n + G + 0.5;

      return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;
    
    }, TMP_18.$$arity = 1);

    if ((($a = (typeof(Math.hypot) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.hypot = function(x, y) {
        return Math.sqrt(x * x + y * y)
      }
    ;
    };

    Opal.defn(self, '$hypot', TMP_19 = function ːhypot(x, y) {
      var self = this;

      return $scope.get('Math').$checked("hypot", $scope.get('Math')['$float!'](x), $scope.get('Math')['$float!'](y));
    }, TMP_19.$$arity = 2);

    Opal.defn(self, '$ldexp', TMP_20 = function ːldexp(mantissa, exponent) {
      var self = this;

      mantissa = $scope.get('Math')['$float!'](mantissa);
      exponent = $scope.get('Math')['$integer!'](exponent);
      
      if (isNaN(exponent)) {
        self.$raise($scope.get('RangeError'), "float NaN out of range of integer");
      }

      return mantissa * Math.pow(2, exponent);
    ;
    }, TMP_20.$$arity = 2);

    Opal.defn(self, '$lgamma', TMP_21 = function ːlgamma(n) {
      var self = this;

      
      if (n == -1) {
        return [Infinity, 1];
      }
      else {
        return [Math.log(Math.abs($scope.get('Math').$gamma(n))), $scope.get('Math').$gamma(n) < 0 ? -1 : 1];
      }
    ;
    }, TMP_21.$$arity = 1);

    Opal.defn(self, '$log', TMP_22 = function ːlog(x, base) {
      var $a, self = this;

      if ((($a = $scope.get('String')['$==='](x)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')))};
      if ((($a = base == null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return $scope.get('Math').$checked("log", $scope.get('Math')['$float!'](x))
        } else {
        if ((($a = $scope.get('String')['$==='](base)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('Opal').$type_error(base, $scope.get('Float')))};
        return $rb_divide($scope.get('Math').$checked("log", $scope.get('Math')['$float!'](x)), $scope.get('Math').$checked("log", $scope.get('Math')['$float!'](base)));
      };
    }, TMP_22.$$arity = -2);

    if ((($a = (typeof(Math.log10) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.log10 = function(x) {
        return Math.log(x) / Math.LN10;
      }
    
    };

    Opal.defn(self, '$log10', TMP_23 = function ːlog10(x) {
      var $a, self = this;

      if ((($a = $scope.get('String')['$==='](x)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')))};
      return $scope.get('Math').$checked("log10", $scope.get('Math')['$float!'](x));
    }, TMP_23.$$arity = 1);

    if ((($a = (typeof(Math.log2) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.log2 = function(x) {
        return Math.log(x) / Math.LN2;
      }
    
    };

    Opal.defn(self, '$log2', TMP_24 = function ːlog2(x) {
      var $a, self = this;

      if ((($a = $scope.get('String')['$==='](x)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')))};
      return $scope.get('Math').$checked("log2", $scope.get('Math')['$float!'](x));
    }, TMP_24.$$arity = 1);

    Opal.defn(self, '$sin', TMP_25 = function ːsin(x) {
      var self = this;

      return $scope.get('Math').$checked("sin", $scope.get('Math')['$float!'](x));
    }, TMP_25.$$arity = 1);

    if ((($a = (typeof(Math.sinh) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.sinh = function(x) {
        return (Math.exp(x) - Math.exp(-x)) / 2;
      }
    
    };

    Opal.defn(self, '$sinh', TMP_26 = function ːsinh(x) {
      var self = this;

      return $scope.get('Math').$checked("sinh", $scope.get('Math')['$float!'](x));
    }, TMP_26.$$arity = 1);

    Opal.defn(self, '$sqrt', TMP_27 = function ːsqrt(x) {
      var self = this;

      return $scope.get('Math').$checked("sqrt", $scope.get('Math')['$float!'](x));
    }, TMP_27.$$arity = 1);

    Opal.defn(self, '$tan', TMP_28 = function ːtan(x) {
      var $a, self = this;

      x = $scope.get('Math')['$float!'](x);
      if ((($a = x['$infinite?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (($scope.get('Float')).$$scope.get('NAN'))};
      return $scope.get('Math').$checked("tan", $scope.get('Math')['$float!'](x));
    }, TMP_28.$$arity = 1);

    if ((($a = (typeof(Math.tanh) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.tanh = function(x) {
        if (x == Infinity) {
          return 1;
        }
        else if (x == -Infinity) {
          return -1;
        }
        else {
          return (Math.exp(x) - Math.exp(-x)) / (Math.exp(x) + Math.exp(-x));
        }
      }
    
    };

    Opal.defn(self, '$tanh', TMP_29 = function ːtanh(x) {
      var self = this;

      return $scope.get('Math').$checked("tanh", $scope.get('Math')['$float!'](x));
    }, TMP_29.$$arity = 1);
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["corelib/complex"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$require', '$===', '$real?', '$raise', '$new', '$*', '$cos', '$sin', '$attr_reader', '$class', '$==', '$real', '$imag', '$Complex', '$-@', '$+', '$__coerced__', '$-', '$nan?', '$/', '$conj', '$abs2', '$quo', '$polar', '$exp', '$log', '$>', '$!=', '$divmod', '$**', '$hypot', '$atan2', '$lcm', '$denominator', '$to_s', '$numerator', '$abs', '$arg', '$rationalize', '$to_f', '$to_i', '$to_r', '$inspect', '$positive?', '$infinite?']);
  self.$require("corelib/numeric");
  (function($base, $super) {
    function $Complex(){};
    var self = $Complex = $klass($base, $super, 'Complex', $Complex);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29;

    def.real = def.imag = nil;
    Opal.defs(self, '$rect', TMP_1 = function ːrect(real, imag) {
      var $a, $b, $c, $d, self = this;

      if (imag == null) {
        imag = 0;
      }
      if ((($a = ($b = ($c = ($d = $scope.get('Numeric')['$==='](real), $d !== false && $d !== nil && $d != null ?real['$real?']() : $d), $c !== false && $c !== nil && $c != null ?$scope.get('Numeric')['$==='](imag) : $c), $b !== false && $b !== nil && $b != null ?imag['$real?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "not a real")
      };
      return self.$new(real, imag);
    }, TMP_1.$$arity = -2);

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      return Opal.alias(self, 'rectangular', 'rect')
    })(Opal.get_singleton_class(self));

    Opal.defs(self, '$polar', TMP_2 = function ːpolar(r, theta) {
      var $a, $b, $c, $d, self = this;

      if (theta == null) {
        theta = 0;
      }
      if ((($a = ($b = ($c = ($d = $scope.get('Numeric')['$==='](r), $d !== false && $d !== nil && $d != null ?r['$real?']() : $d), $c !== false && $c !== nil && $c != null ?$scope.get('Numeric')['$==='](theta) : $c), $b !== false && $b !== nil && $b != null ?theta['$real?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "not a real")
      };
      return self.$new($rb_times(r, $scope.get('Math').$cos(theta)), $rb_times(r, $scope.get('Math').$sin(theta)));
    }, TMP_2.$$arity = -2);

    self.$attr_reader("real", "imag");

    Opal.defn(self, '$initialize', TMP_3 = function ːinitialize(real, imag) {
      var self = this;

      if (imag == null) {
        imag = 0;
      }
      self.real = real;
      return self.imag = imag;
    }, TMP_3.$$arity = -2);

    Opal.defn(self, '$coerce', TMP_4 = function ːcoerce(other) {
      var $a, $b, self = this;

      if ((($a = $scope.get('Complex')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return [other, self]
      } else if ((($a = ($b = $scope.get('Numeric')['$==='](other), $b !== false && $b !== nil && $b != null ?other['$real?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return [$scope.get('Complex').$new(other, 0), self]
        } else {
        return self.$raise($scope.get('TypeError'), "" + (other.$class()) + " can't be coerced into Complex")
      };
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$==', TMP_5 = function(other) {
      var $a, $b, self = this;

      if ((($a = $scope.get('Complex')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (($a = self.real['$=='](other.$real())) ? self.imag['$=='](other.$imag()) : self.real['$=='](other.$real()))
      } else if ((($a = ($b = $scope.get('Numeric')['$==='](other), $b !== false && $b !== nil && $b != null ?other['$real?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (($a = self.real['$=='](other)) ? self.imag['$=='](0) : self.real['$=='](other))
        } else {
        return other['$=='](self)
      };
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$-@', TMP_6 = function() {
      var self = this;

      return self.$Complex(self.real['$-@'](), self.imag['$-@']());
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$+', TMP_7 = function(other) {
      var $a, $b, self = this;

      if ((($a = $scope.get('Complex')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$Complex($rb_plus(self.real, other.$real()), $rb_plus(self.imag, other.$imag()))
      } else if ((($a = ($b = $scope.get('Numeric')['$==='](other), $b !== false && $b !== nil && $b != null ?other['$real?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$Complex($rb_plus(self.real, other), self.imag)
        } else {
        return self.$__coerced__("+", other)
      };
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$-', TMP_8 = function(other) {
      var $a, $b, self = this;

      if ((($a = $scope.get('Complex')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$Complex($rb_minus(self.real, other.$real()), $rb_minus(self.imag, other.$imag()))
      } else if ((($a = ($b = $scope.get('Numeric')['$==='](other), $b !== false && $b !== nil && $b != null ?other['$real?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$Complex($rb_minus(self.real, other), self.imag)
        } else {
        return self.$__coerced__("-", other)
      };
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$*', TMP_9 = function(other) {
      var $a, $b, self = this;

      if ((($a = $scope.get('Complex')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$Complex($rb_minus($rb_times(self.real, other.$real()), $rb_times(self.imag, other.$imag())), $rb_plus($rb_times(self.real, other.$imag()), $rb_times(self.imag, other.$real())))
      } else if ((($a = ($b = $scope.get('Numeric')['$==='](other), $b !== false && $b !== nil && $b != null ?other['$real?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$Complex($rb_times(self.real, other), $rb_times(self.imag, other))
        } else {
        return self.$__coerced__("*", other)
      };
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$/', TMP_10 = function(other) {
      var $a, $b, $c, $d, $e, self = this;

      if ((($a = $scope.get('Complex')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = ((($b = ((($c = ((($d = (($e = $scope.get('Number')['$==='](self.real), $e !== false && $e !== nil && $e != null ?self.real['$nan?']() : $e))) !== false && $d !== nil && $d != null) ? $d : (($e = $scope.get('Number')['$==='](self.imag), $e !== false && $e !== nil && $e != null ?self.imag['$nan?']() : $e)))) !== false && $c !== nil && $c != null) ? $c : (($d = $scope.get('Number')['$==='](other.$real()), $d !== false && $d !== nil && $d != null ?other.$real()['$nan?']() : $d)))) !== false && $b !== nil && $b != null) ? $b : (($c = $scope.get('Number')['$==='](other.$imag()), $c !== false && $c !== nil && $c != null ?other.$imag()['$nan?']() : $c)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return $scope.get('Complex').$new((($scope.get('Float')).$$scope.get('NAN')), (($scope.get('Float')).$$scope.get('NAN')))
          } else {
          return $rb_divide($rb_times(self, other.$conj()), other.$abs2())
        }
      } else if ((($a = ($b = $scope.get('Numeric')['$==='](other), $b !== false && $b !== nil && $b != null ?other['$real?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$Complex(self.real.$quo(other), self.imag.$quo(other))
        } else {
        return self.$__coerced__("/", other)
      };
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$**', TMP_11 = function(other) {
      var $a, $b, $c, $d, $e, self = this, r = nil, theta = nil, ore = nil, oim = nil, nr = nil, ntheta = nil, x = nil, z = nil, n = nil, div = nil, mod = nil;

      if (other['$=='](0)) {
        return $scope.get('Complex').$new(1, 0)};
      if ((($a = $scope.get('Complex')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        $b = self.$polar(), $a = Opal.to_ary($b), r = ($a[0] == null ? nil : $a[0]), theta = ($a[1] == null ? nil : $a[1]), $b;
        ore = other.$real();
        oim = other.$imag();
        nr = $scope.get('Math').$exp($rb_minus($rb_times(ore, $scope.get('Math').$log(r)), $rb_times(oim, theta)));
        ntheta = $rb_plus($rb_times(theta, ore), $rb_times(oim, $scope.get('Math').$log(r)));
        return $scope.get('Complex').$polar(nr, ntheta);
      } else if ((($a = $scope.get('Integer')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = $rb_gt(other, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          x = self;
          z = x;
          n = $rb_minus(other, 1);
          while ((($b = n['$!='](0)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          while ((($c = ($e = n.$divmod(2), $d = Opal.to_ary($e), div = ($d[0] == null ? nil : $d[0]), mod = ($d[1] == null ? nil : $d[1]), $e, mod['$=='](0))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          x = self.$Complex($rb_minus($rb_times(x.$real(), x.$real()), $rb_times(x.$imag(), x.$imag())), $rb_times($rb_times(2, x.$real()), x.$imag()));
          n = div;};
          z = $rb_times(z, x);
          n = $rb_minus(n, 1);};
          return z;
          } else {
          return ($rb_divide($scope.get('Rational').$new(1, 1), self))['$**'](other['$-@']())
        }
      } else if ((($a = ((($b = $scope.get('Float')['$==='](other)) !== false && $b !== nil && $b != null) ? $b : $scope.get('Rational')['$==='](other))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        $b = self.$polar(), $a = Opal.to_ary($b), r = ($a[0] == null ? nil : $a[0]), theta = ($a[1] == null ? nil : $a[1]), $b;
        return $scope.get('Complex').$polar(r['$**'](other), $rb_times(theta, other));
        } else {
        return self.$__coerced__("**", other)
      };
    }, TMP_11.$$arity = 1);

    Opal.defn(self, '$abs', TMP_12 = function ːabs() {
      var self = this;

      return $scope.get('Math').$hypot(self.real, self.imag);
    }, TMP_12.$$arity = 0);

    Opal.defn(self, '$abs2', TMP_13 = function ːabs2() {
      var self = this;

      return $rb_plus($rb_times(self.real, self.real), $rb_times(self.imag, self.imag));
    }, TMP_13.$$arity = 0);

    Opal.defn(self, '$angle', TMP_14 = function ːangle() {
      var self = this;

      return $scope.get('Math').$atan2(self.imag, self.real);
    }, TMP_14.$$arity = 0);

    Opal.alias(self, 'arg', 'angle');

    Opal.defn(self, '$conj', TMP_15 = function ːconj() {
      var self = this;

      return self.$Complex(self.real, self.imag['$-@']());
    }, TMP_15.$$arity = 0);

    Opal.alias(self, 'conjugate', 'conj');

    Opal.defn(self, '$denominator', TMP_16 = function ːdenominator() {
      var self = this;

      return self.real.$denominator().$lcm(self.imag.$denominator());
    }, TMP_16.$$arity = 0);

    Opal.alias(self, 'divide', '/');

    Opal.defn(self, '$eql?', TMP_17 = function(other) {
      var $a, $b, self = this;

      return ($a = ($b = $scope.get('Complex')['$==='](other), $b !== false && $b !== nil && $b != null ?self.real.$class()['$=='](self.imag.$class()) : $b), $a !== false && $a !== nil && $a != null ?self['$=='](other) : $a);
    }, TMP_17.$$arity = 1);

    Opal.defn(self, '$fdiv', TMP_18 = function ːfdiv(other) {
      var $a, self = this;

      if ((($a = $scope.get('Numeric')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "" + (other.$class()) + " can't be coerced into Complex")
      };
      return $rb_divide(self, other);
    }, TMP_18.$$arity = 1);

    Opal.defn(self, '$hash', TMP_19 = function ːhash() {
      var self = this;

      return "Complex:" + (self.real) + ":" + (self.imag);
    }, TMP_19.$$arity = 0);

    Opal.alias(self, 'imaginary', 'imag');

    Opal.defn(self, '$inspect', TMP_20 = function ːinspect() {
      var self = this;

      return "(" + (self.$to_s()) + ")";
    }, TMP_20.$$arity = 0);

    Opal.alias(self, 'magnitude', 'abs');

    Opal.defn(self, '$numerator', TMP_21 = function ːnumerator() {
      var self = this, d = nil;

      d = self.$denominator();
      return self.$Complex($rb_times(self.real.$numerator(), ($rb_divide(d, self.real.$denominator()))), $rb_times(self.imag.$numerator(), ($rb_divide(d, self.imag.$denominator()))));
    }, TMP_21.$$arity = 0);

    Opal.alias(self, 'phase', 'arg');

    Opal.defn(self, '$polar', TMP_22 = function ːpolar() {
      var self = this;

      return [self.$abs(), self.$arg()];
    }, TMP_22.$$arity = 0);

    Opal.alias(self, 'quo', '/');

    Opal.defn(self, '$rationalize', TMP_23 = function ːrationalize(eps) {
      var $a, self = this;

      
      if (arguments.length > 1) {
        self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (arguments.length) + " for 0..1)");
      }
    ;
      if ((($a = self.imag['$!='](0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('RangeError'), "can't' convert " + (self) + " into Rational")};
      return self.$real().$rationalize(eps);
    }, TMP_23.$$arity = -1);

    Opal.defn(self, '$real?', TMP_24 = function() {
      var self = this;

      return false;
    }, TMP_24.$$arity = 0);

    Opal.defn(self, '$rect', TMP_25 = function ːrect() {
      var self = this;

      return [self.real, self.imag];
    }, TMP_25.$$arity = 0);

    Opal.alias(self, 'rectangular', 'rect');

    Opal.defn(self, '$to_f', TMP_26 = function ːto_f() {
      var self = this;

      if (self.imag['$=='](0)) {
        } else {
        self.$raise($scope.get('RangeError'), "can't convert " + (self) + " into Float")
      };
      return self.real.$to_f();
    }, TMP_26.$$arity = 0);

    Opal.defn(self, '$to_i', TMP_27 = function ːto_i() {
      var self = this;

      if (self.imag['$=='](0)) {
        } else {
        self.$raise($scope.get('RangeError'), "can't convert " + (self) + " into Integer")
      };
      return self.real.$to_i();
    }, TMP_27.$$arity = 0);

    Opal.defn(self, '$to_r', TMP_28 = function ːto_r() {
      var self = this;

      if (self.imag['$=='](0)) {
        } else {
        self.$raise($scope.get('RangeError'), "can't convert " + (self) + " into Rational")
      };
      return self.real.$to_r();
    }, TMP_28.$$arity = 0);

    Opal.defn(self, '$to_s', TMP_29 = function ːto_s() {
      var $a, $b, $c, self = this, result = nil;

      result = self.real.$inspect();
      if ((($a = ((($b = (($c = $scope.get('Number')['$==='](self.imag), $c !== false && $c !== nil && $c != null ?self.imag['$nan?']() : $c))) !== false && $b !== nil && $b != null) ? $b : self.imag['$positive?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, "+")
        } else {
        result = $rb_plus(result, "-")
      };
      result = $rb_plus(result, self.imag.$abs().$inspect());
      if ((($a = ($b = $scope.get('Number')['$==='](self.imag), $b !== false && $b !== nil && $b != null ?(((($c = self.imag['$nan?']()) !== false && $c !== nil && $c != null) ? $c : self.imag['$infinite?']())) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, "*")};
      return $rb_plus(result, "i");
    }, TMP_29.$$arity = 0);

    return Opal.cdecl($scope, 'I', self.$new(0, 1));
  })($scope.base, $scope.get('Numeric'));
  return (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_30;

    Opal.defn(self, '$Complex', TMP_30 = function ːComplex(real, imag) {
      var self = this;

      if (imag == null) {
        imag = nil;
      }
      if (imag !== false && imag !== nil && imag != null) {
        return $scope.get('Complex').$new(real, imag)
        } else {
        return $scope.get('Complex').$new(real, 0)
      };
    }, TMP_30.$$arity = -2)
  })($scope.base);
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["corelib/rational"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$require', '$to_i', '$==', '$raise', '$<', '$-@', '$new', '$gcd', '$/', '$nil?', '$===', '$reduce', '$to_r', '$equal?', '$!', '$coerce_to!', '$attr_reader', '$to_f', '$numerator', '$denominator', '$<=>', '$-', '$*', '$__coerced__', '$+', '$Rational', '$>', '$**', '$abs', '$ceil', '$with_precision', '$floor', '$to_s', '$<=', '$truncate', '$send', '$convert']);
  self.$require("corelib/numeric");
  (function($base, $super) {
    function $Rational(){};
    var self = $Rational = $klass($base, $super, 'Rational', $Rational);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26;

    def.num = def.den = nil;
    Opal.defs(self, '$reduce', TMP_1 = function ːreduce(num, den) {
      var $a, self = this, gcd = nil;

      num = num.$to_i();
      den = den.$to_i();
      if (den['$=='](0)) {
        self.$raise($scope.get('ZeroDivisionError'), "divided by 0")
      } else if ((($a = $rb_lt(den, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        num = num['$-@']();
        den = den['$-@']();
      } else if (den['$=='](1)) {
        return self.$new(num, den)};
      gcd = num.$gcd(den);
      return self.$new($rb_divide(num, gcd), $rb_divide(den, gcd));
    }, TMP_1.$$arity = 2);

    Opal.defs(self, '$convert', TMP_2 = function ːconvert(num, den) {
      var $a, $b, $c, self = this;

      if ((($a = ((($b = num['$nil?']()) !== false && $b !== nil && $b != null) ? $b : den['$nil?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('TypeError'), "cannot convert nil into Rational")};
      if ((($a = ($b = $scope.get('Integer')['$==='](num), $b !== false && $b !== nil && $b != null ?$scope.get('Integer')['$==='](den) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$reduce(num, den)};
      if ((($a = ((($b = ((($c = $scope.get('Float')['$==='](num)) !== false && $c !== nil && $c != null) ? $c : $scope.get('String')['$==='](num))) !== false && $b !== nil && $b != null) ? $b : $scope.get('Complex')['$==='](num))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        num = num.$to_r()};
      if ((($a = ((($b = ((($c = $scope.get('Float')['$==='](den)) !== false && $c !== nil && $c != null) ? $c : $scope.get('String')['$==='](den))) !== false && $b !== nil && $b != null) ? $b : $scope.get('Complex')['$==='](den))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        den = den.$to_r()};
      if ((($a = ($b = den['$equal?'](1), $b !== false && $b !== nil && $b != null ?($scope.get('Integer')['$==='](num))['$!']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return $scope.get('Opal')['$coerce_to!'](num, $scope.get('Rational'), "to_r")
      } else if ((($a = ($b = $scope.get('Numeric')['$==='](num), $b !== false && $b !== nil && $b != null ?$scope.get('Numeric')['$==='](den) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return $rb_divide(num, den)
        } else {
        return self.$reduce(num, den)
      };
    }, TMP_2.$$arity = 2);

    self.$attr_reader("numerator", "denominator");

    Opal.defn(self, '$initialize', TMP_3 = function ːinitialize(num, den) {
      var self = this;

      self.num = num;
      return self.den = den;
    }, TMP_3.$$arity = 2);

    Opal.defn(self, '$numerator', TMP_4 = function ːnumerator() {
      var self = this;

      return self.num;
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$denominator', TMP_5 = function ːdenominator() {
      var self = this;

      return self.den;
    }, TMP_5.$$arity = 0);

    Opal.defn(self, '$coerce', TMP_6 = function ːcoerce(other) {
      var self = this, $case = nil;

      return (function() {$case = other;if ($scope.get('Rational')['$===']($case)) {return [other, self]}else if ($scope.get('Integer')['$===']($case)) {return [other.$to_r(), self]}else if ($scope.get('Float')['$===']($case)) {return [other, self.$to_f()]}else { return nil }})();
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$==', TMP_7 = function(other) {
      var $a, self = this, $case = nil;

      return (function() {$case = other;if ($scope.get('Rational')['$===']($case)) {return (($a = self.num['$=='](other.$numerator())) ? self.den['$=='](other.$denominator()) : self.num['$=='](other.$numerator()))}else if ($scope.get('Integer')['$===']($case)) {return (($a = self.num['$=='](other)) ? self.den['$=='](1) : self.num['$=='](other))}else if ($scope.get('Float')['$===']($case)) {return self.$to_f()['$=='](other)}else {return other['$=='](self)}})();
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$<=>', TMP_8 = function(other) {
      var self = this, $case = nil;

      return (function() {$case = other;if ($scope.get('Rational')['$===']($case)) {return $rb_minus($rb_times(self.num, other.$denominator()), $rb_times(self.den, other.$numerator()))['$<=>'](0)}else if ($scope.get('Integer')['$===']($case)) {return $rb_minus(self.num, $rb_times(self.den, other))['$<=>'](0)}else if ($scope.get('Float')['$===']($case)) {return self.$to_f()['$<=>'](other)}else {return self.$__coerced__("<=>", other)}})();
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$+', TMP_9 = function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;if ($scope.get('Rational')['$===']($case)) {num = $rb_plus($rb_times(self.num, other.$denominator()), $rb_times(self.den, other.$numerator()));
      den = $rb_times(self.den, other.$denominator());
      return self.$Rational(num, den);}else if ($scope.get('Integer')['$===']($case)) {return self.$Rational($rb_plus(self.num, $rb_times(other, self.den)), self.den)}else if ($scope.get('Float')['$===']($case)) {return $rb_plus(self.$to_f(), other)}else {return self.$__coerced__("+", other)}})();
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$-', TMP_10 = function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;if ($scope.get('Rational')['$===']($case)) {num = $rb_minus($rb_times(self.num, other.$denominator()), $rb_times(self.den, other.$numerator()));
      den = $rb_times(self.den, other.$denominator());
      return self.$Rational(num, den);}else if ($scope.get('Integer')['$===']($case)) {return self.$Rational($rb_minus(self.num, $rb_times(other, self.den)), self.den)}else if ($scope.get('Float')['$===']($case)) {return $rb_minus(self.$to_f(), other)}else {return self.$__coerced__("-", other)}})();
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$*', TMP_11 = function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;if ($scope.get('Rational')['$===']($case)) {num = $rb_times(self.num, other.$numerator());
      den = $rb_times(self.den, other.$denominator());
      return self.$Rational(num, den);}else if ($scope.get('Integer')['$===']($case)) {return self.$Rational($rb_times(self.num, other), self.den)}else if ($scope.get('Float')['$===']($case)) {return $rb_times(self.$to_f(), other)}else {return self.$__coerced__("*", other)}})();
    }, TMP_11.$$arity = 1);

    Opal.defn(self, '$/', TMP_12 = function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;if ($scope.get('Rational')['$===']($case)) {num = $rb_times(self.num, other.$denominator());
      den = $rb_times(self.den, other.$numerator());
      return self.$Rational(num, den);}else if ($scope.get('Integer')['$===']($case)) {if (other['$=='](0)) {
        return $rb_divide(self.$to_f(), 0.0)
        } else {
        return self.$Rational(self.num, $rb_times(self.den, other))
      }}else if ($scope.get('Float')['$===']($case)) {return $rb_divide(self.$to_f(), other)}else {return self.$__coerced__("/", other)}})();
    }, TMP_12.$$arity = 1);

    Opal.defn(self, '$**', TMP_13 = function(other) {
      var $a, $b, self = this, $case = nil;

      return (function() {$case = other;if ($scope.get('Integer')['$===']($case)) {if ((($a = (($b = self['$=='](0)) ? $rb_lt(other, 0) : self['$=='](0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (($scope.get('Float')).$$scope.get('INFINITY'))
      } else if ((($a = $rb_gt(other, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$Rational(self.num['$**'](other), self.den['$**'](other))
      } else if ((($a = $rb_lt(other, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$Rational(self.den['$**'](other['$-@']()), self.num['$**'](other['$-@']()))
        } else {
        return self.$Rational(1, 1)
      }}else if ($scope.get('Float')['$===']($case)) {return self.$to_f()['$**'](other)}else if ($scope.get('Rational')['$===']($case)) {if (other['$=='](0)) {
        return self.$Rational(1, 1)
      } else if (other.$denominator()['$=='](1)) {
        if ((($a = $rb_lt(other, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.$Rational(self.den['$**'](other.$numerator().$abs()), self.num['$**'](other.$numerator().$abs()))
          } else {
          return self.$Rational(self.num['$**'](other.$numerator()), self.den['$**'](other.$numerator()))
        }
      } else if ((($a = (($b = self['$=='](0)) ? $rb_lt(other, 0) : self['$=='](0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('ZeroDivisionError'), "divided by 0")
        } else {
        return self.$to_f()['$**'](other)
      }}else {return self.$__coerced__("**", other)}})();
    }, TMP_13.$$arity = 1);

    Opal.defn(self, '$abs', TMP_14 = function ːabs() {
      var self = this;

      return self.$Rational(self.num.$abs(), self.den.$abs());
    }, TMP_14.$$arity = 0);

    Opal.defn(self, '$ceil', TMP_15 = function ːceil(precision) {
      var self = this;

      if (precision == null) {
        precision = 0;
      }
      if (precision['$=='](0)) {
        return (($rb_divide(self.num['$-@'](), self.den))['$-@']()).$ceil()
        } else {
        return self.$with_precision("ceil", precision)
      };
    }, TMP_15.$$arity = -1);

    Opal.alias(self, 'divide', '/');

    Opal.defn(self, '$floor', TMP_16 = function ːfloor(precision) {
      var self = this;

      if (precision == null) {
        precision = 0;
      }
      if (precision['$=='](0)) {
        return (($rb_divide(self.num['$-@'](), self.den))['$-@']()).$floor()
        } else {
        return self.$with_precision("floor", precision)
      };
    }, TMP_16.$$arity = -1);

    Opal.defn(self, '$hash', TMP_17 = function ːhash() {
      var self = this;

      return "Rational:" + (self.num) + ":" + (self.den);
    }, TMP_17.$$arity = 0);

    Opal.defn(self, '$inspect', TMP_18 = function ːinspect() {
      var self = this;

      return "(" + (self.$to_s()) + ")";
    }, TMP_18.$$arity = 0);

    Opal.alias(self, 'quo', '/');

    Opal.defn(self, '$rationalize', TMP_19 = function ːrationalize(eps) {
      var self = this;

      
      if (arguments.length > 1) {
        self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (arguments.length) + " for 0..1)");
      }

      if (eps == null) {
        return self;
      }

      var e = eps.$abs(),
          a = $rb_minus(self, e),
          b = $rb_plus(self, e);

      var p0 = 0,
          p1 = 1,
          q0 = 1,
          q1 = 0,
          p2, q2;

      var c, k, t;

      while (true) {
        c = (a).$ceil();

        if ($rb_le(c, b)) {
          break;
        }

        k  = c - 1;
        p2 = k * p1 + p0;
        q2 = k * q1 + q0;
        t  = $rb_divide(1, ($rb_minus(b, k)));
        b  = $rb_divide(1, ($rb_minus(a, k)));
        a  = t;

        p0 = p1;
        q0 = q1;
        p1 = p2;
        q1 = q2;
      }

      return self.$Rational(c * p1 + p0, c * q1 + q0);
    ;
    }, TMP_19.$$arity = -1);

    Opal.defn(self, '$round', TMP_20 = function ːround(precision) {
      var $a, self = this, num = nil, den = nil, approx = nil;

      if (precision == null) {
        precision = 0;
      }
      if (precision['$=='](0)) {
        } else {
        return self.$with_precision("round", precision)
      };
      if (self.num['$=='](0)) {
        return 0};
      if (self.den['$=='](1)) {
        return self.num};
      num = $rb_plus($rb_times(self.num.$abs(), 2), self.den);
      den = $rb_times(self.den, 2);
      approx = ($rb_divide(num, den)).$truncate();
      if ((($a = $rb_lt(self.num, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return approx['$-@']()
        } else {
        return approx
      };
    }, TMP_20.$$arity = -1);

    Opal.defn(self, '$to_f', TMP_21 = function ːto_f() {
      var self = this;

      return $rb_divide(self.num, self.den);
    }, TMP_21.$$arity = 0);

    Opal.defn(self, '$to_i', TMP_22 = function ːto_i() {
      var self = this;

      return self.$truncate();
    }, TMP_22.$$arity = 0);

    Opal.defn(self, '$to_r', TMP_23 = function ːto_r() {
      var self = this;

      return self;
    }, TMP_23.$$arity = 0);

    Opal.defn(self, '$to_s', TMP_24 = function ːto_s() {
      var self = this;

      return "" + (self.num) + "/" + (self.den);
    }, TMP_24.$$arity = 0);

    Opal.defn(self, '$truncate', TMP_25 = function ːtruncate(precision) {
      var $a, self = this;

      if (precision == null) {
        precision = 0;
      }
      if (precision['$=='](0)) {
        if ((($a = $rb_lt(self.num, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.$ceil()
          } else {
          return self.$floor()
        }
        } else {
        return self.$with_precision("truncate", precision)
      };
    }, TMP_25.$$arity = -1);

    return (Opal.defn(self, '$with_precision', TMP_26 = function ːwith_precision(method, precision) {
      var $a, self = this, p = nil, s = nil;

      if ((($a = $scope.get('Integer')['$==='](precision)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "not an Integer")
      };
      p = (10)['$**'](precision);
      s = $rb_times(self, p);
      if ((($a = $rb_lt(precision, 1)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($rb_divide(s.$send(method), p)).$to_i()
        } else {
        return self.$Rational(s.$send(method), p)
      };
    }, TMP_26.$$arity = 2), nil) && 'with_precision';
  })($scope.base, $scope.get('Numeric'));
  return (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_27;

    Opal.defn(self, '$Rational', TMP_27 = function ːRational(numerator, denominator) {
      var self = this;

      if (denominator == null) {
        denominator = 1;
      }
      return $scope.get('Rational').$convert(numerator, denominator);
    }, TMP_27.$$arity = -2)
  })($scope.base);
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["corelib/time"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$include', '$===', '$raise', '$coerce_to!', '$respond_to?', '$to_str', '$to_i', '$new', '$<=>', '$to_f', '$nil?', '$>', '$<', '$strftime', '$year', '$month', '$day', '$+', '$round', '$/', '$-', '$copy_instance_variables', '$initialize_dup', '$is_a?', '$zero?', '$wday', '$utc?', '$mon', '$yday', '$hour', '$min', '$sec', '$rjust', '$ljust', '$zone', '$to_s', '$[]', '$cweek_cyear', '$isdst', '$<=', '$!=', '$==', '$ceil']);
  self.$require("corelib/comparable");
  return (function($base, $super) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_40, TMP_41, TMP_42;

    self.$include($scope.get('Comparable'));

    
    var days_of_week = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
        short_days   = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        short_months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        long_months  = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
  ;

    Opal.defs(self, '$at', TMP_1 = function ːat(seconds, frac) {
      var self = this;

      
      var result;

      if ($scope.get('Time')['$==='](seconds)) {
        if (frac !== undefined) {
          self.$raise($scope.get('TypeError'), "can't convert Time into an exact number")
        }
        result = new Date(seconds.getTime());
        result.is_utc = seconds.is_utc;
        return result;
      }

      if (!seconds.$$is_number) {
        seconds = $scope.get('Opal')['$coerce_to!'](seconds, $scope.get('Integer'), "to_int");
      }

      if (frac === undefined) {
        return new Date(seconds * 1000);
      }

      if (!frac.$$is_number) {
        frac = $scope.get('Opal')['$coerce_to!'](frac, $scope.get('Integer'), "to_int");
      }

      return new Date(seconds * 1000 + (frac / 1000));
    ;
    }, TMP_1.$$arity = -2);

    
    function time_params(year, month, day, hour, min, sec) {
      if (year.$$is_string) {
        year = parseInt(year, 10);
      } else {
        year = $scope.get('Opal')['$coerce_to!'](year, $scope.get('Integer'), "to_int");
      }

      if (month === nil) {
        month = 1;
      } else if (!month.$$is_number) {
        if ((month)['$respond_to?']("to_str")) {
          month = (month).$to_str();
          switch (month.toLowerCase()) {
          case 'jan': month =  1; break;
          case 'feb': month =  2; break;
          case 'mar': month =  3; break;
          case 'apr': month =  4; break;
          case 'may': month =  5; break;
          case 'jun': month =  6; break;
          case 'jul': month =  7; break;
          case 'aug': month =  8; break;
          case 'sep': month =  9; break;
          case 'oct': month = 10; break;
          case 'nov': month = 11; break;
          case 'dec': month = 12; break;
          default: month = (month).$to_i();
          }
        } else {
          month = $scope.get('Opal')['$coerce_to!'](month, $scope.get('Integer'), "to_int");
        }
      }

      if (month < 1 || month > 12) {
        self.$raise($scope.get('ArgumentError'), "month out of range: " + (month))
      }
      month = month - 1;

      if (day === nil) {
        day = 1;
      } else if (day.$$is_string) {
        day = parseInt(day, 10);
      } else {
        day = $scope.get('Opal')['$coerce_to!'](day, $scope.get('Integer'), "to_int");
      }

      if (day < 1 || day > 31) {
        self.$raise($scope.get('ArgumentError'), "day out of range: " + (day))
      }

      if (hour === nil) {
        hour = 0;
      } else if (hour.$$is_string) {
        hour = parseInt(hour, 10);
      } else {
        hour = $scope.get('Opal')['$coerce_to!'](hour, $scope.get('Integer'), "to_int");
      }

      if (hour < 0 || hour > 24) {
        self.$raise($scope.get('ArgumentError'), "hour out of range: " + (hour))
      }

      if (min === nil) {
        min = 0;
      } else if (min.$$is_string) {
        min = parseInt(min, 10);
      } else {
        min = $scope.get('Opal')['$coerce_to!'](min, $scope.get('Integer'), "to_int");
      }

      if (min < 0 || min > 59) {
        self.$raise($scope.get('ArgumentError'), "min out of range: " + (min))
      }

      if (sec === nil) {
        sec = 0;
      } else if (!sec.$$is_number) {
        if (sec.$$is_string) {
          sec = parseInt(sec, 10);
        } else {
          sec = $scope.get('Opal')['$coerce_to!'](sec, $scope.get('Integer'), "to_int");
        }
      }

      if (sec < 0 || sec > 60) {
        self.$raise($scope.get('ArgumentError'), "sec out of range: " + (sec))
      }

      return [year, month, day, hour, min, sec];
    }
  ;

    Opal.defs(self, '$new', TMP_2 = function(year, month, day, hour, min, sec, utc_offset) {
      var self = this;

      if (month == null) {
        month = nil;
      }
      if (day == null) {
        day = nil;
      }
      if (hour == null) {
        hour = nil;
      }
      if (min == null) {
        min = nil;
      }
      if (sec == null) {
        sec = nil;
      }
      if (utc_offset == null) {
        utc_offset = nil;
      }
      
      var args, result;

      if (year === undefined) {
        return new Date();
      }

      if (utc_offset !== nil) {
        self.$raise($scope.get('ArgumentError'), "Opal does not support explicitly specifying UTC offset for Time")
      }

      args  = time_params(year, month, day, hour, min, sec);
      year  = args[0];
      month = args[1];
      day   = args[2];
      hour  = args[3];
      min   = args[4];
      sec   = args[5];

      result = new Date(year, month, day, hour, min, 0, sec * 1000);
      if (year < 100) {
        result.setFullYear(year);
      }
      return result;
    
    }, TMP_2.$$arity = -1);

    Opal.defs(self, '$local', TMP_3 = function ːlocal(year, month, day, hour, min, sec, millisecond, _dummy1, _dummy2, _dummy3) {
      var self = this;

      if (month == null) {
        month = nil;
      }
      if (day == null) {
        day = nil;
      }
      if (hour == null) {
        hour = nil;
      }
      if (min == null) {
        min = nil;
      }
      if (sec == null) {
        sec = nil;
      }
      if (millisecond == null) {
        millisecond = nil;
      }
      if (_dummy1 == null) {
        _dummy1 = nil;
      }
      if (_dummy2 == null) {
        _dummy2 = nil;
      }
      if (_dummy3 == null) {
        _dummy3 = nil;
      }
      
      var args, result;

      if (arguments.length === 10) {
        args  = $slice.call(arguments);
        year  = args[5];
        month = args[4];
        day   = args[3];
        hour  = args[2];
        min   = args[1];
        sec   = args[0];
      }

      args  = time_params(year, month, day, hour, min, sec);
      year  = args[0];
      month = args[1];
      day   = args[2];
      hour  = args[3];
      min   = args[4];
      sec   = args[5];

      result = new Date(year, month, day, hour, min, 0, sec * 1000);
      if (year < 100) {
        result.setFullYear(year);
      }
      return result;
    
    }, TMP_3.$$arity = -2);

    Opal.defs(self, '$gm', TMP_4 = function ːgm(year, month, day, hour, min, sec, millisecond, _dummy1, _dummy2, _dummy3) {
      var self = this;

      if (month == null) {
        month = nil;
      }
      if (day == null) {
        day = nil;
      }
      if (hour == null) {
        hour = nil;
      }
      if (min == null) {
        min = nil;
      }
      if (sec == null) {
        sec = nil;
      }
      if (millisecond == null) {
        millisecond = nil;
      }
      if (_dummy1 == null) {
        _dummy1 = nil;
      }
      if (_dummy2 == null) {
        _dummy2 = nil;
      }
      if (_dummy3 == null) {
        _dummy3 = nil;
      }
      
      var args, result;

      if (arguments.length === 10) {
        args  = $slice.call(arguments);
        year  = args[5];
        month = args[4];
        day   = args[3];
        hour  = args[2];
        min   = args[1];
        sec   = args[0];
      }

      args  = time_params(year, month, day, hour, min, sec);
      year  = args[0];
      month = args[1];
      day   = args[2];
      hour  = args[3];
      min   = args[4];
      sec   = args[5];

      result = new Date(Date.UTC(year, month, day, hour, min, 0, sec * 1000));
      if (year < 100) {
        result.setUTCFullYear(year);
      }
      result.is_utc = true;
      return result;
    
    }, TMP_4.$$arity = -2);

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      Opal.alias(self, 'mktime', 'local');
      return Opal.alias(self, 'utc', 'gm');
    })(Opal.get_singleton_class(self));

    Opal.defs(self, '$now', TMP_5 = function ːnow() {
      var self = this;

      return self.$new();
    }, TMP_5.$$arity = 0);

    Opal.defn(self, '$+', TMP_6 = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Time')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('TypeError'), "time + time?")};
      
      if (!other.$$is_number) {
        other = $scope.get('Opal')['$coerce_to!'](other, $scope.get('Integer'), "to_int");
      }
      var result = new Date(self.getTime() + (other * 1000));
      result.is_utc = self.is_utc;
      return result;
    ;
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$-', TMP_7 = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Time')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (self.getTime() - other.getTime()) / 1000};
      
      if (!other.$$is_number) {
        other = $scope.get('Opal')['$coerce_to!'](other, $scope.get('Integer'), "to_int");
      }
      var result = new Date(self.getTime() - (other * 1000));
      result.is_utc = self.is_utc;
      return result;
    ;
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$<=>', TMP_8 = function(other) {
      var $a, self = this, r = nil;

      if ((($a = $scope.get('Time')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$to_f()['$<=>'](other.$to_f())
        } else {
        r = other['$<=>'](self);
        if ((($a = r['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil
        } else if ((($a = $rb_gt(r, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return -1
        } else if ((($a = $rb_lt(r, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return 1
          } else {
          return 0
        };
      };
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$==', TMP_9 = function(other) {
      var self = this;

      return self.$to_f() === other.$to_f();
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$asctime', TMP_10 = function ːasctime() {
      var self = this;

      return self.$strftime("%a %b %e %H:%M:%S %Y");
    }, TMP_10.$$arity = 0);

    Opal.alias(self, 'ctime', 'asctime');

    Opal.defn(self, '$day', TMP_11 = function ːday() {
      var self = this;

      return self.is_utc ? self.getUTCDate() : self.getDate();
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$yday', TMP_12 = function ːyday() {
      var self = this, start_of_year = nil, start_of_day = nil, one_day = nil;

      start_of_year = $scope.get('Time').$new(self.$year()).$to_i();
      start_of_day = $scope.get('Time').$new(self.$year(), self.$month(), self.$day()).$to_i();
      one_day = 86400;
      return $rb_plus(($rb_divide(($rb_minus(start_of_day, start_of_year)), one_day)).$round(), 1);
    }, TMP_12.$$arity = 0);

    Opal.defn(self, '$isdst', TMP_13 = function ːisdst() {
      var self = this;

      
      var jan = new Date(self.getFullYear(), 0, 1),
          jul = new Date(self.getFullYear(), 6, 1);
      return self.getTimezoneOffset() < Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());
    
    }, TMP_13.$$arity = 0);

    Opal.alias(self, 'dst?', 'isdst');

    Opal.defn(self, '$dup', TMP_14 = function ːdup() {
      var self = this, copy = nil;

      copy = new Date(self.getTime());
      copy.$copy_instance_variables(self);
      copy.$initialize_dup(self);
      return copy;
    }, TMP_14.$$arity = 0);

    Opal.defn(self, '$eql?', TMP_15 = function(other) {
      var $a, self = this;

      return ($a = other['$is_a?']($scope.get('Time')), $a !== false && $a !== nil && $a != null ?(self['$<=>'](other))['$zero?']() : $a);
    }, TMP_15.$$arity = 1);

    Opal.defn(self, '$friday?', TMP_16 = function() {
      var self = this;

      return self.$wday() == 5;
    }, TMP_16.$$arity = 0);

    Opal.defn(self, '$hash', TMP_17 = function ːhash() {
      var self = this;

      return 'Time:' + self.getTime();
    }, TMP_17.$$arity = 0);

    Opal.defn(self, '$hour', TMP_18 = function ːhour() {
      var self = this;

      return self.is_utc ? self.getUTCHours() : self.getHours();
    }, TMP_18.$$arity = 0);

    Opal.defn(self, '$inspect', TMP_19 = function ːinspect() {
      var $a, self = this;

      if ((($a = self['$utc?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$strftime("%Y-%m-%d %H:%M:%S UTC")
        } else {
        return self.$strftime("%Y-%m-%d %H:%M:%S %z")
      };
    }, TMP_19.$$arity = 0);

    Opal.alias(self, 'mday', 'day');

    Opal.defn(self, '$min', TMP_20 = function ːmin() {
      var self = this;

      return self.is_utc ? self.getUTCMinutes() : self.getMinutes();
    }, TMP_20.$$arity = 0);

    Opal.defn(self, '$mon', TMP_21 = function ːmon() {
      var self = this;

      return (self.is_utc ? self.getUTCMonth() : self.getMonth()) + 1;
    }, TMP_21.$$arity = 0);

    Opal.defn(self, '$monday?', TMP_22 = function() {
      var self = this;

      return self.$wday() == 1;
    }, TMP_22.$$arity = 0);

    Opal.alias(self, 'month', 'mon');

    Opal.defn(self, '$saturday?', TMP_23 = function() {
      var self = this;

      return self.$wday() == 6;
    }, TMP_23.$$arity = 0);

    Opal.defn(self, '$sec', TMP_24 = function ːsec() {
      var self = this;

      return self.is_utc ? self.getUTCSeconds() : self.getSeconds();
    }, TMP_24.$$arity = 0);

    Opal.defn(self, '$succ', TMP_25 = function ːsucc() {
      var self = this;

      
      var result = new Date(self.getTime() + 1000);
      result.is_utc = self.is_utc;
      return result;
    
    }, TMP_25.$$arity = 0);

    Opal.defn(self, '$usec', TMP_26 = function ːusec() {
      var self = this;

      return self.getMilliseconds() * 1000;
    }, TMP_26.$$arity = 0);

    Opal.defn(self, '$zone', TMP_27 = function ːzone() {
      var self = this;

      
      var string = self.toString(),
          result;

      if (string.indexOf('(') == -1) {
        result = string.match(/[A-Z]{3,4}/)[0];
      }
      else {
        result = string.match(/\([^)]+\)/)[0].match(/[A-Z]/g).join('');
      }

      if (result == "GMT" && /(GMT\W*\d{4})/.test(string)) {
        return RegExp.$1;
      }
      else {
        return result;
      }
    
    }, TMP_27.$$arity = 0);

    Opal.defn(self, '$getgm', TMP_28 = function ːgetgm() {
      var self = this;

      
      var result = new Date(self.getTime());
      result.is_utc = true;
      return result;
    
    }, TMP_28.$$arity = 0);

    Opal.alias(self, 'getutc', 'getgm');

    Opal.defn(self, '$gmtime', TMP_29 = function ːgmtime() {
      var self = this;

      
      self.is_utc = true;
      return self;
    
    }, TMP_29.$$arity = 0);

    Opal.alias(self, 'utc', 'gmtime');

    Opal.defn(self, '$gmt?', TMP_30 = function() {
      var self = this;

      return self.is_utc === true;
    }, TMP_30.$$arity = 0);

    Opal.defn(self, '$gmt_offset', TMP_31 = function ːgmt_offset() {
      var self = this;

      return -self.getTimezoneOffset() * 60;
    }, TMP_31.$$arity = 0);

    Opal.defn(self, '$strftime', TMP_32 = function ːstrftime(format) {
      var self = this;

      
      return format.replace(/%([\-_#^0]*:{0,2})(\d+)?([EO]*)(.)/g, function(full, flags, width, _, conv) {
        var result = "",
            zero   = flags.indexOf('0') !== -1,
            pad    = flags.indexOf('-') === -1,
            blank  = flags.indexOf('_') !== -1,
            upcase = flags.indexOf('^') !== -1,
            invert = flags.indexOf('#') !== -1,
            colons = (flags.match(':') || []).length;

        width = parseInt(width, 10);

        if (zero && blank) {
          if (flags.indexOf('0') < flags.indexOf('_')) {
            zero = false;
          }
          else {
            blank = false;
          }
        }

        switch (conv) {
          case 'Y':
            result += self.$year();
            break;

          case 'C':
            zero    = !blank;
            result += Math.round(self.$year() / 100);
            break;

          case 'y':
            zero    = !blank;
            result += (self.$year() % 100);
            break;

          case 'm':
            zero    = !blank;
            result += self.$mon();
            break;

          case 'B':
            result += long_months[self.$mon() - 1];
            break;

          case 'b':
          case 'h':
            blank   = !zero;
            result += short_months[self.$mon() - 1];
            break;

          case 'd':
            zero    = !blank
            result += self.$day();
            break;

          case 'e':
            blank   = !zero
            result += self.$day();
            break;

          case 'j':
            result += self.$yday();
            break;

          case 'H':
            zero    = !blank;
            result += self.$hour();
            break;

          case 'k':
            blank   = !zero;
            result += self.$hour();
            break;

          case 'I':
            zero    = !blank;
            result += (self.$hour() % 12 || 12);
            break;

          case 'l':
            blank   = !zero;
            result += (self.$hour() % 12 || 12);
            break;

          case 'P':
            result += (self.$hour() >= 12 ? "pm" : "am");
            break;

          case 'p':
            result += (self.$hour() >= 12 ? "PM" : "AM");
            break;

          case 'M':
            zero    = !blank;
            result += self.$min();
            break;

          case 'S':
            zero    = !blank;
            result += self.$sec()
            break;

          case 'L':
            zero    = !blank;
            width   = isNaN(width) ? 3 : width;
            result += self.getMilliseconds();
            break;

          case 'N':
            width   = isNaN(width) ? 9 : width;
            result += (self.getMilliseconds().toString()).$rjust(3, "0");
            result  = (result).$ljust(width, "0");
            break;

          case 'z':
            var offset  = self.getTimezoneOffset(),
                hours   = Math.floor(Math.abs(offset) / 60),
                minutes = Math.abs(offset) % 60;

            result += offset < 0 ? "+" : "-";
            result += hours < 10 ? "0" : "";
            result += hours;

            if (colons > 0) {
              result += ":";
            }

            result += minutes < 10 ? "0" : "";
            result += minutes;

            if (colons > 1) {
              result += ":00";
            }

            break;

          case 'Z':
            result += self.$zone();
            break;

          case 'A':
            result += days_of_week[self.$wday()];
            break;

          case 'a':
            result += short_days[self.$wday()];
            break;

          case 'u':
            result += (self.$wday() + 1);
            break;

          case 'w':
            result += self.$wday();
            break;

          case 'V':
            result += self.$cweek_cyear()['$[]'](0).$to_s().$rjust(2, "0");
            break;

          case 'G':
            result += self.$cweek_cyear()['$[]'](1);
            break;

          case 'g':
            result += self.$cweek_cyear()['$[]'](1)['$[]']($range(-2, -1, false));
            break;

          case 's':
            result += self.$to_i();
            break;

          case 'n':
            result += "\n";
            break;

          case 't':
            result += "\t";
            break;

          case '%':
            result += "%";
            break;

          case 'c':
            result += self.$strftime("%a %b %e %T %Y");
            break;

          case 'D':
          case 'x':
            result += self.$strftime("%m/%d/%y");
            break;

          case 'F':
            result += self.$strftime("%Y-%m-%d");
            break;

          case 'v':
            result += self.$strftime("%e-%^b-%4Y");
            break;

          case 'r':
            result += self.$strftime("%I:%M:%S %p");
            break;

          case 'R':
            result += self.$strftime("%H:%M");
            break;

          case 'T':
          case 'X':
            result += self.$strftime("%H:%M:%S");
            break;

          default:
            return full;
        }

        if (upcase) {
          result = result.toUpperCase();
        }

        if (invert) {
          result = result.replace(/[A-Z]/, function(c) { c.toLowerCase() }).
                          replace(/[a-z]/, function(c) { c.toUpperCase() });
        }

        if (pad && (zero || blank)) {
          result = (result).$rjust(isNaN(width) ? 2 : width, blank ? " " : "0");
        }

        return result;
      });
    
    }, TMP_32.$$arity = 1);

    Opal.defn(self, '$sunday?', TMP_33 = function() {
      var self = this;

      return self.$wday() == 0;
    }, TMP_33.$$arity = 0);

    Opal.defn(self, '$thursday?', TMP_34 = function() {
      var self = this;

      return self.$wday() == 4;
    }, TMP_34.$$arity = 0);

    Opal.defn(self, '$to_a', TMP_35 = function ːto_a() {
      var self = this;

      return [self.$sec(), self.$min(), self.$hour(), self.$day(), self.$month(), self.$year(), self.$wday(), self.$yday(), self.$isdst(), self.$zone()];
    }, TMP_35.$$arity = 0);

    Opal.defn(self, '$to_f', TMP_36 = function ːto_f() {
      var self = this;

      return self.getTime() / 1000;
    }, TMP_36.$$arity = 0);

    Opal.defn(self, '$to_i', TMP_37 = function ːto_i() {
      var self = this;

      return parseInt(self.getTime() / 1000, 10);
    }, TMP_37.$$arity = 0);

    Opal.alias(self, 'to_s', 'inspect');

    Opal.defn(self, '$tuesday?', TMP_38 = function() {
      var self = this;

      return self.$wday() == 2;
    }, TMP_38.$$arity = 0);

    Opal.alias(self, 'tv_sec', 'sec');

    Opal.alias(self, 'tv_usec', 'usec');

    Opal.alias(self, 'utc?', 'gmt?');

    Opal.alias(self, 'gmtoff', 'gmt_offset');

    Opal.alias(self, 'utc_offset', 'gmt_offset');

    Opal.defn(self, '$wday', TMP_39 = function ːwday() {
      var self = this;

      return self.is_utc ? self.getUTCDay() : self.getDay();
    }, TMP_39.$$arity = 0);

    Opal.defn(self, '$wednesday?', TMP_40 = function() {
      var self = this;

      return self.$wday() == 3;
    }, TMP_40.$$arity = 0);

    Opal.defn(self, '$year', TMP_41 = function ːyear() {
      var self = this;

      return self.is_utc ? self.getUTCFullYear() : self.getFullYear();
    }, TMP_41.$$arity = 0);

    return (Opal.defn(self, '$cweek_cyear', TMP_42 = function ːcweek_cyear() {
      var $a, $b, self = this, jan01 = nil, jan01_wday = nil, first_monday = nil, year = nil, offset = nil, week = nil, dec31 = nil, dec31_wday = nil;

      jan01 = $scope.get('Time').$new(self.$year(), 1, 1);
      jan01_wday = jan01.$wday();
      first_monday = 0;
      year = self.$year();
      if ((($a = ($b = $rb_le(jan01_wday, 4), $b !== false && $b !== nil && $b != null ?jan01_wday['$!='](0) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        offset = $rb_minus(jan01_wday, 1)
        } else {
        offset = $rb_minus($rb_minus(jan01_wday, 7), 1);
        if (offset['$=='](-8)) {
          offset = -1};
      };
      week = ($rb_divide(($rb_plus(self.$yday(), offset)), 7.0)).$ceil();
      if ((($a = $rb_le(week, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return $scope.get('Time').$new($rb_minus(self.$year(), 1), 12, 31).$cweek_cyear()
      } else if (week['$=='](53)) {
        dec31 = $scope.get('Time').$new(self.$year(), 12, 31);
        dec31_wday = dec31.$wday();
        if ((($a = ($b = $rb_le(dec31_wday, 3), $b !== false && $b !== nil && $b != null ?dec31_wday['$!='](0) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          week = 1;
          year = $rb_plus(year, 1);};};
      return [week, year];
    }, TMP_42.$$arity = 0), nil) && 'cweek_cyear';
  })($scope.base, Date);
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["corelib/struct"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$include', '$const_name!', '$unshift', '$map', '$coerce_to!', '$new', '$each', '$define_struct_attribute', '$allocate', '$initialize', '$module_eval', '$to_proc', '$const_set', '$==', '$raise', '$<<', '$members', '$define_method', '$instance_eval', '$>', '$length', '$class', '$each_with_index', '$[]=', '$[]', '$hash', '$===', '$<', '$-@', '$size', '$>=', '$include?', '$to_sym', '$instance_of?', '$__id__', '$eql?', '$enum_for', '$name', '$+', '$join', '$inspect', '$each_pair', '$inject', '$flatten', '$to_a', '$values_at']);
  self.$require("corelib/enumerable");
  return (function($base, $super) {
    function $Struct(){};
    var self = $Struct = $klass($base, $super, 'Struct', $Struct);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_8, TMP_9, TMP_11, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_23, TMP_26, TMP_28, TMP_30, TMP_32, TMP_34, TMP_35;

    self.$include($scope.get('Enumerable'));

    Opal.defs(self, '$new', TMP_1 = function(const_name, $a_rest) {
      var $b, $c, TMP_2, $d, TMP_3, $e, self = this, args, $iter = TMP_1.$$p, block = $iter || nil, klass = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_1.$$p = null;
      if (const_name !== false && const_name !== nil && const_name != null) {
        try {
          const_name = $scope.get('Opal')['$const_name!'](const_name)
        } catch ($err) {
          if (Opal.rescue($err, [$scope.get('TypeError'), $scope.get('NameError')])) {
            try {
              args.$unshift(const_name);
              const_name = nil;
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        }};
      ($b = ($c = args).$map, $b.$$p = (TMP_2 = function(arg){var self = TMP_2.$$s || this;
if (arg == null) arg = nil;
      return $scope.get('Opal')['$coerce_to!'](arg, $scope.get('String'), "to_str")}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $b).call($c);
      klass = ($b = ($d = $scope.get('Class')).$new, $b.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this, $a, $e, TMP_4;

      ($a = ($e = args).$each, $a.$$p = (TMP_4 = function(arg){var self = TMP_4.$$s || this;
if (arg == null) arg = nil;
        return self.$define_struct_attribute(arg)}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($e);
        return (function(self) {
          var $scope = self.$$scope, def = self.$$proto, TMP_5;

          Opal.defn(self, '$new', TMP_5 = function($a_rest) {
            var $b, self = this, args, instance = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            instance = self.$allocate();
            instance.$$data = {};;
            ($b = instance).$initialize.apply($b, Opal.to_a(args));
            return instance;
          }, TMP_5.$$arity = -1);
          return Opal.alias(self, '[]', 'new');
        })(Opal.get_singleton_class(self));}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $b).call($d, self);
      if (block !== false && block !== nil && block != null) {
        ($b = ($e = klass).$module_eval, $b.$$p = block.$to_proc(), $b).call($e)};
      if (const_name !== false && const_name !== nil && const_name != null) {
        $scope.get('Struct').$const_set(const_name, klass)};
      return klass;
    }, TMP_1.$$arity = -2);

    Opal.defs(self, '$define_struct_attribute', TMP_8 = function ːdefine_struct_attribute(name) {
      var $a, $b, TMP_6, $c, TMP_7, self = this;

      if (self['$==']($scope.get('Struct'))) {
        self.$raise($scope.get('ArgumentError'), "you cannot define attributes to the Struct class")};
      self.$members()['$<<'](name);
      ($a = ($b = self).$define_method, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

      return self.$$data[name];}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($b, name);
      return ($a = ($c = self).$define_method, $a.$$p = (TMP_7 = function(value){var self = TMP_7.$$s || this;
if (value == null) value = nil;
      return self.$$data[name] = value;}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($c, "" + (name) + "=");
    }, TMP_8.$$arity = 1);

    Opal.defs(self, '$members', TMP_9 = function ːmembers() {
      var $a, self = this;
      if (self.members == null) self.members = nil;

      if (self['$==']($scope.get('Struct'))) {
        self.$raise($scope.get('ArgumentError'), "the Struct class has no members")};
      return ((($a = self.members) !== false && $a !== nil && $a != null) ? $a : self.members = []);
    }, TMP_9.$$arity = 0);

    Opal.defs(self, '$inherited', TMP_11 = function ːinherited(klass) {
      var $a, $b, TMP_10, self = this, members = nil;
      if (self.members == null) self.members = nil;

      members = self.members;
      return ($a = ($b = klass).$instance_eval, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

      return self.members = members}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $a).call($b);
    }, TMP_11.$$arity = 1);

    Opal.defn(self, '$initialize', TMP_13 = function ːinitialize($a_rest) {
      var $b, $c, TMP_12, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ((($b = $rb_gt(args.$length(), self.$class().$members().$length())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        self.$raise($scope.get('ArgumentError'), "struct size differs")};
      return ($b = ($c = self.$class().$members()).$each_with_index, $b.$$p = (TMP_12 = function(name, index){var self = TMP_12.$$s || this;
if (name == null) name = nil;if (index == null) index = nil;
      return self['$[]='](name, args['$[]'](index))}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12), $b).call($c);
    }, TMP_13.$$arity = -1);

    Opal.defn(self, '$members', TMP_14 = function ːmembers() {
      var self = this;

      return self.$class().$members();
    }, TMP_14.$$arity = 0);

    Opal.defn(self, '$hash', TMP_15 = function ːhash() {
      var self = this;

      return $scope.get('Hash').$new(self.$$data).$hash();
    }, TMP_15.$$arity = 0);

    Opal.defn(self, '$[]', TMP_16 = function(name) {
      var $a, self = this;

      if ((($a = $scope.get('Integer')['$==='](name)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = $rb_lt(name, self.$class().$members().$size()['$-@']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('IndexError'), "offset " + (name) + " too small for struct(size:" + (self.$class().$members().$size()) + ")")};
        if ((($a = $rb_ge(name, self.$class().$members().$size())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('IndexError'), "offset " + (name) + " too large for struct(size:" + (self.$class().$members().$size()) + ")")};
        name = self.$class().$members()['$[]'](name);
      } else if ((($a = $scope.get('String')['$==='](name)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        
        if(!self.$$data.hasOwnProperty(name)) {
          self.$raise($scope.get('NameError').$new("no member '" + (name) + "' in struct", name))
        }
      ;
        } else {
        self.$raise($scope.get('TypeError'), "no implicit conversion of " + (name.$class()) + " into Integer")
      };
      name = $scope.get('Opal')['$coerce_to!'](name, $scope.get('String'), "to_str");
      return self.$$data[name];
    }, TMP_16.$$arity = 1);

    Opal.defn(self, '$[]=', TMP_17 = function(name, value) {
      var $a, self = this;

      if ((($a = $scope.get('Integer')['$==='](name)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = $rb_lt(name, self.$class().$members().$size()['$-@']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('IndexError'), "offset " + (name) + " too small for struct(size:" + (self.$class().$members().$size()) + ")")};
        if ((($a = $rb_ge(name, self.$class().$members().$size())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('IndexError'), "offset " + (name) + " too large for struct(size:" + (self.$class().$members().$size()) + ")")};
        name = self.$class().$members()['$[]'](name);
      } else if ((($a = $scope.get('String')['$==='](name)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = self.$class().$members()['$include?'](name.$to_sym())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$raise($scope.get('NameError').$new("no member '" + (name) + "' in struct", name))
        }
        } else {
        self.$raise($scope.get('TypeError'), "no implicit conversion of " + (name.$class()) + " into Integer")
      };
      name = $scope.get('Opal')['$coerce_to!'](name, $scope.get('String'), "to_str");
      return self.$$data[name] = value;
    }, TMP_17.$$arity = 2);

    Opal.defn(self, '$==', TMP_18 = function(other) {
      var $a, self = this;

      if ((($a = other['$instance_of?'](self.$class())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      
      var recursed1 = {}, recursed2 = {};

      function _eqeq(struct, other) {
        var key, a, b;

        recursed1[(struct).$__id__()] = true;
        recursed2[(other).$__id__()] = true;

        for (key in struct.$$data) {
          a = struct.$$data[key];
          b = other.$$data[key];

          if ($scope.get('Struct')['$==='](a)) {
            if (!recursed1.hasOwnProperty((a).$__id__()) || !recursed2.hasOwnProperty((b).$__id__())) {
              if (!_eqeq(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$=='](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eqeq(self, other);
    ;
    }, TMP_18.$$arity = 1);

    Opal.defn(self, '$eql?', TMP_19 = function(other) {
      var $a, self = this;

      if ((($a = other['$instance_of?'](self.$class())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      
      var recursed1 = {}, recursed2 = {};

      function _eqeq(struct, other) {
        var key, a, b;

        recursed1[(struct).$__id__()] = true;
        recursed2[(other).$__id__()] = true;

        for (key in struct.$$data) {
          a = struct.$$data[key];
          b = other.$$data[key];

          if ($scope.get('Struct')['$==='](a)) {
            if (!recursed1.hasOwnProperty((a).$__id__()) || !recursed2.hasOwnProperty((b).$__id__())) {
              if (!_eqeq(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$eql?'](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eqeq(self, other);
    ;
    }, TMP_19.$$arity = 1);

    Opal.defn(self, '$each', TMP_20 = function ːeach() {
      var $a, $b, TMP_21, $c, TMP_22, self = this, $iter = TMP_20.$$p, $yield = $iter || nil;

      TMP_20.$$p = null;
      if (($yield !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_21 = function(){var self = TMP_21.$$s || this;

        return self.$size()}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21), $a).call($b, "each")
      };
      ($a = ($c = self.$class().$members()).$each, $a.$$p = (TMP_22 = function(name){var self = TMP_22.$$s || this;
if (name == null) name = nil;
      return Opal.yield1($yield, self['$[]'](name));}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22), $a).call($c);
      return self;
    }, TMP_20.$$arity = 0);

    Opal.defn(self, '$each_pair', TMP_23 = function ːeach_pair() {
      var $a, $b, TMP_24, $c, TMP_25, self = this, $iter = TMP_23.$$p, $yield = $iter || nil;

      TMP_23.$$p = null;
      if (($yield !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_24 = function(){var self = TMP_24.$$s || this;

        return self.$size()}, TMP_24.$$s = self, TMP_24.$$arity = 0, TMP_24), $a).call($b, "each_pair")
      };
      ($a = ($c = self.$class().$members()).$each, $a.$$p = (TMP_25 = function(name){var self = TMP_25.$$s || this;
if (name == null) name = nil;
      return Opal.yield1($yield, [name, self['$[]'](name)]);}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25), $a).call($c);
      return self;
    }, TMP_23.$$arity = 0);

    Opal.defn(self, '$length', TMP_26 = function ːlength() {
      var self = this;

      return self.$class().$members().$length();
    }, TMP_26.$$arity = 0);

    Opal.alias(self, 'size', 'length');

    Opal.defn(self, '$to_a', TMP_28 = function ːto_a() {
      var $a, $b, TMP_27, self = this;

      return ($a = ($b = self.$class().$members()).$map, $a.$$p = (TMP_27 = function(name){var self = TMP_27.$$s || this;
if (name == null) name = nil;
      return self['$[]'](name)}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27), $a).call($b);
    }, TMP_28.$$arity = 0);

    Opal.alias(self, 'values', 'to_a');

    Opal.defn(self, '$inspect', TMP_30 = function ːinspect() {
      var $a, $b, TMP_29, self = this, result = nil;

      result = "#<struct ";
      if ((($a = ($b = $scope.get('Struct')['$==='](self), $b !== false && $b !== nil && $b != null ?self.$class().$name() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, "" + (self.$class()) + " ")};
      result = $rb_plus(result, ($a = ($b = self.$each_pair()).$map, $a.$$p = (TMP_29 = function(name, value){var self = TMP_29.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return "" + (name) + "=" + (value.$inspect())}, TMP_29.$$s = self, TMP_29.$$arity = 2, TMP_29), $a).call($b).$join(", "));
      result = $rb_plus(result, ">");
      return result;
    }, TMP_30.$$arity = 0);

    Opal.alias(self, 'to_s', 'inspect');

    Opal.defn(self, '$to_h', TMP_32 = function ːto_h() {
      var $a, $b, TMP_31, self = this;

      return ($a = ($b = self.$class().$members()).$inject, $a.$$p = (TMP_31 = function(h, name){var self = TMP_31.$$s || this;
if (h == null) h = nil;if (name == null) name = nil;
      h['$[]='](name, self['$[]'](name));
        return h;}, TMP_31.$$s = self, TMP_31.$$arity = 2, TMP_31), $a).call($b, $hash2([], {}));
    }, TMP_32.$$arity = 0);

    Opal.defn(self, '$values_at', TMP_34 = function ːvalues_at($a_rest) {
      var $b, $c, TMP_33, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      args = ($b = ($c = args).$map, $b.$$p = (TMP_33 = function(arg){var self = TMP_33.$$s || this;
if (arg == null) arg = nil;
      return arg.$$is_range ? arg.$to_a() : arg;}, TMP_33.$$s = self, TMP_33.$$arity = 1, TMP_33), $b).call($c).$flatten();
      
      var result = [];
      for (var i = 0, len = args.length; i < len; i++) {
        if (!args[i].$$is_number) {
          self.$raise($scope.get('TypeError'), "no implicit conversion of " + ((args[i]).$class()) + " into Integer")
        }
        result.push(self['$[]'](args[i]));
      }
      return result;
    ;
    }, TMP_34.$$arity = -1);

    return (Opal.defs(self, '$_load', TMP_35 = function ː_load(args) {
      var $a, $b, self = this, attributes = nil;

      attributes = ($a = args).$values_at.apply($a, Opal.to_a(self.$members()));
      return ($b = self).$new.apply($b, Opal.to_a(attributes));
    }, TMP_35.$$arity = 1), nil) && '_load';
  })($scope.base, null);
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["corelib/io"] = function(Opal) {
  var $a, $b, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $gvars = Opal.gvars;

  Opal.add_stubs(['$attr_accessor', '$size', '$write', '$join', '$map', '$String', '$empty?', '$concat', '$chomp', '$getbyte', '$getc', '$raise', '$new', '$write_proc=', '$extend']);
  (function($base, $super) {
    function $IO(){};
    var self = $IO = $klass($base, $super, 'IO', $IO);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

    def.tty = def.closed = nil;
    Opal.cdecl($scope, 'SEEK_SET', 0);

    Opal.cdecl($scope, 'SEEK_CUR', 1);

    Opal.cdecl($scope, 'SEEK_END', 2);

    Opal.defn(self, '$tty?', TMP_1 = function() {
      var self = this;

      return self.tty;
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$closed?', TMP_2 = function() {
      var self = this;

      return self.closed;
    }, TMP_2.$$arity = 0);

    self.$attr_accessor("write_proc");

    Opal.defn(self, '$write', TMP_3 = function ːwrite(string) {
      var self = this;

      self.write_proc(string);
      return string.$size();
    }, TMP_3.$$arity = 1);

    self.$attr_accessor("sync", "tty");

    Opal.defn(self, '$flush', TMP_4 = function ːflush() {
      var self = this;

      return nil;
    }, TMP_4.$$arity = 0);

    (function($base) {
      var $Writable, self = $Writable = $module($base, 'Writable');

      var def = self.$$proto, $scope = self.$$scope, TMP_5, TMP_7, TMP_9;

      Opal.defn(self, '$<<', TMP_5 = function(string) {
        var self = this;

        self.$write(string);
        return self;
      }, TMP_5.$$arity = 1);

      Opal.defn(self, '$print', TMP_7 = function ːprint($a_rest) {
        var $b, $c, TMP_6, self = this, args;
        if ($gvars[","] == null) $gvars[","] = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        self.$write(($b = ($c = args).$map, $b.$$p = (TMP_6 = function(arg){var self = TMP_6.$$s || this;
if (arg == null) arg = nil;
        return self.$String(arg)}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $b).call($c).$join($gvars[","]));
        return nil;
      }, TMP_7.$$arity = -1);

      Opal.defn(self, '$puts', TMP_9 = function ːputs($a_rest) {
        var $b, $c, TMP_8, self = this, args, newline = nil;
        if ($gvars["/"] == null) $gvars["/"] = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        newline = $gvars["/"];
        if ((($b = args['$empty?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          self.$write($gvars["/"])
          } else {
          self.$write(($b = ($c = args).$map, $b.$$p = (TMP_8 = function(arg){var self = TMP_8.$$s || this;
if (arg == null) arg = nil;
          return self.$String(arg).$chomp()}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $b).call($c).$concat([nil]).$join(newline))
        };
        return nil;
      }, TMP_9.$$arity = -1);
    })($scope.base);

    return (function($base) {
      var $Readable, self = $Readable = $module($base, 'Readable');

      var def = self.$$proto, $scope = self.$$scope, TMP_10, TMP_11, TMP_12, TMP_13;

      Opal.defn(self, '$readbyte', TMP_10 = function ːreadbyte() {
        var self = this;

        return self.$getbyte();
      }, TMP_10.$$arity = 0);

      Opal.defn(self, '$readchar', TMP_11 = function ːreadchar() {
        var self = this;

        return self.$getc();
      }, TMP_11.$$arity = 0);

      Opal.defn(self, '$readline', TMP_12 = function ːreadline(sep) {
        var self = this;
        if ($gvars["/"] == null) $gvars["/"] = nil;

        if (sep == null) {
          sep = $gvars["/"];
        }
        return self.$raise($scope.get('NotImplementedError'));
      }, TMP_12.$$arity = -1);

      Opal.defn(self, '$readpartial', TMP_13 = function ːreadpartial(integer, outbuf) {
        var self = this;

        if (outbuf == null) {
          outbuf = nil;
        }
        return self.$raise($scope.get('NotImplementedError'));
      }, TMP_13.$$arity = -2);
    })($scope.base);
  })($scope.base, null);
  Opal.cdecl($scope, 'STDERR', $gvars.stderr = $scope.get('IO').$new());
  Opal.cdecl($scope, 'STDIN', $gvars.stdin = $scope.get('IO').$new());
  Opal.cdecl($scope, 'STDOUT', $gvars.stdout = $scope.get('IO').$new());
  (($a = [typeof(process) === 'object' ? function(s){process.stdout.write(s)} : function(s){console.log(s)}]), $b = $scope.get('STDOUT'), $b['$write_proc='].apply($b, $a), $a[$a.length-1]);
  (($a = [typeof(process) === 'object' ? function(s){process.stderr.write(s)} : function(s){console.warn(s)}]), $b = $scope.get('STDERR'), $b['$write_proc='].apply($b, $a), $a[$a.length-1]);
  $scope.get('STDOUT').$extend((($scope.get('IO')).$$scope.get('Writable')));
  return $scope.get('STDERR').$extend((($scope.get('IO')).$$scope.get('Writable')));
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["corelib/main"] = function(Opal) {
  var TMP_1, TMP_2, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$include']);
  Opal.defs(self, '$to_s', TMP_1 = function ːto_s() {
    var self = this;

    return "main";
  }, TMP_1.$$arity = 0);
  return (Opal.defs(self, '$include', TMP_2 = function ːinclude(mod) {
    var self = this;

    return $scope.get('Object').$include(mod);
  }, TMP_2.$$arity = 1), nil) && 'include';
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["corelib/dir"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$[]']);
  return (function($base, $super) {
    function $Dir(){};
    var self = $Dir = $klass($base, $super, 'Dir', $Dir);

    var def = self.$$proto, $scope = self.$$scope;

    return (function(self) {
      var $scope = self.$$scope, def = self.$$proto, TMP_1, TMP_2, TMP_3;

      Opal.defn(self, '$chdir', TMP_1 = function ːchdir(dir) {
        var self = this, $iter = TMP_1.$$p, $yield = $iter || nil, prev_cwd = nil;

        TMP_1.$$p = null;
        try {
        prev_cwd = Opal.current_dir;
        Opal.current_dir = dir;
        return Opal.yieldX($yield, []);;
        } finally {
          Opal.current_dir = prev_cwd;
        };
      }, TMP_1.$$arity = 1);
      Opal.defn(self, '$pwd', TMP_2 = function ːpwd() {
        var self = this;

        return Opal.current_dir || '.';
      }, TMP_2.$$arity = 0);
      Opal.alias(self, 'getwd', 'pwd');
      return (Opal.defn(self, '$home', TMP_3 = function ːhome() {
        var $a, self = this;

        return ((($a = $scope.get('ENV')['$[]']("HOME")) !== false && $a !== nil && $a != null) ? $a : ".");
      }, TMP_3.$$arity = 0), nil) && 'home';
    })(Opal.get_singleton_class(self))
  })($scope.base, null)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["corelib/file"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$join', '$compact', '$split', '$==', '$first', '$[]=', '$home', '$pwd', '$each', '$pop', '$<<', '$raise', '$respond_to?', '$to_path', '$class', '$nil?', '$is_a?', '$basename', '$empty?', '$rindex', '$[]', '$+', '$-', '$length', '$gsub', '$find', '$=~']);
  return (function($base, $super) {
    function $File(){};
    var self = $File = $klass($base, $super, 'File', $File);

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'Separator', Opal.cdecl($scope, 'SEPARATOR', "/"));

    Opal.cdecl($scope, 'ALT_SEPARATOR', nil);

    Opal.cdecl($scope, 'PATH_SEPARATOR', ":");

    Opal.cdecl($scope, 'FNM_SYSCASE', 0);

    return (function(self) {
      var $scope = self.$$scope, def = self.$$proto, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_8, TMP_9, TMP_10;

      Opal.defn(self, '$expand_path', TMP_2 = function ːexpand_path(path, basedir) {
        var $a, $b, TMP_1, self = this, parts = nil, new_parts = nil;

        if (basedir == null) {
          basedir = nil;
        }
        path = [basedir, path].$compact().$join($scope.get('SEPARATOR'));
        parts = path.$split($scope.get('SEPARATOR'));
        new_parts = [];
        if (parts.$first()['$==']("~")) {
          parts['$[]='](0, $scope.get('Dir').$home())};
        if (parts.$first()['$=='](".")) {
          parts['$[]='](0, $scope.get('Dir').$pwd())};
        ($a = ($b = parts).$each, $a.$$p = (TMP_1 = function(part){var self = TMP_1.$$s || this;
if (part == null) part = nil;
        if (part['$==']("..")) {
            return new_parts.$pop()
            } else {
            return new_parts['$<<'](part)
          }}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);
        return new_parts.$join($scope.get('SEPARATOR'));
      }, TMP_2.$$arity = -2);
      Opal.alias(self, 'realpath', 'expand_path');
      
      function chompdirsep(path) {
        var last;

        while (path.length > 0) {
          if (isDirSep(path)) {
            last = path;
            path = path.substring(1, path.length);
            while (path.length > 0 && isDirSep(path)) {
              path = inc(path);
            }
            if (path.length == 0) {
              return last;
            }
          }
          else {
            path = inc(path);
          }
        }
        return path;
      }

      function inc(a) {
        return a.substring(1, a.length);
      }

      function skipprefix(path) {
        return path;
      }

      function lastSeparator(path) {
        var tmp, last;

        while (path.length > 0) {
          if (isDirSep(path)) {
            tmp = path;
            path = inc(path);

            while (path.length > 0 && isDirSep(path)) {
              path = inc(path);
            }
            if (!path) {
              break;
            }
            last = tmp;
          }
          else {
            path = inc(path);
          }
        }

        return last;
      }

      function isDirSep(sep) {
        return sep.charAt(0) === $scope.get('SEPARATOR');
      }

      function skipRoot(path) {
        while (path.length > 0 && isDirSep(path)) {
          path = inc(path);
        }
        return path;
      }

      function pointerSubtract(a, b) {
        if (a.length == 0) {
          return b.length;
        }
        return b.indexOf(a);
      }

      function handleSuffix(n, f, p, suffix, name, origName) {
        var suffixMatch;

        if (n >= 0) {
          if (suffix === nil) {
            f = n;
          }
          else {
            suffixMatch = suffix === '.*' ? '\\.\\w+' : suffix.replace(/\?/g, '\\?');
            suffixMatch = new RegExp(suffixMatch + $scope.get('Separator') + '*$').exec(p);
            if (suffixMatch) {
              f = suffixMatch.index;
            }
            else {
              f = n;
            }
          }

          if (f === origName.length) {
            return name;
          }
        }

        return p.substring(0, f);
      }
    
      Opal.defn(self, '$dirname', TMP_3 = function ːdirname(path) {
        var self = this;

        
        if (path === nil) {
          self.$raise($scope.get('TypeError'), "no implicit conversion of nil into String")
        }
        if (path['$respond_to?']("to_path")) {
          path = path.$to_path();
        }
        if (!path.$$is_string) {
          self.$raise($scope.get('TypeError'), "no implicit conversion of " + (path.$class()) + " into String")
        }

        var root, p;

        root = skipRoot(path);

        // if (root > name + 1) in the C code
        if (root.length == 0) {
          path = path.substring(path.length - 1, path.length);
        }
        else if (root.length - path.length < 0) {
          path = path.substring(path.indexOf(root)-1, path.length);
        }

        p = lastSeparator(root);
        if (!p) {
          p = root;
        }
        if (p === path) {
          return '.';
        }
        return path.substring(0, path.length - p.length);
      ;
      }, TMP_3.$$arity = 1);
      Opal.defn(self, '$basename', TMP_4 = function ːbasename(name, suffix) {
        var self = this;

        if (suffix == null) {
          suffix = nil;
        }
        
        var p, q, e, f = 0, n = -1, tmp, pointerMath, origName;

        if (name === nil) {
          self.$raise($scope.get('TypeError'), "no implicit conversion of nil into String")
        }
        if (name['$respond_to?']("to_path")) {
          name = name.$to_path();
        }
        if (!name.$$is_string) {
          self.$raise($scope.get('TypeError'), "no implicit conversion of " + (name.$class()) + " into String")
        }
        if (suffix !== nil && !suffix.$$is_string) {
          self.$raise($scope.get('TypeError'), "no implicit conversion of " + (suffix.$class()) + " into String")
        }

        if (name.length == 0) {
          return name;
        }

        origName = name;
        name = skipprefix(name);

        while (isDirSep(name)) {
          tmp = name;
          name = inc(name);
        }

        if (!name) {
          p = tmp;
          f = 1;
        }
        else {
          if (!(p = lastSeparator(name))) {
            p = name;
          }
          else {
            while (isDirSep(p)) {
              p = inc(p);
            }
          }

          n = pointerSubtract(chompdirsep(p), p);

          for (q = p; pointerSubtract(q, p) < n && q.charAt(0) === '.'; q = inc(q)) {
          }

          for (e = null; pointerSubtract(q, p) < n; q = inc(q)) {
            if (q.charAt(0) === '.') {
              e = q;
            }
          }

          if (e) {
            f = pointerSubtract(e, p);
          }
          else {
            f = n;
          }
        }

        return handleSuffix(n, f, p, suffix, name, origName);
      ;
      }, TMP_4.$$arity = -2);
      Opal.defn(self, '$extname', TMP_5 = function ːextname(path) {
        var $a, $b, self = this, filename = nil, last_dot_idx = nil;

        if ((($a = path['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('TypeError'), "no implicit conversion of nil into String")};
        if ((($a = path['$respond_to?']("to_path")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          path = path.$to_path()};
        if ((($a = path['$is_a?']($scope.get('String'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$raise($scope.get('TypeError'), "no implicit conversion of " + (path.$class()) + " into String")
        };
        filename = self.$basename(path);
        if ((($a = filename['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ""};
        last_dot_idx = filename['$[]']($range(1, -1, false)).$rindex(".");
        if ((($a = (((($b = last_dot_idx['$nil?']()) !== false && $b !== nil && $b != null) ? $b : $rb_plus(last_dot_idx, 1)['$==']($rb_minus(filename.$length(), 1))))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ""
          } else {
          return filename['$[]']($range(($rb_plus(last_dot_idx, 1)), -1, false))
        };
      }, TMP_5.$$arity = 1);
      Opal.defn(self, '$exist?', TMP_6 = function(path) {
        var self = this;

        return Opal.modules[path] != null;
      }, TMP_6.$$arity = 1);
      Opal.alias(self, 'exists?', 'exist?');
      Opal.defn(self, '$directory?', TMP_8 = function(path) {
        var $a, $b, TMP_7, self = this, files = nil, file = nil;

        files = [];
        
        for (var key in Opal.modules) {
          files.push(key)
        }
      ;
        path = path.$gsub((new RegExp("(^." + $scope.get('SEPARATOR') + "+|" + $scope.get('SEPARATOR') + "+$)")));
        file = ($a = ($b = files).$find, $a.$$p = (TMP_7 = function(file){var self = TMP_7.$$s || this;
if (file == null) file = nil;
        return file['$=~']((new RegExp("^" + path)))}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b);
        return file;
      }, TMP_8.$$arity = 1);
      Opal.defn(self, '$join', TMP_9 = function ːjoin($a_rest) {
        var self = this, paths;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        paths = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          paths[$arg_idx - 0] = arguments[$arg_idx];
        }
        return paths.$join($scope.get('SEPARATOR')).$gsub((new RegExp("" + $scope.get('SEPARATOR') + "+")), $scope.get('SEPARATOR'));
      }, TMP_9.$$arity = -1);
      return (Opal.defn(self, '$split', TMP_10 = function ːsplit(path) {
        var self = this;

        return path.$split($scope.get('SEPARATOR'));
      }, TMP_10.$$arity = 1), nil) && 'split';
    })(Opal.get_singleton_class(self));
  })($scope.base, $scope.get('IO'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["corelib/process"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$to_f', '$now', '$new']);
  (function($base, $super) {
    function $Process(){};
    var self = $Process = $klass($base, $super, 'Process', $Process);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

    Opal.cdecl($scope, 'CLOCK_REALTIME', 0);

    Opal.cdecl($scope, 'CLOCK_MONOTONIC', 1);

    Opal.defs(self, '$pid', TMP_1 = function ːpid() {
      var self = this;

      return 0;
    }, TMP_1.$$arity = 0);

    Opal.defs(self, '$times', TMP_2 = function ːtimes() {
      var self = this, t = nil;

      t = $scope.get('Time').$now().$to_f();
      return (($scope.get('Benchmark')).$$scope.get('Tms')).$new(t, t, t, t, t);
    }, TMP_2.$$arity = 0);

    return (Opal.defs(self, '$clock_gettime', TMP_3 = function ːclock_gettime(clock_id, unit) {
      var self = this;

      if (unit == null) {
        unit = nil;
      }
      return $scope.get('Time').$now().$to_f();
    }, TMP_3.$$arity = -2), nil) && 'clock_gettime';
  })($scope.base, null);
  (function($base, $super) {
    function $Signal(){};
    var self = $Signal = $klass($base, $super, 'Signal', $Signal);

    var def = self.$$proto, $scope = self.$$scope, TMP_4;

    return (Opal.defs(self, '$trap', TMP_4 = function ːtrap($a_rest) {
      var self = this;

      return nil;
    }, TMP_4.$$arity = -1), nil) && 'trap'
  })($scope.base, null);
  return (function($base, $super) {
    function $GC(){};
    var self = $GC = $klass($base, $super, 'GC', $GC);

    var def = self.$$proto, $scope = self.$$scope, TMP_5;

    return (Opal.defs(self, '$start', TMP_5 = function ːstart() {
      var self = this;

      return nil;
    }, TMP_5.$$arity = 0), nil) && 'start'
  })($scope.base, null);
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["corelib/unsupported"] = function(Opal) {
  var TMP_30, TMP_31, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$raise', '$warn', '$%']);
  
  var warnings = {};

  function handle_unsupported_feature(message) {
    switch (Opal.config.unsupported_features_severity) {
    case 'error':
      $scope.get('Kernel').$raise($scope.get('NotImplementedError'), message)
      break;
    case 'warning':
      warn(message)
      break;
    default: // ignore
      // noop
    }
  }

  function warn(string) {
    if (warnings[string]) {
      return;
    }

    warnings[string] = true;
    self.$warn(string);
  }

  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18;

    var ERROR = "String#%s not supported. Mutable String methods are not supported in Opal.";

    Opal.defn(self, '$<<', TMP_1 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("<<"));
    }, TMP_1.$$arity = -1);

    Opal.defn(self, '$capitalize!', TMP_2 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("capitalize!"));
    }, TMP_2.$$arity = -1);

    Opal.defn(self, '$chomp!', TMP_3 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("chomp!"));
    }, TMP_3.$$arity = -1);

    Opal.defn(self, '$chop!', TMP_4 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("chop!"));
    }, TMP_4.$$arity = -1);

    Opal.defn(self, '$downcase!', TMP_5 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("downcase!"));
    }, TMP_5.$$arity = -1);

    Opal.defn(self, '$gsub!', TMP_6 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("gsub!"));
    }, TMP_6.$$arity = -1);

    Opal.defn(self, '$lstrip!', TMP_7 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("lstrip!"));
    }, TMP_7.$$arity = -1);

    Opal.defn(self, '$next!', TMP_8 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("next!"));
    }, TMP_8.$$arity = -1);

    Opal.defn(self, '$reverse!', TMP_9 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("reverse!"));
    }, TMP_9.$$arity = -1);

    Opal.defn(self, '$slice!', TMP_10 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("slice!"));
    }, TMP_10.$$arity = -1);

    Opal.defn(self, '$squeeze!', TMP_11 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("squeeze!"));
    }, TMP_11.$$arity = -1);

    Opal.defn(self, '$strip!', TMP_12 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("strip!"));
    }, TMP_12.$$arity = -1);

    Opal.defn(self, '$sub!', TMP_13 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("sub!"));
    }, TMP_13.$$arity = -1);

    Opal.defn(self, '$succ!', TMP_14 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("succ!"));
    }, TMP_14.$$arity = -1);

    Opal.defn(self, '$swapcase!', TMP_15 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("swapcase!"));
    }, TMP_15.$$arity = -1);

    Opal.defn(self, '$tr!', TMP_16 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("tr!"));
    }, TMP_16.$$arity = -1);

    Opal.defn(self, '$tr_s!', TMP_17 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("tr_s!"));
    }, TMP_17.$$arity = -1);

    return (Opal.defn(self, '$upcase!', TMP_18 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("upcase!"));
    }, TMP_18.$$arity = -1), nil) && 'upcase!';
  })($scope.base, null);
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_19, TMP_20;

    var ERROR = "Object freezing is not supported by Opal";

    Opal.defn(self, '$freeze', TMP_19 = function ːfreeze() {
      var self = this;

      handle_unsupported_feature(ERROR);
      return self;
    }, TMP_19.$$arity = 0);

    Opal.defn(self, '$frozen?', TMP_20 = function() {
      var self = this;

      handle_unsupported_feature(ERROR);
      return false;
    }, TMP_20.$$arity = 0);
  })($scope.base);
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_21, TMP_22, TMP_23;

    var ERROR = "Object tainting is not supported by Opal";

    Opal.defn(self, '$taint', TMP_21 = function ːtaint() {
      var self = this;

      handle_unsupported_feature(ERROR);
      return self;
    }, TMP_21.$$arity = 0);

    Opal.defn(self, '$untaint', TMP_22 = function ːuntaint() {
      var self = this;

      handle_unsupported_feature(ERROR);
      return self;
    }, TMP_22.$$arity = 0);

    Opal.defn(self, '$tainted?', TMP_23 = function() {
      var self = this;

      handle_unsupported_feature(ERROR);
      return false;
    }, TMP_23.$$arity = 0);
  })($scope.base);
  (function($base, $super) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $scope = self.$$scope, TMP_24, TMP_25, TMP_26, TMP_27;

    Opal.defn(self, '$public', TMP_24 = function($a_rest) {
      var self = this, methods;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      methods = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        methods[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      if (methods.length === 0) {
        self.$$module_function = false;
      }

      return nil;
    
    }, TMP_24.$$arity = -1);

    Opal.alias(self, 'private', 'public');

    Opal.alias(self, 'protected', 'public');

    Opal.alias(self, 'nesting', 'public');

    Opal.defn(self, '$private_class_method', TMP_25 = function ːprivate_class_method($a_rest) {
      var self = this;

      return self;
    }, TMP_25.$$arity = -1);

    Opal.alias(self, 'public_class_method', 'private_class_method');

    Opal.defn(self, '$private_method_defined?', TMP_26 = function(obj) {
      var self = this;

      return false;
    }, TMP_26.$$arity = 1);

    Opal.defn(self, '$private_constant', TMP_27 = function ːprivate_constant($a_rest) {
      var self = this;

      return nil;
    }, TMP_27.$$arity = -1);

    Opal.alias(self, 'protected_method_defined?', 'private_method_defined?');

    Opal.alias(self, 'public_instance_methods', 'instance_methods');

    return Opal.alias(self, 'public_method_defined?', 'method_defined?');
  })($scope.base, null);
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_28;

    Opal.defn(self, '$private_methods', TMP_28 = function ːprivate_methods($a_rest) {
      var self = this;

      return [];
    }, TMP_28.$$arity = -1);

    Opal.alias(self, 'private_instance_methods', 'private_methods');
  })($scope.base);
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_29;

    Opal.defn(self, '$eval', TMP_29 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), "To use Kernel#eval, you must first require 'opal-parser'. " + ("See https://github.com/opal/opal/blob/" + ($scope.get('RUBY_ENGINE_VERSION')) + "/docs/opal_parser.md for details."));
    }, TMP_29.$$arity = -1)
  })($scope.base);
  Opal.defs(self, '$public', TMP_30 = function($a_rest) {
    var self = this;

    return nil;
  }, TMP_30.$$arity = -1);
  return (Opal.defs(self, '$private', TMP_31 = function($a_rest) {
    var self = this;

    return nil;
  }, TMP_31.$$arity = -1), nil) && 'private';
};
/* Generated by Opal 0.10.0.rc2 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("opal/base");
  self.$require("opal/mini");
  self.$require("corelib/string/inheritance");
  self.$require("corelib/string/encoding");
  self.$require("corelib/math");
  self.$require("corelib/complex");
  self.$require("corelib/rational");
  self.$require("corelib/time");
  self.$require("corelib/struct");
  self.$require("corelib/io");
  self.$require("corelib/main");
  self.$require("corelib/dir");
  self.$require("corelib/file");
  self.$require("corelib/process");
  return self.$require("corelib/unsupported");
})(Opal);
/* Zepto v1.1.6 - zepto event ajax form ie - zeptojs.com/license */
// ATENTION BELOW ZEPTO THERE IS ADDED A BEFORE AJAX HANDLER FOR ATTACHING CSRF TOKEN FOR XHR
window.Zepto = (function() {
  var undefined, key, $, classList, emptyArray = [], slice = emptyArray.slice, filter = emptyArray.filter,
    document = window.document,
    elementDisplay = {}, classCache = {},
    cssNumber = { 'column-count': 1, 'columns': 1, 'font-weight': 1, 'line-height': 1,'opacity': 1, 'z-index': 1, 'zoom': 1 },
    fragmentRE = /^\s*<(\w+|!)[^>]*>/,
    singleTagRE = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,
    tagExpanderRE = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,
    rootNodeRE = /^(?:body|html)$/i,
    capitalRE = /([A-Z])/g,
    stop = function(){},
    // special attributes that should be get/set via method calls
    methodAttributes = ['val', 'css', 'html', 'text', 'data', 'width', 'height', 'offset'],

    adjacencyOperators = [ 'after', 'prepend', 'before', 'append' ],
    table = document.createElement('table'),
    tableRow = document.createElement('tr'),
    containers = {
      'tr': document.createElement('tbody'),
      'tbody': table, 'thead': table, 'tfoot': table,
      'td': tableRow, 'th': tableRow,
      '*': document.createElement('div')
    },
    readyRE = /complete|loaded|interactive/,
    simpleSelectorRE = /^[\w-]*$/,
    class2type = {},
    toString = class2type.toString,
    zepto = {},
    camelize, uniq,
    tempParent = document.createElement('div'),
    propMap = {
      'tabindex': 'tabIndex',
      'readonly': 'readOnly',
      'for': 'htmlFor',
      'class': 'className',
      'maxlength': 'maxLength',
      'cellspacing': 'cellSpacing',
      'cellpadding': 'cellPadding',
      'rowspan': 'rowSpan',
      'colspan': 'colSpan',
      'usemap': 'useMap',
      'frameborder': 'frameBorder',
      'contenteditable': 'contentEditable'
    },
    isArray = Array.isArray ||
      function(object){ return object instanceof Array }

  zepto.matches = function(element, selector) {
    if (!selector || !element || element.nodeType !== 1) return false
    var matchesSelector = element.webkitMatchesSelector || element.mozMatchesSelector ||
                          element.oMatchesSelector || element.matchesSelector
    if (matchesSelector) return matchesSelector.call(element, selector)
    // fall back to performing a selector:
    var match, parent = element.parentNode, temp = !parent
    if (temp) (parent = tempParent).appendChild(element)
    match = ~zepto.qsa(parent, selector).indexOf(element)
    temp && tempParent.removeChild(element)
    return match
  }

  function type(obj) {
    return obj == null ? String(obj) :
      class2type[toString.call(obj)] || "object"
  }

  function isFunction(value) { return type(value) == "function" }
  function isWindow(obj)     { return obj != null && obj == obj.window }
  function isDocument(obj)   { return obj != null && obj.nodeType == obj.DOCUMENT_NODE }
  function isObject(obj)     { return type(obj) == "object" }
  function isPlainObject(obj) {
    return isObject(obj) && !isWindow(obj) && Object.getPrototypeOf(obj) == Object.prototype
  }
  function likeArray(obj) { return typeof obj.length == 'number' }

  function compact(array) { return filter.call(array, function(item){ return item != null }) }
  function flatten(array) { return array.length > 0 ? $.fn.concat.apply([], array) : array }
  camelize = function(str){ return str.replace(/-+(.)?/g, function(match, chr){ return chr ? chr.toUpperCase() : '' }) }
  function dasherize(str) {
    return str.replace(/::/g, '/')
           .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')
           .replace(/([a-z\d])([A-Z])/g, '$1_$2')
           .replace(/_/g, '-')
           .toLowerCase()
  }
  uniq = function(array){ return filter.call(array, function(item, idx){ return array.indexOf(item) == idx }) }

  function classRE(name) {
    return name in classCache ?
      classCache[name] : (classCache[name] = new RegExp('(^|\\s)' + name + '(\\s|$)'))
  }

  function maybeAddPx(name, value) {
    return (typeof value == "number" && !cssNumber[dasherize(name)]) ? value + "px" : value
  }

  function defaultDisplay(nodeName) {
    var element, display
    if (!elementDisplay[nodeName]) {
      element = document.createElement(nodeName)
      document.body.appendChild(element)
      display = getComputedStyle(element, '').getPropertyValue("display")
      element.parentNode.removeChild(element)
      display == "none" && (display = "block")
      elementDisplay[nodeName] = display
    }
    return elementDisplay[nodeName]
  }

  function children(element) {
    return 'children' in element ?
      slice.call(element.children) :
      $.map(element.childNodes, function(node){ if (node.nodeType == 1) return node })
  }

  // `$.zepto.fragment` takes a html string and an optional tag name
  // to generate DOM nodes nodes from the given html string.
  // The generated DOM nodes are returned as an array.
  // This function can be overriden in plugins for example to make
  // it compatible with browsers that don't support the DOM fully.
  zepto.fragment = function(html, name, properties) {
    var dom, nodes, container

    // A special case optimization for a single tag
    if (singleTagRE.test(html)) dom = $(document.createElement(RegExp.$1))

    if (!dom) {
      if (html.replace) html = html.replace(tagExpanderRE, "<$1></$2>")
      if (name === undefined) name = fragmentRE.test(html) && RegExp.$1
      if (!(name in containers)) name = '*'

      container = containers[name]
      container.innerHTML = '' + html
      dom = $.each(slice.call(container.childNodes), function(){
        container.removeChild(this)
      })
    }

    if (isPlainObject(properties)) {
      nodes = $(dom)
      $.each(properties, function(key, value) {
        if (methodAttributes.indexOf(key) > -1) nodes[key](value)
        else nodes.attr(key, value)
      })
    }

    return dom
  }

  // `$.zepto.Z` swaps out the prototype of the given `dom` array
  // of nodes with `$.fn` and thus supplying all the Zepto functions
  // to the array. Note that `__proto__` is not supported on Internet
  // Explorer. This method can be overriden in plugins.
  zepto.Z = function(dom, selector) {
    dom = dom || []
    dom.__proto__ = $.fn
    dom.selector = selector || ''
    return dom
  }
  zepto.stop = function(){};
  // `$.zepto.isZ` should return `true` if the given object is a Zepto
  // collection. This method can be overriden in plugins.
  zepto.isZ = function(object) {
    return object instanceof zepto.Z
  }

  // `$.zepto.init` is Zepto's counterpart to jQuery's `$.fn.init` and
  // takes a CSS selector and an optional context (and handles various
  // special cases).
  // This method can be overriden in plugins.
  zepto.init = function(selector, context) {
    var dom
    // If nothing given, return an empty Zepto collection
    if (!selector) return zepto.Z()
    // Optimize for string selectors
    else if (typeof selector == 'string') {
      selector = selector.trim()
      // If it's a html fragment, create nodes from it
      // Note: In both Chrome 21 and Firefox 15, DOM error 12
      // is thrown if the fragment doesn't begin with <
      if (selector[0] == '<' && fragmentRE.test(selector))
        dom = zepto.fragment(selector, RegExp.$1, context), selector = null
      // If there's a context, create a collection on that context first, and select
      // nodes from there
      else if (context !== undefined) return $(context).find(selector)
      // If it's a CSS selector, use it to select nodes.
      else dom = zepto.qsa(document, selector)
    }
    // If a function is given, call it when the DOM is ready
    else if (isFunction(selector)) return $(document).ready(selector)
    // If a Zepto collection is given, just return it
    else if (zepto.isZ(selector)) return selector
    else {
      // normalize array if an array of nodes is given
      if (isArray(selector)) dom = compact(selector)
      // Wrap DOM nodes.
      else if (isObject(selector))
        dom = [selector], selector = null
      // If it's a html fragment, create nodes from it
      else if (fragmentRE.test(selector))
        dom = zepto.fragment(selector.trim(), RegExp.$1, context), selector = null
      // If there's a context, create a collection on that context first, and select
      // nodes from there
      else if (context !== undefined) return $(context).find(selector)
      // And last but no least, if it's a CSS selector, use it to select nodes.
      else dom = zepto.qsa(document, selector)
    }
    // create a new Zepto collection from the nodes found
    return zepto.Z(dom, selector)
  }

  // `$` will be the base `Zepto` object. When calling this
  // function just call `$.zepto.init, which makes the implementation
  // details of selecting nodes and creating Zepto collections
  // patchable in plugins.
  $ = function(selector, context){
    return zepto.init(selector, context)
  }

  function extend(target, source, deep) {
    for (key in source)
      if (deep && (isPlainObject(source[key]) || isArray(source[key]))) {
        if (isPlainObject(source[key]) && !isPlainObject(target[key]))
          target[key] = {}
        if (isArray(source[key]) && !isArray(target[key]))
          target[key] = []
        extend(target[key], source[key], deep)
      }
      else if (source[key] !== undefined) target[key] = source[key]
  }

  // Copy all but undefined properties from one or more
  // objects to the `target` object.
  $.extend = function(target){
    var deep, args = slice.call(arguments, 1)
    if (typeof target == 'boolean') {
      deep = target
      target = args.shift()
    }
    args.forEach(function(arg){ extend(target, arg, deep) })
    return target
  }

  // `$.zepto.qsa` is Zepto's CSS selector implementation which
  // uses `document.querySelectorAll` and optimizes for some special cases, like `#id`.
  // This method can be overriden in plugins.
  zepto.qsa = function(element, selector){
    var found,
        maybeID = selector[0] == '#',
        maybeClass = !maybeID && selector[0] == '.',
        nameOnly = maybeID || maybeClass ? selector.slice(1) : selector, // Ensure that a 1 char tag name still gets checked
        isSimple = simpleSelectorRE.test(nameOnly)
    return (isDocument(element) && isSimple && maybeID) ?
      ( (found = element.getElementById(nameOnly)) ? [found] : [] ) :
      (element.nodeType !== 1 && element.nodeType !== 9) ? [] :
      slice.call(
        isSimple && !maybeID ?
          maybeClass ? element.getElementsByClassName(nameOnly) : // If it's simple, it could be a class
          element.getElementsByTagName(selector) : // Or a tag
          element.querySelectorAll(selector) // Or it's not simple, and we need to query all
      )
  }

  function filtered(nodes, selector) {
    return selector == null ? $(nodes) : $(nodes).filter(selector)
  }

  $.contains = document.documentElement.contains ?
    function(parent, node) {
      return parent !== node && parent.contains(node)
    } :
    function(parent, node) {
      while (node && (node = node.parentNode))
        if (node === parent) return true
      return false
    }

  function funcArg(context, arg, idx, payload) {
    return isFunction(arg) ? arg.call(context, idx, payload) : arg
  }

  function setAttribute(node, name, value) {
    value == null ? node.removeAttribute(name) : node.setAttribute(name, value)
  }

  // access className property while respecting SVGAnimatedString
  function className(node, value){
    var klass = node.className || '',
        svg   = klass && klass.baseVal !== undefined

    if (value === undefined) return svg ? klass.baseVal : klass
    svg ? (klass.baseVal = value) : (node.className = value)
  }

  // "true"  => true
  // "false" => false
  // "null"  => null
  // "42"    => 42
  // "42.5"  => 42.5
  // "08"    => "08"
  // JSON    => parse if valid
  // String  => self
  function deserializeValue(value) {
    try {
      return value ?
        value == "true" ||
        ( value == "false" ? false :
          value == "null" ? null :
          +value + "" == value ? +value :
          /^[\[\{]/.test(value) ? $.parseJSON(value) :
          value )
        : value
    } catch(e) {
      return value
    }
  }

  $.type = type
  $.isFunction = isFunction
  $.isWindow = isWindow
  $.isArray = isArray
  $.isPlainObject = isPlainObject

  $.isEmptyObject = function(obj) {
    var name
    for (name in obj) return false
    return true
  }

  $.inArray = function(elem, array, i){
    return emptyArray.indexOf.call(array, elem, i)
  }

  $.camelCase = camelize
  $.trim = function(str) {
    return str == null ? "" : String.prototype.trim.call(str)
  }

  // plugin compatibility
  $.uuid = 0
  $.support = { }
  $.expr = { }

  $.map = function(elements, callback){
    var value, values = [], i, key
    if (likeArray(elements))
      for (i = 0; i < elements.length; i++) {
        value = callback(elements[i], i)
        if (value != null) values.push(value)
      }
    else
      for (key in elements) {
        value = callback(elements[key], key)
        if (value != null) values.push(value)
      }
    return flatten(values)
  }

  $.each = function(elements, callback){
    var i, key
    if (likeArray(elements)) {
      for (i = 0; i < elements.length; i++)
        if (callback.call(elements[i], i, elements[i]) === false) return elements
    } else {
      for (key in elements)
        if (callback.call(elements[key], key, elements[key]) === false) return elements
    }

    return elements
  }

  $.grep = function(elements, callback){
    return filter.call(elements, callback)
  }

  if (window.JSON) $.parseJSON = JSON.parse

  // Populate the class2type map
  $.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
    class2type[ "[object " + name + "]" ] = name.toLowerCase()
  })

  // Define methods that will be available on all
  // Zepto collections
  $.fn = {
    // Because a collection acts like an array
    // copy over these useful array functions.
    forEach: emptyArray.forEach,
    reduce: emptyArray.reduce,
    push: emptyArray.push,
    sort: emptyArray.sort,
    indexOf: emptyArray.indexOf,
    concat: emptyArray.concat,

    // `map` and `slice` in the jQuery API work differently
    // from their array counterparts
    map: function(fn){
      return $($.map(this, function(el, i){ return fn.call(el, i, el) }))
    },
    slice: function(){
      return $(slice.apply(this, arguments))
    },

    ready: function(callback){
      // need to check if document.body exists for IE as that browser reports
      // document ready when it hasn't yet created the body element
      if (readyRE.test(document.readyState) && document.body) callback($)
      else document.addEventListener('DOMContentLoaded', function(){ callback($) }, false)
      return this
    },
    get: function(idx){
      return idx === undefined ? slice.call(this) : this[idx >= 0 ? idx : idx + this.length]
    },
    toArray: function(){ return this.get() },
    size: function(){
      return this.length
    },
    remove: function(){
      return this.each(function(){
        if (this.parentNode != null)
          this.parentNode.removeChild(this)
      })
    },
    each: function(callback){
      emptyArray.every.call(this, function(el, idx){
        return callback.call(el, idx, el) !== false
      })
      return this
    },
    filter: function(selector){
      if (isFunction(selector)) return this.not(this.not(selector))
      return $(filter.call(this, function(element){
        return zepto.matches(element, selector)
      }))
    },
    add: function(selector,context){
      return $(uniq(this.concat($(selector,context))))
    },
    is: function(selector){
      return this.length > 0 && zepto.matches(this[0], selector)
    },
    not: function(selector){
      var nodes=[]
      if (isFunction(selector) && selector.call !== undefined)
        this.each(function(idx){
          if (!selector.call(this,idx)) nodes.push(this)
        })
      else {
        var excludes = typeof selector == 'string' ? this.filter(selector) :
          (likeArray(selector) && isFunction(selector.item)) ? slice.call(selector) : $(selector)
        this.forEach(function(el){
          if (excludes.indexOf(el) < 0) nodes.push(el)
        })
      }
      return $(nodes)
    },
    has: function(selector){
      return this.filter(function(){
        return isObject(selector) ?
          $.contains(this, selector) :
          $(this).find(selector).size()
      })
    },
    eq: function(idx){
      return idx === -1 ? this.slice(idx) : this.slice(idx, + idx + 1)
    },
    first: function(){
      var el = this[0]
      return el && !isObject(el) ? el : $(el)
    },
    last: function(){
      var el = this[this.length - 1]
      return el && !isObject(el) ? el : $(el)
    },
    find: function(selector){
      var result, $this = this
      if (!selector) result = $()
      else if (typeof selector == 'object')
        result = $(selector).filter(function(){
          var node = this
          return emptyArray.some.call($this, function(parent){
            return $.contains(parent, node)
          })
        })
      else if (this.length == 1) result = $(zepto.qsa(this[0], selector))
      else result = this.map(function(){ return zepto.qsa(this, selector) })
      return result
    },
    closest: function(selector, context){
      var node = this[0], collection = false
      if (typeof selector == 'object') collection = $(selector)
      while (node && !(collection ? collection.indexOf(node) >= 0 : zepto.matches(node, selector)))
        node = node !== context && !isDocument(node) && node.parentNode
      return $(node)
    },
    parents: function(selector){
      var ancestors = [], nodes = this
      while (nodes.length > 0)
        nodes = $.map(nodes, function(node){
          if ((node = node.parentNode) && !isDocument(node) && ancestors.indexOf(node) < 0) {
            ancestors.push(node)
            return node
          }
        })
      return filtered(ancestors, selector)
    },
    parent: function(selector){
      return filtered(uniq(this.pluck('parentNode')), selector)
    },
    children: function(selector){
      return filtered(this.map(function(){ return children(this) }), selector)
    },
    contents: function() {
      return this.map(function() { return slice.call(this.childNodes) })
    },
    siblings: function(selector){
      return filtered(this.map(function(i, el){
        return filter.call(children(el.parentNode), function(child){ return child!==el })
      }), selector)
    },
    empty: function(){
      return this.each(function(){ this.innerHTML = '' })
    },
    // `pluck` is borrowed from Prototype.js
    pluck: function(property){
      return $.map(this, function(el){ return el[property] })
    },
    show: function(){
      return this.each(function(){
        this.style.display == "none" && (this.style.display = '')
        if (getComputedStyle(this, '').getPropertyValue("display") == "none")
          this.style.display = defaultDisplay(this.nodeName)
      })
    },
    replaceWith: function(newContent){
      return this.before(newContent).remove()
    },
    wrap: function(structure){
      var func = isFunction(structure)
      if (this[0] && !func)
        var dom   = $(structure).get(0),
            clone = dom.parentNode || this.length > 1

      return this.each(function(index){
        $(this).wrapAll(
          func ? structure.call(this, index) :
            clone ? dom.cloneNode(true) : dom
        )
      })
    },
    wrapAll: function(structure){
      if (this[0]) {
        $(this[0]).before(structure = $(structure))
        var children
        // drill down to the inmost element
        while ((children = structure.children()).length) structure = children.first()
        $(structure).append(this)
      }
      return this
    },
    wrapInner: function(structure){
      var func = isFunction(structure)
      return this.each(function(index){
        var self = $(this), contents = self.contents(),
            dom  = func ? structure.call(this, index) : structure
        contents.length ? contents.wrapAll(dom) : self.append(dom)
      })
    },
    unwrap: function(){
      this.parent().each(function(){
        $(this).replaceWith($(this).children())
      })
      return this
    },
    clone: function(){
      return this.map(function(){ return this.cloneNode(true) })
    },
    hide: function(){
      return this.css("display", "none")
    },
    toggle: function(setting){
      return this.each(function(){
        var el = $(this)
        ;(setting === undefined ? el.css("display") == "none" : setting) ? el.show() : el.hide()
      })
    },
    prev: function(selector){ return $(this.pluck('previousElementSibling')).filter(selector || '*') },
    next: function(selector){ return $(this.pluck('nextElementSibling')).filter(selector || '*') },
    html: function(html){
      return 0 in arguments ?
        this.each(function(idx){
          var originHtml = this.innerHTML
          $(this).empty().append( funcArg(this, html, idx, originHtml) )
        }) :
        (0 in this ? this[0].innerHTML : null)
    },
    text: function(text){
      return 0 in arguments ?
        this.each(function(idx){
          var newText = funcArg(this, text, idx, this.textContent)
          this.textContent = newText == null ? '' : ''+newText
        }) :
        (0 in this ? this[0].textContent : null)
    },
    attr: function(name, value){
      var result
      return (typeof name == 'string' && !(1 in arguments)) ?
        (!this.length || this[0].nodeType !== 1 ? undefined :
          (!(result = this[0].getAttribute(name)) && name in this[0]) ? this[0][name] : result
        ) :
        this.each(function(idx){
          if (this.nodeType !== 1) return
          if (isObject(name)) for (key in name) setAttribute(this, key, name[key])
          else setAttribute(this, name, funcArg(this, value, idx, this.getAttribute(name)))
        })
    },
    removeAttr: function(name){
      return this.each(function(){ this.nodeType === 1 && name.split(' ').forEach(function(attribute){
        setAttribute(this, attribute)
      }, this)})
    },
    prop: function(name, value){
      name = propMap[name] || name
      return (1 in arguments) ?
        this.each(function(idx){
          this[name] = funcArg(this, value, idx, this[name])
        }) :
        (this[0] && this[0][name])
    },
    data: function(name, value){
      var attrName = 'data-' + name.replace(capitalRE, '-$1').toLowerCase()

      var data = (1 in arguments) ?
        this.attr(attrName, value) :
        this.attr(attrName)

      return data !== null ? deserializeValue(data) : undefined
    },
    val: function(value){
      return 0 in arguments ?
        this.each(function(idx){
          this.value = funcArg(this, value, idx, this.value)
        }) :
        (this[0] && (this[0].multiple ?
           $(this[0]).find('option').filter(function(){ return this.selected }).pluck('value') :
           this[0].value)
        )
    },
    offset: function(coordinates){
      if (coordinates) return this.each(function(index){
        var $this = $(this),
            coords = funcArg(this, coordinates, index, $this.offset()),
            parentOffset = $this.offsetParent().offset(),
            props = {
              top:  coords.top  - parentOffset.top,
              left: coords.left - parentOffset.left
            }

        if ($this.css('position') == 'static') props['position'] = 'relative'
        $this.css(props)
      })
      if (!this.length) return null
      var obj = this[0].getBoundingClientRect()
      return {
        left: obj.left + window.pageXOffset,
        top: obj.top + window.pageYOffset,
        width: Math.round(obj.width),
        height: Math.round(obj.height)
      }
    },
    css: function(property, value){
      if (arguments.length < 2) {
        var computedStyle, element = this[0]
        if(!element) return
        computedStyle = getComputedStyle(element, '')
        if (typeof property == 'string')
          return element.style[camelize(property)] || computedStyle.getPropertyValue(property)
        else if (isArray(property)) {
          var props = {}
          $.each(property, function(_, prop){
            props[prop] = (element.style[camelize(prop)] || computedStyle.getPropertyValue(prop))
          })
          return props
        }
      }

      var css = ''
      if (type(property) == 'string') {
        if (!value && value !== 0)
          this.each(function(){ this.style.removeProperty(dasherize(property)) })
        else
          css = dasherize(property) + ":" + maybeAddPx(property, value)
      } else {
        for (key in property)
          if (!property[key] && property[key] !== 0)
            this.each(function(){ this.style.removeProperty(dasherize(key)) })
          else
            css += dasherize(key) + ':' + maybeAddPx(key, property[key]) + ';'
      }

      return this.each(function(){ this.style.cssText += ';' + css })
    },
    index: function(element){
      return element ? this.indexOf($(element)[0]) : this.parent().children().indexOf(this[0])
    },
    hasClass: function(name){
      if (!name) return false
      return emptyArray.some.call(this, function(el){
        return this.test(className(el))
      }, classRE(name))
    },
    stop: function(){

    },
      slideDown: function(){

      },
      slideUp: function(){

      },
      slideToggle: function(){

      },
      fadeIn: function(){

      },
      fadeOut: function(){

      },
      fadeToggle: function(){

      },
      outerWidth: function(){

      },
      innerWidth: function(){

      },
      outerHeight: function(){

      },
      innerHeight: function(){

      },
    addClass: function(name){
      if (!name) return this
      return this.each(function(idx){
        if (!('className' in this)) return
        classList = []
        var cls = className(this), newName = funcArg(this, name, idx, cls)
        newName.split(/\s+/g).forEach(function(klass){
          if (!$(this).hasClass(klass)) classList.push(klass)
        }, this)
        classList.length && className(this, cls + (cls ? " " : "") + classList.join(" "))
      })
    },
    removeClass: function(name){
      return this.each(function(idx){
        if (!('className' in this)) return
        if (name === undefined) return className(this, '')
        classList = className(this)
        funcArg(this, name, idx, classList).split(/\s+/g).forEach(function(klass){
          classList = classList.replace(classRE(klass), " ")
        })
        className(this, classList.trim())
      })
    },
    toggleClass: function(name, when){
      if (!name) return this
      return this.each(function(idx){
        var $this = $(this), names = funcArg(this, name, idx, className(this))
        names.split(/\s+/g).forEach(function(klass){
          (when === undefined ? !$this.hasClass(klass) : when) ?
            $this.addClass(klass) : $this.removeClass(klass)
        })
      })
    },
    scrollTop: function(value){
      if (!this.length) return
      var hasScrollTop = 'scrollTop' in this[0]
      if (value === undefined) return hasScrollTop ? this[0].scrollTop : this[0].pageYOffset
      return this.each(hasScrollTop ?
        function(){ this.scrollTop = value } :
        function(){ this.scrollTo(this.scrollX, value) })
    },
    scrollLeft: function(value){
      if (!this.length) return
      var hasScrollLeft = 'scrollLeft' in this[0]
      if (value === undefined) return hasScrollLeft ? this[0].scrollLeft : this[0].pageXOffset
      return this.each(hasScrollLeft ?
        function(){ this.scrollLeft = value } :
        function(){ this.scrollTo(value, this.scrollY) })
    },
    position: function() {
      if (!this.length) return

      var elem = this[0],
        // Get *real* offsetParent
        offsetParent = this.offsetParent(),
        // Get correct offsets
        offset       = this.offset(),
        parentOffset = rootNodeRE.test(offsetParent[0].nodeName) ? { top: 0, left: 0 } : offsetParent.offset()

      // Subtract element margins
      // note: when an element has margin: auto the offsetLeft and marginLeft
      // are the same in Safari causing offset.left to incorrectly be 0
      offset.top  -= parseFloat( $(elem).css('margin-top') ) || 0
      offset.left -= parseFloat( $(elem).css('margin-left') ) || 0

      // Add offsetParent borders
      parentOffset.top  += parseFloat( $(offsetParent[0]).css('border-top-width') ) || 0
      parentOffset.left += parseFloat( $(offsetParent[0]).css('border-left-width') ) || 0

      // Subtract the two offsets
      return {
        top:  offset.top  - parentOffset.top,
        left: offset.left - parentOffset.left
      }
    },
    offsetParent: function() {
      return this.map(function(){
        var parent = this.offsetParent || document.body
        while (parent && !rootNodeRE.test(parent.nodeName) && $(parent).css("position") == "static")
          parent = parent.offsetParent
        return parent
      })
    }
  }

  // for now
  $.fn.detach = $.fn.remove

  // Generate the `width` and `height` functions
  ;['width', 'height'].forEach(function(dimension){
    var dimensionProperty =
      dimension.replace(/./, function(m){ return m[0].toUpperCase() })

    $.fn[dimension] = function(value){
      var offset, el = this[0]
      if (value === undefined) return isWindow(el) ? el['inner' + dimensionProperty] :
        isDocument(el) ? el.documentElement['scroll' + dimensionProperty] :
        (offset = this.offset()) && offset[dimension]
      else return this.each(function(idx){
        el = $(this)
        el.css(dimension, funcArg(this, value, idx, el[dimension]()))
      })
    }
  })

  function traverseNode(node, fun) {
    fun(node)
    for (var i = 0, len = node.childNodes.length; i < len; i++)
      traverseNode(node.childNodes[i], fun)
  }

  // Generate the `after`, `prepend`, `before`, `append`,
  // `insertAfter`, `insertBefore`, `appendTo`, and `prependTo` methods.
  adjacencyOperators.forEach(function(operator, operatorIndex) {
    var inside = operatorIndex % 2 //=> prepend, append

    $.fn[operator] = function(){
      // arguments can be nodes, arrays of nodes, Zepto objects and HTML strings
      var argType, nodes = $.map(arguments, function(arg) {
            argType = type(arg)
            return argType == "object" || argType == "array" || arg == null ?
              arg : zepto.fragment(arg)
          }),
          parent, copyByClone = this.length > 1
      if (nodes.length < 1) return this

      return this.each(function(_, target){
        parent = inside ? target : target.parentNode

        // convert all methods to a "before" operation
        target = operatorIndex == 0 ? target.nextSibling :
                 operatorIndex == 1 ? target.firstChild :
                 operatorIndex == 2 ? target :
                 null

        var parentInDocument = $.contains(document.documentElement, parent)

        nodes.forEach(function(node){
          if (copyByClone) node = node.cloneNode(true)
          else if (!parent) return $(node).remove()

          parent.insertBefore(node, target)
          if (parentInDocument) traverseNode(node, function(el){
            if (el.nodeName != null && el.nodeName.toUpperCase() === 'SCRIPT' &&
               (!el.type || el.type === 'text/javascript') && !el.src)
              window['eval'].call(window, el.innerHTML)
          })
        })
      })
    }

    // after    => insertAfter
    // prepend  => prependTo
    // before   => insertBefore
    // append   => appendTo
    $.fn[inside ? operator+'To' : 'insert'+(operatorIndex ? 'Before' : 'After')] = function(html){
      $(html)[operator](this)
      return this
    }
  })

  zepto.Z.prototype = $.fn

  // Export internal API functions in the `$.zepto` namespace
  zepto.uniq = uniq
  zepto.deserializeValue = deserializeValue
  $.zepto = zepto

  return $
})()

window.Zepto = Zepto
window.$ === undefined && (window.$ = Zepto)

;(function($){
  var _zid = 1, undefined,
      slice = Array.prototype.slice,
      isFunction = $.isFunction,
      isString = function(obj){ return typeof obj == 'string' },
      handlers = {},
      specialEvents={},
      focusinSupported = 'onfocusin' in window,
      focus = { focus: 'focusin', blur: 'focusout' },
      hover = { mouseenter: 'mouseover', mouseleave: 'mouseout' }

  specialEvents.click = specialEvents.mousedown = specialEvents.mouseup = specialEvents.mousemove = 'MouseEvents'

  function zid(element) {
    return element._zid || (element._zid = _zid++)
  }
  function findHandlers(element, event, fn, selector) {
    event = parse(event)
    if (event.ns) var matcher = matcherFor(event.ns)
    return (handlers[zid(element)] || []).filter(function(handler) {
      return handler
        && (!event.e  || handler.e == event.e)
        && (!event.ns || matcher.test(handler.ns))
        && (!fn       || zid(handler.fn) === zid(fn))
        && (!selector || handler.sel == selector)
    })
  }
  function parse(event) {
    var parts = ('' + event).split('.')
    return {e: parts[0], ns: parts.slice(1).sort().join(' ')}
  }
  function matcherFor(ns) {
    return new RegExp('(?:^| )' + ns.replace(' ', ' .* ?') + '(?: |$)')
  }

  function eventCapture(handler, captureSetting) {
    return handler.del &&
      (!focusinSupported && (handler.e in focus)) ||
      !!captureSetting
  }

  function realEvent(type) {
    return hover[type] || (focusinSupported && focus[type]) || type
  }

  function add(element, events, fn, data, selector, delegator, capture){
    var id = zid(element), set = (handlers[id] || (handlers[id] = []))
    events.split(/\s/).forEach(function(event){
      if (event == 'ready') return $(document).ready(fn)
      var handler   = parse(event)
      handler.fn    = fn
      handler.sel   = selector
      // emulate mouseenter, mouseleave
      if (handler.e in hover) fn = function(e){
        var related = e.relatedTarget
        if (!related || (related !== this && !$.contains(this, related)))
          return handler.fn.apply(this, arguments)
      }
      handler.del   = delegator
      var callback  = delegator || fn
      handler.proxy = function(e){
        e = compatible(e)
        if (e.isImmediatePropagationStopped()) return
        e.data = data
        var result = callback.apply(element, e._args == undefined ? [e] : [e].concat(e._args))
        if (result === false) e.preventDefault(), e.stopPropagation()
        return result
      }
      handler.i = set.length
      set.push(handler)
      if ('addEventListener' in element)
        element.addEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture))
    })
  }
  function remove(element, events, fn, selector, capture){
    var id = zid(element)
    ;(events || '').split(/\s/).forEach(function(event){
      findHandlers(element, event, fn, selector).forEach(function(handler){
        delete handlers[id][handler.i]
      if ('removeEventListener' in element)
        element.removeEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture))
      })
    })
  }

  $.event = { add: add, remove: remove }

  $.proxy = function(fn, context) {
    var args = (2 in arguments) && slice.call(arguments, 2)
    if (isFunction(fn)) {
      var proxyFn = function(){ return fn.apply(context, args ? args.concat(slice.call(arguments)) : arguments) }
      proxyFn._zid = zid(fn)
      return proxyFn
    } else if (isString(context)) {
      if (args) {
        args.unshift(fn[context], fn)
        return $.proxy.apply(null, args)
      } else {
        return $.proxy(fn[context], fn)
      }
    } else {
      throw new TypeError("expected function")
    }
  }

  $.fn.bind = function(event, data, callback){
    return this.on(event, data, callback)
  }
  $.fn.unbind = function(event, callback){
    return this.off(event, callback)
  }
  $.fn.one = function(event, selector, data, callback){
    return this.on(event, selector, data, callback, 1)
  }

  var returnTrue = function(){return true},
      returnFalse = function(){return false},
      ignoreProperties = /^([A-Z]|returnValue$|layer[XY]$)/,
      eventMethods = {
        preventDefault: 'isDefaultPrevented',
        stopImmediatePropagation: 'isImmediatePropagationStopped',
        stopPropagation: 'isPropagationStopped'
      }

  function compatible(event, source) {
    if (source || !event.isDefaultPrevented) {
      source || (source = event)

      $.each(eventMethods, function(name, predicate) {
        var sourceMethod = source[name]
        event[name] = function(){
          this[predicate] = returnTrue
          return sourceMethod && sourceMethod.apply(source, arguments)
        }
        event[predicate] = returnFalse
      })

      if (source.defaultPrevented !== undefined ? source.defaultPrevented :
          'returnValue' in source ? source.returnValue === false :
          source.getPreventDefault && source.getPreventDefault())
        event.isDefaultPrevented = returnTrue
    }
    return event
  }

  function createProxy(event) {
    var key, proxy = { originalEvent: event }
    for (key in event)
      if (!ignoreProperties.test(key) && event[key] !== undefined) proxy[key] = event[key]

    return compatible(proxy, event)
  }

  $.fn.delegate = function(selector, event, callback){
    return this.on(event, selector, callback)
  }
  $.fn.undelegate = function(selector, event, callback){
    return this.off(event, selector, callback)
  }

  $.fn.live = function(event, callback){
    $(document.body).delegate(this.selector, event, callback)
    return this
  }
  $.fn.die = function(event, callback){
    $(document.body).undelegate(this.selector, event, callback)
    return this
  }

  $.fn.on = function(event, selector, data, callback, one){
    var autoRemove, delegator, $this = this
    if (event && !isString(event)) {
      $.each(event, function(type, fn){
        $this.on(type, selector, data, fn, one)
      })
      return $this
    }

    if (!isString(selector) && !isFunction(callback) && callback !== false)
      callback = data, data = selector, selector = undefined
    if (isFunction(data) || data === false)
      callback = data, data = undefined

    if (callback === false) callback = returnFalse

    return $this.each(function(_, element){
      if (one) autoRemove = function(e){
        remove(element, e.type, callback)
        return callback.apply(this, arguments)
      }

      if (selector) delegator = function(e){
        var evt, match = $(e.target).closest(selector, element).get(0)
        if (match && match !== element) {
          evt = $.extend(createProxy(e), {currentTarget: match, liveFired: element})
          return (autoRemove || callback).apply(match, [evt].concat(slice.call(arguments, 1)))
        }
      }

      add(element, event, callback, data, selector, delegator || autoRemove)
    })
  }
  $.fn.off = function(event, selector, callback){
    var $this = this
    if (event && !isString(event)) {
      $.each(event, function(type, fn){
        $this.off(type, selector, fn)
      })
      return $this
    }

    if (!isString(selector) && !isFunction(callback) && callback !== false)
      callback = selector, selector = undefined

    if (callback === false) callback = returnFalse

    return $this.each(function(){
      remove(this, event, callback, selector)
    })
  }

  $.fn.trigger = function(event, args){
    event = (isString(event) || $.isPlainObject(event)) ? $.Event(event) : compatible(event)
    event._args = args
    return this.each(function(){
      // handle focus(), blur() by calling them directly
      if (event.type in focus && typeof this[event.type] == "function") this[event.type]()
      // items in the collection might not be DOM elements
      else if ('dispatchEvent' in this) this.dispatchEvent(event)
      else $(this).triggerHandler(event, args)
    })
  }

  // triggers event handlers on current element just as if an event occurred,
  // doesn't trigger an actual event, doesn't bubble
  $.fn.triggerHandler = function(event, args){
    var e, result
    this.each(function(i, element){
      e = createProxy(isString(event) ? $.Event(event) : event)
      e._args = args
      e.target = element
      $.each(findHandlers(element, event.type || event), function(i, handler){
        result = handler.proxy(e)
        if (e.isImmediatePropagationStopped()) return false
      })
    })
    return result
  }

  // shortcut methods for `.bind(event, fn)` for each event type
  ;('focusin focusout focus blur load resize scroll unload click dblclick '+
  'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave '+
  'change select keydown keypress keyup error').split(' ').forEach(function(event) {
    $.fn[event] = function(callback) {
      return (0 in arguments) ?
        this.bind(event, callback) :
        this.trigger(event)
    }
  })

  $.Event = function(type, props) {
    if (!isString(type)) props = type, type = props.type
    var event = document.createEvent(specialEvents[type] || 'Events'), bubbles = true
    if (props) for (var name in props) (name == 'bubbles') ? (bubbles = !!props[name]) : (event[name] = props[name])
    event.initEvent(type, bubbles, true)
    return compatible(event)
  }

})(Zepto)

;(function($){
  var jsonpID = 0,
      document = window.document,
      key,
      name,
      rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
      scriptTypeRE = /^(?:text|application)\/javascript/i,
      xmlTypeRE = /^(?:text|application)\/xml/i,
      jsonType = 'application/json',
      htmlType = 'text/html',
      blankRE = /^\s*$/,
      originAnchor = document.createElement('a')

  originAnchor.href = window.location.href

  // trigger a custom event and return false if it was cancelled
  function triggerAndReturn(context, eventName, data) {
    var event = $.Event(eventName)
    $(context).trigger(event, data)
    return !event.isDefaultPrevented()
  }

  // trigger an Ajax "global" event
  function triggerGlobal(settings, context, eventName, data) {
    if (settings.global) return triggerAndReturn(context || document, eventName, data)
  }

  // Number of active Ajax requests
  $.active = 0

  function ajaxStart(settings) {
    if (settings.global && $.active++ === 0) triggerGlobal(settings, null, 'ajaxStart')
  }
  function ajaxStop(settings) {
    if (settings.global && !(--$.active)) triggerGlobal(settings, null, 'ajaxStop')
  }

  // triggers an extra global event "ajaxBeforeSend" that's like "ajaxSend" but cancelable
  function ajaxBeforeSend(xhr, settings) {
    var context = settings.context
    if (settings.beforeSend.call(context, xhr, settings) === false ||
        triggerGlobal(settings, context, 'ajaxBeforeSend', [xhr, settings]) === false)
      return false

    triggerGlobal(settings, context, 'ajaxSend', [xhr, settings])
  }
  function ajaxSuccess(data, xhr, settings, deferred) {
    var context = settings.context, status = 'success'
    settings.success.call(context, data, status, xhr)
    if (deferred) deferred.resolveWith(context, [data, status, xhr])
    triggerGlobal(settings, context, 'ajaxSuccess', [xhr, settings, data])
    ajaxComplete(status, xhr, settings)
  }
  // type: "timeout", "error", "abort", "parsererror"
  function ajaxError(error, type, xhr, settings, deferred) {
    var context = settings.context
    settings.error.call(context, xhr, type, error)
    if (deferred) deferred.rejectWith(context, [xhr, type, error])
    triggerGlobal(settings, context, 'ajaxError', [xhr, settings, error || type])
    ajaxComplete(type, xhr, settings)
  }
  // status: "success", "notmodified", "error", "timeout", "abort", "parsererror"
  function ajaxComplete(status, xhr, settings) {
    var context = settings.context
    settings.complete.call(context, xhr, status)
    triggerGlobal(settings, context, 'ajaxComplete', [xhr, settings])
    ajaxStop(settings)
  }

  // Empty function, used as default callback
  function empty() {}

  $.ajaxJSONP = function(options, deferred){
    if (!('type' in options)) return $.ajax(options)

    var _callbackName = options.jsonpCallback,
      callbackName = ($.isFunction(_callbackName) ?
        _callbackName() : _callbackName) || ('jsonp' + (++jsonpID)),
      script = document.createElement('script'),
      originalCallback = window[callbackName],
      responseData,
      abort = function(errorType) {
        $(script).triggerHandler('error', errorType || 'abort')
      },
      xhr = { abort: abort }, abortTimeout

    if (deferred) deferred.promise(xhr)

    $(script).on('load error', function(e, errorType){
      clearTimeout(abortTimeout)
      $(script).off().remove()

      if (e.type == 'error' || !responseData) {
        ajaxError(null, errorType || 'error', xhr, options, deferred)
      } else {
        ajaxSuccess(responseData[0], xhr, options, deferred)
      }

      window[callbackName] = originalCallback
      if (responseData && $.isFunction(originalCallback))
        originalCallback(responseData[0])

      originalCallback = responseData = undefined
    })

    if (ajaxBeforeSend(xhr, options) === false) {
      abort('abort')
      return xhr
    }

    window[callbackName] = function(){
      responseData = arguments
    }

    script.src = options.url.replace(/\?(.+)=\?/, '?$1=' + callbackName)
    document.head.appendChild(script)

    if (options.timeout > 0) abortTimeout = setTimeout(function(){
      abort('timeout')
    }, options.timeout)

    return xhr
  }

  $.ajaxSettings = {
    // Default type of request
    type: 'GET',
    // Callback that is executed before request
    beforeSend: empty,
    // Callback that is executed if the request succeeds
    success: empty,
    // Callback that is executed the the server drops error
    error: empty,
    // Callback that is executed on request complete (both: error and success)
    complete: empty,
    // The context for the callbacks
    context: null,
    // Whether to trigger "global" Ajax events
    global: true,
    // Transport
    xhr: function () {
      return new window.XMLHttpRequest()
    },
    // MIME types mapping
    // IIS returns Javascript as "application/x-javascript"
    accepts: {
      script: 'text/javascript, application/javascript, application/x-javascript',
      json:   jsonType,
      xml:    'application/xml, text/xml',
      html:   htmlType,
      text:   'text/plain'
    },
    // Whether the request is to another domain
    crossDomain: false,
    // Default timeout
    timeout: 0,
    // Whether data should be serialized to string
    processData: true,
    // Whether the browser should be allowed to cache GET responses
    cache: true
  }

  function mimeToDataType(mime) {
    if (mime) mime = mime.split(';', 2)[0]
    return mime && ( mime == htmlType ? 'html' :
      mime == jsonType ? 'json' :
      scriptTypeRE.test(mime) ? 'script' :
      xmlTypeRE.test(mime) && 'xml' ) || 'text'
  }

  function appendQuery(url, query) {
    if (query == '') return url
    return (url + '&' + query).replace(/[&?]{1,2}/, '?')
  }

  // serialize payload and append it to the URL for GET requests
  function serializeData(options) {
    if (options.processData && options.data && $.type(options.data) != "string")
      options.data = $.param(options.data, options.traditional)
    if (options.data && (!options.type || options.type.toUpperCase() == 'GET'))
      options.url = appendQuery(options.url, options.data), options.data = undefined
  }

  $.ajax = function(options){
    var settings = $.extend({}, options || {}),
        deferred = $.Deferred && $.Deferred(),
        urlAnchor
    for (key in $.ajaxSettings) if (settings[key] === undefined) settings[key] = $.ajaxSettings[key]

    ajaxStart(settings)

    if (!settings.crossDomain) {
      urlAnchor = document.createElement('a')
      urlAnchor.href = settings.url
      urlAnchor.href = urlAnchor.href
      settings.crossDomain = (originAnchor.protocol + '//' + originAnchor.host) !== (urlAnchor.protocol + '//' + urlAnchor.host)
    }

    if (!settings.url) settings.url = window.location.toString()
    serializeData(settings)

    var dataType = settings.dataType, hasPlaceholder = /\?.+=\?/.test(settings.url)
    if (hasPlaceholder) dataType = 'jsonp'

    if (settings.cache === false || (
         (!options || options.cache !== true) &&
         ('script' == dataType || 'jsonp' == dataType)
        ))
      settings.url = appendQuery(settings.url, '_=' + Date.now())

    if ('jsonp' == dataType) {
      if (!hasPlaceholder)
        settings.url = appendQuery(settings.url,
          settings.jsonp ? (settings.jsonp + '=?') : settings.jsonp === false ? '' : 'callback=?')
      return $.ajaxJSONP(settings, deferred)
    }

    var mime = settings.accepts[dataType],
        headers = { },
        setHeader = function(name, value) { headers[name.toLowerCase()] = [name, value] },
        protocol = /^([\w-]+:)\/\//.test(settings.url) ? RegExp.$1 : window.location.protocol,
        xhr = settings.xhr(),
        nativeSetHeader = xhr.setRequestHeader,
        abortTimeout

    if (deferred) deferred.promise(xhr)

    if (!settings.crossDomain) setHeader('X-Requested-With', 'XMLHttpRequest')
    setHeader('Accept', mime || '*/*')
    if (mime = settings.mimeType || mime) {
      if (mime.indexOf(',') > -1) mime = mime.split(',', 2)[0]
      xhr.overrideMimeType && xhr.overrideMimeType(mime)
    }
    if (settings.contentType || (settings.contentType !== false && settings.data && settings.type.toUpperCase() != 'GET'))
      setHeader('Content-Type', settings.contentType || 'application/x-www-form-urlencoded')

    if (settings.headers) for (name in settings.headers) setHeader(name, settings.headers[name])
    xhr.setRequestHeader = setHeader

    xhr.onreadystatechange = function(){
      if (xhr.readyState == 4) {
        xhr.onreadystatechange = empty
        clearTimeout(abortTimeout)
        var result, error = false
        if ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304 || (xhr.status == 0 && protocol == 'file:')) {
          dataType = dataType || mimeToDataType(settings.mimeType || xhr.getResponseHeader('content-type'))
          result = xhr.responseText

          try {
            // http://perfectionkills.com/global-eval-what-are-the-options/
            if (dataType == 'script')    (1,eval)(result)
            else if (dataType == 'xml')  result = xhr.responseXML
            else if (dataType == 'json') result = blankRE.test(result) ? null : $.parseJSON(result)
          } catch (e) { error = e }

          if (error) ajaxError(error, 'parsererror', xhr, settings, deferred)
          else ajaxSuccess(result, xhr, settings, deferred)
        } else {
          ajaxError(xhr.statusText || null, xhr.status ? 'error' : 'abort', xhr, settings, deferred)
        }
      }
    }

    if (ajaxBeforeSend(xhr, settings) === false) {
      xhr.abort()
      ajaxError(null, 'abort', xhr, settings, deferred)
      return xhr
    }

    if (settings.xhrFields) for (name in settings.xhrFields) xhr[name] = settings.xhrFields[name]

    var async = 'async' in settings ? settings.async : true
    xhr.open(settings.type, settings.url, async, settings.username, settings.password)

    for (name in headers) nativeSetHeader.apply(xhr, headers[name])

    if (settings.timeout > 0) abortTimeout = setTimeout(function(){
        xhr.onreadystatechange = empty
        xhr.abort()
        ajaxError(null, 'timeout', xhr, settings, deferred)
      }, settings.timeout)

    // avoid sending empty string (#319)
    xhr.send(settings.data ? settings.data : null)
    return xhr
  }

  // handle optional data/success arguments
  function parseArguments(url, data, success, dataType) {
    if ($.isFunction(data)) dataType = success, success = data, data = undefined
    if (!$.isFunction(success)) dataType = success, success = undefined
    return {
      url: url
    , data: data
    , success: success
    , dataType: dataType
    }
  }

  $.stop = function() {}

  $.get = function(/* url, data, success, dataType */){
    return $.ajax(parseArguments.apply(null, arguments))
  }

  $.post = function(/* url, data, success, dataType */){
    var options = parseArguments.apply(null, arguments)
    options.type = 'POST'
    return $.ajax(options)
  }

  $.getJSON = function(/* url, data, success */){
    var options = parseArguments.apply(null, arguments)
    options.dataType = 'json'
    return $.ajax(options)
  }

  $.fn.load = function(url, data, success){
    if (!this.length) return this
    var self = this, parts = url.split(/\s/), selector,
        options = parseArguments(url, data, success),
        callback = options.success
    if (parts.length > 1) options.url = parts[0], selector = parts[1]
    options.success = function(response){
      self.html(selector ?
        $('<div>').html(response.replace(rscript, "")).find(selector)
        : response)
      callback && callback.apply(self, arguments)
    }
    $.ajax(options)
    return this
  }

  var escape = encodeURIComponent

  function serialize(params, obj, traditional, scope){
    var type, array = $.isArray(obj), hash = $.isPlainObject(obj)
    $.each(obj, function(key, value) {
      type = $.type(value)
      if (scope) key = traditional ? scope :
        scope + '[' + (hash || type == 'object' || type == 'array' ? key : '') + ']'
      // handle data in serializeArray() format
      if (!scope && array) params.add(value.name, value.value)
      // recurse into nested objects
      else if (type == "array" || (!traditional && type == "object"))
        serialize(params, value, traditional, key)
      else params.add(key, value)
    })
  }

  $.param = function(obj, traditional){
    var params = []
    params.add = function(key, value) {
      if ($.isFunction(value)) value = value()
      if (value == null) value = ""
      this.push(escape(key) + '=' + escape(value))
    }
    serialize(params, obj, traditional)
    return params.join('&').replace(/%20/g, '+')
  }
})(Zepto)

;(function($){
  $.fn.serializeArray = function() {
    var name, type, result = [],
      add = function(value) {
        if (value.forEach) return value.forEach(add)
        result.push({ name: name, value: value })
      }
    if (this[0]) $.each(this[0].elements, function(_, field){
      type = field.type, name = field.name
      if (name && field.nodeName.toLowerCase() != 'fieldset' &&
        !field.disabled && type != 'submit' && type != 'reset' && type != 'button' && type != 'file' &&
        ((type != 'radio' && type != 'checkbox') || field.checked))
          add($(field).val())
    })
    return result
  }

  $.fn.serialize = function(){
    var result = []
    this.serializeArray().forEach(function(elm){
      result.push(encodeURIComponent(elm.name) + '=' + encodeURIComponent(elm.value))
    })
    return result.join('&')
  }

  $.fn.submit = function(callback) {
    if (0 in arguments) this.bind('submit', callback)
    else if (this.length) {
      var event = $.Event('submit')
      this.eq(0).trigger(event)
      if (!event.isDefaultPrevented()) this.get(0).submit()
    }
    return this
  }

})(Zepto)

;(function($){
  // __proto__ doesn't exist on IE<11, so redefine
  // the Z function to use object extension instead
  if (!('__proto__' in {})) {
    $.extend($.zepto, {
      Z: function(dom, selector){
        dom = dom || []
        $.extend(dom, $.fn)
        dom.selector = selector || ''
        dom.__Z = true
        return dom
      },
      // this is a kludge but works
      isZ: function(object){
        return $.type(object) === 'array' && '__Z' in object
      }
    })
  }

  // getComputedStyle shouldn't freak out when called
  // without a valid element as argument
  try {
    getComputedStyle(undefined)
  } catch(e) {
    var nativeGetComputedStyle = getComputedStyle;
    window.getComputedStyle = function(element){
      try {
        return nativeGetComputedStyle(element)
      } catch(e) {
        return null
      }
    }
  }
})(Zepto)


function getCookieByName(a){
    var d=[],
        e=document.cookie.split(";");
    a=RegExp("^\\s*"+a+"=\\s*(.*?)\\s*$");
    for(var b=0;b<e.length;b++){
        var f=e[b].match(a);
        f&&d.push(f[1])
    }
    return d[0]
}

window.$ = $
//THIS IS ADDED FOR ADDING CSRF TOKEN TO XHR REQUEST
$(document).on('ajaxBeforeSend', function(event, xhr, settings) {
  // if (token = getCookieByName('jwt')) {
  //   xhr.setRequestHeader('Authorization', token);
  // };
  if ( (settings.type != 'GET') && (token = $('meta[name="csrf-token"]').attr('content')) ) {
    xhr.setRequestHeader('X-CSRF-Token', token);
  };
});

/* Generated by Opal 0.10.0.rc2 */
Opal.modules["native"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $range = Opal.range, $hash2 = Opal.hash2, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$try_convert', '$native?', '$respond_to?', '$to_n', '$raise', '$inspect', '$Native', '$proc', '$map!', '$end_with?', '$define_method', '$[]', '$convert', '$call', '$to_proc', '$new', '$each', '$native_reader', '$native_writer', '$extend', '$is_a?', '$map', '$alias_method', '$to_a', '$_Array', '$include', '$method_missing', '$bind', '$instance_method', '$[]=', '$slice', '$-', '$length', '$enum_for', '$===', '$>=', '$<<', '$each_pair', '$_initialize', '$name', '$exiting_mid', '$native_module']);
  (function($base) {
    var $Native, self = $Native = $module($base, 'Native');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_19, TMP_20, TMP_21;

    Opal.defs(self, '$is_a?', TMP_1 = function(object, klass) {
      var self = this;

      
      try {
        return object instanceof self.$try_convert(klass);
      }
      catch (e) {
        return false;
      }
    ;
    }, TMP_1.$$arity = 2);

    Opal.defs(self, '$try_convert', TMP_2 = function ːtry_convert(value, default$) {
      var self = this;

      if (default$ == null) {
        default$ = nil;
      }
      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        return default$;
      }
    ;
    }, TMP_2.$$arity = -2);

    Opal.defs(self, '$convert', TMP_3 = function ːconvert(value) {
      var self = this;

      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        self.$raise($scope.get('ArgumentError'), "" + (value.$inspect()) + " isn't native");
      }
    ;
    }, TMP_3.$$arity = 1);

    Opal.defs(self, '$call', TMP_4 = function ːcall(obj, key, $a_rest) {
      var self = this, args, $iter = TMP_4.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 2;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 2; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 2] = arguments[$arg_idx];
      }
      TMP_4.$$p = null;
      
      var prop = obj[key];

      if (prop instanceof Function) {
        var converted = new Array(args.length);

        for (var i = 0, l = args.length; i < l; i++) {
          var item = args[i],
              conv = self.$try_convert(item);

          converted[i] = conv === nil ? item : conv;
        }

        if (block !== nil) {
          converted.push(block);
        }

        return self.$Native(prop.apply(obj, converted));
      }
      else {
        return self.$Native(prop);
      }
    ;
    }, TMP_4.$$arity = -3);

    Opal.defs(self, '$proc', TMP_5 = function ːproc() {
      var $a, $b, TMP_6, self = this, $iter = TMP_5.$$p, block = $iter || nil;

      TMP_5.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        self.$raise($scope.get('LocalJumpError'), "no block given")
      };
      return ($a = ($b = $scope.get('Kernel')).$proc, $a.$$p = (TMP_6 = function($c_rest){var self = TMP_6.$$s || this, args, $d, $e, TMP_7, instance = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      ($d = ($e = args)['$map!'], $d.$$p = (TMP_7 = function(arg){var self = TMP_7.$$s || this;
if (arg == null) arg = nil;
        return self.$Native(arg)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $d).call($e);
        instance = self.$Native(this);
        
        // if global is current scope, run the block in the scope it was defined
        if (this === Opal.global) {
          return block.apply(self, args);
        }

        var self_ = block.$$s;
        block.$$s = null;

        try {
          return block.apply(instance, args);
        }
        finally {
          block.$$s = self_;
        }
      ;}, TMP_6.$$s = self, TMP_6.$$arity = -1, TMP_6), $a).call($b);
    }, TMP_5.$$arity = 0);

    (function($base) {
      var $Helpers, self = $Helpers = $module($base, 'Helpers');

      var def = self.$$proto, $scope = self.$$scope, TMP_11, TMP_14, TMP_17, TMP_18;

      Opal.defn(self, '$alias_native', TMP_11 = function ːalias_native(new$, $old, $kwargs) {
        var $a, $b, TMP_8, $c, TMP_9, $d, TMP_10, self = this, $post_args, as, old;

        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        $kwargs = Opal.extract_kwargs($post_args);
        if ($kwargs == null || !$kwargs.$$is_hash) {
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else {
            throw Opal.ArgumentError.$new('expected kwargs');
          }
        }
        if ((as = $kwargs.$$smap['as']) == null) {
          as = nil
        }
        if (0 < $post_args.length) {
          old = $post_args.splice(0,1)[0];
        }
        if (old == null) {
          old = new$;
        }
        if ((($a = old['$end_with?']("=")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($b = self).$define_method, $a.$$p = (TMP_8 = function(value){var self = TMP_8.$$s || this;
            if (self["native"] == null) self["native"] = nil;
if (value == null) value = nil;
          self["native"][old['$[]']($range(0, -2, false))] = $scope.get('Native').$convert(value);
            return value;}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $a).call($b, new$)
        } else if (as !== false && as !== nil && as != null) {
          return ($a = ($c = self).$define_method, $a.$$p = (TMP_9 = function($d_rest){var self = TMP_9.$$s || this, block, args, $e, $f, $g, value = nil;
            if (self["native"] == null) self["native"] = nil;

            block = TMP_9.$$p || nil, TMP_9.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          if ((($e = value = ($f = ($g = $scope.get('Native')).$call, $f.$$p = block.$to_proc(), $f).apply($g, [self["native"], old].concat(Opal.to_a(args)))) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
              return as.$new(value.$to_n())
              } else {
              return nil
            }}, TMP_9.$$s = self, TMP_9.$$arity = -1, TMP_9), $a).call($c, new$)
          } else {
          return ($a = ($d = self).$define_method, $a.$$p = (TMP_10 = function($e_rest){var self = TMP_10.$$s || this, block, args, $f, $g;
            if (self["native"] == null) self["native"] = nil;

            block = TMP_10.$$p || nil, TMP_10.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          return ($f = ($g = $scope.get('Native')).$call, $f.$$p = block.$to_proc(), $f).apply($g, [self["native"], old].concat(Opal.to_a(args)))}, TMP_10.$$s = self, TMP_10.$$arity = -1, TMP_10), $a).call($d, new$)
        };
      }, TMP_11.$$arity = -2);

      Opal.defn(self, '$native_reader', TMP_14 = function ːnative_reader($a_rest) {
        var $b, $c, TMP_12, self = this, names;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        return ($b = ($c = names).$each, $b.$$p = (TMP_12 = function(name){var self = TMP_12.$$s || this, $a, $d, TMP_13;
if (name == null) name = nil;
        return ($a = ($d = self).$define_method, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;
            if (self["native"] == null) self["native"] = nil;

          return self.$Native(self["native"][name])}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $a).call($d, name)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $b).call($c);
      }, TMP_14.$$arity = -1);

      Opal.defn(self, '$native_writer', TMP_17 = function ːnative_writer($a_rest) {
        var $b, $c, TMP_15, self = this, names;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        return ($b = ($c = names).$each, $b.$$p = (TMP_15 = function(name){var self = TMP_15.$$s || this, $a, $d, TMP_16;
if (name == null) name = nil;
        return ($a = ($d = self).$define_method, $a.$$p = (TMP_16 = function(value){var self = TMP_16.$$s || this;
            if (self["native"] == null) self["native"] = nil;
if (value == null) value = nil;
          return self.$Native(self["native"][name] = value)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $a).call($d, "" + (name) + "=")}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15), $b).call($c);
      }, TMP_17.$$arity = -1);

      Opal.defn(self, '$native_accessor', TMP_18 = function ːnative_accessor($a_rest) {
        var $b, $c, self = this, names;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        ($b = self).$native_reader.apply($b, Opal.to_a(names));
        return ($c = self).$native_writer.apply($c, Opal.to_a(names));
      }, TMP_18.$$arity = -1);
    })($scope.base);

    Opal.defs(self, '$included', TMP_19 = function ːincluded(klass) {
      var self = this;

      return klass.$extend($scope.get('Helpers'));
    }, TMP_19.$$arity = 1);

    Opal.defn(self, '$initialize', TMP_20 = function ːinitialize(native$) {
      var $a, self = this;

      if ((($a = $scope.get('Kernel')['$native?'](native$)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        $scope.get('Kernel').$raise($scope.get('ArgumentError'), "" + (native$.$inspect()) + " isn't native")
      };
      return self["native"] = native$;
    }, TMP_20.$$arity = 1);

    Opal.defn(self, '$to_n', TMP_21 = function ːto_n() {
      var self = this;
      if (self["native"] == null) self["native"] = nil;

      return self["native"];
    }, TMP_21.$$arity = 0);
  })($scope.base);
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_22, TMP_25, TMP_26;

    Opal.defn(self, '$native?', TMP_22 = function(value) {
      var self = this;

      return value == null || !value.$$class;
    }, TMP_22.$$arity = 1);

    Opal.defn(self, '$Native', TMP_25 = function ːNative(obj) {
      var $a, $b, TMP_23, $c, TMP_24, self = this;

      if ((($a = obj == null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil
      } else if ((($a = self['$native?'](obj)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (($scope.get('Native')).$$scope.get('Object')).$new(obj)
      } else if ((($a = obj['$is_a?']($scope.get('Array'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = obj).$map, $a.$$p = (TMP_23 = function(o){var self = TMP_23.$$s || this;
if (o == null) o = nil;
        return self.$Native(o)}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23), $a).call($b)
      } else if ((($a = obj['$is_a?']($scope.get('Proc'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($c = self).$proc, $a.$$p = (TMP_24 = function($d_rest){var self = TMP_24.$$s || this, block, args, $e, $f;

          block = TMP_24.$$p || nil, TMP_24.$$p = null;
          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
        return self.$Native(($e = ($f = obj).$call, $e.$$p = block.$to_proc(), $e).apply($f, Opal.to_a(args)))}, TMP_24.$$s = self, TMP_24.$$arity = -1, TMP_24), $a).call($c)
        } else {
        return obj
      };
    }, TMP_25.$$arity = 1);

    self.$alias_method("_Array", "Array");

    Opal.defn(self, '$Array', TMP_26 = function ːArray(object, $a_rest) {
      var $b, $c, self = this, args, $iter = TMP_26.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_26.$$p = null;
      if ((($b = self['$native?'](object)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        return ($b = ($c = (($scope.get('Native')).$$scope.get('Array'))).$new, $b.$$p = block.$to_proc(), $b).apply($c, [object].concat(Opal.to_a(args))).$to_a()};
      return self.$_Array(object);
    }, TMP_26.$$arity = -2);
  })($scope.base);
  (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_40, TMP_41;

    def["native"] = nil;
    self.$include(Opal.get('Native'));

    Opal.defn(self, '$==', TMP_27 = function(other) {
      var self = this;

      return self["native"] === $scope.get('Native').$try_convert(other);
    }, TMP_27.$$arity = 1);

    Opal.defn(self, '$has_key?', TMP_28 = function(name) {
      var self = this;

      return Opal.hasOwnProperty.call(self["native"], name);
    }, TMP_28.$$arity = 1);

    Opal.alias(self, 'key?', 'has_key?');

    Opal.alias(self, 'include?', 'has_key?');

    Opal.alias(self, 'member?', 'has_key?');

    Opal.defn(self, '$each', TMP_29 = function ːeach($a_rest) {
      var $b, self = this, args, $iter = TMP_29.$$p, $yield = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_29.$$p = null;
      if (($yield !== nil)) {
        
        for (var key in self["native"]) {
          Opal.yieldX($yield, [key, self["native"][key]])
        }
      ;
        return self;
        } else {
        return ($b = self).$method_missing.apply($b, ["each"].concat(Opal.to_a(args)))
      };
    }, TMP_29.$$arity = -1);

    Opal.defn(self, '$[]', TMP_30 = function(key) {
      var self = this;

      
      var prop = self["native"][key];

      if (prop instanceof Function) {
        return prop;
      }
      else {
        return Opal.get('Native').$call(self["native"], key)
      }
    ;
    }, TMP_30.$$arity = 1);

    Opal.defn(self, '$[]=', TMP_31 = function(key, value) {
      var $a, self = this, native$ = nil;

      native$ = $scope.get('Native').$try_convert(value);
      if ((($a = native$ === nil) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self["native"][key] = value;
        } else {
        return self["native"][key] = native$;
      };
    }, TMP_31.$$arity = 2);

    Opal.defn(self, '$merge!', TMP_32 = function(other) {
      var self = this;

      
      other = $scope.get('Native').$convert(other);

      for (var prop in other) {
        self["native"][prop] = other[prop];
      }
    ;
      return self;
    }, TMP_32.$$arity = 1);

    Opal.defn(self, '$respond_to?', TMP_33 = function(name, include_all) {
      var self = this;

      if (include_all == null) {
        include_all = false;
      }
      return $scope.get('Kernel').$instance_method("respond_to?").$bind(self).$call(name, include_all);
    }, TMP_33.$$arity = -2);

    Opal.defn(self, '$respond_to_missing?', TMP_34 = function(name, include_all) {
      var self = this;

      if (include_all == null) {
        include_all = false;
      }
      return Opal.hasOwnProperty.call(self["native"], name);
    }, TMP_34.$$arity = -2);

    Opal.defn(self, '$method_missing', TMP_35 = function ːmethod_missing(mid, $a_rest) {
      var $b, $c, self = this, args, $iter = TMP_35.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_35.$$p = null;
      
      if (mid.charAt(mid.length - 1) === '=') {
        return self['$[]='](mid.$slice(0, $rb_minus(mid.$length(), 1)), args['$[]'](0));
      }
      else {
        return ($b = ($c = Opal.get('Native')).$call, $b.$$p = block.$to_proc(), $b).apply($c, [self["native"], mid].concat(Opal.to_a(args)));
      }
    ;
    }, TMP_35.$$arity = -2);

    Opal.defn(self, '$nil?', TMP_36 = function() {
      var self = this;

      return false;
    }, TMP_36.$$arity = 0);

    Opal.defn(self, '$is_a?', TMP_37 = function(klass) {
      var self = this;

      return Opal.is_a(self, klass);
    }, TMP_37.$$arity = 1);

    Opal.alias(self, 'kind_of?', 'is_a?');

    Opal.defn(self, '$instance_of?', TMP_38 = function(klass) {
      var self = this;

      return self.$$class === klass;
    }, TMP_38.$$arity = 1);

    Opal.defn(self, '$class', TMP_39 = function() {
      var self = this;

      return self.$$class;
    }, TMP_39.$$arity = 0);

    Opal.defn(self, '$to_a', TMP_40 = function ːto_a(options) {
      var $a, $b, self = this, $iter = TMP_40.$$p, block = $iter || nil;

      if (options == null) {
        options = $hash2([], {});
      }
      TMP_40.$$p = null;
      return ($a = ($b = (($scope.get('Native')).$$scope.get('Array'))).$new, $a.$$p = block.$to_proc(), $a).call($b, self["native"], options).$to_a();
    }, TMP_40.$$arity = -1);

    return (Opal.defn(self, '$inspect', TMP_41 = function ːinspect() {
      var self = this;

      return "#<Native:" + (String(self["native"])) + ">";
    }, TMP_41.$$arity = 0), nil) && 'inspect';
  })($scope.get('Native'), $scope.get('BasicObject'));
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope, TMP_42, TMP_43, TMP_44, TMP_45, TMP_46, TMP_47, TMP_48;

    def.named = def["native"] = def.get = def.block = def.set = def.length = nil;
    self.$include($scope.get('Native'));

    self.$include($scope.get('Enumerable'));

    Opal.defn(self, '$initialize', TMP_42 = function ːinitialize(native$, options) {
      var $a, $b, self = this, $iter = TMP_42.$$p, block = $iter || nil;

      if (options == null) {
        options = $hash2([], {});
      }
      TMP_42.$$p = null;
      ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_42, false)), $a.$$p = null, $a).call($b, native$);
      self.get = ((($a = options['$[]']("get")) !== false && $a !== nil && $a != null) ? $a : options['$[]']("access"));
      self.named = options['$[]']("named");
      self.set = ((($a = options['$[]']("set")) !== false && $a !== nil && $a != null) ? $a : options['$[]']("access"));
      self.length = ((($a = options['$[]']("length")) !== false && $a !== nil && $a != null) ? $a : "length");
      self.block = block;
      if ((($a = self.$length() == null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('ArgumentError'), "no length found on the array-like object")
        } else {
        return nil
      };
    }, TMP_42.$$arity = -2);

    Opal.defn(self, '$each', TMP_43 = function ːeach() {
      var self = this, $iter = TMP_43.$$p, block = $iter || nil;

      TMP_43.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return self.$enum_for("each")
      };
      
      for (var i = 0, length = self.$length(); i < length; i++) {
        Opal.yield1(block, self['$[]'](i));
      }
    ;
      return self;
    }, TMP_43.$$arity = 0);

    Opal.defn(self, '$[]', TMP_44 = function(index) {
      var $a, self = this, result = nil, $case = nil;

      result = (function() {$case = index;if ($scope.get('String')['$===']($case) || $scope.get('Symbol')['$===']($case)) {if ((($a = self.named) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self["native"][self.named](index);
        } else {
        return self["native"][index];
      }}else if ($scope.get('Integer')['$===']($case)) {if ((($a = self.get) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self["native"][self.get](index);
        } else {
        return self["native"][index];
      }}else { return nil }})();
      if (result !== false && result !== nil && result != null) {
        if ((($a = self.block) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.block.$call(result)
          } else {
          return self.$Native(result)
        }
        } else {
        return nil
      };
    }, TMP_44.$$arity = 1);

    Opal.defn(self, '$[]=', TMP_45 = function(index, value) {
      var $a, self = this;

      if ((($a = self.set) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self["native"][self.set](index, $scope.get('Native').$convert(value));
        } else {
        return self["native"][index] = $scope.get('Native').$convert(value);
      };
    }, TMP_45.$$arity = 2);

    Opal.defn(self, '$last', TMP_46 = function ːlast(count) {
      var $a, $b, self = this, index = nil, result = nil;

      if (count == null) {
        count = nil;
      }
      if (count !== false && count !== nil && count != null) {
        index = $rb_minus(self.$length(), 1);
        result = [];
        while ((($b = $rb_ge(index, 0)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        result['$<<'](self['$[]'](index));
        index = $rb_minus(index, 1);};
        return result;
        } else {
        return self['$[]']($rb_minus(self.$length(), 1))
      };
    }, TMP_46.$$arity = -1);

    Opal.defn(self, '$length', TMP_47 = function ːlength() {
      var self = this;

      return self["native"][self.length];
    }, TMP_47.$$arity = 0);

    Opal.alias(self, 'to_ary', 'to_a');

    return (Opal.defn(self, '$inspect', TMP_48 = function ːinspect() {
      var self = this;

      return self.$to_a().$inspect();
    }, TMP_48.$$arity = 0), nil) && 'inspect';
  })($scope.get('Native'), null);
  (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $scope = self.$$scope, TMP_49;

    return (Opal.defn(self, '$to_n', TMP_49 = function ːto_n() {
      var self = this;

      return self.valueOf();
    }, TMP_49.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.$$proto, $scope = self.$$scope, TMP_50;

    return (Opal.defn(self, '$to_n', TMP_50 = function ːto_n() {
      var self = this;

      return self;
    }, TMP_50.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, TMP_51;

    return (Opal.defn(self, '$to_n', TMP_51 = function ːto_n() {
      var self = this;

      return self.valueOf();
    }, TMP_51.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Regexp(){};
    var self = $Regexp = $klass($base, $super, 'Regexp', $Regexp);

    var def = self.$$proto, $scope = self.$$scope, TMP_52;

    return (Opal.defn(self, '$to_n', TMP_52 = function ːto_n() {
      var self = this;

      return self.valueOf();
    }, TMP_52.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $MatchData(){};
    var self = $MatchData = $klass($base, $super, 'MatchData', $MatchData);

    var def = self.$$proto, $scope = self.$$scope, TMP_53;

    def.matches = nil;
    return (Opal.defn(self, '$to_n', TMP_53 = function ːto_n() {
      var self = this;

      return self.matches;
    }, TMP_53.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Struct(){};
    var self = $Struct = $klass($base, $super, 'Struct', $Struct);

    var def = self.$$proto, $scope = self.$$scope, TMP_55;

    return (Opal.defn(self, '$to_n', TMP_55 = function ːto_n() {
      var $a, $b, TMP_54, self = this, result = nil;

      result = {};
      ($a = ($b = self).$each_pair, $a.$$p = (TMP_54 = function(name, value){var self = TMP_54.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return result[name] = $scope.get('Native').$try_convert(value, value);}, TMP_54.$$s = self, TMP_54.$$arity = 2, TMP_54), $a).call($b);
      return result;
    }, TMP_55.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope, TMP_56;

    return (Opal.defn(self, '$to_n', TMP_56 = function ːto_n() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var obj = self[i];

        result.push($scope.get('Native').$try_convert(obj, obj));
      }

      return result;
    
    }, TMP_56.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $scope = self.$$scope, TMP_57;

    return (Opal.defn(self, '$to_n', TMP_57 = function ːto_n() {
      var self = this;

      return self.valueOf();
    }, TMP_57.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $scope = self.$$scope, TMP_58;

    return (Opal.defn(self, '$to_n', TMP_58 = function ːto_n() {
      var self = this;

      return self;
    }, TMP_58.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope, TMP_59;

    return (Opal.defn(self, '$to_n', TMP_59 = function ːto_n() {
      var self = this;

      return null;
    }, TMP_59.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope, TMP_60, TMP_61;

    self.$alias_method("_initialize", "initialize");

    Opal.defn(self, '$initialize', TMP_60 = function ːinitialize(defaults) {
      var $a, $b, self = this, $iter = TMP_60.$$p, block = $iter || nil;

      TMP_60.$$p = null;
      
      if (defaults != null && defaults.constructor === Object) {
        var smap = self.$$smap,
            keys = self.$$keys,
            key, value;

        for (key in defaults) {
          value = defaults[key];

          if (value && value.constructor === Object) {
            smap[key] = $scope.get('Hash').$new(value);
          } else if (value && value.$$is_array) {
            value = value.map(function(item) {
              if (item && item.constructor === Object) {
                return $scope.get('Hash').$new(item);
              }

              return item;
            });
            smap[key] = value
          } else {
            smap[key] = self.$Native(value);
          }

          keys.push(key);
        }

        return self;
      }

      return ($a = ($b = self).$_initialize, $a.$$p = block.$to_proc(), $a).call($b, defaults);
    
    }, TMP_60.$$arity = -1);

    return (Opal.defn(self, '$to_n', TMP_61 = function ːto_n() {
      var self = this;

      
      var result = {},
          keys = self.$$keys,
          smap = self.$$smap,
          key, value;

      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = smap[key];
        } else {
          key = key.key;
          value = key.value;
        }

        result[key] = $scope.get('Native').$try_convert(value, value);
      }

      return result;
    
    }, TMP_61.$$arity = 0), nil) && 'to_n';
  })($scope.base, null);
  (function($base, $super) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $scope = self.$$scope, TMP_62;

    return (Opal.defn(self, '$native_module', TMP_62 = function ːnative_module() {
      var self = this;

      return Opal.global[self.$name()] = self;
    }, TMP_62.$$arity = 0), nil) && 'native_module'
  })($scope.base, null);
  (function($base, $super) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self.$$proto, $scope = self.$$scope, TMP_63, TMP_64;

    Opal.defn(self, '$native_alias', TMP_63 = function ːnative_alias(new_jsid, existing_mid) {
      var self = this;

      
      var aliased = self.$$proto['$' + existing_mid];
      if (!aliased) {
        self.$raise($scope.get('NameError').$new("undefined method `" + (existing_mid) + "' for class `" + (self.$inspect()) + "'", self.$exiting_mid()));
      }
      self.$$proto[new_jsid] = aliased;
    ;
    }, TMP_63.$$arity = 2);

    return (Opal.defn(self, '$native_class', TMP_64 = function ːnative_class() {
      var self = this;

      self.$native_module();
      self["new"] = self.$new;
    }, TMP_64.$$arity = 0), nil) && 'native_class';
  })($scope.base, null);
  return $gvars.$ = $gvars.global = self.$Native(Opal.global);
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["opal/jquery/constants"] = function(Opal) {
  var $a, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$raise']);
  self.$require("native");
  if ((($a = ($scope.JQUERY_CLASS != null)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
    return nil
    } else {
    return (function() {if ((($a = !!Opal.global.jQuery) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {return Opal.cdecl($scope, 'JQUERY_CLASS', Opal.cdecl($scope, 'JQUERY_SELECTOR', Opal.global.jQuery))}else if ((($a = !!Opal.global.Zepto) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {Opal.cdecl($scope, 'JQUERY_SELECTOR', Opal.global.Zepto);
    return Opal.cdecl($scope, 'JQUERY_CLASS', Opal.global.Zepto.zepto.Z);}else {return self.$raise($scope.get('NameError'), "Can't find jQuery or Zepto. jQuery must be included before opal-jquery")}})()
  };
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["opal/jquery/element"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$to_n', '$include', '$each', '$alias_native', '$attr_reader', '$nil?', '$[]', '$[]=', '$raise', '$is_a?', '$has_key?', '$delete', '$call', '$gsub', '$upcase', '$compact', '$map', '$respond_to?', '$<<', '$Native', '$new']);
  self.$require("native");
  self.$require("opal/jquery/constants");
  return (function($base, $super) {
    function $Element(){};
    var self = $Element = $klass($base, $super, 'Element', $Element);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_41, TMP_42, TMP_43, TMP_44, TMP_45;

    var $ = $scope.get('JQUERY_SELECTOR').$to_n();

    self.$include($scope.get('Enumerable'));

    Opal.defs(self, '$find', TMP_1 = function ːfind(selector) {
      var self = this;

      return $(selector);
    }, TMP_1.$$arity = 1);

    Opal.defs(self, '$[]', TMP_2 = function(selector) {
      var self = this;

      return $(selector);
    }, TMP_2.$$arity = 1);

    Opal.defs(self, '$id', TMP_3 = function ːid(id) {
      var self = this;

      
      var el = document.getElementById(id);

      if (!el) {
        return nil;
      }

      return $(el);
    
    }, TMP_3.$$arity = 1);

    Opal.defs(self, '$new', TMP_4 = function(tag) {
      var self = this;

      if (tag == null) {
        tag = "div";
      }
      return $(document.createElement(tag));
    }, TMP_4.$$arity = -1);

    Opal.defs(self, '$parse', TMP_5 = function ːparse(str) {
      var self = this;

      return $.parseHTML ? $($.parseHTML(str)) : $(str);
    }, TMP_5.$$arity = 1);

    Opal.defs(self, '$expose', TMP_7 = function ːexpose($a_rest) {
      var $b, $c, TMP_6, self = this, methods;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      methods = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        methods[$arg_idx - 0] = arguments[$arg_idx];
      }
      return ($b = ($c = methods).$each, $b.$$p = (TMP_6 = function(method){var self = TMP_6.$$s || this;
if (method == null) method = nil;
      return self.$alias_native(method)}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $b).call($c);
    }, TMP_7.$$arity = -1);

    self.$attr_reader("selector");

    self.$alias_native("after");

    self.$alias_native("before");

    self.$alias_native("parent");

    self.$alias_native("parents");

    self.$alias_native("prev");

    self.$alias_native("remove");

    self.$alias_native("hide");

    self.$alias_native("show");

    self.$alias_native("toggle");

    self.$alias_native("children");

    self.$alias_native("blur");

    self.$alias_native("closest");

    self.$alias_native("detach");

    self.$alias_native("focus");

    self.$alias_native("find");

    self.$alias_native("next");

    self.$alias_native("siblings");

    self.$alias_native("text");

    self.$alias_native("trigger");

    self.$alias_native("append");

    self.$alias_native("prepend");

    self.$alias_native("serialize");

    self.$alias_native("is");

    self.$alias_native("filter");

    self.$alias_native("last");

    self.$alias_native("wrap");

    self.$alias_native("clone");

    self.$alias_native("empty");

    self.$alias_native("get");

    self.$alias_native("prop");

    Opal.alias(self, 'succ', 'next');

    Opal.alias(self, '<<', 'append');

    self.$alias_native("add_class", "addClass");

    self.$alias_native("append_to", "appendTo");

    self.$alias_native("has_class?", "hasClass");

    self.$alias_native("html=", "html");

    self.$alias_native("index");

    self.$alias_native("is?", "is");

    self.$alias_native("remove_attr", "removeAttr");

    self.$alias_native("remove_class", "removeClass");

    self.$alias_native("submit");

    self.$alias_native("text=", "text");

    self.$alias_native("toggle_class", "toggleClass");

    self.$alias_native("value=", "val");

    self.$alias_native("scroll_top=", "scrollTop");

    self.$alias_native("scroll_top", "scrollTop");

    self.$alias_native("scroll_left=", "scrollLeft");

    self.$alias_native("scroll_left", "scrollLeft");

    self.$alias_native("remove_attribute", "removeAttr");

    self.$alias_native("height=", "height");

    self.$alias_native("width=", "width");

    Opal.defn(self, '$to_n', TMP_8 = function ːto_n() {
      var self = this;

      return self;
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$[]', TMP_9 = function(name) {
      var self = this;

      
      var value = self.attr(name);
      if(value === undefined) return nil;
      return value;
    
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$[]=', TMP_10 = function(name, value) {
      var $a, self = this;

      if ((($a = value['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.removeAttr(name);};
      return self.attr(name, value);
    }, TMP_10.$$arity = 2);

    Opal.defn(self, '$attr', TMP_11 = function ːattr($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var size = args.length;
      switch (size) {
      case 1:
        return self['$[]'](args[0]);
        break;
      case 2:
        return self['$[]='](args[0], args[1]);
        break;
      default:
        self.$raise($scope.get('ArgumentError'), "#attr only accepts 1 or 2 arguments")
      }
    ;
    }, TMP_11.$$arity = -1);

    Opal.defn(self, '$has_attribute?', TMP_12 = function(name) {
      var self = this;

      return self.attr(name) !== undefined;
    }, TMP_12.$$arity = 1);

    Opal.defn(self, '$append_to_body', TMP_13 = function ːappend_to_body() {
      var self = this;

      return self.appendTo(document.body);
    }, TMP_13.$$arity = 0);

    Opal.defn(self, '$append_to_head', TMP_14 = function ːappend_to_head() {
      var self = this;

      return self.appendTo(document.head);
    }, TMP_14.$$arity = 0);

    Opal.defn(self, '$at', TMP_15 = function ːat(index) {
      var self = this;

      
      var length = self.length;

      if (index < 0) {
        index += length;
      }

      if (index < 0 || index >= length) {
        return nil;
      }

      return $(self[index]);
    
    }, TMP_15.$$arity = 1);

    Opal.defn(self, '$class_name', TMP_16 = function ːclass_name() {
      var self = this;

      
      var first = self[0];
      return (first && first.className) || "";
    
    }, TMP_16.$$arity = 0);

    Opal.defn(self, '$class_name=', TMP_17 = function(name) {
      var self = this;

      
      for (var i = 0, length = self.length; i < length; i++) {
        self[i].className = name;
      }
    
      return self;
    }, TMP_17.$$arity = 1);

    Opal.defn(self, '$css', TMP_18 = function ːcss(name, value) {
      var $a, $b, self = this;

      if (value == null) {
        value = nil;
      }
      if ((($a = ($b = value['$nil?'](), $b !== false && $b !== nil && $b != null ?name['$is_a?']($scope.get('String')) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.css(name)
      } else if ((($a = name['$is_a?']($scope.get('Hash'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.css(name.$to_n());
        } else {
        self.css(name, value);
      };
      return self;
    }, TMP_18.$$arity = -2);

    Opal.defn(self, '$animate', TMP_19 = function ːanimate(params) {
      var $a, self = this, $iter = TMP_19.$$p, block = $iter || nil, speed = nil;

      TMP_19.$$p = null;
      speed = (function() {if ((($a = params['$has_key?']("speed")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return params.$delete("speed")
        } else {
        return 400
      }; return nil; })();
      
      self.animate(params.$to_n(), speed, function() {
        (function() {if ((block !== nil)) {
        return block.$call()
        } else {
        return nil
      }; return nil; })()
      })
    ;
    }, TMP_19.$$arity = 1);

    Opal.defn(self, '$data', TMP_20 = function ːdata($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var result = self.data.apply(self, args);
      return result == null ? nil : result;
    
    }, TMP_20.$$arity = -1);

    Opal.defn(self, '$effect', TMP_21 = function ːeffect(name, $a_rest) {
      var $b, $c, TMP_22, $d, TMP_23, self = this, args, $iter = TMP_21.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_21.$$p = null;
      name = ($b = ($c = name).$gsub, $b.$$p = (TMP_22 = function(match){var self = TMP_22.$$s || this;
if (match == null) match = nil;
      return match['$[]'](1).$upcase()}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22), $b).call($c, /_\w/);
      args = ($b = ($d = args).$map, $b.$$p = (TMP_23 = function(a){var self = TMP_23.$$s || this, $a;
if (a == null) a = nil;
      if ((($a = a['$respond_to?']("to_n")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return a.$to_n()
          } else {
          return nil
        }}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23), $b).call($d).$compact();
      args['$<<'](function() { (function() {if ((block !== nil)) {
        return block.$call()
        } else {
        return nil
      }; return nil; })() });
      return self[name].apply(self, args);
    }, TMP_21.$$arity = -2);

    Opal.defn(self, '$visible?', TMP_24 = function() {
      var self = this;

      return self.is(':visible');
    }, TMP_24.$$arity = 0);

    Opal.defn(self, '$offset', TMP_25 = function ːoffset() {
      var self = this;

      return self.$Native(self.offset());
    }, TMP_25.$$arity = 0);

    Opal.defn(self, '$each', TMP_26 = function ːeach() {
      var self = this, $iter = TMP_26.$$p, $yield = $iter || nil;

      TMP_26.$$p = null;
      for (var i = 0, length = self.length; i < length; i++) {
      Opal.yield1($yield, $(self[i]));
      };
      return self;
    }, TMP_26.$$arity = 0);

    Opal.defn(self, '$first', TMP_27 = function ːfirst() {
      var self = this;

      return self.length ? self.first() : nil;
    }, TMP_27.$$arity = 0);

    Opal.defn(self, '$html', TMP_28 = function ːhtml(content) {
      var self = this;

      
      if (content != null) {
        return self.html(content);
      }

      return self.html() || '';
    
    }, TMP_28.$$arity = -1);

    Opal.defn(self, '$id', TMP_29 = function ːid() {
      var self = this;

      
      var first = self[0];
      return (first && first.id) || "";
    
    }, TMP_29.$$arity = 0);

    Opal.defn(self, '$id=', TMP_30 = function(id) {
      var self = this;

      
      var first = self[0];

      if (first) {
        first.id = id;
      }

      return self;
    
    }, TMP_30.$$arity = 1);

    Opal.defn(self, '$tag_name', TMP_31 = function ːtag_name() {
      var self = this;

      return self.length > 0 ? self[0].tagName.toLowerCase() : nil;
    }, TMP_31.$$arity = 0);

    Opal.defn(self, '$inspect', TMP_32 = function ːinspect() {
      var self = this;

      
      if      (self[0] === document) return '#<Element [document]>'
      else if (self[0] === window  ) return '#<Element [window]>'

      var val, el, str, result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        el  = self[i];
        if (!el.tagName) { return '#<Element ['+el.toString()+']'; }

        str = "<" + el.tagName.toLowerCase();

        if (val = el.id) str += (' id="' + val + '"');
        if (val = el.className) str += (' class="' + val + '"');

        result.push(str + '>');
      }

      return '#<Element [' + result.join(', ') + ']>';
    
    }, TMP_32.$$arity = 0);

    Opal.defn(self, '$to_s', TMP_33 = function ːto_s() {
      var self = this;

      
      var val, el, result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        el  = self[i];

        result.push(el.outerHTML)
      }

      return result.join(', ');
    
    }, TMP_33.$$arity = 0);

    Opal.defn(self, '$length', TMP_34 = function ːlength() {
      var self = this;

      return self.length;
    }, TMP_34.$$arity = 0);

    Opal.defn(self, '$any?', TMP_35 = function() {
      var self = this;

      return self.length > 0;
    }, TMP_35.$$arity = 0);

    Opal.defn(self, '$empty?', TMP_36 = function() {
      var self = this;

      return self.length === 0;
    }, TMP_36.$$arity = 0);

    Opal.alias(self, 'empty?', 'none?');

    Opal.defn(self, '$on', TMP_37 = function ːon(name, sel) {
      var self = this, $iter = TMP_37.$$p, block = $iter || nil;

      if (sel == null) {
        sel = nil;
      }
      TMP_37.$$p = null;
      
      var wrapper = function(evt) {
        if (evt.preventDefault) {
          evt = $scope.get('Event').$new(evt);
        }

        return block.apply(null, arguments);
      };

      block._jq_wrap = wrapper;

      if (sel == nil) {
        self.on(name, wrapper);
      }
      else {
        self.on(name, sel, wrapper);
      }
    ;
      return block;
    }, TMP_37.$$arity = -2);

    Opal.defn(self, '$one', TMP_38 = function ːone(name, sel) {
      var self = this, $iter = TMP_38.$$p, block = $iter || nil;

      if (sel == null) {
        sel = nil;
      }
      TMP_38.$$p = null;
      
      var wrapper = function(evt) {
        if (evt.preventDefault) {
          evt = $scope.get('Event').$new(evt);
        }

        return block.apply(null, arguments);
      };

      block._jq_wrap = wrapper;

      if (sel == nil) {
        self.one(name, wrapper);
      }
      else {
        self.one(name, sel, wrapper);
      }
    ;
      return block;
    }, TMP_38.$$arity = -2);

    Opal.defn(self, '$off', TMP_39 = function ːoff(name, sel, block) {
      var self = this;

      if (block == null) {
        block = nil;
      }
      
      if (sel == null) {
        return self.off(name);
      }
      else if (block === nil) {
        return self.off(name, sel._jq_wrap);
      }
      else {
        return self.off(name, sel, block._jq_wrap);
      }
    
    }, TMP_39.$$arity = -3);

    Opal.defn(self, '$serialize_array', TMP_41 = function ːserialize_array() {
      var $a, $b, TMP_40, self = this;

      return ($a = ($b = (self.serializeArray())).$map, $a.$$p = (TMP_40 = function(e){var self = TMP_40.$$s || this;
if (e == null) e = nil;
      return $scope.get('Hash').$new(e)}, TMP_40.$$s = self, TMP_40.$$arity = 1, TMP_40), $a).call($b);
    }, TMP_41.$$arity = 0);

    Opal.alias(self, 'size', 'length');

    Opal.defn(self, '$value', TMP_42 = function ːvalue() {
      var self = this;

      return self.val() || "";
    }, TMP_42.$$arity = 0);

    Opal.defn(self, '$height', TMP_43 = function ːheight() {
      var self = this;

      return self.height() || nil;
    }, TMP_43.$$arity = 0);

    Opal.defn(self, '$width', TMP_44 = function ːwidth() {
      var self = this;

      return self.width() || nil;
    }, TMP_44.$$arity = 0);

    return (Opal.defn(self, '$position', TMP_45 = function ːposition() {
      var self = this;

      return self.$Native(self.position());
    }, TMP_45.$$arity = 0), nil) && 'position';
  })($scope.base, $scope.get('JQUERY_CLASS').$to_n());
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["opal/jquery/window"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$include', '$find', '$on', '$to_proc', '$element', '$off', '$trigger', '$new']);
  self.$require("opal/jquery/element");
  (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

      def.element = nil;
      self.$include($scope.get('Native'));

      Opal.defn(self, '$element', TMP_1 = function ːelement() {
        var $a, self = this;

        return ((($a = self.element) !== false && $a !== nil && $a != null) ? $a : self.element = $scope.get('Element').$find(window));
      }, TMP_1.$$arity = 0);

      Opal.defn(self, '$on', TMP_2 = function ːon($a_rest) {
        var $b, $c, self = this, args, $iter = TMP_2.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        TMP_2.$$p = null;
        return ($b = ($c = self.$element()).$on, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
      }, TMP_2.$$arity = -1);

      Opal.defn(self, '$off', TMP_3 = function ːoff($a_rest) {
        var $b, $c, self = this, args, $iter = TMP_3.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        TMP_3.$$p = null;
        return ($b = ($c = self.$element()).$off, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
      }, TMP_3.$$arity = -1);

      return (Opal.defn(self, '$trigger', TMP_4 = function ːtrigger($a_rest) {
        var $b, self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return ($b = self.$element()).$trigger.apply($b, Opal.to_a(args));
      }, TMP_4.$$arity = -1), nil) && 'trigger';
    })($scope.base, null)
  })($scope.base);
  Opal.cdecl($scope, 'Window', (($scope.get('Browser')).$$scope.get('Window')).$new(window));
  return $gvars.window = $scope.get('Window');
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["opal/jquery/document"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$to_n', '$call', '$new', '$ready?', '$resolve', '$module_function', '$find', '$extend']);
  self.$require("opal/jquery/constants");
  self.$require("opal/jquery/element");
  (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DocumentMethods, self = $DocumentMethods = $module($base, 'DocumentMethods');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3, $a, $b, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8;

      var $ = $scope.get('JQUERY_SELECTOR').$to_n();

      Opal.defn(self, '$ready?', TMP_1 = function() {
        var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

        TMP_1.$$p = null;
        if ((block !== nil)) {
          if ((($a = (($b = Opal.cvars['@@__isReady']) == null ? nil : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return block.$call()
            } else {
            return $(block);
          }
          } else {
          return nil
        };
      }, TMP_1.$$arity = 0);

      Opal.defn(self, '$ready', TMP_3 = function ːready() {
        var $a, $b, TMP_2, self = this, promise = nil;

        promise = $scope.get('Promise').$new();
        ($a = ($b = $scope.get('Document'))['$ready?'], $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

        return promise.$resolve()}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($b);
        return promise;
      }, TMP_3.$$arity = 0);

      self.$module_function("ready?");

      ($a = ($b = self)['$ready?'], $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

      return (Opal.cvars['@@__isReady'] = true)}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($b);

      Opal.defn(self, '$title', TMP_5 = function ːtitle() {
        var self = this;

        return document.title;
      }, TMP_5.$$arity = 0);

      Opal.defn(self, '$title=', TMP_6 = function(title) {
        var self = this;

        return document.title = title;
      }, TMP_6.$$arity = 1);

      Opal.defn(self, '$head', TMP_7 = function ːhead() {
        var self = this;

        return $scope.get('Element').$find(document.head);
      }, TMP_7.$$arity = 0);

      Opal.defn(self, '$body', TMP_8 = function ːbody() {
        var self = this;

        return $scope.get('Element').$find(document.body);
      }, TMP_8.$$arity = 0);
    })($scope.base)
  })($scope.base);
  Opal.cdecl($scope, 'Document', $scope.get('Element').$find(document));
  $scope.get('Document').$extend((($scope.get('Browser')).$$scope.get('DocumentMethods')));
  return $gvars.document = $scope.get('Document');
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["opal/jquery/event"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$to_n', '$stop', '$prevent']);
  self.$require("opal/jquery/constants");
  return (function($base, $super) {
    function $Event(){};
    var self = $Event = $klass($base, $super, 'Event', $Event);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22;

    def["native"] = nil;
    var $ = $scope.get('JQUERY_SELECTOR').$to_n();

    Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(native$) {
      var self = this;

      return self["native"] = native$;
    }, TMP_1.$$arity = 1);

    Opal.defn(self, '$to_n', TMP_2 = function ːto_n() {
      var self = this;

      return self["native"];
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$[]', TMP_3 = function(name) {
      var self = this;

      return self["native"][name];
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$type', TMP_4 = function ːtype() {
      var self = this;

      return self["native"].type;
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$element', TMP_5 = function ːelement() {
      var self = this;

      return $(self["native"].currentTarget);
    }, TMP_5.$$arity = 0);

    Opal.alias(self, 'current_target', 'element');

    Opal.defn(self, '$target', TMP_6 = function ːtarget() {
      var self = this;

      return $(self["native"].target);
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$prevented?', TMP_7 = function() {
      var self = this;

      return self["native"].isDefaultPrevented();
    }, TMP_7.$$arity = 0);

    Opal.defn(self, '$prevent', TMP_8 = function ːprevent() {
      var self = this;

      return self["native"].preventDefault();
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$stopped?', TMP_9 = function() {
      var self = this;

      return self["native"].isPropagationStopped();
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$stop', TMP_10 = function ːstop() {
      var self = this;

      return self["native"].stopPropagation();
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$stop_immediate', TMP_11 = function ːstop_immediate() {
      var self = this;

      return self["native"].stopImmediatePropagation();
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$kill', TMP_12 = function ːkill() {
      var self = this;

      self.$stop();
      return self.$prevent();
    }, TMP_12.$$arity = 0);

    Opal.defn(self, '$page_x', TMP_13 = function ːpage_x() {
      var self = this;

      return self["native"].pageX;
    }, TMP_13.$$arity = 0);

    Opal.defn(self, '$page_y', TMP_14 = function ːpage_y() {
      var self = this;

      return self["native"].pageY;
    }, TMP_14.$$arity = 0);

    Opal.defn(self, '$touch_x', TMP_15 = function ːtouch_x() {
      var self = this;

      return self["native"].originalEvent.touches[0].pageX;
    }, TMP_15.$$arity = 0);

    Opal.defn(self, '$touch_y', TMP_16 = function ːtouch_y() {
      var self = this;

      return self["native"].originalEvent.touches[0].pageY;
    }, TMP_16.$$arity = 0);

    Opal.defn(self, '$ctrl_key', TMP_17 = function ːctrl_key() {
      var self = this;

      return self["native"].ctrlKey;
    }, TMP_17.$$arity = 0);

    Opal.defn(self, '$meta_key', TMP_18 = function ːmeta_key() {
      var self = this;

      return self["native"].metaKey;
    }, TMP_18.$$arity = 0);

    Opal.defn(self, '$alt_key', TMP_19 = function ːalt_key() {
      var self = this;

      return self["native"].altKey;
    }, TMP_19.$$arity = 0);

    Opal.defn(self, '$shift_key', TMP_20 = function ːshift_key() {
      var self = this;

      return self["native"].shiftKey;
    }, TMP_20.$$arity = 0);

    Opal.defn(self, '$key_code', TMP_21 = function ːkey_code() {
      var self = this;

      return self["native"].keyCode;
    }, TMP_21.$$arity = 0);

    Opal.defn(self, '$which', TMP_22 = function ːwhich() {
      var self = this;

      return self["native"].which;
    }, TMP_22.$$arity = 0);

    Opal.alias(self, 'default_prevented?', 'prevented?');

    Opal.alias(self, 'prevent_default', 'prevent');

    Opal.alias(self, 'propagation_stopped?', 'stopped?');

    Opal.alias(self, 'stop_propagation', 'stop');

    return Opal.alias(self, 'stop_immediate_propagation', 'stop_immediate');
  })($scope.base, null);
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["json"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $klass = Opal.klass;

  Opal.add_stubs(['$new', '$push', '$[]=', '$[]', '$create_id', '$json_create', '$attr_accessor', '$create_id=', '$===', '$parse', '$generate', '$from_object', '$merge', '$to_json', '$responds_to?', '$to_io', '$write', '$to_s', '$to_a', '$strftime']);
  (function($base) {
    var $JSON, self = $JSON = $module($base, 'JSON');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7;

    
    var $parse  = JSON.parse,
        $hasOwn = Opal.hasOwnProperty;

    function to_opal(value, options) {
      var klass, arr, hash, i, ii, k;

      switch (typeof value) {
        case 'string':
          return value;

        case 'number':
          return value;

        case 'boolean':
          return !!value;

        case 'null':
          return nil;

        case 'object':
          if (!value) return nil;

          if (value.$$is_array) {
            arr = (options.array_class).$new();

            for (i = 0, ii = value.length; i < ii; i++) {
              (arr).$push(to_opal(value[i], options));
            }

            return arr;
          }
          else {
            hash = (options.object_class).$new();

            for (k in value) {
              if ($hasOwn.call(value, k)) {
                (hash)['$[]='](k, to_opal(value[k], options));
              }
            }

            if (!options.parse && (klass = (hash)['$[]']($scope.get('JSON').$create_id())) != nil) {
              klass = Opal.get(klass);
              return (klass).$json_create(hash);
            }
            else {
              return hash;
            }
          }
        }
    };
  

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      return self.$attr_accessor("create_id")
    })(Opal.get_singleton_class(self));

    (($a = ["json_class"]), $b = self, $b['$create_id='].apply($b, $a), $a[$a.length-1]);

    Opal.defs(self, '$[]', TMP_1 = function(value, options) {
      var $a, self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      if ((($a = $scope.get('String')['$==='](value)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$parse(value, options)
        } else {
        return self.$generate(value, options)
      };
    }, TMP_1.$$arity = -2);

    Opal.defs(self, '$parse', TMP_2 = function ːparse(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return self.$from_object($parse(source), options.$merge($hash2(["parse"], {"parse": true})));
    }, TMP_2.$$arity = -2);

    Opal.defs(self, '$parse!', TMP_3 = function(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return self.$parse(source, options);
    }, TMP_3.$$arity = -2);

    Opal.defs(self, '$load', TMP_4 = function ːload(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return self.$from_object($parse(source), options);
    }, TMP_4.$$arity = -2);

    Opal.defs(self, '$from_object', TMP_5 = function ːfrom_object(js_object, options) {
      var $a, $b, $c, self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      ($a = "object_class", $b = options, ((($c = $b['$[]']($a)) !== false && $c !== nil && $c != null) ? $c : $b['$[]=']($a, $scope.get('Hash'))));
      ($a = "array_class", $b = options, ((($c = $b['$[]']($a)) !== false && $c !== nil && $c != null) ? $c : $b['$[]=']($a, $scope.get('Array'))));
      return to_opal(js_object, options.$$smap);
    }, TMP_5.$$arity = -2);

    Opal.defs(self, '$generate', TMP_6 = function ːgenerate(obj, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return obj.$to_json(options);
    }, TMP_6.$$arity = -2);

    Opal.defs(self, '$dump', TMP_7 = function ːdump(obj, io, limit) {
      var $a, self = this, string = nil;

      if (io == null) {
        io = nil;
      }
      if (limit == null) {
        limit = nil;
      }
      string = self.$generate(obj);
      if (io !== false && io !== nil && io != null) {
        if ((($a = io['$responds_to?']("to_io")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          io = io.$to_io()};
        io.$write(string);
        return io;
        } else {
        return string
      };
    }, TMP_7.$$arity = -2);
  })($scope.base);
  (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope, TMP_8;

    return (Opal.defn(self, '$to_json', TMP_8 = function ːto_json() {
      var self = this;

      return self.$to_s().$to_json();
    }, TMP_8.$$arity = 0), nil) && 'to_json'
  })($scope.base, null);
  (function($base) {
    var $Enumerable, self = $Enumerable = $module($base, 'Enumerable');

    var def = self.$$proto, $scope = self.$$scope, TMP_9;

    Opal.defn(self, '$to_json', TMP_9 = function ːto_json() {
      var self = this;

      return self.$to_a().$to_json();
    }, TMP_9.$$arity = 0)
  })($scope.base);
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope, TMP_10;

    return (Opal.defn(self, '$to_json', TMP_10 = function ːto_json() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        result.push((self[i]).$to_json());
      }

      return '[' + result.join(', ') + ']';
    
    }, TMP_10.$$arity = 0), nil) && 'to_json'
  })($scope.base, null);
  (function($base, $super) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $scope = self.$$scope, TMP_11;

    return (Opal.defn(self, '$to_json', TMP_11 = function ːto_json() {
      var self = this;

      return (self == true) ? 'true' : 'false';
    }, TMP_11.$$arity = 0), nil) && 'to_json'
  })($scope.base, null);
  (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope, TMP_12;

    return (Opal.defn(self, '$to_json', TMP_12 = function ːto_json() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push((key).$to_s().$to_json() + ':' + (value).$to_json());
      }

      return '{' + result.join(', ') + '}';
    ;
    }, TMP_12.$$arity = 0), nil) && 'to_json'
  })($scope.base, null);
  (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope, TMP_13;

    return (Opal.defn(self, '$to_json', TMP_13 = function ːto_json() {
      var self = this;

      return "null";
    }, TMP_13.$$arity = 0), nil) && 'to_json'
  })($scope.base, null);
  (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $scope = self.$$scope, TMP_14;

    return (Opal.defn(self, '$to_json', TMP_14 = function ːto_json() {
      var self = this;

      return self.toString();
    }, TMP_14.$$arity = 0), nil) && 'to_json'
  })($scope.base, null);
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope;

    return Opal.alias(self, 'to_json', 'inspect')
  })($scope.base, null);
  (function($base, $super) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $scope = self.$$scope, TMP_15;

    return (Opal.defn(self, '$to_json', TMP_15 = function ːto_json() {
      var self = this;

      return self.$strftime("%FT%T%z").$to_json();
    }, TMP_15.$$arity = 0), nil) && 'to_json'
  })($scope.base, null);
  return (function($base, $super) {
    function $Date(){};
    var self = $Date = $klass($base, $super, 'Date', $Date);

    var def = self.$$proto, $scope = self.$$scope, TMP_16, TMP_17;

    Opal.defn(self, '$to_json', TMP_16 = function ːto_json() {
      var self = this;

      return self.$to_s().$to_json();
    }, TMP_16.$$arity = 0);

    return (Opal.defn(self, '$as_json', TMP_17 = function ːas_json() {
      var self = this;

      return self.$to_s();
    }, TMP_17.$$arity = 0), nil) && 'as_json';
  })($scope.base, null);
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["promise"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$resolve', '$new', '$reject', '$attr_reader', '$===', '$value', '$has_key?', '$keys', '$!', '$==', '$<<', '$>>', '$exception?', '$[]', '$resolved?', '$rejected?', '$error', '$include?', '$action', '$realized?', '$raise', '$^', '$call', '$resolve!', '$exception!', '$any?', '$each', '$reject!', '$there_can_be_only_one!', '$then', '$to_proc', '$fail', '$always', '$trace', '$class', '$object_id', '$+', '$inspect', '$act?', '$nil?', '$prev', '$push', '$concat', '$it', '$proc', '$reverse', '$pop', '$<=', '$length', '$shift', '$-', '$wait', '$map', '$reduce', '$try', '$tap', '$all?', '$find']);
  return (function($base, $super) {
    function $Promise(){};
    var self = $Promise = $klass($base, $super, 'Promise', $Promise);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_17, TMP_18, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31;

    def.value = def.action = def.exception = def.realized = def.next = def.delayed = def.error = def.prev = nil;
    Opal.defs(self, '$value', TMP_1 = function ːvalue(value) {
      var self = this;

      return self.$new().$resolve(value);
    }, TMP_1.$$arity = 1);

    Opal.defs(self, '$error', TMP_2 = function ːerror(value) {
      var self = this;

      return self.$new().$reject(value);
    }, TMP_2.$$arity = 1);

    Opal.defs(self, '$when', TMP_3 = function ːwhen($a_rest) {
      var self = this, promises;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      promises = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        promises[$arg_idx - 0] = arguments[$arg_idx];
      }
      return $scope.get('When').$new(promises);
    }, TMP_3.$$arity = -1);

    self.$attr_reader("error", "prev", "next");

    Opal.defn(self, '$initialize', TMP_4 = function ːinitialize(action) {
      var self = this;

      if (action == null) {
        action = $hash2([], {});
      }
      self.action = action;
      self.realized = false;
      self.exception = false;
      self.value = nil;
      self.error = nil;
      self.delayed = false;
      self.prev = nil;
      return self.next = [];
    }, TMP_4.$$arity = -1);

    Opal.defn(self, '$value', TMP_5 = function ːvalue() {
      var $a, self = this;

      if ((($a = $scope.get('Promise')['$==='](self.value)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.value.$value()
        } else {
        return self.value
      };
    }, TMP_5.$$arity = 0);

    Opal.defn(self, '$act?', TMP_6 = function() {
      var $a, self = this;

      return ((($a = self.action['$has_key?']("success")) !== false && $a !== nil && $a != null) ? $a : self.action['$has_key?']("always"));
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$action', TMP_7 = function ːaction() {
      var self = this;

      return self.action.$keys();
    }, TMP_7.$$arity = 0);

    Opal.defn(self, '$exception?', TMP_8 = function() {
      var self = this;

      return self.exception;
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$realized?', TMP_9 = function() {
      var self = this;

      return self.realized['$!']()['$!']();
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$resolved?', TMP_10 = function() {
      var self = this;

      return self.realized['$==']("resolve");
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$rejected?', TMP_11 = function() {
      var self = this;

      return self.realized['$==']("reject");
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$^', TMP_12 = function(promise) {
      var self = this;

      promise['$<<'](self);
      self['$>>'](promise);
      return promise;
    }, TMP_12.$$arity = 1);

    Opal.defn(self, '$<<', TMP_13 = function(promise) {
      var self = this;

      self.prev = promise;
      return self;
    }, TMP_13.$$arity = 1);

    Opal.defn(self, '$>>', TMP_14 = function(promise) {
      var $a, $b, $c, self = this;

      self.next['$<<'](promise);
      if ((($a = self['$exception?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        promise.$reject(self.delayed['$[]'](0))
      } else if ((($a = self['$resolved?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        promise.$resolve((function() {if ((($a = self.delayed) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.delayed['$[]'](0)
          } else {
          return self.$value()
        }; return nil; })())
      } else if ((($a = self['$rejected?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = ((($b = self.action['$has_key?']("failure")['$!']()) !== false && $b !== nil && $b != null) ? $b : $scope.get('Promise')['$==='](((function() {if ((($c = self.delayed) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          return self.delayed['$[]'](0)
          } else {
          return self.error
        }; return nil; })())))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          promise.$reject((function() {if ((($a = self.delayed) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.delayed['$[]'](0)
            } else {
            return self.$error()
          }; return nil; })())
        } else if ((($a = promise.$action()['$include?']("always")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          promise.$reject((function() {if ((($a = self.delayed) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.delayed['$[]'](0)
            } else {
            return self.$error()
          }; return nil; })())}};
      return self;
    }, TMP_14.$$arity = 1);

    Opal.defn(self, '$resolve', TMP_15 = function ːresolve(value) {
      var $a, $b, self = this, block = nil, e = nil;

      if (value == null) {
        value = nil;
      }
      if ((($a = self['$realized?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "the promise has already been realized")};
      if ((($a = $scope.get('Promise')['$==='](value)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (value['$<<'](self.prev))['$^'](self)};
      try {
        if ((($a = block = ((($b = self.action['$[]']("success")) !== false && $b !== nil && $b != null) ? $b : self.action['$[]']("always"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          value = block.$call(value)};
        self['$resolve!'](value);
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
          try {
            self['$exception!'](e)
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
      return self;
    }, TMP_15.$$arity = -1);

    Opal.defn(self, '$resolve!', TMP_17 = function(value) {
      var $a, $b, TMP_16, self = this;

      self.realized = "resolve";
      self.value = value;
      if ((($a = self.next['$any?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = self.next).$each, $a.$$p = (TMP_16 = function(p){var self = TMP_16.$$s || this;
if (p == null) p = nil;
        return p.$resolve(value)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $a).call($b)
        } else {
        return self.delayed = [value]
      };
    }, TMP_17.$$arity = 1);

    Opal.defn(self, '$reject', TMP_18 = function ːreject(value) {
      var $a, $b, self = this, block = nil, e = nil;

      if (value == null) {
        value = nil;
      }
      if ((($a = self['$realized?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "the promise has already been realized")};
      if ((($a = $scope.get('Promise')['$==='](value)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (value['$<<'](self.prev))['$^'](self)};
      try {
        if ((($a = block = ((($b = self.action['$[]']("failure")) !== false && $b !== nil && $b != null) ? $b : self.action['$[]']("always"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          value = block.$call(value)};
        if ((($a = self.action['$has_key?']("always")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self['$resolve!'](value)
          } else {
          self['$reject!'](value)
        };
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
          try {
            self['$exception!'](e)
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
      return self;
    }, TMP_18.$$arity = -1);

    Opal.defn(self, '$reject!', TMP_20 = function(value) {
      var $a, $b, TMP_19, self = this;

      self.realized = "reject";
      self.error = value;
      if ((($a = self.next['$any?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = self.next).$each, $a.$$p = (TMP_19 = function(p){var self = TMP_19.$$s || this;
if (p == null) p = nil;
        return p.$reject(value)}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19), $a).call($b)
        } else {
        return self.delayed = [value]
      };
    }, TMP_20.$$arity = 1);

    Opal.defn(self, '$exception!', TMP_21 = function(error) {
      var self = this;

      self.exception = true;
      return self['$reject!'](error);
    }, TMP_21.$$arity = 1);

    Opal.defn(self, '$then', TMP_22 = function ːthen() {
      var self = this, $iter = TMP_22.$$p, block = $iter || nil;

      TMP_22.$$p = null;
      return self['$^']($scope.get('Promise').$new($hash2(["success"], {"success": block})));
    }, TMP_22.$$arity = 0);

    Opal.defn(self, '$then!', TMP_23 = function() {
      var $a, $b, self = this, $iter = TMP_23.$$p, block = $iter || nil;

      TMP_23.$$p = null;
      self['$there_can_be_only_one!']();
      return ($a = ($b = self).$then, $a.$$p = block.$to_proc(), $a).call($b);
    }, TMP_23.$$arity = 0);

    Opal.alias(self, 'do', 'then');

    Opal.alias(self, 'do!', 'then!');

    Opal.defn(self, '$fail', TMP_24 = function ːfail() {
      var self = this, $iter = TMP_24.$$p, block = $iter || nil;

      TMP_24.$$p = null;
      return self['$^']($scope.get('Promise').$new($hash2(["failure"], {"failure": block})));
    }, TMP_24.$$arity = 0);

    Opal.defn(self, '$fail!', TMP_25 = function() {
      var $a, $b, self = this, $iter = TMP_25.$$p, block = $iter || nil;

      TMP_25.$$p = null;
      self['$there_can_be_only_one!']();
      return ($a = ($b = self).$fail, $a.$$p = block.$to_proc(), $a).call($b);
    }, TMP_25.$$arity = 0);

    Opal.alias(self, 'rescue', 'fail');

    Opal.alias(self, 'catch', 'fail');

    Opal.alias(self, 'rescue!', 'fail!');

    Opal.alias(self, 'catch!', 'fail!');

    Opal.defn(self, '$always', TMP_26 = function ːalways() {
      var self = this, $iter = TMP_26.$$p, block = $iter || nil;

      TMP_26.$$p = null;
      return self['$^']($scope.get('Promise').$new($hash2(["always"], {"always": block})));
    }, TMP_26.$$arity = 0);

    Opal.defn(self, '$always!', TMP_27 = function() {
      var $a, $b, self = this, $iter = TMP_27.$$p, block = $iter || nil;

      TMP_27.$$p = null;
      self['$there_can_be_only_one!']();
      return ($a = ($b = self).$always, $a.$$p = block.$to_proc(), $a).call($b);
    }, TMP_27.$$arity = 0);

    Opal.alias(self, 'finally', 'always');

    Opal.alias(self, 'ensure', 'always');

    Opal.alias(self, 'finally!', 'always!');

    Opal.alias(self, 'ensure!', 'always!');

    Opal.defn(self, '$trace', TMP_28 = function ːtrace(depth) {
      var self = this, $iter = TMP_28.$$p, block = $iter || nil;

      if (depth == null) {
        depth = nil;
      }
      TMP_28.$$p = null;
      return self['$^']($scope.get('Trace').$new(depth, block));
    }, TMP_28.$$arity = -1);

    Opal.defn(self, '$trace!', TMP_29 = function($a_rest) {
      var $b, $c, self = this, args, $iter = TMP_29.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_29.$$p = null;
      self['$there_can_be_only_one!']();
      return ($b = ($c = self).$trace, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
    }, TMP_29.$$arity = -1);

    Opal.defn(self, '$there_can_be_only_one!', TMP_30 = function() {
      var $a, self = this;

      if ((($a = self.next['$any?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('ArgumentError'), "a promise has already been chained")
        } else {
        return nil
      };
    }, TMP_30.$$arity = 0);

    Opal.defn(self, '$inspect', TMP_31 = function ːinspect() {
      var $a, self = this, result = nil;

      result = "#<" + (self.$class()) + "(" + (self.$object_id()) + ")";
      if ((($a = self.next['$any?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, " >> " + (self.next.$inspect()))};
      if ((($a = self['$realized?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, ": " + ((((($a = self.value) !== false && $a !== nil && $a != null) ? $a : self.error)).$inspect()) + ">")
        } else {
        result = $rb_plus(result, ">")
      };
      return result;
    }, TMP_31.$$arity = 0);

    (function($base, $super) {
      function $Trace(){};
      var self = $Trace = $klass($base, $super, 'Trace', $Trace);

      var def = self.$$proto, $scope = self.$$scope, TMP_32, TMP_33;

      Opal.defs(self, '$it', TMP_32 = function ːit(promise) {
        var $a, $b, self = this, current = nil, prev = nil;

        current = [];
        if ((($a = ((($b = promise['$act?']()) !== false && $b !== nil && $b != null) ? $b : promise.$prev()['$nil?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          current.$push(promise.$value())};
        if ((($a = prev = promise.$prev()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return current.$concat(self.$it(prev))
          } else {
          return current
        };
      }, TMP_32.$$arity = 1);

      return (Opal.defn(self, '$initialize', TMP_33 = function ːinitialize(depth, block) {
        var $a, $b, $c, $d, TMP_34, self = this, $iter = TMP_33.$$p, $yield = $iter || nil;

        TMP_33.$$p = null;
        self.depth = depth;
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_33, false)), $a.$$p = null, $a).call($b, $hash2(["success"], {"success": ($c = ($d = self).$proc, $c.$$p = (TMP_34 = function(){var self = TMP_34.$$s || this, $e, $f, trace = nil;

        trace = $scope.get('Trace').$it(self).$reverse();
          trace.$pop();
          if ((($e = (($f = depth !== false && depth !== nil && depth != null) ? $rb_le(depth, trace.$length()) : depth)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            trace.$shift($rb_minus(trace.$length(), depth))};
          return ($e = block).$call.apply($e, Opal.to_a(trace));}, TMP_34.$$s = self, TMP_34.$$arity = 0, TMP_34), $c).call($d)}));
      }, TMP_33.$$arity = 2), nil) && 'initialize';
    })($scope.base, self);

    return (function($base, $super) {
      function $When(){};
      var self = $When = $klass($base, $super, 'When', $When);

      var def = self.$$proto, $scope = self.$$scope, TMP_35, TMP_37, TMP_39, TMP_41, TMP_44, TMP_46, TMP_47;

      def.wait = nil;
      Opal.defn(self, '$initialize', TMP_35 = function ːinitialize(promises) {
        var $a, $b, $c, TMP_36, self = this, $iter = TMP_35.$$p, $yield = $iter || nil;

        if (promises == null) {
          promises = [];
        }
        TMP_35.$$p = null;
        ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_35, false)), $a.$$p = null, $a).call($b);
        self.wait = [];
        return ($a = ($c = promises).$each, $a.$$p = (TMP_36 = function(promise){var self = TMP_36.$$s || this;
if (promise == null) promise = nil;
        return self.$wait(promise)}, TMP_36.$$s = self, TMP_36.$$arity = 1, TMP_36), $a).call($c);
      }, TMP_35.$$arity = -1);

      Opal.defn(self, '$each', TMP_37 = function ːeach() {
        var $a, $b, TMP_38, self = this, $iter = TMP_37.$$p, block = $iter || nil;

        TMP_37.$$p = null;
        if (block !== false && block !== nil && block != null) {
          } else {
          self.$raise($scope.get('ArgumentError'), "no block given")
        };
        return ($a = ($b = self).$then, $a.$$p = (TMP_38 = function(values){var self = TMP_38.$$s || this, $c, $d;
if (values == null) values = nil;
        return ($c = ($d = values).$each, $c.$$p = block.$to_proc(), $c).call($d)}, TMP_38.$$s = self, TMP_38.$$arity = 1, TMP_38), $a).call($b);
      }, TMP_37.$$arity = 0);

      Opal.defn(self, '$collect', TMP_39 = function ːcollect() {
        var $a, $b, TMP_40, self = this, $iter = TMP_39.$$p, block = $iter || nil;

        TMP_39.$$p = null;
        if (block !== false && block !== nil && block != null) {
          } else {
          self.$raise($scope.get('ArgumentError'), "no block given")
        };
        return ($a = ($b = self).$then, $a.$$p = (TMP_40 = function(values){var self = TMP_40.$$s || this, $c, $d;
if (values == null) values = nil;
        return $scope.get('When').$new(($c = ($d = values).$map, $c.$$p = block.$to_proc(), $c).call($d))}, TMP_40.$$s = self, TMP_40.$$arity = 1, TMP_40), $a).call($b);
      }, TMP_39.$$arity = 0);

      Opal.defn(self, '$inject', TMP_41 = function ːinject($a_rest) {
        var $b, $c, TMP_42, self = this, args, $iter = TMP_41.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        TMP_41.$$p = null;
        return ($b = ($c = self).$then, $b.$$p = (TMP_42 = function(values){var self = TMP_42.$$s || this, $a, $d;
if (values == null) values = nil;
        return ($a = ($d = values).$reduce, $a.$$p = block.$to_proc(), $a).apply($d, Opal.to_a(args))}, TMP_42.$$s = self, TMP_42.$$arity = 1, TMP_42), $b).call($c);
      }, TMP_41.$$arity = -1);

      Opal.alias(self, 'map', 'collect');

      Opal.alias(self, 'reduce', 'inject');

      Opal.defn(self, '$wait', TMP_44 = function ːwait(promise) {
        var $a, $b, TMP_43, self = this;

        if ((($a = $scope.get('Promise')['$==='](promise)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          promise = $scope.get('Promise').$value(promise)
        };
        if ((($a = promise['$act?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          promise = promise.$then()};
        self.wait['$<<'](promise);
        ($a = ($b = promise).$always, $a.$$p = (TMP_43 = function(){var self = TMP_43.$$s || this, $c;
          if (self.next == null) self.next = nil;

        if ((($c = self.next['$any?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return self.$try()
            } else {
            return nil
          }}, TMP_43.$$s = self, TMP_43.$$arity = 0, TMP_43), $a).call($b);
        return self;
      }, TMP_44.$$arity = 1);

      Opal.alias(self, 'and', 'wait');

      Opal.defn(self, '$>>', TMP_46 = function($a_rest) {
        var $b, $c, TMP_45, $d, $e, self = this, $iter = TMP_46.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

        TMP_46.$$p = null;
        $zuper = [];
        
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        return ($b = ($c = ($d = ($e = self, Opal.find_super_dispatcher(self, '>>', TMP_46, false)), $d.$$p = $iter, $d).apply($e, $zuper)).$tap, $b.$$p = (TMP_45 = function(){var self = TMP_45.$$s || this;

        return self.$try()}, TMP_45.$$s = self, TMP_45.$$arity = 0, TMP_45), $b).call($c);
      }, TMP_46.$$arity = -1);

      return (Opal.defn(self, '$try', TMP_47 = function() {
        var $a, $b, $c, $d, self = this, promise = nil;

        if ((($a = ($b = ($c = self.wait)['$all?'], $b.$$p = "realized?".$to_proc(), $b).call($c)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = promise = ($b = ($d = self.wait).$find, $b.$$p = "rejected?".$to_proc(), $b).call($d)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$reject(promise.$error())
            } else {
            return self.$resolve(($a = ($b = self.wait).$map, $a.$$p = "value".$to_proc(), $a).call($b))
          }
          } else {
          return nil
        };
      }, TMP_47.$$arity = 0), nil) && 'try';
    })($scope.base, self);
  })($scope.base, null)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["opal/jquery/http"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$to_n', '$each', '$define_singleton_method', '$send', '$new', '$define_method', '$attr_reader', '$delete', '$update', '$upcase', '$succeed', '$fail', '$promise', '$parse', '$private', '$tap', '$proc', '$ok?', '$resolve', '$reject', '$from_object', '$call']);
  self.$require("json");
  self.$require("native");
  self.$require("promise");
  self.$require("opal/jquery/constants");
  return (function($base, $super) {
    function $HTTP(){};
    var self = $HTTP = $klass($base, $super, 'HTTP', $HTTP);

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_13, TMP_14, TMP_15;

    def.settings = def.payload = def.url = def.method = def.handler = def.json = def.body = def.ok = def.xhr = def.promise = def.status_code = nil;
    var $ = $scope.get('JQUERY_SELECTOR').$to_n();

    Opal.cdecl($scope, 'ACTIONS', ["get", "post", "put", "delete", "patch", "head"]);

    ($a = ($b = $scope.get('ACTIONS')).$each, $a.$$p = (TMP_1 = function(action){var self = TMP_1.$$s || this, $c, $d, TMP_2, $e, TMP_3;
if (action == null) action = nil;
    ($c = ($d = self).$define_singleton_method, $c.$$p = (TMP_2 = function(url, options){var self = TMP_2.$$s || this, block;

        block = TMP_2.$$p || nil, TMP_2.$$p = null;
        if (options == null) {
          options = $hash2([], {});
        }if (url == null) url = nil;
      return self.$new().$send(action, url, options, block)}, TMP_2.$$s = self, TMP_2.$$arity = -2, TMP_2), $c).call($d, action);
      return ($c = ($e = self).$define_method, $c.$$p = (TMP_3 = function(url, options){var self = TMP_3.$$s || this, block;

        block = TMP_3.$$p || nil, TMP_3.$$p = null;
        if (options == null) {
          options = $hash2([], {});
        }if (url == null) url = nil;
      return self.$send(action, url, options, block)}, TMP_3.$$s = self, TMP_3.$$arity = -2, TMP_3), $c).call($e, action);}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);

    Opal.defs(self, '$setup', TMP_4 = function ːsetup() {
      var self = this;

      return $scope.get('Hash').$new($.ajaxSetup());
    }, TMP_4.$$arity = 0);

    Opal.defs(self, '$setup=', TMP_5 = function(settings) {
      var self = this;

      return $.ajaxSetup(settings.$to_n());
    }, TMP_5.$$arity = 1);

    self.$attr_reader("body", "error_message", "method", "status_code", "url", "xhr");

    Opal.defn(self, '$initialize', TMP_6 = function ːinitialize() {
      var self = this;

      self.settings = $hash2([], {});
      return self.ok = true;
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$send', TMP_7 = function ːsend(method, url, options, block) {
      var $a, self = this, settings = nil, payload = nil;

      self.method = method;
      self.url = url;
      self.payload = options.$delete("payload");
      self.handler = block;
      self.settings.$update(options);
      $a = [self.settings.$to_n(), self.payload], settings = $a[0], payload = $a[1], $a;
      
      if (typeof(payload) === 'string') {
        settings.data = payload;
      }
      else if (payload != nil) {
        settings.data = payload.$to_json();
        settings.contentType = 'application/json';
      }

      settings.url  = self.url;
      settings.type = self.method.$upcase();

      settings.success = function(data, status, xhr) {
        return self.$succeed(data, status, xhr);
      };

      settings.error = function(xhr, status, error) {
        return self.$fail(xhr, status, error);
      };

      $.ajax(settings);
    ;
      if ((($a = self.handler) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self
        } else {
        return self.$promise()
      };
    }, TMP_7.$$arity = 4);

    Opal.defn(self, '$json', TMP_8 = function ːjson() {
      var $a, self = this;

      return ((($a = self.json) !== false && $a !== nil && $a != null) ? $a : self.json = $scope.get('JSON').$parse(self.body));
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$ok?', TMP_9 = function() {
      var self = this;

      return self.ok;
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$get_header', TMP_10 = function ːget_header(key) {
      var self = this;

      return self.xhr.getResponseHeader(key);;
    }, TMP_10.$$arity = 1);

    self.$private();

    Opal.defn(self, '$promise', TMP_13 = function ːpromise() {
      var $a, $b, TMP_11, self = this;

      if ((($a = self.promise) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.promise};
      return self.promise = ($a = ($b = $scope.get('Promise').$new()).$tap, $a.$$p = (TMP_11 = function(promise){var self = TMP_11.$$s || this, $c, $d, TMP_12;
if (promise == null) promise = nil;
      return self.handler = ($c = ($d = self).$proc, $c.$$p = (TMP_12 = function(res){var self = TMP_12.$$s || this, $e;
if (res == null) res = nil;
        if ((($e = res['$ok?']()) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            return promise.$resolve(res)
            } else {
            return promise.$reject(res)
          }}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $c).call($d)}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($b);
    }, TMP_13.$$arity = 0);

    Opal.defn(self, '$succeed', TMP_14 = function ːsucceed(data, status, xhr) {
      var $a, self = this;

      
      self.body = data;
      self.xhr  = xhr;
      self.status_code = xhr.status;

      if (typeof(data) === 'object') {
        self.json = $scope.get('JSON').$from_object(data);
      }
    ;
      if ((($a = self.handler) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.handler.$call(self)
        } else {
        return nil
      };
    }, TMP_14.$$arity = 3);

    return (Opal.defn(self, '$fail', TMP_15 = function ːfail(xhr, status, error) {
      var $a, self = this;

      
      self.body = xhr.responseText;
      self.xhr = xhr;
      self.status_code = xhr.status;
    ;
      self.ok = false;
      if ((($a = self.handler) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.handler.$call(self)
        } else {
        return nil
      };
    }, TMP_15.$$arity = 3), nil) && 'fail';
  })($scope.base, null);
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["opal/jquery/kernel"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    Opal.defn(self, '$alert', TMP_1 = function ːalert(msg) {
      var self = this;

      alert(msg);
      return nil;
    }, TMP_1.$$arity = 1)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["opal/jquery"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$==', '$require']);
  if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
    self.$require("opal/jquery/window");
    self.$require("opal/jquery/document");
    self.$require("opal/jquery/element");
    self.$require("opal/jquery/event");
    self.$require("opal/jquery/http");
    return self.$require("opal/jquery/kernel");}
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["opal-jquery"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  return self.$require("opal/jquery")
};
/**
 * React v15.0.2
 *
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

! function(e) {
  if ("object" == typeof exports && "undefined" != typeof module) module.exports = e();
  else if ("function" == typeof define && define.amd) define([], e);
  else {
    var t;
    t = "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this, t.React = e()
  }
}(function() {
  return function e(t, n, r) {
    function o(i, u) {
      if (!n[i]) {
        if (!t[i]) {
          var s = "function" == typeof require && require;
          if (!u && s) return s(i, !0);
          if (a) return a(i, !0);
          var l = new Error("Cannot find module '" + i + "'");
          throw l.code = "MODULE_NOT_FOUND", l
        }
        var c = n[i] = {
          exports: {}
        };
        t[i][0].call(c.exports, function(e) {
          var n = t[i][1][e];
          return o(n ? n : e)
        }, c, c.exports, e, t, n, r)
      }
      return n[i].exports
    }
    for (var a = "function" == typeof require && require, i = 0; i < r.length; i++) o(r[i]);
    return o
  }({
    1: [function(e, t, n) {
      "use strict";
      var r = e(40),
        o = e(150),
        a = {
          focusDOMComponent: function() {
            o(r.getNodeFromInstance(this))
          }
        };
      t.exports = a
    }, {
      150: 150,
      40: 40
    }],
    2: [function(e, t, n) {
      "use strict";

      function r() {
        var e = window.opera;
        return "object" == typeof e && "function" == typeof e.version && parseInt(e.version(), 10) <= 12
      }

      function o(e) {
        return (e.ctrlKey || e.altKey || e.metaKey) && !(e.ctrlKey && e.altKey)
      }

      function a(e) {
        switch (e) {
          case M.topCompositionStart:
            return S.compositionStart;
          case M.topCompositionEnd:
            return S.compositionEnd;
          case M.topCompositionUpdate:
            return S.compositionUpdate
        }
      }

      function i(e, t) {
        return e === M.topKeyDown && t.keyCode === _
      }

      function u(e, t) {
        switch (e) {
          case M.topKeyUp:
            return -1 !== b.indexOf(t.keyCode);
          case M.topKeyDown:
            return t.keyCode !== _;
          case M.topKeyPress:
          case M.topMouseDown:
          case M.topBlur:
            return !0;
          default:
            return !1
        }
      }

      function s(e) {
        var t = e.detail;
        return "object" == typeof t && "data" in t ? t.data : null
      }

      function l(e, t, n, r) {
        var o, l;
        if (E ? o = a(e) : R ? u(e, n) && (o = S.compositionEnd) : i(e, n) && (o = S.compositionStart), !o) return null;
        P && (R || o !== S.compositionStart ? o === S.compositionEnd && R && (l = R.getData()) : R = m.getPooled(r));
        var c = g.getPooled(o, t, n, r);
        if (l) c.data = l;
        else {
          var p = s(n);
          null !== p && (c.data = p)
        }
        return h.accumulateTwoPhaseDispatches(c), c
      }

      function c(e, t) {
        switch (e) {
          case M.topCompositionEnd:
            return s(t);
          case M.topKeyPress:
            var n = t.which;
            return n !== T ? null : (k = !0, w);
          case M.topTextInput:
            var r = t.data;
            return r === w && k ? null : r;
          default:
            return null
        }
      }

      function p(e, t) {
        if (R) {
          if (e === M.topCompositionEnd || u(e, t)) {
            var n = R.getData();
            return m.release(R), R = null, n
          }
          return null
        }
        switch (e) {
          case M.topPaste:
            return null;
          case M.topKeyPress:
            return t.which && !o(t) ? String.fromCharCode(t.which) : null;
          case M.topCompositionEnd:
            return P ? null : t.data;
          default:
            return null
        }
      }

      function d(e, t, n, r) {
        var o;
        if (o = N ? c(e, n) : p(e, n), !o) return null;
        var a = y.getPooled(S.beforeInput, t, n, r);
        return a.data = o, h.accumulateTwoPhaseDispatches(a), a
      }
      var f = e(16),
        h = e(20),
        v = e(142),
        m = e(21),
        g = e(99),
        y = e(103),
        C = e(160),
        b = [9, 13, 27, 32],
        _ = 229,
        E = v.canUseDOM && "CompositionEvent" in window,
        x = null;
      v.canUseDOM && "documentMode" in document && (x = document.documentMode);
      var N = v.canUseDOM && "TextEvent" in window && !x && !r(),
        P = v.canUseDOM && (!E || x && x > 8 && 11 >= x),
        T = 32,
        w = String.fromCharCode(T),
        M = f.topLevelTypes,
        S = {
          beforeInput: {
            phasedRegistrationNames: {
              bubbled: C({
                onBeforeInput: null
              }),
              captured: C({
                onBeforeInputCapture: null
              })
            },
            dependencies: [M.topCompositionEnd, M.topKeyPress, M.topTextInput, M.topPaste]
          },
          compositionEnd: {
            phasedRegistrationNames: {
              bubbled: C({
                onCompositionEnd: null
              }),
              captured: C({
                onCompositionEndCapture: null
              })
            },
            dependencies: [M.topBlur, M.topCompositionEnd, M.topKeyDown, M.topKeyPress, M.topKeyUp, M.topMouseDown]
          },
          compositionStart: {
            phasedRegistrationNames: {
              bubbled: C({
                onCompositionStart: null
              }),
              captured: C({
                onCompositionStartCapture: null
              })
            },
            dependencies: [M.topBlur, M.topCompositionStart, M.topKeyDown, M.topKeyPress, M.topKeyUp, M.topMouseDown]
          },
          compositionUpdate: {
            phasedRegistrationNames: {
              bubbled: C({
                onCompositionUpdate: null
              }),
              captured: C({
                onCompositionUpdateCapture: null
              })
            },
            dependencies: [M.topBlur, M.topCompositionUpdate, M.topKeyDown, M.topKeyPress, M.topKeyUp, M.topMouseDown]
          }
        },
        k = !1,
        R = null,
        D = {
          eventTypes: S,
          extractEvents: function(e, t, n, r) {
            return [l(e, t, n, r), d(e, t, n, r)]
          }
        };
      t.exports = D
    }, {
      103: 103,
      142: 142,
      16: 16,
      160: 160,
      20: 20,
      21: 21,
      99: 99
    }],
    3: [function(e, t, n) {
      "use strict";

      function r(e, t) {
        return e + t.charAt(0).toUpperCase() + t.substring(1)
      }
      var o = {
          animationIterationCount: !0,
          borderImageOutset: !0,
          borderImageSlice: !0,
          borderImageWidth: !0,
          boxFlex: !0,
          boxFlexGroup: !0,
          boxOrdinalGroup: !0,
          columnCount: !0,
          flex: !0,
          flexGrow: !0,
          flexPositive: !0,
          flexShrink: !0,
          flexNegative: !0,
          flexOrder: !0,
          gridRow: !0,
          gridColumn: !0,
          fontWeight: !0,
          lineClamp: !0,
          lineHeight: !0,
          opacity: !0,
          order: !0,
          orphans: !0,
          tabSize: !0,
          widows: !0,
          zIndex: !0,
          zoom: !0,
          fillOpacity: !0,
          floodOpacity: !0,
          stopOpacity: !0,
          strokeDasharray: !0,
          strokeDashoffset: !0,
          strokeMiterlimit: !0,
          strokeOpacity: !0,
          strokeWidth: !0
        },
        a = ["Webkit", "ms", "Moz", "O"];
      Object.keys(o).forEach(function(e) {
        a.forEach(function(t) {
          o[r(t, e)] = o[e]
        })
      });
      var i = {
          background: {
            backgroundAttachment: !0,
            backgroundColor: !0,
            backgroundImage: !0,
            backgroundPositionX: !0,
            backgroundPositionY: !0,
            backgroundRepeat: !0
          },
          backgroundPosition: {
            backgroundPositionX: !0,
            backgroundPositionY: !0
          },
          border: {
            borderWidth: !0,
            borderStyle: !0,
            borderColor: !0
          },
          borderBottom: {
            borderBottomWidth: !0,
            borderBottomStyle: !0,
            borderBottomColor: !0
          },
          borderLeft: {
            borderLeftWidth: !0,
            borderLeftStyle: !0,
            borderLeftColor: !0
          },
          borderRight: {
            borderRightWidth: !0,
            borderRightStyle: !0,
            borderRightColor: !0
          },
          borderTop: {
            borderTopWidth: !0,
            borderTopStyle: !0,
            borderTopColor: !0
          },
          font: {
            fontStyle: !0,
            fontVariant: !0,
            fontWeight: !0,
            fontSize: !0,
            lineHeight: !0,
            fontFamily: !0
          },
          outline: {
            outlineWidth: !0,
            outlineStyle: !0,
            outlineColor: !0
          }
        },
        u = {
          isUnitlessNumber: o,
          shorthandPropertyExpansions: i
        };
      t.exports = u
    }, {}],
    4: [function(e, t, n) {
      "use strict";
      var r = e(3),
        o = e(142),
        a = e(80),
        i = (e(144), e(116)),
        u = e(155),
        s = e(162),
        l = (e(164), s(function(e) {
          return u(e)
        })),
        c = !1,
        p = "cssFloat";
      if (o.canUseDOM) {
        var d = document.createElement("div").style;
        try {
          d.font = ""
        } catch (f) {
          c = !0
        }
        void 0 === document.documentElement.style.cssFloat && (p = "styleFloat")
      }
      var h = {
        createMarkupForStyles: function(e, t) {
          var n = "";
          for (var r in e)
            if (e.hasOwnProperty(r)) {
              var o = e[r];
              null != o && (n += l(r) + ":", n += i(r, o, t) + ";")
            }
          return n || null
        },
        setValueForStyles: function(e, t, n) {
          var o = e.style;
          for (var a in t)
            if (t.hasOwnProperty(a)) {
              var u = i(a, t[a], n);
              if ("float" !== a && "cssFloat" !== a || (a = p), u) o[a] = u;
              else {
                var s = c && r.shorthandPropertyExpansions[a];
                if (s)
                  for (var l in s) o[l] = "";
                else o[a] = ""
              }
            }
        }
      };
      a.measureMethods(h, "CSSPropertyOperations", {
        setValueForStyles: "setValueForStyles"
      }), t.exports = h
    }, {
      116: 116,
      142: 142,
      144: 144,
      155: 155,
      162: 162,
      164: 164,
      3: 3,
      80: 80
    }],
    5: [function(e, t, n) {
      "use strict";

      function r() {
        this._callbacks = null, this._contexts = null
      }
      var o = e(165),
        a = e(25),
        i = e(156);
      o(r.prototype, {
        enqueue: function(e, t) {
          this._callbacks = this._callbacks || [], this._contexts = this._contexts || [], this._callbacks.push(e), this._contexts.push(t)
        },
        notifyAll: function() {
          var e = this._callbacks,
            t = this._contexts;
          if (e) {
            e.length !== t.length ? i(!1) : void 0, this._callbacks = null, this._contexts = null;
            for (var n = 0; n < e.length; n++) e[n].call(t[n]);
            e.length = 0, t.length = 0
          }
        },
        checkpoint: function() {
          return this._callbacks ? this._callbacks.length : 0
        },
        rollback: function(e) {
          this._callbacks && (this._callbacks.length = e, this._contexts.length = e)
        },
        reset: function() {
          this._callbacks = null, this._contexts = null
        },
        destructor: function() {
          this.reset()
        }
      }), a.addPoolingTo(r), t.exports = r
    }, {
      156: 156,
      165: 165,
      25: 25
    }],
    6: [function(e, t, n) {
      "use strict";

      function r(e) {
        var t = e.nodeName && e.nodeName.toLowerCase();
        return "select" === t || "input" === t && "file" === e.type
      }

      function o(e) {
        var t = N.getPooled(k.change, D, e, P(e));
        b.accumulateTwoPhaseDispatches(t), x.batchedUpdates(a, t)
      }

      function a(e) {
        C.enqueueEvents(e), C.processEventQueue(!1)
      }

      function i(e, t) {
        R = e, D = t, R.attachEvent("onchange", o)
      }

      function u() {
        R && (R.detachEvent("onchange", o), R = null, D = null)
      }

      function s(e, t) {
        return e === S.topChange ? t : void 0
      }

      function l(e, t, n) {
        e === S.topFocus ? (u(), i(t, n)) : e === S.topBlur && u()
      }

      function c(e, t) {
        R = e, D = t, I = e.value, O = Object.getOwnPropertyDescriptor(e.constructor.prototype, "value"), Object.defineProperty(R, "value", U), R.attachEvent ? R.attachEvent("onpropertychange", d) : R.addEventListener("propertychange", d, !1)
      }

      function p() {
        R && (delete R.value, R.detachEvent ? R.detachEvent("onpropertychange", d) : R.removeEventListener("propertychange", d, !1), R = null, D = null, I = null, O = null)
      }

      function d(e) {
        if ("value" === e.propertyName) {
          var t = e.srcElement.value;
          t !== I && (I = t, o(e))
        }
      }

      function f(e, t) {
        return e === S.topInput ? t : void 0
      }

      function h(e, t, n) {
        e === S.topFocus ? (p(), c(t, n)) : e === S.topBlur && p()
      }

      function v(e, t) {
        return e !== S.topSelectionChange && e !== S.topKeyUp && e !== S.topKeyDown || !R || R.value === I ? void 0 : (I = R.value, D)
      }

      function m(e) {
        return e.nodeName && "input" === e.nodeName.toLowerCase() && ("checkbox" === e.type || "radio" === e.type)
      }

      function g(e, t) {
        return e === S.topClick ? t : void 0
      }
      var y = e(16),
        C = e(17),
        b = e(20),
        _ = e(142),
        E = e(40),
        x = e(92),
        N = e(101),
        P = e(124),
        T = e(131),
        w = e(132),
        M = e(160),
        S = y.topLevelTypes,
        k = {
          change: {
            phasedRegistrationNames: {
              bubbled: M({
                onChange: null
              }),
              captured: M({
                onChangeCapture: null
              })
            },
            dependencies: [S.topBlur, S.topChange, S.topClick, S.topFocus, S.topInput, S.topKeyDown, S.topKeyUp, S.topSelectionChange]
          }
        },
        R = null,
        D = null,
        I = null,
        O = null,
        A = !1;
      _.canUseDOM && (A = T("change") && (!("documentMode" in document) || document.documentMode > 8));
      var L = !1;
      _.canUseDOM && (L = T("input") && (!("documentMode" in document) || document.documentMode > 11));
      var U = {
          get: function() {
            return O.get.call(this)
          },
          set: function(e) {
            I = "" + e, O.set.call(this, e)
          }
        },
        F = {
          eventTypes: k,
          extractEvents: function(e, t, n, o) {
            var a, i, u = t ? E.getNodeFromInstance(t) : window;
            if (r(u) ? A ? a = s : i = l : w(u) ? L ? a = f : (a = v, i = h) : m(u) && (a = g), a) {
              var c = a(e, t);
              if (c) {
                var p = N.getPooled(k.change, c, n, o);
                return p.type = "change", b.accumulateTwoPhaseDispatches(p), p
              }
            }
            i && i(e, u, t)
          }
        };
      t.exports = F
    }, {
      101: 101,
      124: 124,
      131: 131,
      132: 132,
      142: 142,
      16: 16,
      160: 160,
      17: 17,
      20: 20,
      40: 40,
      92: 92
    }],
    7: [function(e, t, n) {
      "use strict";

      function r(e, t) {
        return Array.isArray(t) && (t = t[1]), t ? t.nextSibling : e.firstChild
      }

      function o(e, t, n) {
        c.insertTreeBefore(e, t, n)
      }

      function a(e, t, n) {
        Array.isArray(t) ? u(e, t[0], t[1], n) : g(e, t, n)
      }

      function i(e, t) {
        if (Array.isArray(t)) {
          var n = t[1];
          t = t[0], s(e, t, n), e.removeChild(n)
        }
        e.removeChild(t)
      }

      function u(e, t, n, r) {
        for (var o = t;;) {
          var a = o.nextSibling;
          if (g(e, o, r), o === n) break;
          o = a
        }
      }

      function s(e, t, n) {
        for (;;) {
          var r = t.nextSibling;
          if (r === n) break;
          e.removeChild(r)
        }
      }

      function l(e, t, n) {
        var r = e.parentNode,
          o = e.nextSibling;
        o === t ? n && g(r, document.createTextNode(n), o) : n ? (m(o, n), s(r, o, t)) : s(r, e, t)
      }
      var c = e(8),
        p = e(12),
        d = e(75),
        f = e(80),
        h = e(115),
        v = e(136),
        m = e(137),
        g = h(function(e, t, n) {
          e.insertBefore(t, n)
        }),
        y = {
          dangerouslyReplaceNodeWithMarkup: p.dangerouslyReplaceNodeWithMarkup,
          replaceDelimitedText: l,
          processUpdates: function(e, t) {
            for (var n = 0; n < t.length; n++) {
              var u = t[n];
              switch (u.type) {
                case d.INSERT_MARKUP:
                  o(e, u.content, r(e, u.afterNode));
                  break;
                case d.MOVE_EXISTING:
                  a(e, u.fromNode, r(e, u.afterNode));
                  break;
                case d.SET_MARKUP:
                  v(e, u.content);
                  break;
                case d.TEXT_CONTENT:
                  m(e, u.content);
                  break;
                case d.REMOVE_NODE:
                  i(e, u.fromNode)
              }
            }
          }
        };
      f.measureMethods(y, "DOMChildrenOperations", {
        replaceDelimitedText: "replaceDelimitedText"
      }), t.exports = y
    }, {
      115: 115,
      12: 12,
      136: 136,
      137: 137,
      75: 75,
      8: 8,
      80: 80
    }],
    8: [function(e, t, n) {
      "use strict";

      function r(e) {
        if (p) {
          var t = e.node,
            n = e.children;
          if (n.length)
            for (var r = 0; r < n.length; r++) d(t, n[r], null);
          else null != e.html ? t.innerHTML = e.html : null != e.text && c(t, e.text)
        }
      }

      function o(e, t) {
        e.parentNode.replaceChild(t.node, e), r(t)
      }

      function a(e, t) {
        p ? e.children.push(t) : e.node.appendChild(t.node)
      }

      function i(e, t) {
        p ? e.html = t : e.node.innerHTML = t
      }

      function u(e, t) {
        p ? e.text = t : c(e.node, t)
      }

      function s(e) {
        return {
          node: e,
          children: [],
          html: null,
          text: null
        }
      }
      var l = e(115),
        c = e(137),
        p = "undefined" != typeof document && "number" == typeof document.documentMode || "undefined" != typeof navigator && "string" == typeof navigator.userAgent && /\bEdge\/\d/.test(navigator.userAgent),
        d = l(function(e, t, n) {
          11 === t.node.nodeType ? (r(t), e.insertBefore(t.node, n)) : (e.insertBefore(t.node, n), r(t))
        });
      s.insertTreeBefore = d, s.replaceChildWithTree = o, s.queueChild = a, s.queueHTML = i, s.queueText = u, t.exports = s
    }, {
      115: 115,
      137: 137
    }],
    9: [function(e, t, n) {
      "use strict";
      var r = {
        html: "http://www.w3.org/1999/xhtml",
        mathml: "http://www.w3.org/1998/Math/MathML",
        svg: "http://www.w3.org/2000/svg"
      };
      t.exports = r
    }, {}],
    10: [function(e, t, n) {
      "use strict";

      function r(e, t) {
        return (e & t) === t
      }
      var o = e(156),
        a = {
          MUST_USE_PROPERTY: 1,
          HAS_SIDE_EFFECTS: 2,
          HAS_BOOLEAN_VALUE: 4,
          HAS_NUMERIC_VALUE: 8,
          HAS_POSITIVE_NUMERIC_VALUE: 24,
          HAS_OVERLOADED_BOOLEAN_VALUE: 32,
          injectDOMPropertyConfig: function(e) {
            var t = a,
              n = e.Properties || {},
              i = e.DOMAttributeNamespaces || {},
              s = e.DOMAttributeNames || {},
              l = e.DOMPropertyNames || {},
              c = e.DOMMutationMethods || {};
            e.isCustomAttribute && u._isCustomAttributeFunctions.push(e.isCustomAttribute);
            for (var p in n) {
              u.properties.hasOwnProperty(p) ? o(!1) : void 0;
              var d = p.toLowerCase(),
                f = n[p],
                h = {
                  attributeName: d,
                  attributeNamespace: null,
                  propertyName: p,
                  mutationMethod: null,
                  mustUseProperty: r(f, t.MUST_USE_PROPERTY),
                  hasSideEffects: r(f, t.HAS_SIDE_EFFECTS),
                  hasBooleanValue: r(f, t.HAS_BOOLEAN_VALUE),
                  hasNumericValue: r(f, t.HAS_NUMERIC_VALUE),
                  hasPositiveNumericValue: r(f, t.HAS_POSITIVE_NUMERIC_VALUE),
                  hasOverloadedBooleanValue: r(f, t.HAS_OVERLOADED_BOOLEAN_VALUE)
                };
              if (!h.mustUseProperty && h.hasSideEffects ? o(!1) : void 0, h.hasBooleanValue + h.hasNumericValue + h.hasOverloadedBooleanValue <= 1 ? void 0 : o(!1), s.hasOwnProperty(p)) {
                var v = s[p];
                h.attributeName = v
              }
              i.hasOwnProperty(p) && (h.attributeNamespace = i[p]), l.hasOwnProperty(p) && (h.propertyName = l[p]), c.hasOwnProperty(p) && (h.mutationMethod = c[p]), u.properties[p] = h
            }
          }
        },
        i = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD",
        u = {
          ID_ATTRIBUTE_NAME: "data-reactid",
          ROOT_ATTRIBUTE_NAME: "data-reactroot",
          ATTRIBUTE_NAME_START_CHAR: i,
          ATTRIBUTE_NAME_CHAR: i + "\\-.0-9\\uB7\\u0300-\\u036F\\u203F-\\u2040",
          properties: {},
          getPossibleStandardName: null,
          _isCustomAttributeFunctions: [],
          isCustomAttribute: function(e) {
            for (var t = 0; t < u._isCustomAttributeFunctions.length; t++) {
              var n = u._isCustomAttributeFunctions[t];
              if (n(e)) return !0
            }
            return !1
          },
          injection: a
        };
      t.exports = u
    }, {
      156: 156
    }],
    11: [function(e, t, n) {
      "use strict";

      function r(e) {
        return c.hasOwnProperty(e) ? !0 : l.hasOwnProperty(e) ? !1 : s.test(e) ? (c[e] = !0, !0) : (l[e] = !0, !1)
      }

      function o(e, t) {
        return null == t || e.hasBooleanValue && !t || e.hasNumericValue && isNaN(t) || e.hasPositiveNumericValue && 1 > t || e.hasOverloadedBooleanValue && t === !1
      }
      var a = e(10),
        i = (e(48), e(80)),
        u = e(134),
        s = (e(164), new RegExp("^[" + a.ATTRIBUTE_NAME_START_CHAR + "][" + a.ATTRIBUTE_NAME_CHAR + "]*$")),
        l = {},
        c = {},
        p = {
          createMarkupForID: function(e) {
            return a.ID_ATTRIBUTE_NAME + "=" + u(e)
          },
          setAttributeForID: function(e, t) {
            e.setAttribute(a.ID_ATTRIBUTE_NAME, t)
          },
          createMarkupForRoot: function() {
            return a.ROOT_ATTRIBUTE_NAME + '=""'
          },
          setAttributeForRoot: function(e) {
            e.setAttribute(a.ROOT_ATTRIBUTE_NAME, "")
          },
          createMarkupForProperty: function(e, t) {
            var n = a.properties.hasOwnProperty(e) ? a.properties[e] : null;
            if (n) {
              if (o(n, t)) return "";
              var r = n.attributeName;
              return n.hasBooleanValue || n.hasOverloadedBooleanValue && t === !0 ? r + '=""' : r + "=" + u(t)
            }
            return a.isCustomAttribute(e) ? null == t ? "" : e + "=" + u(t) : null
          },
          createMarkupForCustomAttribute: function(e, t) {
            return r(e) && null != t ? e + "=" + u(t) : ""
          },
          setValueForProperty: function(e, t, n) {
            var r = a.properties.hasOwnProperty(t) ? a.properties[t] : null;
            if (r) {
              var i = r.mutationMethod;
              if (i) i(e, n);
              else if (o(r, n)) this.deleteValueForProperty(e, t);
              else if (r.mustUseProperty) {
                var u = r.propertyName;
                r.hasSideEffects && "" + e[u] == "" + n || (e[u] = n)
              } else {
                var s = r.attributeName,
                  l = r.attributeNamespace;
                l ? e.setAttributeNS(l, s, "" + n) : r.hasBooleanValue || r.hasOverloadedBooleanValue && n === !0 ? e.setAttribute(s, "") : e.setAttribute(s, "" + n)
              }
            } else a.isCustomAttribute(t) && p.setValueForAttribute(e, t, n)
          },
          setValueForAttribute: function(e, t, n) {
            r(t) && (null == n ? e.removeAttribute(t) : e.setAttribute(t, "" + n))
          },
          deleteValueForProperty: function(e, t) {
            var n = a.properties.hasOwnProperty(t) ? a.properties[t] : null;
            if (n) {
              var r = n.mutationMethod;
              if (r) r(e, void 0);
              else if (n.mustUseProperty) {
                var o = n.propertyName;
                n.hasBooleanValue ? e[o] = !1 : n.hasSideEffects && "" + e[o] == "" || (e[o] = "")
              } else e.removeAttribute(n.attributeName)
            } else a.isCustomAttribute(t) && e.removeAttribute(t)
          }
        };
      i.measureMethods(p, "DOMPropertyOperations", {
        setValueForProperty: "setValueForProperty",
        setValueForAttribute: "setValueForAttribute",
        deleteValueForProperty: "deleteValueForProperty"
      }), t.exports = p
    }, {
      10: 10,
      134: 134,
      164: 164,
      48: 48,
      80: 80
    }],
    12: [function(e, t, n) {
      "use strict";

      function r(e) {
        return e.substring(1, e.indexOf(" "))
      }
      var o = e(8),
        a = e(142),
        i = e(147),
        u = e(148),
        s = e(152),
        l = e(156),
        c = /^(<[^ \/>]+)/,
        p = "data-danger-index",
        d = {
          dangerouslyRenderMarkup: function(e) {
            a.canUseDOM ? void 0 : l(!1);
            for (var t, n = {}, o = 0; o < e.length; o++) e[o] ? void 0 : l(!1), t = r(e[o]), t = s(t) ? t : "*", n[t] = n[t] || [], n[t][o] = e[o];
            var d = [],
              f = 0;
            for (t in n)
              if (n.hasOwnProperty(t)) {
                var h, v = n[t];
                for (h in v)
                  if (v.hasOwnProperty(h)) {
                    var m = v[h];
                    v[h] = m.replace(c, "$1 " + p + '="' + h + '" ')
                  }
                for (var g = i(v.join(""), u), y = 0; y < g.length; ++y) {
                  var C = g[y];
                  C.hasAttribute && C.hasAttribute(p) && (h = +C.getAttribute(p), C.removeAttribute(p), d.hasOwnProperty(h) ? l(!1) : void 0, d[h] = C, f += 1)
                }
              }
            return f !== d.length ? l(!1) : void 0, d.length !== e.length ? l(!1) : void 0, d
          },
          dangerouslyReplaceNodeWithMarkup: function(e, t) {
            if (a.canUseDOM ? void 0 : l(!1), t ? void 0 : l(!1), "HTML" === e.nodeName ? l(!1) : void 0, "string" == typeof t) {
              var n = i(t, u)[0];
              e.parentNode.replaceChild(n, e)
            } else o.replaceChildWithTree(e, t)
          }
        };
      t.exports = d
    }, {
      142: 142,
      147: 147,
      148: 148,
      152: 152,
      156: 156,
      8: 8
    }],
    13: [function(e, t, n) {
      "use strict";
      var r = e(160),
        o = [r({
          ResponderEventPlugin: null
        }), r({
          SimpleEventPlugin: null
        }), r({
          TapEventPlugin: null
        }), r({
          EnterLeaveEventPlugin: null
        }), r({
          ChangeEventPlugin: null
        }), r({
          SelectEventPlugin: null
        }), r({
          BeforeInputEventPlugin: null
        })];
      t.exports = o
    }, {
      160: 160
    }],
    14: [function(e, t, n) {
      "use strict";
      var r = {
          onClick: !0,
          onDoubleClick: !0,
          onMouseDown: !0,
          onMouseMove: !0,
          onMouseUp: !0,
          onClickCapture: !0,
          onDoubleClickCapture: !0,
          onMouseDownCapture: !0,
          onMouseMoveCapture: !0,
          onMouseUpCapture: !0
        },
        o = {
          getNativeProps: function(e, t) {
            if (!t.disabled) return t;
            var n = {};
            for (var o in t) !r[o] && t.hasOwnProperty(o) && (n[o] = t[o]);
            return n
          }
        };
      t.exports = o
    }, {}],
    15: [function(e, t, n) {
      "use strict";
      var r = e(16),
        o = e(20),
        a = e(40),
        i = e(105),
        u = e(160),
        s = r.topLevelTypes,
        l = {
          mouseEnter: {
            registrationName: u({
              onMouseEnter: null
            }),
            dependencies: [s.topMouseOut, s.topMouseOver]
          },
          mouseLeave: {
            registrationName: u({
              onMouseLeave: null
            }),
            dependencies: [s.topMouseOut, s.topMouseOver]
          }
        },
        c = {
          eventTypes: l,
          extractEvents: function(e, t, n, r) {
            if (e === s.topMouseOver && (n.relatedTarget || n.fromElement)) return null;
            if (e !== s.topMouseOut && e !== s.topMouseOver) return null;
            var u;
            if (r.window === r) u = r;
            else {
              var c = r.ownerDocument;
              u = c ? c.defaultView || c.parentWindow : window
            }
            var p, d;
            if (e === s.topMouseOut) {
              p = t;
              var f = n.relatedTarget || n.toElement;
              d = f ? a.getClosestInstanceFromNode(f) : null
            } else p = null, d = t;
            if (p === d) return null;
            var h = null == p ? u : a.getNodeFromInstance(p),
              v = null == d ? u : a.getNodeFromInstance(d),
              m = i.getPooled(l.mouseLeave, p, n, r);
            m.type = "mouseleave", m.target = h, m.relatedTarget = v;
            var g = i.getPooled(l.mouseEnter, d, n, r);
            return g.type = "mouseenter", g.target = v, g.relatedTarget = h, o.accumulateEnterLeaveDispatches(m, g, p, d), [m, g]
          }
        };
      t.exports = c
    }, {
      105: 105,
      16: 16,
      160: 160,
      20: 20,
      40: 40
    }],
    16: [function(e, t, n) {
      "use strict";
      var r = e(159),
        o = r({
          bubbled: null,
          captured: null
        }),
        a = r({
          topAbort: null,
          topAnimationEnd: null,
          topAnimationIteration: null,
          topAnimationStart: null,
          topBlur: null,
          topCanPlay: null,
          topCanPlayThrough: null,
          topChange: null,
          topClick: null,
          topCompositionEnd: null,
          topCompositionStart: null,
          topCompositionUpdate: null,
          topContextMenu: null,
          topCopy: null,
          topCut: null,
          topDoubleClick: null,
          topDrag: null,
          topDragEnd: null,
          topDragEnter: null,
          topDragExit: null,
          topDragLeave: null,
          topDragOver: null,
          topDragStart: null,
          topDrop: null,
          topDurationChange: null,
          topEmptied: null,
          topEncrypted: null,
          topEnded: null,
          topError: null,
          topFocus: null,
          topInput: null,
          topInvalid: null,
          topKeyDown: null,
          topKeyPress: null,
          topKeyUp: null,
          topLoad: null,
          topLoadedData: null,
          topLoadedMetadata: null,
          topLoadStart: null,
          topMouseDown: null,
          topMouseMove: null,
          topMouseOut: null,
          topMouseOver: null,
          topMouseUp: null,
          topPaste: null,
          topPause: null,
          topPlay: null,
          topPlaying: null,
          topProgress: null,
          topRateChange: null,
          topReset: null,
          topScroll: null,
          topSeeked: null,
          topSeeking: null,
          topSelectionChange: null,
          topStalled: null,
          topSubmit: null,
          topSuspend: null,
          topTextInput: null,
          topTimeUpdate: null,
          topTouchCancel: null,
          topTouchEnd: null,
          topTouchMove: null,
          topTouchStart: null,
          topTransitionEnd: null,
          topVolumeChange: null,
          topWaiting: null,
          topWheel: null
        }),
        i = {
          topLevelTypes: a,
          PropagationPhases: o
        };
      t.exports = i
    }, {
      159: 159
    }],
    17: [function(e, t, n) {
      "use strict";
      var r = e(18),
        o = e(19),
        a = e(63),
        i = e(112),
        u = e(120),
        s = e(156),
        l = {},
        c = null,
        p = function(e, t) {
          e && (o.executeDispatchesInOrder(e, t), e.isPersistent() || e.constructor.release(e))
        },
        d = function(e) {
          return p(e, !0)
        },
        f = function(e) {
          return p(e, !1)
        },
        h = {
          injection: {
            injectEventPluginOrder: r.injectEventPluginOrder,
            injectEventPluginsByName: r.injectEventPluginsByName
          },
          putListener: function(e, t, n) {
            "function" != typeof n ? s(!1) : void 0;
            var o = l[t] || (l[t] = {});
            o[e._rootNodeID] = n;
            var a = r.registrationNameModules[t];
            a && a.didPutListener && a.didPutListener(e, t, n)
          },
          getListener: function(e, t) {
            var n = l[t];
            return n && n[e._rootNodeID]
          },
          deleteListener: function(e, t) {
            var n = r.registrationNameModules[t];
            n && n.willDeleteListener && n.willDeleteListener(e, t);
            var o = l[t];
            o && delete o[e._rootNodeID]
          },
          deleteAllListeners: function(e) {
            for (var t in l)
              if (l[t][e._rootNodeID]) {
                var n = r.registrationNameModules[t];
                n && n.willDeleteListener && n.willDeleteListener(e, t), delete l[t][e._rootNodeID]
              }
          },
          extractEvents: function(e, t, n, o) {
            for (var a, u = r.plugins, s = 0; s < u.length; s++) {
              var l = u[s];
              if (l) {
                var c = l.extractEvents(e, t, n, o);
                c && (a = i(a, c))
              }
            }
            return a
          },
          enqueueEvents: function(e) {
            e && (c = i(c, e))
          },
          processEventQueue: function(e) {
            var t = c;
            c = null, e ? u(t, d) : u(t, f), c ? s(!1) : void 0, a.rethrowCaughtError()
          },
          __purge: function() {
            l = {}
          },
          __getListenerBank: function() {
            return l
          }
        };
      t.exports = h
    }, {
      112: 112,
      120: 120,
      156: 156,
      18: 18,
      19: 19,
      63: 63
    }],
    18: [function(e, t, n) {
      "use strict";

      function r() {
        if (u)
          for (var e in s) {
            var t = s[e],
              n = u.indexOf(e);
            if (n > -1 ? void 0 : i(!1), !l.plugins[n]) {
              t.extractEvents ? void 0 : i(!1), l.plugins[n] = t;
              var r = t.eventTypes;
              for (var a in r) o(r[a], t, a) ? void 0 : i(!1)
            }
          }
      }

      function o(e, t, n) {
        l.eventNameDispatchConfigs.hasOwnProperty(n) ? i(!1) : void 0, l.eventNameDispatchConfigs[n] = e;
        var r = e.phasedRegistrationNames;
        if (r) {
          for (var o in r)
            if (r.hasOwnProperty(o)) {
              var u = r[o];
              a(u, t, n)
            }
          return !0
        }
        return e.registrationName ? (a(e.registrationName, t, n), !0) : !1
      }

      function a(e, t, n) {
        l.registrationNameModules[e] ? i(!1) : void 0, l.registrationNameModules[e] = t, l.registrationNameDependencies[e] = t.eventTypes[n].dependencies
      }
      var i = e(156),
        u = null,
        s = {},
        l = {
          plugins: [],
          eventNameDispatchConfigs: {},
          registrationNameModules: {},
          registrationNameDependencies: {},
          possibleRegistrationNames: null,
          injectEventPluginOrder: function(e) {
            u ? i(!1) : void 0, u = Array.prototype.slice.call(e), r()
          },
          injectEventPluginsByName: function(e) {
            var t = !1;
            for (var n in e)
              if (e.hasOwnProperty(n)) {
                var o = e[n];
                s.hasOwnProperty(n) && s[n] === o || (s[n] ? i(!1) : void 0, s[n] = o, t = !0)
              }
            t && r()
          },
          getPluginModuleForEvent: function(e) {
            var t = e.dispatchConfig;
            if (t.registrationName) return l.registrationNameModules[t.registrationName] || null;
            for (var n in t.phasedRegistrationNames)
              if (t.phasedRegistrationNames.hasOwnProperty(n)) {
                var r = l.registrationNameModules[t.phasedRegistrationNames[n]];
                if (r) return r
              }
            return null
          },
          _resetEventPlugins: function() {
            u = null;
            for (var e in s) s.hasOwnProperty(e) && delete s[e];
            l.plugins.length = 0;
            var t = l.eventNameDispatchConfigs;
            for (var n in t) t.hasOwnProperty(n) && delete t[n];
            var r = l.registrationNameModules;
            for (var o in r) r.hasOwnProperty(o) && delete r[o]
          }
        };
      t.exports = l
    }, {
      156: 156
    }],
    19: [function(e, t, n) {
      "use strict";

      function r(e) {
        return e === y.topMouseUp || e === y.topTouchEnd || e === y.topTouchCancel
      }

      function o(e) {
        return e === y.topMouseMove || e === y.topTouchMove
      }

      function a(e) {
        return e === y.topMouseDown || e === y.topTouchStart
      }

      function i(e, t, n, r) {
        var o = e.type || "unknown-event";
        e.currentTarget = C.getNodeFromInstance(r), t ? v.invokeGuardedCallbackWithCatch(o, n, e) : v.invokeGuardedCallback(o, n, e), e.currentTarget = null
      }

      function u(e, t) {
        var n = e._dispatchListeners,
          r = e._dispatchInstances;
        if (Array.isArray(n))
          for (var o = 0; o < n.length && !e.isPropagationStopped(); o++) i(e, t, n[o], r[o]);
        else n && i(e, t, n, r);
        e._dispatchListeners = null, e._dispatchInstances = null
      }

      function s(e) {
        var t = e._dispatchListeners,
          n = e._dispatchInstances;
        if (Array.isArray(t)) {
          for (var r = 0; r < t.length && !e.isPropagationStopped(); r++)
            if (t[r](e, n[r])) return n[r]
        } else if (t && t(e, n)) return n;
        return null
      }

      function l(e) {
        var t = s(e);
        return e._dispatchInstances = null, e._dispatchListeners = null, t
      }

      function c(e) {
        var t = e._dispatchListeners,
          n = e._dispatchInstances;
        Array.isArray(t) ? m(!1) : void 0, e.currentTarget = t ? C.getNodeFromInstance(n) : null;
        var r = t ? t(e) : null;
        return e.currentTarget = null, e._dispatchListeners = null, e._dispatchInstances = null, r
      }

      function p(e) {
        return !!e._dispatchListeners
      }
      var d, f, h = e(16),
        v = e(63),
        m = e(156),
        g = (e(164), {
          injectComponentTree: function(e) {
            d = e
          },
          injectTreeTraversal: function(e) {
            f = e
          }
        }),
        y = h.topLevelTypes,
        C = {
          isEndish: r,
          isMoveish: o,
          isStartish: a,
          executeDirectDispatch: c,
          executeDispatchesInOrder: u,
          executeDispatchesInOrderStopAtTrue: l,
          hasDispatches: p,
          getInstanceFromNode: function(e) {
            return d.getInstanceFromNode(e)
          },
          getNodeFromInstance: function(e) {
            return d.getNodeFromInstance(e)
          },
          isAncestor: function(e, t) {
            return f.isAncestor(e, t)
          },
          getLowestCommonAncestor: function(e, t) {
            return f.getLowestCommonAncestor(e, t)
          },
          getParentInstance: function(e) {
            return f.getParentInstance(e)
          },
          traverseTwoPhase: function(e, t, n) {
            return f.traverseTwoPhase(e, t, n)
          },
          traverseEnterLeave: function(e, t, n, r, o) {
            return f.traverseEnterLeave(e, t, n, r, o)
          },
          injection: g
        };
      t.exports = C
    }, {
      156: 156,
      16: 16,
      164: 164,
      63: 63
    }],
    20: [function(e, t, n) {
      "use strict";

      function r(e, t, n) {
        var r = t.dispatchConfig.phasedRegistrationNames[n];
        return C(e, r)
      }

      function o(e, t, n) {
        var o = t ? y.bubbled : y.captured,
          a = r(e, n, o);
        a && (n._dispatchListeners = m(n._dispatchListeners, a), n._dispatchInstances = m(n._dispatchInstances, e))
      }

      function a(e) {
        e && e.dispatchConfig.phasedRegistrationNames && v.traverseTwoPhase(e._targetInst, o, e)
      }

      function i(e) {
        if (e && e.dispatchConfig.phasedRegistrationNames) {
          var t = e._targetInst,
            n = t ? v.getParentInstance(t) : null;
          v.traverseTwoPhase(n, o, e)
        }
      }

      function u(e, t, n) {
        if (n && n.dispatchConfig.registrationName) {
          var r = n.dispatchConfig.registrationName,
            o = C(e, r);
          o && (n._dispatchListeners = m(n._dispatchListeners, o), n._dispatchInstances = m(n._dispatchInstances, e))
        }
      }

      function s(e) {
        e && e.dispatchConfig.registrationName && u(e._targetInst, null, e)
      }

      function l(e) {
        g(e, a)
      }

      function c(e) {
        g(e, i)
      }

      function p(e, t, n, r) {
        v.traverseEnterLeave(n, r, u, e, t)
      }

      function d(e) {
        g(e, s)
      }
      var f = e(16),
        h = e(17),
        v = e(19),
        m = e(112),
        g = e(120),
        y = (e(164), f.PropagationPhases),
        C = h.getListener,
        b = {
          accumulateTwoPhaseDispatches: l,
          accumulateTwoPhaseDispatchesSkipTarget: c,
          accumulateDirectDispatches: d,
          accumulateEnterLeaveDispatches: p
        };
      t.exports = b
    }, {
      112: 112,
      120: 120,
      16: 16,
      164: 164,
      17: 17,
      19: 19
    }],
    21: [function(e, t, n) {
      "use strict";

      function r(e) {
        this._root = e, this._startText = this.getText(), this._fallbackText = null
      }
      var o = e(165),
        a = e(25),
        i = e(128);
      o(r.prototype, {
        destructor: function() {
          this._root = null, this._startText = null, this._fallbackText = null
        },
        getText: function() {
          return "value" in this._root ? this._root.value : this._root[i()]
        },
        getData: function() {
          if (this._fallbackText) return this._fallbackText;
          var e, t, n = this._startText,
            r = n.length,
            o = this.getText(),
            a = o.length;
          for (e = 0; r > e && n[e] === o[e]; e++);
          var i = r - e;
          for (t = 1; i >= t && n[r - t] === o[a - t]; t++);
          var u = t > 1 ? 1 - t : void 0;
          return this._fallbackText = o.slice(e, u), this._fallbackText
        }
      }), a.addPoolingTo(r), t.exports = r
    }, {
      128: 128,
      165: 165,
      25: 25
    }],
    22: [function(e, t, n) {
      "use strict";
      var r = e(10),
        o = r.injection.MUST_USE_PROPERTY,
        a = r.injection.HAS_BOOLEAN_VALUE,
        i = r.injection.HAS_SIDE_EFFECTS,
        u = r.injection.HAS_NUMERIC_VALUE,
        s = r.injection.HAS_POSITIVE_NUMERIC_VALUE,
        l = r.injection.HAS_OVERLOADED_BOOLEAN_VALUE,
        c = {
          isCustomAttribute: RegExp.prototype.test.bind(new RegExp("^(data|aria)-[" + r.ATTRIBUTE_NAME_CHAR + "]*$")),
          Properties: {
            accept: 0,
            acceptCharset: 0,
            accessKey: 0,
            action: 0,
            allowFullScreen: a,
            allowTransparency: 0,
            alt: 0,
            async: a,
            autoComplete: 0,
            autoPlay: a,
            capture: a,
            cellPadding: 0,
            cellSpacing: 0,
            charSet: 0,
            challenge: 0,
            checked: o | a,
            cite: 0,
            classID: 0,
            className: 0,
            cols: s,
            colSpan: 0,
            content: 0,
            contentEditable: 0,
            contextMenu: 0,
            controls: a,
            coords: 0,
            crossOrigin: 0,
            data: 0,
            dateTime: 0,
            "default": a,
            defer: a,
            dir: 0,
            disabled: a,
            download: l,
            draggable: 0,
            encType: 0,
            form: 0,
            formAction: 0,
            formEncType: 0,
            formMethod: 0,
            formNoValidate: a,
            formTarget: 0,
            frameBorder: 0,
            headers: 0,
            height: 0,
            hidden: a,
            high: 0,
            href: 0,
            hrefLang: 0,
            htmlFor: 0,
            httpEquiv: 0,
            icon: 0,
            id: 0,
            inputMode: 0,
            integrity: 0,
            is: 0,
            keyParams: 0,
            keyType: 0,
            kind: 0,
            label: 0,
            lang: 0,
            list: 0,
            loop: a,
            low: 0,
            manifest: 0,
            marginHeight: 0,
            marginWidth: 0,
            max: 0,
            maxLength: 0,
            media: 0,
            mediaGroup: 0,
            method: 0,
            min: 0,
            minLength: 0,
            multiple: o | a,
            muted: o | a,
            name: 0,
            nonce: 0,
            noValidate: a,
            open: a,
            optimum: 0,
            pattern: 0,
            placeholder: 0,
            poster: 0,
            preload: 0,
            profile: 0,
            radioGroup: 0,
            readOnly: a,
            rel: 0,
            required: a,
            reversed: a,
            role: 0,
            rows: s,
            rowSpan: u,
            sandbox: 0,
            scope: 0,
            scoped: a,
            scrolling: 0,
            seamless: a,
            selected: o | a,
            shape: 0,
            size: s,
            sizes: 0,
            span: s,
            spellCheck: 0,
            src: 0,
            srcDoc: 0,
            srcLang: 0,
            srcSet: 0,
            start: u,
            step: 0,
            style: 0,
            summary: 0,
            tabIndex: 0,
            target: 0,
            title: 0,
            type: 0,
            useMap: 0,
            value: o | i,
            width: 0,
            wmode: 0,
            wrap: 0,
            about: 0,
            datatype: 0,
            inlist: 0,
            prefix: 0,
            property: 0,
            resource: 0,
            "typeof": 0,
            vocab: 0,
            autoCapitalize: 0,
            autoCorrect: 0,
            autoSave: 0,
            color: 0,
            itemProp: 0,
            itemScope: a,
            itemType: 0,
            itemID: 0,
            itemRef: 0,
            results: 0,
            security: 0,
            unselectable: 0
          },
          DOMAttributeNames: {
            acceptCharset: "accept-charset",
            className: "class",
            htmlFor: "for",
            httpEquiv: "http-equiv"
          },
          DOMPropertyNames: {}
        };
      t.exports = c
    }, {
      10: 10
    }],
    23: [function(e, t, n) {
      "use strict";

      function r(e) {
        var t = /[=:]/g,
          n = {
            "=": "=0",
            ":": "=2"
          },
          r = ("" + e).replace(t, function(e) {
            return n[e]
          });
        return "$" + r
      }

      function o(e) {
        var t = /(=0|=2)/g,
          n = {
            "=0": "=",
            "=2": ":"
          },
          r = "." === e[0] && "$" === e[1] ? e.substring(2) : e.substring(1);
        return ("" + r).replace(t, function(e) {
          return n[e]
        })
      }
      var a = {
        escape: r,
        unescape: o
      };
      t.exports = a
    }, {}],
    24: [function(e, t, n) {
      "use strict";

      function r(e) {
        null != e.checkedLink && null != e.valueLink ? l(!1) : void 0
      }

      function o(e) {
        r(e), null != e.value || null != e.onChange ? l(!1) : void 0
      }

      function a(e) {
        r(e), null != e.checked || null != e.onChange ? l(!1) : void 0
      }

      function i(e) {
        if (e) {
          var t = e.getName();
          if (t) return " Check the render method of `" + t + "`."
        }
        return ""
      }
      var u = e(83),
        s = e(82),
        l = e(156),
        c = (e(164), {
          button: !0,
          checkbox: !0,
          image: !0,
          hidden: !0,
          radio: !0,
          reset: !0,
          submit: !0
        }),
        p = {
          value: function(e, t, n) {
            return !e[t] || c[e.type] || e.onChange || e.readOnly || e.disabled ? null : new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.")
          },
          checked: function(e, t, n) {
            return !e[t] || e.onChange || e.readOnly || e.disabled ? null : new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.")
          },
          onChange: u.func
        },
        d = {},
        f = {
          checkPropTypes: function(e, t, n) {
            for (var r in p) {
              if (p.hasOwnProperty(r)) var o = p[r](t, r, e, s.prop);
              o instanceof Error && !(o.message in d) && (d[o.message] = !0, i(n))
            }
          },
          getValue: function(e) {
            return e.valueLink ? (o(e), e.valueLink.value) : e.value
          },
          getChecked: function(e) {
            return e.checkedLink ? (a(e), e.checkedLink.value) : e.checked
          },
          executeOnChange: function(e, t) {
            return e.valueLink ? (o(e), e.valueLink.requestChange(t.target.value)) : e.checkedLink ? (a(e), e.checkedLink.requestChange(t.target.checked)) : e.onChange ? e.onChange.call(void 0, t) : void 0
          }
        };
      t.exports = f
    }, {
      156: 156,
      164: 164,
      82: 82,
      83: 83
    }],
    25: [function(e, t, n) {
      "use strict";
      var r = e(156),
        o = function(e) {
          var t = this;
          if (t.instancePool.length) {
            var n = t.instancePool.pop();
            return t.call(n, e), n
          }
          return new t(e)
        },
        a = function(e, t) {
          var n = this;
          if (n.instancePool.length) {
            var r = n.instancePool.pop();
            return n.call(r, e, t), r
          }
          return new n(e, t)
        },
        i = function(e, t, n) {
          var r = this;
          if (r.instancePool.length) {
            var o = r.instancePool.pop();
            return r.call(o, e, t, n), o
          }
          return new r(e, t, n)
        },
        u = function(e, t, n, r) {
          var o = this;
          if (o.instancePool.length) {
            var a = o.instancePool.pop();
            return o.call(a, e, t, n, r), a
          }
          return new o(e, t, n, r)
        },
        s = function(e, t, n, r, o) {
          var a = this;
          if (a.instancePool.length) {
            var i = a.instancePool.pop();
            return a.call(i, e, t, n, r, o), i
          }
          return new a(e, t, n, r, o)
        },
        l = function(e) {
          var t = this;
          e instanceof t ? void 0 : r(!1), e.destructor(), t.instancePool.length < t.poolSize && t.instancePool.push(e)
        },
        c = 10,
        p = o,
        d = function(e, t) {
          var n = e;
          return n.instancePool = [], n.getPooled = t || p, n.poolSize || (n.poolSize = c), n.release = l, n
        },
        f = {
          addPoolingTo: d,
          oneArgumentPooler: o,
          twoArgumentPooler: a,
          threeArgumentPooler: i,
          fourArgumentPooler: u,
          fiveArgumentPooler: s
        };
      t.exports = f
    }, {
      156: 156
    }],
    26: [function(e, t, n) {
      "use strict";
      var r = e(165),
        o = e(29),
        a = e(31),
        i = e(30),
        u = e(44),
        s = e(60),
        l = (e(61), e(83)),
        c = e(93),
        p = e(133),
        d = (e(164), s.createElement),
        f = s.createFactory,
        h = s.cloneElement,
        v = r,
        m = {
          Children: {
            map: o.map,
            forEach: o.forEach,
            count: o.count,
            toArray: o.toArray,
            only: p
          },
          Component: a,
          createElement: d,
          cloneElement: h,
          isValidElement: s.isValidElement,
          PropTypes: l,
          createClass: i.createClass,
          createFactory: f,
          createMixin: function(e) {
            return e
          },
          DOM: u,
          version: c,
          __spread: v
        };
      t.exports = m
    }, {
      133: 133,
      164: 164,
      165: 165,
      29: 29,
      30: 30,
      31: 31,
      44: 44,
      60: 60,
      61: 61,
      83: 83,
      93: 93
    }],
    27: [function(e, t, n) {
      "use strict";

      function r(e) {
        return Object.prototype.hasOwnProperty.call(e, m) || (e[m] = h++, d[e[m]] = {}), d[e[m]]
      }
      var o, a = e(165),
        i = e(16),
        u = e(18),
        s = e(64),
        l = e(111),
        c = e(129),
        p = e(131),
        d = {},
        f = !1,
        h = 0,
        v = {
          topAbort: "abort",
          topAnimationEnd: c("animationend") || "animationend",
          topAnimationIteration: c("animationiteration") || "animationiteration",
          topAnimationStart: c("animationstart") || "animationstart",
          topBlur: "blur",
          topCanPlay: "canplay",
          topCanPlayThrough: "canplaythrough",
          topChange: "change",
          topClick: "click",
          topCompositionEnd: "compositionend",
          topCompositionStart: "compositionstart",
          topCompositionUpdate: "compositionupdate",
          topContextMenu: "contextmenu",
          topCopy: "copy",
          topCut: "cut",
          topDoubleClick: "dblclick",
          topDrag: "drag",
          topDragEnd: "dragend",
          topDragEnter: "dragenter",
          topDragExit: "dragexit",
          topDragLeave: "dragleave",
          topDragOver: "dragover",
          topDragStart: "dragstart",
          topDrop: "drop",
          topDurationChange: "durationchange",
          topEmptied: "emptied",
          topEncrypted: "encrypted",
          topEnded: "ended",
          topError: "error",
          topFocus: "focus",
          topInput: "input",
          topKeyDown: "keydown",
          topKeyPress: "keypress",
          topKeyUp: "keyup",
          topLoadedData: "loadeddata",
          topLoadedMetadata: "loadedmetadata",
          topLoadStart: "loadstart",
          topMouseDown: "mousedown",
          topMouseMove: "mousemove",
          topMouseOut: "mouseout",
          topMouseOver: "mouseover",
          topMouseUp: "mouseup",
          topPaste: "paste",
          topPause: "pause",
          topPlay: "play",
          topPlaying: "playing",
          topProgress: "progress",
          topRateChange: "ratechange",
          topScroll: "scroll",
          topSeeked: "seeked",
          topSeeking: "seeking",
          topSelectionChange: "selectionchange",
          topStalled: "stalled",
          topSuspend: "suspend",
          topTextInput: "textInput",
          topTimeUpdate: "timeupdate",
          topTouchCancel: "touchcancel",
          topTouchEnd: "touchend",
          topTouchMove: "touchmove",
          topTouchStart: "touchstart",
          topTransitionEnd: c("transitionend") || "transitionend",
          topVolumeChange: "volumechange",
          topWaiting: "waiting",
          topWheel: "wheel"
        },
        m = "_reactListenersID" + String(Math.random()).slice(2),
        g = a({}, s, {
          ReactEventListener: null,
          injection: {
            injectReactEventListener: function(e) {
              e.setHandleTopLevel(g.handleTopLevel), g.ReactEventListener = e
            }
          },
          setEnabled: function(e) {
            g.ReactEventListener && g.ReactEventListener.setEnabled(e)
          },
          isEnabled: function() {
            return !(!g.ReactEventListener || !g.ReactEventListener.isEnabled())
          },
          listenTo: function(e, t) {
            for (var n = t, o = r(n), a = u.registrationNameDependencies[e], s = i.topLevelTypes, l = 0; l < a.length; l++) {
              var c = a[l];
              o.hasOwnProperty(c) && o[c] || (c === s.topWheel ? p("wheel") ? g.ReactEventListener.trapBubbledEvent(s.topWheel, "wheel", n) : p("mousewheel") ? g.ReactEventListener.trapBubbledEvent(s.topWheel, "mousewheel", n) : g.ReactEventListener.trapBubbledEvent(s.topWheel, "DOMMouseScroll", n) : c === s.topScroll ? p("scroll", !0) ? g.ReactEventListener.trapCapturedEvent(s.topScroll, "scroll", n) : g.ReactEventListener.trapBubbledEvent(s.topScroll, "scroll", g.ReactEventListener.WINDOW_HANDLE) : c === s.topFocus || c === s.topBlur ? (p("focus", !0) ? (g.ReactEventListener.trapCapturedEvent(s.topFocus, "focus", n), g.ReactEventListener.trapCapturedEvent(s.topBlur, "blur", n)) : p("focusin") && (g.ReactEventListener.trapBubbledEvent(s.topFocus, "focusin", n), g.ReactEventListener.trapBubbledEvent(s.topBlur, "focusout", n)), o[s.topBlur] = !0, o[s.topFocus] = !0) : v.hasOwnProperty(c) && g.ReactEventListener.trapBubbledEvent(c, v[c], n), o[c] = !0)
            }
          },
          trapBubbledEvent: function(e, t, n) {
            return g.ReactEventListener.trapBubbledEvent(e, t, n)
          },
          trapCapturedEvent: function(e, t, n) {
            return g.ReactEventListener.trapCapturedEvent(e, t, n)
          },
          ensureScrollValueMonitoring: function() {
            if (void 0 === o && (o = document.createEvent && "pageX" in document.createEvent("MouseEvent")), !o && !f) {
              var e = l.refreshScrollValues;
              g.ReactEventListener.monitorScrollValue(e), f = !0
            }
          }
        });
      t.exports = g
    }, {
      111: 111,
      129: 129,
      131: 131,
      16: 16,
      165: 165,
      18: 18,
      64: 64
    }],
    28: [function(e, t, n) {
      "use strict";

      function r(e, t, n) {
        var r = void 0 === e[n];
        null != t && r && (e[n] = a(t))
      }
      var o = e(85),
        a = e(130),
        i = (e(23), e(138)),
        u = e(139),
        s = (e(164), {
          instantiateChildren: function(e, t, n) {
            if (null == e) return null;
            var o = {};
            return u(e, r, o), o
          },
          updateChildren: function(e, t, n, r, u) {
            if (t || e) {
              var s, l;
              for (s in t)
                if (t.hasOwnProperty(s)) {
                  l = e && e[s];
                  var c = l && l._currentElement,
                    p = t[s];
                  if (null != l && i(c, p)) o.receiveComponent(l, p, r, u), t[s] = l;
                  else {
                    l && (n[s] = o.getNativeNode(l), o.unmountComponent(l, !1));
                    var d = a(p);
                    t[s] = d
                  }
                }
              for (s in e) !e.hasOwnProperty(s) || t && t.hasOwnProperty(s) || (l = e[s], n[s] = o.getNativeNode(l), o.unmountComponent(l, !1))
            }
          },
          unmountChildren: function(e, t) {
            for (var n in e)
              if (e.hasOwnProperty(n)) {
                var r = e[n];
                o.unmountComponent(r, t)
              }
          }
        });
      t.exports = s
    }, {
      130: 130,
      138: 138,
      139: 139,
      164: 164,
      23: 23,
      85: 85
    }],
    29: [function(e, t, n) {
      "use strict";

      function r(e) {
        return ("" + e).replace(b, "$&/")
      }

      function o(e, t) {
        this.func = e, this.context = t, this.count = 0
      }

      function a(e, t, n) {
        var r = e.func,
          o = e.context;
        r.call(o, t, e.count++)
      }

      function i(e, t, n) {
        if (null == e) return e;
        var r = o.getPooled(t, n);
        g(e, a, r), o.release(r)
      }

      function u(e, t, n, r) {
        this.result = e, this.keyPrefix = t, this.func = n, this.context = r, this.count = 0
      }

      function s(e, t, n) {
        var o = e.result,
          a = e.keyPrefix,
          i = e.func,
          u = e.context,
          s = i.call(u, t, e.count++);
        Array.isArray(s) ? l(s, o, n, m.thatReturnsArgument) : null != s && (v.isValidElement(s) && (s = v.cloneAndReplaceKey(s, a + (!s.key || t && t.key === s.key ? "" : r(s.key) + "/") + n)), o.push(s))
      }

      function l(e, t, n, o, a) {
        var i = "";
        null != n && (i = r(n) + "/");
        var l = u.getPooled(t, i, o, a);
        g(e, s, l), u.release(l)
      }

      function c(e, t, n) {
        if (null == e) return e;
        var r = [];
        return l(e, r, null, t, n), r
      }

      function p(e, t, n) {
        return null
      }

      function d(e, t) {
        return g(e, p, null)
      }

      function f(e) {
        var t = [];
        return l(e, t, null, m.thatReturnsArgument), t
      }
      var h = e(25),
        v = e(60),
        m = e(148),
        g = e(139),
        y = h.twoArgumentPooler,
        C = h.fourArgumentPooler,
        b = /\/+/g;
      o.prototype.destructor = function() {
        this.func = null, this.context = null, this.count = 0
      }, h.addPoolingTo(o, y), u.prototype.destructor = function() {
        this.result = null, this.keyPrefix = null, this.func = null, this.context = null, this.count = 0
      }, h.addPoolingTo(u, C);
      var _ = {
        forEach: i,
        map: c,
        mapIntoWithKeyPrefixInternal: l,
        count: d,
        toArray: f
      };
      t.exports = _
    }, {
      139: 139,
      148: 148,
      25: 25,
      60: 60
    }],
    30: [function(e, t, n) {
      "use strict";

      function r(e, t) {
        var n = E.hasOwnProperty(t) ? E[t] : null;
        N.hasOwnProperty(t) && (n !== b.OVERRIDE_BASE ? m(!1) : void 0), e && (n !== b.DEFINE_MANY && n !== b.DEFINE_MANY_MERGED ? m(!1) : void 0)
      }

      function o(e, t) {
        if (t) {
          "function" == typeof t ? m(!1) : void 0, f.isValidElement(t) ? m(!1) : void 0;
          var n = e.prototype,
            o = n.__reactAutoBindPairs;
          t.hasOwnProperty(C) && x.mixins(e, t.mixins);
          for (var a in t)
            if (t.hasOwnProperty(a) && a !== C) {
              var i = t[a],
                l = n.hasOwnProperty(a);
              if (r(l, a), x.hasOwnProperty(a)) x[a](e, i);
              else {
                var c = E.hasOwnProperty(a),
                  p = "function" == typeof i,
                  d = p && !c && !l && t.autobind !== !1;
                if (d) o.push(a, i), n[a] = i;
                else if (l) {
                  var h = E[a];
                  !c || h !== b.DEFINE_MANY_MERGED && h !== b.DEFINE_MANY ? m(!1) : void 0, h === b.DEFINE_MANY_MERGED ? n[a] = u(n[a], i) : h === b.DEFINE_MANY && (n[a] = s(n[a], i))
                } else n[a] = i
              }
            }
        }
      }

      function a(e, t) {
        if (t)
          for (var n in t) {
            var r = t[n];
            if (t.hasOwnProperty(n)) {
              var o = n in x;
              o ? m(!1) : void 0;
              var a = n in e;
              a ? m(!1) : void 0, e[n] = r
            }
          }
      }

      function i(e, t) {
        e && t && "object" == typeof e && "object" == typeof t ? void 0 : m(!1);
        for (var n in t) t.hasOwnProperty(n) && (void 0 !== e[n] ? m(!1) : void 0, e[n] = t[n]);
        return e
      }

      function u(e, t) {
        return function() {
          var n = e.apply(this, arguments),
            r = t.apply(this, arguments);
          if (null == n) return r;
          if (null == r) return n;
          var o = {};
          return i(o, n), i(o, r), o
        }
      }

      function s(e, t) {
        return function() {
          e.apply(this, arguments), t.apply(this, arguments)
        }
      }

      function l(e, t) {
        var n = t.bind(e);
        return n
      }

      function c(e) {
        for (var t = e.__reactAutoBindPairs, n = 0; n < t.length; n += 2) {
          var r = t[n],
            o = t[n + 1];
          e[r] = l(e, o)
        }
      }
      var p = e(165),
        d = e(31),
        f = e(60),
        h = (e(82), e(81), e(78)),
        v = e(149),
        m = e(156),
        g = e(159),
        y = e(160),
        C = (e(164), y({
          mixins: null
        })),
        b = g({
          DEFINE_ONCE: null,
          DEFINE_MANY: null,
          OVERRIDE_BASE: null,
          DEFINE_MANY_MERGED: null
        }),
        _ = [],
        E = {
          mixins: b.DEFINE_MANY,
          statics: b.DEFINE_MANY,
          propTypes: b.DEFINE_MANY,
          contextTypes: b.DEFINE_MANY,
          childContextTypes: b.DEFINE_MANY,
          getDefaultProps: b.DEFINE_MANY_MERGED,
          getInitialState: b.DEFINE_MANY_MERGED,
          getChildContext: b.DEFINE_MANY_MERGED,
          render: b.DEFINE_ONCE,
          componentWillMount: b.DEFINE_MANY,
          componentDidMount: b.DEFINE_MANY,
          componentWillReceiveProps: b.DEFINE_MANY,
          shouldComponentUpdate: b.DEFINE_ONCE,
          componentWillUpdate: b.DEFINE_MANY,
          componentDidUpdate: b.DEFINE_MANY,
          componentWillUnmount: b.DEFINE_MANY,
          updateComponent: b.OVERRIDE_BASE
        },
        x = {
          displayName: function(e, t) {
            e.displayName = t
          },
          mixins: function(e, t) {
            if (t)
              for (var n = 0; n < t.length; n++) o(e, t[n])
          },
          childContextTypes: function(e, t) {
            e.childContextTypes = p({}, e.childContextTypes, t)
          },
          contextTypes: function(e, t) {
            e.contextTypes = p({}, e.contextTypes, t)
          },
          getDefaultProps: function(e, t) {
            e.getDefaultProps ? e.getDefaultProps = u(e.getDefaultProps, t) : e.getDefaultProps = t
          },
          propTypes: function(e, t) {
            e.propTypes = p({}, e.propTypes, t)
          },
          statics: function(e, t) {
            a(e, t)
          },
          autobind: function() {}
        },
        N = {
          replaceState: function(e, t) {
            this.updater.enqueueReplaceState(this, e), t && this.updater.enqueueCallback(this, t, "replaceState")
          },
          isMounted: function() {
            return this.updater.isMounted(this)
          }
        },
        P = function() {};
      p(P.prototype, d.prototype, N);
      var T = {
        createClass: function(e) {
          var t = function(e, t, n) {
            this.__reactAutoBindPairs.length && c(this), this.props = e, this.context = t, this.refs = v, this.updater = n || h, this.state = null;
            var r = this.getInitialState ? this.getInitialState() : null;
            "object" != typeof r || Array.isArray(r) ? m(!1) : void 0, this.state = r
          };
          t.prototype = new P, t.prototype.constructor = t, t.prototype.__reactAutoBindPairs = [], _.forEach(o.bind(null, t)), o(t, e), t.getDefaultProps && (t.defaultProps = t.getDefaultProps()), t.prototype.render ? void 0 : m(!1);
          for (var n in E) t.prototype[n] || (t.prototype[n] = null);
          return t
        },
        injection: {
          injectMixin: function(e) {
            _.push(e)
          }
        }
      };
      t.exports = T
    }, {
      149: 149,
      156: 156,
      159: 159,
      160: 160,
      164: 164,
      165: 165,
      31: 31,
      60: 60,
      78: 78,
      81: 81,
      82: 82
    }],
    31: [function(e, t, n) {
      "use strict";

      function r(e, t, n) {
        this.props = e, this.context = t, this.refs = a, this.updater = n || o
      }
      var o = e(78),
        a = (e(70), e(114), e(149)),
        i = e(156);
      e(164);
      r.prototype.isReactComponent = {}, r.prototype.setState = function(e, t) {
        "object" != typeof e && "function" != typeof e && null != e ? i(!1) : void 0, this.updater.enqueueSetState(this, e), t && this.updater.enqueueCallback(this, t, "setState")
      }, r.prototype.forceUpdate = function(e) {
        this.updater.enqueueForceUpdate(this), e && this.updater.enqueueCallback(this, e, "forceUpdate")
      };
      t.exports = r
    }, {
      114: 114,
      149: 149,
      156: 156,
      164: 164,
      70: 70,
      78: 78
    }],
    32: [function(e, t, n) {
      "use strict";
      var r = e(7),
        o = e(46),
        a = e(80),
        i = {
          processChildrenUpdates: o.dangerouslyProcessChildrenUpdates,
          replaceNodeWithMarkup: r.dangerouslyReplaceNodeWithMarkup,
          unmountIDFromEnvironment: function(e) {}
        };
      a.measureMethods(i, "ReactComponentBrowserEnvironment", {
        replaceNodeWithMarkup: "replaceNodeWithMarkup"
      }), t.exports = i
    }, {
      46: 46,
      7: 7,
      80: 80
    }],
    33: [function(e, t, n) {
      "use strict";
      var r = e(156),
        o = !1,
        a = {
          unmountIDFromEnvironment: null,
          replaceNodeWithMarkup: null,
          processChildrenUpdates: null,
          injection: {
            injectEnvironment: function(e) {
              o ? r(!1) : void 0, a.unmountIDFromEnvironment = e.unmountIDFromEnvironment, a.replaceNodeWithMarkup = e.replaceNodeWithMarkup, a.processChildrenUpdates = e.processChildrenUpdates, o = !0
            }
          }
        };
      t.exports = a
    }, {
      156: 156
    }],
    34: [function(e, t, n) {
      "use strict";

      function r(e) {
        var t = e._currentElement._owner || null;
        if (t) {
          var n = t.getName();
          if (n) return " Check the render method of `" + n + "`."
        }
        return ""
      }

      function o(e) {}

      function a(e, t) {}

      function i(e) {
        return e.prototype && e.prototype.isReactComponent
      }
      var u = e(165),
        s = e(33),
        l = e(35),
        c = e(60),
        p = e(63),
        d = e(69),
        f = (e(70), e(77)),
        h = e(80),
        v = e(82),
        m = (e(81), e(85)),
        g = e(91),
        y = e(149),
        C = e(156),
        b = e(138);
      e(164);
      o.prototype.render = function() {
        var e = d.get(this)._currentElement.type,
          t = e(this.props, this.context, this.updater);
        return a(e, t), t
      };
      var _ = 1,
        E = {
          construct: function(e) {
            this._currentElement = e, this._rootNodeID = null, this._instance = null, this._nativeParent = null, this._nativeContainerInfo = null, this._pendingElement = null, this._pendingStateQueue = null, this._pendingReplaceState = !1, this._pendingForceUpdate = !1, this._renderedNodeType = null, this._renderedComponent = null, this._context = null, this._mountOrder = 0, this._topLevelWrapper = null, this._pendingCallbacks = null, this._calledComponentWillUnmount = !1
          },
          mountComponent: function(e, t, n, r) {
            this._context = r, this._mountOrder = _++, this._nativeParent = t, this._nativeContainerInfo = n;
            var u, s = this._processProps(this._currentElement.props),
              l = this._processContext(r),
              p = this._currentElement.type,
              f = this._constructComponent(s, l);
            i(p) || null != f && null != f.render || (u = f, a(p, u), null === f || f === !1 || c.isValidElement(f) ? void 0 : C(!1), f = new o(p)), f.props = s, f.context = l, f.refs = y, f.updater = g, this._instance = f, d.set(f, this);
            var h = f.state;
            void 0 === h && (f.state = h = null), "object" != typeof h || Array.isArray(h) ? C(!1) : void 0, this._pendingStateQueue = null, this._pendingReplaceState = !1, this._pendingForceUpdate = !1;
            var v;
            return v = f.unstable_handleError ? this.performInitialMountWithErrorHandling(u, t, n, e, r) : this.performInitialMount(u, t, n, e, r), f.componentDidMount && e.getReactMountReady().enqueue(f.componentDidMount, f), v
          },
          _constructComponent: function(e, t) {
            return this._constructComponentWithoutOwner(e, t)
          },
          _constructComponentWithoutOwner: function(e, t) {
            var n = this._currentElement.type;
            return i(n) ? new n(e, t, g) : n(e, t, g)
          },
          performInitialMountWithErrorHandling: function(e, t, n, r, o) {
            var a, i = r.checkpoint();
            try {
              a = this.performInitialMount(e, t, n, r, o)
            } catch (u) {
              r.rollback(i), this._instance.unstable_handleError(u), this._pendingStateQueue && (this._instance.state = this._processPendingState(this._instance.props, this._instance.context)), i = r.checkpoint(), this._renderedComponent.unmountComponent(!0), r.rollback(i), a = this.performInitialMount(e, t, n, r, o)
            }
            return a
          },
          performInitialMount: function(e, t, n, r, o) {
            var a = this._instance;
            a.componentWillMount && (a.componentWillMount(), this._pendingStateQueue && (a.state = this._processPendingState(a.props, a.context))), void 0 === e && (e = this._renderValidatedComponent()), this._renderedNodeType = f.getType(e), this._renderedComponent = this._instantiateReactComponent(e);
            var i = m.mountComponent(this._renderedComponent, r, t, n, this._processChildContext(o));
            return i
          },
          getNativeNode: function() {
            return m.getNativeNode(this._renderedComponent)
          },
          unmountComponent: function(e) {
            if (this._renderedComponent) {
              var t = this._instance;
              if (t.componentWillUnmount && !t._calledComponentWillUnmount)
                if (t._calledComponentWillUnmount = !0, e) {
                  var n = this.getName() + ".componentWillUnmount()";
                  p.invokeGuardedCallback(n, t.componentWillUnmount.bind(t))
                } else t.componentWillUnmount();
              this._renderedComponent && (m.unmountComponent(this._renderedComponent, e), this._renderedNodeType = null, this._renderedComponent = null, this._instance = null), this._pendingStateQueue = null, this._pendingReplaceState = !1, this._pendingForceUpdate = !1, this._pendingCallbacks = null, this._pendingElement = null, this._context = null, this._rootNodeID = null, this._topLevelWrapper = null, d.remove(t)
            }
          },
          _maskContext: function(e) {
            var t = this._currentElement.type,
              n = t.contextTypes;
            if (!n) return y;
            var r = {};
            for (var o in n) r[o] = e[o];
            return r
          },
          _processContext: function(e) {
            var t = this._maskContext(e);
            return t
          },
          _processChildContext: function(e) {
            var t = this._currentElement.type,
              n = this._instance,
              r = n.getChildContext && n.getChildContext();
            if (r) {
              "object" != typeof t.childContextTypes ? C(!1) : void 0;
              for (var o in r) o in t.childContextTypes ? void 0 : C(!1);
              return u({}, e, r)
            }
            return e
          },
          _processProps: function(e) {
            return e
          },
          _checkPropTypes: function(e, t, n) {
            var o = this.getName();
            for (var a in e)
              if (e.hasOwnProperty(a)) {
                var i;
                try {
                  "function" != typeof e[a] ? C(!1) : void 0, i = e[a](t, a, o, n)
                } catch (u) {
                  i = u
                }
                i instanceof Error && (r(this), n === v.prop)
              }
          },
          receiveComponent: function(e, t, n) {
            var r = this._currentElement,
              o = this._context;
            this._pendingElement = null, this.updateComponent(t, r, e, o, n)
          },
          performUpdateIfNecessary: function(e) {
            null != this._pendingElement && m.receiveComponent(this, this._pendingElement, e, this._context), (null !== this._pendingStateQueue || this._pendingForceUpdate) && this.updateComponent(e, this._currentElement, this._currentElement, this._context, this._context)
          },
          updateComponent: function(e, t, n, r, o) {
            var a, i, u = this._instance,
              s = !1;
            this._context === o ? a = u.context : (a = this._processContext(o), s = !0), t === n ? i = n.props : (i = this._processProps(n.props), s = !0), s && u.componentWillReceiveProps && u.componentWillReceiveProps(i, a);
            var l = this._processPendingState(i, a),
              c = this._pendingForceUpdate || !u.shouldComponentUpdate || u.shouldComponentUpdate(i, l, a);
            c ? (this._pendingForceUpdate = !1, this._performComponentUpdate(n, i, l, a, e, o)) : (this._currentElement = n, this._context = o, u.props = i, u.state = l, u.context = a)
          },
          _processPendingState: function(e, t) {
            var n = this._instance,
              r = this._pendingStateQueue,
              o = this._pendingReplaceState;
            if (this._pendingReplaceState = !1, this._pendingStateQueue = null, !r) return n.state;
            if (o && 1 === r.length) return r[0];
            for (var a = u({}, o ? r[0] : n.state), i = o ? 1 : 0; i < r.length; i++) {
              var s = r[i];
              u(a, "function" == typeof s ? s.call(n, a, e, t) : s)
            }
            return a
          },
          _performComponentUpdate: function(e, t, n, r, o, a) {
            var i, u, s, l = this._instance,
              c = Boolean(l.componentDidUpdate);
            c && (i = l.props, u = l.state, s = l.context), l.componentWillUpdate && l.componentWillUpdate(t, n, r), this._currentElement = e, this._context = a, l.props = t, l.state = n, l.context = r, this._updateRenderedComponent(o, a), c && o.getReactMountReady().enqueue(l.componentDidUpdate.bind(l, i, u, s), l)
          },
          _updateRenderedComponent: function(e, t) {
            var n = this._renderedComponent,
              r = n._currentElement,
              o = this._renderValidatedComponent();
            if (b(r, o)) m.receiveComponent(n, o, e, this._processChildContext(t));
            else {
              var a = m.getNativeNode(n);
              m.unmountComponent(n, !1), this._renderedNodeType = f.getType(o), this._renderedComponent = this._instantiateReactComponent(o);
              var i = m.mountComponent(this._renderedComponent, e, this._nativeParent, this._nativeContainerInfo, this._processChildContext(t));
              this._replaceNodeWithMarkup(a, i)
            }
          },
          _replaceNodeWithMarkup: function(e, t) {
            s.replaceNodeWithMarkup(e, t)
          },
          _renderValidatedComponentWithoutOwnerOrContext: function() {
            var e = this._instance,
              t = e.render();
            return t
          },
          _renderValidatedComponent: function() {
            var e;
            l.current = this;
            try {
              e = this._renderValidatedComponentWithoutOwnerOrContext()
            } finally {
              l.current = null
            }
            return null === e || e === !1 || c.isValidElement(e) ? void 0 : C(!1), e
          },
          attachRef: function(e, t) {
            var n = this.getPublicInstance();
            null == n ? C(!1) : void 0;
            var r = t.getPublicInstance(),
              o = n.refs === y ? n.refs = {} : n.refs;
            o[e] = r
          },
          detachRef: function(e) {
            var t = this.getPublicInstance().refs;
            delete t[e]
          },
          getName: function() {
            var e = this._currentElement.type,
              t = this._instance && this._instance.constructor;
            return e.displayName || t && t.displayName || e.name || t && t.name || null
          },
          getPublicInstance: function() {
            var e = this._instance;
            return e instanceof o ? null : e
          },
          _instantiateReactComponent: null
        };
      h.measureMethods(E, "ReactCompositeComponent", {
        mountComponent: "mountComponent",
        updateComponent: "updateComponent",
        _renderValidatedComponent: "_renderValidatedComponent"
      });
      var x = {
        Mixin: E
      };
      t.exports = x
    }, {
      138: 138,
      149: 149,
      156: 156,
      164: 164,
      165: 165,
      33: 33,
      35: 35,
      60: 60,
      63: 63,
      69: 69,
      70: 70,
      77: 77,
      80: 80,
      81: 81,
      82: 82,
      85: 85,
      91: 91
    }],
    35: [function(e, t, n) {
      "use strict";
      var r = {
        current: null
      };
      t.exports = r
    }, {}],
    36: [function(e, t, n) {
      "use strict";
      var r = e(40),
        o = e(59),
        a = e(73),
        i = e(80),
        u = e(85),
        s = e(92),
        l = e(93),
        c = e(118),
        p = e(126),
        d = e(135);
      e(164);
      o.inject();
      var f = i.measure("React", "render", a.render),
        h = {
          findDOMNode: c,
          render: f,
          unmountComponentAtNode: a.unmountComponentAtNode,
          version: l,
          unstable_batchedUpdates: s.batchedUpdates,
          unstable_renderSubtreeIntoContainer: d
        };
      "undefined" != typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" == typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject && __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
        ComponentTree: {
          getClosestInstanceFromNode: r.getClosestInstanceFromNode,
          getNodeFromInstance: function(e) {
            return e._renderedComponent && (e = p(e)), e ? r.getNodeFromInstance(e) : null
          }
        },
        Mount: a,
        Reconciler: u
      });
      t.exports = h
    }, {
      118: 118,
      126: 126,
      135: 135,
      164: 164,
      40: 40,
      59: 59,
      73: 73,
      80: 80,
      85: 85,
      92: 92,
      93: 93
    }],
    37: [function(e, t, n) {
      "use strict";
      var r = e(14),
        o = {
          getNativeProps: r.getNativeProps
        };
      t.exports = o
    }, {
      14: 14
    }],
    38: [function(e, t, n) {
      "use strict";

      function r(e, t) {
        t && (X[e._tag] && (null != t.children || null != t.dangerouslySetInnerHTML ? O(!1) : void 0), null != t.dangerouslySetInnerHTML && (null != t.children ? O(!1) : void 0, "object" == typeof t.dangerouslySetInnerHTML && K in t.dangerouslySetInnerHTML ? void 0 : O(!1)), null != t.style && "object" != typeof t.style ? O(!1) : void 0)
      }

      function o(e, t, n, r) {
        var o = e._nativeContainerInfo,
          i = o._node && o._node.nodeType === q,
          u = i ? o._node : o._ownerDocument;
        u && (V(t, u), r.getReactMountReady().enqueue(a, {
          inst: e,
          registrationName: t,
          listener: n
        }))
      }

      function a() {
        var e = this;
        b.putListener(e.inst, e.registrationName, e.listener)
      }

      function i() {
        var e = this;
        M.postMountWrapper(e)
      }

      function u() {
        var e = this;
        e._rootNodeID ? void 0 : O(!1);
        var t = F(e);
        switch (t ? void 0 : O(!1), e._tag) {
          case "iframe":
          case "object":
            e._wrapperState.listeners = [E.trapBubbledEvent(C.topLevelTypes.topLoad, "load", t)];
            break;
          case "video":
          case "audio":
            e._wrapperState.listeners = [];
            for (var n in Y) Y.hasOwnProperty(n) && e._wrapperState.listeners.push(E.trapBubbledEvent(C.topLevelTypes[n], Y[n], t));
            break;
          case "img":
            e._wrapperState.listeners = [E.trapBubbledEvent(C.topLevelTypes.topError, "error", t), E.trapBubbledEvent(C.topLevelTypes.topLoad, "load", t)];
            break;
          case "form":
            e._wrapperState.listeners = [E.trapBubbledEvent(C.topLevelTypes.topReset, "reset", t), E.trapBubbledEvent(C.topLevelTypes.topSubmit, "submit", t)];
            break;
          case "input":
          case "select":
          case "textarea":
            e._wrapperState.listeners = [E.trapBubbledEvent(C.topLevelTypes.topInvalid, "invalid", t)]
        }
      }

      function s() {
        S.postUpdateWrapper(this)
      }

      function l(e) {
        Z.call($, e) || (Q.test(e) ? void 0 : O(!1), $[e] = !0)
      }

      function c(e, t) {
        return e.indexOf("-") >= 0 || null != t.is
      }

      function p(e) {
        var t = e.type;
        l(t), this._currentElement = e, this._tag = t.toLowerCase(), this._namespaceURI = null, this._renderedChildren = null, this._previousStyle = null, this._previousStyleCopy = null, this._nativeNode = null, this._nativeParent = null, this._rootNodeID = null, this._domID = null, this._nativeContainerInfo = null, this._wrapperState = null, this._topLevelWrapper = null, this._flags = 0
      }
      var d = e(165),
        f = e(1),
        h = e(4),
        v = e(8),
        m = e(9),
        g = e(10),
        y = e(11),
        C = e(16),
        b = e(17),
        _ = e(18),
        E = e(27),
        x = e(32),
        N = e(37),
        P = e(39),
        T = e(40),
        w = e(47),
        M = e(49),
        S = e(50),
        k = e(54),
        R = e(74),
        D = e(80),
        I = e(117),
        O = e(156),
        A = (e(131), e(160)),
        L = (e(163), e(140), e(164), P),
        U = b.deleteListener,
        F = T.getNodeFromInstance,
        V = E.listenTo,
        B = _.registrationNameModules,
        j = {
          string: !0,
          number: !0
        },
        W = A({
          style: null
        }),
        K = A({
          __html: null
        }),
        H = {
          children: null,
          dangerouslySetInnerHTML: null,
          suppressContentEditableWarning: null
        },
        q = 11,
        Y = {
          topAbort: "abort",
          topCanPlay: "canplay",
          topCanPlayThrough: "canplaythrough",
          topDurationChange: "durationchange",
          topEmptied: "emptied",
          topEncrypted: "encrypted",
          topEnded: "ended",
          topError: "error",
          topLoadedData: "loadeddata",
          topLoadedMetadata: "loadedmetadata",
          topLoadStart: "loadstart",
          topPause: "pause",
          topPlay: "play",
          topPlaying: "playing",
          topProgress: "progress",
          topRateChange: "ratechange",
          topSeeked: "seeked",
          topSeeking: "seeking",
          topStalled: "stalled",
          topSuspend: "suspend",
          topTimeUpdate: "timeupdate",
          topVolumeChange: "volumechange",
          topWaiting: "waiting"
        },
        z = {
          area: !0,
          base: !0,
          br: !0,
          col: !0,
          embed: !0,
          hr: !0,
          img: !0,
          input: !0,
          keygen: !0,
          link: !0,
          meta: !0,
          param: !0,
          source: !0,
          track: !0,
          wbr: !0
        },
        G = {
          listing: !0,
          pre: !0,
          textarea: !0
        },
        X = d({
          menuitem: !0
        }, z),
        Q = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,
        $ = {},
        Z = {}.hasOwnProperty,
        J = 1;
      p.displayName = "ReactDOMComponent", p.Mixin = {
        mountComponent: function(e, t, n, o) {
          this._rootNodeID = J++, this._domID = n._idCounter++, this._nativeParent = t, this._nativeContainerInfo = n;
          var a = this._currentElement.props;
          switch (this._tag) {
            case "iframe":
            case "object":
            case "img":
            case "form":
            case "video":
            case "audio":
              this._wrapperState = {
                listeners: null
              }, e.getReactMountReady().enqueue(u, this);
              break;
            case "button":
              a = N.getNativeProps(this, a, t);
              break;
            case "input":
              w.mountWrapper(this, a, t), a = w.getNativeProps(this, a), e.getReactMountReady().enqueue(u, this);
              break;
            case "option":
              M.mountWrapper(this, a, t), a = M.getNativeProps(this, a);
              break;
            case "select":
              S.mountWrapper(this, a, t), a = S.getNativeProps(this, a), e.getReactMountReady().enqueue(u, this);
              break;
            case "textarea":
              k.mountWrapper(this, a, t), a = k.getNativeProps(this, a), e.getReactMountReady().enqueue(u, this)
          }
          r(this, a);
          var s, l;
          null != t ? (s = t._namespaceURI, l = t._tag) : n._tag && (s = n._namespaceURI, l = n._tag), (null == s || s === m.svg && "foreignobject" === l) && (s = m.html), s === m.html && ("svg" === this._tag ? s = m.svg : "math" === this._tag && (s = m.mathml)), this._namespaceURI = s;
          var c;
          if (e.useCreateElement) {
            var p, d = n._ownerDocument;
            if (s === m.html)
              if ("script" === this._tag) {
                var h = d.createElement("div"),
                  g = this._currentElement.type;
                h.innerHTML = "<" + g + "></" + g + ">", p = h.removeChild(h.firstChild)
              } else p = d.createElement(this._currentElement.type);
            else p = d.createElementNS(s, this._currentElement.type);
            T.precacheNode(this, p), this._flags |= L.hasCachedChildNodes, this._nativeParent || y.setAttributeForRoot(p), this._updateDOMProperties(null, a, e);
            var C = v(p);
            this._createInitialChildren(e, a, o, C), c = C
          } else {
            var b = this._createOpenTagMarkupAndPutListeners(e, a),
              _ = this._createContentMarkup(e, a, o);
            c = !_ && z[this._tag] ? b + "/>" : b + ">" + _ + "</" + this._currentElement.type + ">"
          }
          switch (this._tag) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              a.autoFocus && e.getReactMountReady().enqueue(f.focusDOMComponent, this);
              break;
            case "option":
              e.getReactMountReady().enqueue(i, this)
          }
          return c
        },
        _createOpenTagMarkupAndPutListeners: function(e, t) {
          var n = "<" + this._currentElement.type;
          for (var r in t)
            if (t.hasOwnProperty(r)) {
              var a = t[r];
              if (null != a)
                if (B.hasOwnProperty(r)) a && o(this, r, a, e);
                else {
                  r === W && (a && (a = this._previousStyleCopy = d({}, t.style)), a = h.createMarkupForStyles(a, this));
                  var i = null;
                  null != this._tag && c(this._tag, t) ? H.hasOwnProperty(r) || (i = y.createMarkupForCustomAttribute(r, a)) : i = y.createMarkupForProperty(r, a), i && (n += " " + i)
                }
            }
          return e.renderToStaticMarkup ? n : (this._nativeParent || (n += " " + y.createMarkupForRoot()), n += " " + y.createMarkupForID(this._domID))
        },
        _createContentMarkup: function(e, t, n) {
          var r = "",
            o = t.dangerouslySetInnerHTML;
          if (null != o) null != o.__html && (r = o.__html);
          else {
            var a = j[typeof t.children] ? t.children : null,
              i = null != a ? null : t.children;
            if (null != a) r = I(a);
            else if (null != i) {
              var u = this.mountChildren(i, e, n);
              r = u.join("")
            }
          }
          return G[this._tag] && "\n" === r.charAt(0) ? "\n" + r : r
        },
        _createInitialChildren: function(e, t, n, r) {
          var o = t.dangerouslySetInnerHTML;
          if (null != o) null != o.__html && v.queueHTML(r, o.__html);
          else {
            var a = j[typeof t.children] ? t.children : null,
              i = null != a ? null : t.children;
            if (null != a) v.queueText(r, a);
            else if (null != i)
              for (var u = this.mountChildren(i, e, n), s = 0; s < u.length; s++) v.queueChild(r, u[s])
          }
        },
        receiveComponent: function(e, t, n) {
          var r = this._currentElement;
          this._currentElement = e, this.updateComponent(t, r, e, n)
        },
        updateComponent: function(e, t, n, o) {
          var a = t.props,
            i = this._currentElement.props;
          switch (this._tag) {
            case "button":
              a = N.getNativeProps(this, a), i = N.getNativeProps(this, i);
              break;
            case "input":
              w.updateWrapper(this), a = w.getNativeProps(this, a), i = w.getNativeProps(this, i);
              break;
            case "option":
              a = M.getNativeProps(this, a), i = M.getNativeProps(this, i);
              break;
            case "select":
              a = S.getNativeProps(this, a), i = S.getNativeProps(this, i);
              break;
            case "textarea":
              k.updateWrapper(this), a = k.getNativeProps(this, a), i = k.getNativeProps(this, i)
          }
          r(this, i), this._updateDOMProperties(a, i, e), this._updateDOMChildren(a, i, e, o), "select" === this._tag && e.getReactMountReady().enqueue(s, this)
        },
        _updateDOMProperties: function(e, t, n) {
          var r, a, i;
          for (r in e)
            if (!t.hasOwnProperty(r) && e.hasOwnProperty(r) && null != e[r])
              if (r === W) {
                var u = this._previousStyleCopy;
                for (a in u) u.hasOwnProperty(a) && (i = i || {}, i[a] = "");
                this._previousStyleCopy = null
              } else B.hasOwnProperty(r) ? e[r] && U(this, r) : (g.properties[r] || g.isCustomAttribute(r)) && y.deleteValueForProperty(F(this), r);
          for (r in t) {
            var s = t[r],
              l = r === W ? this._previousStyleCopy : null != e ? e[r] : void 0;
            if (t.hasOwnProperty(r) && s !== l && (null != s || null != l))
              if (r === W)
                if (s ? s = this._previousStyleCopy = d({}, s) : this._previousStyleCopy = null, l) {
                  for (a in l) !l.hasOwnProperty(a) || s && s.hasOwnProperty(a) || (i = i || {}, i[a] = "");
                  for (a in s) s.hasOwnProperty(a) && l[a] !== s[a] && (i = i || {}, i[a] = s[a])
                } else i = s;
            else if (B.hasOwnProperty(r)) s ? o(this, r, s, n) : l && U(this, r);
            else if (c(this._tag, t)) H.hasOwnProperty(r) || y.setValueForAttribute(F(this), r, s);
            else if (g.properties[r] || g.isCustomAttribute(r)) {
              var p = F(this);
              null != s ? y.setValueForProperty(p, r, s) : y.deleteValueForProperty(p, r)
            }
          }
          i && h.setValueForStyles(F(this), i, this)
        },
        _updateDOMChildren: function(e, t, n, r) {
          var o = j[typeof e.children] ? e.children : null,
            a = j[typeof t.children] ? t.children : null,
            i = e.dangerouslySetInnerHTML && e.dangerouslySetInnerHTML.__html,
            u = t.dangerouslySetInnerHTML && t.dangerouslySetInnerHTML.__html,
            s = null != o ? null : e.children,
            l = null != a ? null : t.children,
            c = null != o || null != i,
            p = null != a || null != u;
          null != s && null == l ? this.updateChildren(null, n, r) : c && !p && this.updateTextContent(""), null != a ? o !== a && this.updateTextContent("" + a) : null != u ? i !== u && this.updateMarkup("" + u) : null != l && this.updateChildren(l, n, r)
        },
        getNativeNode: function() {
          return F(this)
        },
        unmountComponent: function(e) {
          switch (this._tag) {
            case "iframe":
            case "object":
            case "img":
            case "form":
            case "video":
            case "audio":
              var t = this._wrapperState.listeners;
              if (t)
                for (var n = 0; n < t.length; n++) t[n].remove();
              break;
            case "html":
            case "head":
            case "body":
              O(!1)
          }
          this.unmountChildren(e), T.uncacheNode(this), b.deleteAllListeners(this), x.unmountIDFromEnvironment(this._rootNodeID), this._rootNodeID = null, this._domID = null, this._wrapperState = null
        },
        getPublicInstance: function() {
          return F(this)
        }
      }, D.measureMethods(p.Mixin, "ReactDOMComponent", {
        mountComponent: "mountComponent",
        receiveComponent: "receiveComponent"
      }), d(p.prototype, p.Mixin, R.Mixin), t.exports = p
    }, {
      1: 1,
      10: 10,
      11: 11,
      117: 117,
      131: 131,
      140: 140,
      156: 156,
      16: 16,
      160: 160,
      163: 163,
      164: 164,
      165: 165,
      17: 17,
      18: 18,
      27: 27,
      32: 32,
      37: 37,
      39: 39,
      4: 4,
      40: 40,
      47: 47,
      49: 49,
      50: 50,
      54: 54,
      74: 74,
      8: 8,
      80: 80,
      9: 9
    }],
    39: [function(e, t, n) {
      "use strict";
      var r = {
        hasCachedChildNodes: 1
      };
      t.exports = r
    }, {}],
    40: [function(e, t, n) {
      "use strict";

      function r(e) {
        for (var t; t = e._renderedComponent;) e = t;
        return e
      }

      function o(e, t) {
        var n = r(e);
        n._nativeNode = t, t[v] = n
      }

      function a(e) {
        var t = e._nativeNode;
        t && (delete t[v], e._nativeNode = null)
      }

      function i(e, t) {
        if (!(e._flags & h.hasCachedChildNodes)) {
          var n = e._renderedChildren,
            a = t.firstChild;
          e: for (var i in n)
            if (n.hasOwnProperty(i)) {
              var u = n[i],
                s = r(u)._domID;
              if (null != s) {
                for (; null !== a; a = a.nextSibling)
                  if (1 === a.nodeType && a.getAttribute(f) === String(s) || 8 === a.nodeType && a.nodeValue === " react-text: " + s + " " || 8 === a.nodeType && a.nodeValue === " react-empty: " + s + " ") {
                    o(u, a);
                    continue e
                  }
                d(!1)
              }
            }
          e._flags |= h.hasCachedChildNodes
        }
      }

      function u(e) {
        if (e[v]) return e[v];
        for (var t = []; !e[v];) {
          if (t.push(e), !e.parentNode) return null;
          e = e.parentNode
        }
        for (var n, r; e && (r = e[v]); e = t.pop()) n = r, t.length && i(r, e);
        return n
      }

      function s(e) {
        var t = u(e);
        return null != t && t._nativeNode === e ? t : null
      }

      function l(e) {
        if (void 0 === e._nativeNode ? d(!1) : void 0, e._nativeNode) return e._nativeNode;
        for (var t = []; !e._nativeNode;) t.push(e), e._nativeParent ? void 0 : d(!1), e = e._nativeParent;
        for (; t.length; e = t.pop()) i(e, e._nativeNode);
        return e._nativeNode
      }
      var c = e(10),
        p = e(39),
        d = e(156),
        f = c.ID_ATTRIBUTE_NAME,
        h = p,
        v = "__reactInternalInstance$" + Math.random().toString(36).slice(2),
        m = {
          getClosestInstanceFromNode: u,
          getInstanceFromNode: s,
          getNodeFromInstance: l,
          precacheChildNodes: i,
          precacheNode: o,
          uncacheNode: a
        };
      t.exports = m
    }, {
      10: 10,
      156: 156,
      39: 39
    }],
    41: [function(e, t, n) {
      "use strict";

      function r(e, t) {
        var n = {
          _topLevelWrapper: e,
          _idCounter: 1,
          _ownerDocument: t ? t.nodeType === o ? t : t.ownerDocument : null,
          _node: t,
          _tag: t ? t.nodeName.toLowerCase() : null,
          _namespaceURI: t ? t.namespaceURI : null
        };
        return n
      }
      var o = (e(140), 9);
      t.exports = r
    }, {
      140: 140
    }],
    42: [function(e, t, n) {
      "use strict";

      function r(e, t, n, r, o, a) {}
      var o = e(56),
        a = (e(164), []),
        i = {
          addDevtool: function(e) {
            a.push(e)
          },
          removeDevtool: function(e) {
            for (var t = 0; t < a.length; t++) a[t] === e && (a.splice(t, 1), t--)
          },
          onCreateMarkupForProperty: function(e, t) {
            r("onCreateMarkupForProperty", e, t)
          },
          onSetValueForProperty: function(e, t, n) {
            r("onSetValueForProperty", e, t, n)
          },
          onDeleteValueForProperty: function(e, t) {
            r("onDeleteValueForProperty", e, t)
          }
        };
      i.addDevtool(o), t.exports = i
    }, {
      164: 164,
      56: 56
    }],
    43: [function(e, t, n) {
      "use strict";
      var r = e(165),
        o = e(8),
        a = e(40),
        i = function(e) {
          this._currentElement = null, this._nativeNode = null, this._nativeParent = null, this._nativeContainerInfo = null, this._domID = null
        };
      r(i.prototype, {
        mountComponent: function(e, t, n, r) {
          var i = n._idCounter++;
          this._domID = i, this._nativeParent = t, this._nativeContainerInfo = n;
          var u = " react-empty: " + this._domID + " ";
          if (e.useCreateElement) {
            var s = n._ownerDocument,
              l = s.createComment(u);
            return a.precacheNode(this, l), o(l)
          }
          return e.renderToStaticMarkup ? "" : "<!--" + u + "-->"
        },
        receiveComponent: function() {},
        getNativeNode: function() {
          return a.getNodeFromInstance(this)
        },
        unmountComponent: function() {
          a.uncacheNode(this)
        }
      }), t.exports = i
    }, {
      165: 165,
      40: 40,
      8: 8
    }],
    44: [function(e, t, n) {
      "use strict";

      function r(e) {
        return o.createFactory(e)
      }
      var o = e(60),
        a = (e(61), e(161)),
        i = a({
          a: "a",
          abbr: "abbr",
          address: "address",
          area: "area",
          article: "article",
          aside: "aside",
          audio: "audio",
          b: "b",
          base: "base",
          bdi: "bdi",
          bdo: "bdo",
          big: "big",
          blockquote: "blockquote",
          body: "body",
          br: "br",
          button: "button",
          canvas: "canvas",
          caption: "caption",
          cite: "cite",
          code: "code",
          col: "col",
          colgroup: "colgroup",
          data: "data",
          datalist: "datalist",
          dd: "dd",
          del: "del",
          details: "details",
          dfn: "dfn",
          dialog: "dialog",
          div: "div",
          dl: "dl",
          dt: "dt",
          em: "em",
          embed: "embed",
          fieldset: "fieldset",
          figcaption: "figcaption",
          figure: "figure",
          footer: "footer",
          form: "form",
          h1: "h1",
          h2: "h2",
          h3: "h3",
          h4: "h4",
          h5: "h5",
          h6: "h6",
          head: "head",
          header: "header",
          hgroup: "hgroup",
          hr: "hr",
          html: "html",
          i: "i",
          iframe: "iframe",
          img: "img",
          input: "input",
          ins: "ins",
          kbd: "kbd",
          keygen: "keygen",
          label: "label",
          legend: "legend",
          li: "li",
          link: "link",
          main: "main",
          map: "map",
          mark: "mark",
          menu: "menu",
          menuitem: "menuitem",
          meta: "meta",
          meter: "meter",
          nav: "nav",
          noscript: "noscript",
          object: "object",
          ol: "ol",
          optgroup: "optgroup",
          option: "option",
          output: "output",
          p: "p",
          param: "param",
          picture: "picture",
          pre: "pre",
          progress: "progress",
          q: "q",
          rp: "rp",
          rt: "rt",
          ruby: "ruby",
          s: "s",
          samp: "samp",
          script: "script",
          section: "section",
          select: "select",
          small: "small",
          source: "source",
          span: "span",
          strong: "strong",
          style: "style",
          sub: "sub",
          summary: "summary",
          sup: "sup",
          table: "table",
          tbody: "tbody",
          td: "td",
          textarea: "textarea",
          tfoot: "tfoot",
          th: "th",
          thead: "thead",
          time: "time",
          title: "title",
          tr: "tr",
          track: "track",
          u: "u",
          ul: "ul",
          "var": "var",
          video: "video",
          wbr: "wbr",
          circle: "circle",
          clipPath: "clipPath",
          defs: "defs",
          ellipse: "ellipse",
          g: "g",
          image: "image",
          line: "line",
          linearGradient: "linearGradient",
          mask: "mask",
          path: "path",
          pattern: "pattern",
          polygon: "polygon",
          polyline: "polyline",
          radialGradient: "radialGradient",
          rect: "rect",
          stop: "stop",
          svg: "svg",
          text: "text",
          tspan: "tspan"
        }, r);
      t.exports = i
    }, {
      161: 161,
      60: 60,
      61: 61
    }],
    45: [function(e, t, n) {
      "use strict";
      var r = {
        useCreateElement: !0
      };
      t.exports = r
    }, {}],
    46: [function(e, t, n) {
      "use strict";
      var r = e(7),
        o = e(40),
        a = e(80),
        i = {
          dangerouslyProcessChildrenUpdates: function(e, t) {
            var n = o.getNodeFromInstance(e);
            r.processUpdates(n, t)
          }
        };
      a.measureMethods(i, "ReactDOMIDOperations", {
        dangerouslyProcessChildrenUpdates: "dangerouslyProcessChildrenUpdates"
      }), t.exports = i
    }, {
      40: 40,
      7: 7,
      80: 80
    }],
    47: [function(e, t, n) {
      "use strict";

      function r() {
        this._rootNodeID && d.updateWrapper(this)
      }

      function o(e) {
        var t = this._currentElement.props,
          n = s.executeOnChange(t, e);
        c.asap(r, this);
        var o = t.name;
        if ("radio" === t.type && null != o) {
          for (var a = l.getNodeFromInstance(this), i = a; i.parentNode;) i = i.parentNode;
          for (var u = i.querySelectorAll("input[name=" + JSON.stringify("" + o) + '][type="radio"]'), d = 0; d < u.length; d++) {
            var f = u[d];
            if (f !== a && f.form === a.form) {
              var h = l.getInstanceFromNode(f);
              h ? void 0 : p(!1), c.asap(r, h)
            }
          }
        }
        return n
      }
      var a = e(165),
        i = e(14),
        u = e(11),
        s = e(24),
        l = e(40),
        c = e(92),
        p = e(156),
        d = (e(164), {
          getNativeProps: function(e, t) {
            var n = s.getValue(t),
              r = s.getChecked(t),
              o = a({
                type: void 0
              }, i.getNativeProps(e, t), {
                defaultChecked: void 0,
                defaultValue: void 0,
                value: null != n ? n : e._wrapperState.initialValue,
                checked: null != r ? r : e._wrapperState.initialChecked,
                onChange: e._wrapperState.onChange
              });
            return o
          },
          mountWrapper: function(e, t) {
            var n = t.defaultValue;
            e._wrapperState = {
              initialChecked: t.defaultChecked || !1,
              initialValue: null != n ? n : null,
              listeners: null,
              onChange: o.bind(e)
            }
          },
          updateWrapper: function(e) {
            var t = e._currentElement.props,
              n = t.checked;
            null != n && u.setValueForProperty(l.getNodeFromInstance(e), "checked", n || !1);
            var r = s.getValue(t);
            null != r && u.setValueForProperty(l.getNodeFromInstance(e), "value", "" + r)
          }
        });
      t.exports = d
    }, {
      11: 11,
      14: 14,
      156: 156,
      164: 164,
      165: 165,
      24: 24,
      40: 40,
      92: 92
    }],
    48: [function(e, t, n) {
      "use strict";
      var r = e(42);
      t.exports = {
        debugTool: r
      }
    }, {
      42: 42
    }],
    49: [function(e, t, n) {
      "use strict";
      var r = e(165),
        o = e(29),
        a = e(40),
        i = e(50),
        u = (e(164), {
          mountWrapper: function(e, t, n) {
            var r = null;
            if (null != n) {
              var o = n;
              "optgroup" === o._tag && (o = o._nativeParent), null != o && "select" === o._tag && (r = i.getSelectValueContext(o))
            }
            var a = null;
            if (null != r)
              if (a = !1, Array.isArray(r)) {
                for (var u = 0; u < r.length; u++)
                  if ("" + r[u] == "" + t.value) {
                    a = !0;
                    break
                  }
              } else a = "" + r == "" + t.value;
            e._wrapperState = {
              selected: a
            }
          },
          postMountWrapper: function(e) {
            var t = e._currentElement.props;
            if (null != t.value) {
              var n = a.getNodeFromInstance(e);
              n.setAttribute("value", t.value)
            }
          },
          getNativeProps: function(e, t) {
            var n = r({
              selected: void 0,
              children: void 0
            }, t);
            null != e._wrapperState.selected && (n.selected = e._wrapperState.selected);
            var a = "";
            return o.forEach(t.children, function(e) {
              null != e && ("string" != typeof e && "number" != typeof e || (a += e))
            }), a && (n.children = a), n
          }
        });
      t.exports = u
    }, {
      164: 164,
      165: 165,
      29: 29,
      40: 40,
      50: 50
    }],
    50: [function(e, t, n) {
      "use strict";

      function r() {
        if (this._rootNodeID && this._wrapperState.pendingUpdate) {
          this._wrapperState.pendingUpdate = !1;
          var e = this._currentElement.props,
            t = s.getValue(e);
          null != t && o(this, Boolean(e.multiple), t)
        }
      }

      function o(e, t, n) {
        var r, o, a = l.getNodeFromInstance(e).options;
        if (t) {
          for (r = {}, o = 0; o < n.length; o++) r["" + n[o]] = !0;
          for (o = 0; o < a.length; o++) {
            var i = r.hasOwnProperty(a[o].value);
            a[o].selected !== i && (a[o].selected = i)
          }
        } else {
          for (r = "" + n, o = 0; o < a.length; o++)
            if (a[o].value === r) return void(a[o].selected = !0);
          a.length && (a[0].selected = !0)
        }
      }

      function a(e) {
        var t = this._currentElement.props,
          n = s.executeOnChange(t, e);
        return this._rootNodeID && (this._wrapperState.pendingUpdate = !0), c.asap(r, this), n
      }
      var i = e(165),
        u = e(14),
        s = e(24),
        l = e(40),
        c = e(92),
        p = (e(164), !1),
        d = {
          getNativeProps: function(e, t) {
            return i({}, u.getNativeProps(e, t), {
              onChange: e._wrapperState.onChange,
              value: void 0
            })
          },
          mountWrapper: function(e, t) {
            var n = s.getValue(t);
            e._wrapperState = {
              pendingUpdate: !1,
              initialValue: null != n ? n : t.defaultValue,
              listeners: null,
              onChange: a.bind(e),
              wasMultiple: Boolean(t.multiple)
            }, void 0 === t.value || void 0 === t.defaultValue || p || (p = !0)
          },
          getSelectValueContext: function(e) {
            return e._wrapperState.initialValue
          },
          postUpdateWrapper: function(e) {
            var t = e._currentElement.props;
            e._wrapperState.initialValue = void 0;
            var n = e._wrapperState.wasMultiple;
            e._wrapperState.wasMultiple = Boolean(t.multiple);
            var r = s.getValue(t);
            null != r ? (e._wrapperState.pendingUpdate = !1, o(e, Boolean(t.multiple), r)) : n !== Boolean(t.multiple) && (null != t.defaultValue ? o(e, Boolean(t.multiple), t.defaultValue) : o(e, Boolean(t.multiple), t.multiple ? [] : ""))
          }
        };
      t.exports = d
    }, {
      14: 14,
      164: 164,
      165: 165,
      24: 24,
      40: 40,
      92: 92
    }],
    51: [function(e, t, n) {
      "use strict";

      function r(e, t, n, r) {
        return e === n && t === r
      }

      function o(e) {
        var t = document.selection,
          n = t.createRange(),
          r = n.text.length,
          o = n.duplicate();
        o.moveToElementText(e), o.setEndPoint("EndToStart", n);
        var a = o.text.length,
          i = a + r;
        return {
          start: a,
          end: i
        }
      }

      function a(e) {
        var t = window.getSelection && window.getSelection();
        if (!t || 0 === t.rangeCount) return null;
        var n = t.anchorNode,
          o = t.anchorOffset,
          a = t.focusNode,
          i = t.focusOffset,
          u = t.getRangeAt(0);
        try {
          u.startContainer.nodeType, u.endContainer.nodeType
        } catch (s) {
          return null
        }
        var l = r(t.anchorNode, t.anchorOffset, t.focusNode, t.focusOffset),
          c = l ? 0 : u.toString().length,
          p = u.cloneRange();
        p.selectNodeContents(e), p.setEnd(u.startContainer, u.startOffset);
        var d = r(p.startContainer, p.startOffset, p.endContainer, p.endOffset),
          f = d ? 0 : p.toString().length,
          h = f + c,
          v = document.createRange();
        v.setStart(n, o), v.setEnd(a, i);
        var m = v.collapsed;
        return {
          start: m ? h : f,
          end: m ? f : h
        }
      }

      function i(e, t) {
        var n, r, o = document.selection.createRange().duplicate();
        void 0 === t.end ? (n = t.start, r = n) : t.start > t.end ? (n = t.end, r = t.start) : (n = t.start, r = t.end), o.moveToElementText(e), o.moveStart("character", n), o.setEndPoint("EndToStart", o), o.moveEnd("character", r - n), o.select()
      }

      function u(e, t) {
        if (window.getSelection) {
          var n = window.getSelection(),
            r = e[c()].length,
            o = Math.min(t.start, r),
            a = void 0 === t.end ? o : Math.min(t.end, r);
          if (!n.extend && o > a) {
            var i = a;
            a = o, o = i
          }
          var u = l(e, o),
            s = l(e, a);
          if (u && s) {
            var p = document.createRange();
            p.setStart(u.node, u.offset), n.removeAllRanges(), o > a ? (n.addRange(p), n.extend(s.node, s.offset)) : (p.setEnd(s.node, s.offset), n.addRange(p))
          }
        }
      }
      var s = e(142),
        l = e(127),
        c = e(128),
        p = s.canUseDOM && "selection" in document && !("getSelection" in window),
        d = {
          getOffsets: p ? o : a,
          setOffsets: p ? i : u
        };
      t.exports = d
    }, {
      127: 127,
      128: 128,
      142: 142
    }],
    52: [function(e, t, n) {
      "use strict";
      var r = e(59),
        o = e(88),
        a = e(93);
      r.inject();
      var i = {
        renderToString: o.renderToString,
        renderToStaticMarkup: o.renderToStaticMarkup,
        version: a
      };
      t.exports = i
    }, {
      59: 59,
      88: 88,
      93: 93
    }],
    53: [function(e, t, n) {
      "use strict";
      var r = e(165),
        o = e(7),
        a = e(8),
        i = e(40),
        u = e(80),
        s = e(117),
        l = e(156),
        c = (e(140), function(e) {
          this._currentElement = e, this._stringText = "" + e, this._nativeNode = null, this._nativeParent = null, this._domID = null, this._mountIndex = 0, this._closingComment = null, this._commentNodes = null
        });
      r(c.prototype, {
        mountComponent: function(e, t, n, r) {
          var o = n._idCounter++,
            u = " react-text: " + o + " ",
            l = " /react-text ";
          if (this._domID = o, this._nativeParent = t, e.useCreateElement) {
            var c = n._ownerDocument,
              p = c.createComment(u),
              d = c.createComment(l),
              f = a(c.createDocumentFragment());
            return a.queueChild(f, a(p)), this._stringText && a.queueChild(f, a(c.createTextNode(this._stringText))), a.queueChild(f, a(d)), i.precacheNode(this, p), this._closingComment = d, f
          }
          var h = s(this._stringText);
          return e.renderToStaticMarkup ? h : "<!--" + u + "-->" + h + "<!--" + l + "-->"
        },
        receiveComponent: function(e, t) {
          if (e !== this._currentElement) {
            this._currentElement = e;
            var n = "" + e;
            if (n !== this._stringText) {
              this._stringText = n;
              var r = this.getNativeNode();
              o.replaceDelimitedText(r[0], r[1], n)
            }
          }
        },
        getNativeNode: function() {
          var e = this._commentNodes;
          if (e) return e;
          if (!this._closingComment)
            for (var t = i.getNodeFromInstance(this), n = t.nextSibling;;) {
              if (null == n ? l(!1) : void 0, 8 === n.nodeType && " /react-text " === n.nodeValue) {
                this._closingComment = n;
                break
              }
              n = n.nextSibling
            }
          return e = [this._nativeNode, this._closingComment], this._commentNodes = e, e
        },
        unmountComponent: function() {
          this._closingComment = null, this._commentNodes = null, i.uncacheNode(this)
        }
      }), u.measureMethods(c.prototype, "ReactDOMTextComponent", {
        mountComponent: "mountComponent",
        receiveComponent: "receiveComponent"
      }), t.exports = c
    }, {
      117: 117,
      140: 140,
      156: 156,
      165: 165,
      40: 40,
      7: 7,
      8: 8,
      80: 80
    }],
    54: [function(e, t, n) {
      "use strict";

      function r() {
        this._rootNodeID && d.updateWrapper(this)
      }

      function o(e) {
        var t = this._currentElement.props,
          n = s.executeOnChange(t, e);
        return c.asap(r, this), n
      }
      var a = e(165),
        i = e(14),
        u = e(11),
        s = e(24),
        l = e(40),
        c = e(92),
        p = e(156),
        d = (e(164), {
          getNativeProps: function(e, t) {
            null != t.dangerouslySetInnerHTML ? p(!1) : void 0;
            var n = a({}, i.getNativeProps(e, t), {
              defaultValue: void 0,
              value: void 0,
              children: e._wrapperState.initialValue,
              onChange: e._wrapperState.onChange
            });
            return n
          },
          mountWrapper: function(e, t) {
            var n = t.defaultValue,
              r = t.children;
            null != r && (null != n ? p(!1) : void 0, Array.isArray(r) && (r.length <= 1 ? void 0 : p(!1), r = r[0]), n = "" + r), null == n && (n = "");
            var a = s.getValue(t);
            e._wrapperState = {
              initialValue: "" + (null != a ? a : n),
              listeners: null,
              onChange: o.bind(e)
            }
          },
          updateWrapper: function(e) {
            var t = e._currentElement.props,
              n = s.getValue(t);
            null != n && u.setValueForProperty(l.getNodeFromInstance(e), "value", "" + n)
          }
        });
      t.exports = d
    }, {
      11: 11,
      14: 14,
      156: 156,
      164: 164,
      165: 165,
      24: 24,
      40: 40,
      92: 92
    }],
    55: [function(e, t, n) {
      "use strict";

      function r(e, t) {
        "_nativeNode" in e ? void 0 : s(!1), "_nativeNode" in t ? void 0 : s(!1);
        for (var n = 0, r = e; r; r = r._nativeParent) n++;
        for (var o = 0, a = t; a; a = a._nativeParent) o++;
        for (; n - o > 0;) e = e._nativeParent, n--;
        for (; o - n > 0;) t = t._nativeParent, o--;
        for (var i = n; i--;) {
          if (e === t) return e;
          e = e._nativeParent, t = t._nativeParent
        }
        return null
      }

      function o(e, t) {
        "_nativeNode" in e ? void 0 : s(!1), "_nativeNode" in t ? void 0 : s(!1);
        for (; t;) {
          if (t === e) return !0;
          t = t._nativeParent
        }
        return !1
      }

      function a(e) {
        return "_nativeNode" in e ? void 0 : s(!1), e._nativeParent
      }

      function i(e, t, n) {
        for (var r = []; e;) r.push(e), e = e._nativeParent;
        var o;
        for (o = r.length; o-- > 0;) t(r[o], !1, n);
        for (o = 0; o < r.length; o++) t(r[o], !0, n)
      }

      function u(e, t, n, o, a) {
        for (var i = e && t ? r(e, t) : null, u = []; e && e !== i;) u.push(e), e = e._nativeParent;
        for (var s = []; t && t !== i;) s.push(t), t = t._nativeParent;
        var l;
        for (l = 0; l < u.length; l++) n(u[l], !0, o);
        for (l = s.length; l-- > 0;) n(s[l], !1, a)
      }
      var s = e(156);
      t.exports = {
        isAncestor: o,
        getLowestCommonAncestor: r,
        getParentInstance: a,
        traverseTwoPhase: i,
        traverseEnterLeave: u
      }
    }, {
      156: 156
    }],
    56: [function(e, t, n) {
      "use strict";
      var r, o = (e(10), e(18), e(164), {
        onCreateMarkupForProperty: function(e, t) {
          r(e)
        },
        onSetValueForProperty: function(e, t, n) {
          r(t)
        },
        onDeleteValueForProperty: function(e, t) {
          r(t)
        }
      });
      t.exports = o
    }, {
      10: 10,
      164: 164,
      18: 18
    }],
    57: [function(e, t, n) {
      "use strict";

      function r(e, t, n, r, o, a) {}
      var o = e(71),
        a = (e(164), []),
        i = {
          addDevtool: function(e) {
            a.push(e)
          },
          removeDevtool: function(e) {
            for (var t = 0; t < a.length; t++) a[t] === e && (a.splice(t, 1), t--)
          },
          onBeginProcessingChildContext: function() {
            r("onBeginProcessingChildContext")
          },
          onEndProcessingChildContext: function() {
            r("onEndProcessingChildContext")
          },
          onSetState: function() {
            r("onSetState")
          },
          onMountRootComponent: function(e) {
            r("onMountRootComponent", e)
          },
          onMountComponent: function(e) {
            r("onMountComponent", e)
          },
          onUpdateComponent: function(e) {
            r("onUpdateComponent", e)
          },
          onUnmountComponent: function(e) {
            r("onUnmountComponent", e)
          }
        };
      i.addDevtool(o), t.exports = i
    }, {
      164: 164,
      71: 71
    }],
    58: [function(e, t, n) {
      "use strict";

      function r() {
        this.reinitializeTransaction()
      }
      var o = e(165),
        a = e(92),
        i = e(110),
        u = e(148),
        s = {
          initialize: u,
          close: function() {
            d.isBatchingUpdates = !1
          }
        },
        l = {
          initialize: u,
          close: a.flushBatchedUpdates.bind(a)
        },
        c = [l, s];
      o(r.prototype, i.Mixin, {
        getTransactionWrappers: function() {
          return c
        }
      });
      var p = new r,
        d = {
          isBatchingUpdates: !1,
          batchedUpdates: function(e, t, n, r, o, a) {
            var i = d.isBatchingUpdates;
            d.isBatchingUpdates = !0, i ? e(t, n, r, o, a) : p.perform(e, null, t, n, r, o, a)
          }
        };
      t.exports = d
    }, {
      110: 110,
      148: 148,
      165: 165,
      92: 92
    }],
    59: [function(e, t, n) {
      "use strict";

      function r() {
        E || (E = !0, g.EventEmitter.injectReactEventListener(m), g.EventPluginHub.injectEventPluginOrder(i), g.EventPluginUtils.injectComponentTree(p), g.EventPluginUtils.injectTreeTraversal(f), g.EventPluginHub.injectEventPluginsByName({
          SimpleEventPlugin: _,
          EnterLeaveEventPlugin: u,
          ChangeEventPlugin: a,
          SelectEventPlugin: b,
          BeforeInputEventPlugin: o
        }), g.NativeComponent.injectGenericComponentClass(c), g.NativeComponent.injectTextComponentClass(h), g.DOMProperty.injectDOMPropertyConfig(s), g.DOMProperty.injectDOMPropertyConfig(C), g.EmptyComponent.injectEmptyComponentFactory(function(e) {
          return new d(e)
        }), g.Updates.injectReconcileTransaction(y), g.Updates.injectBatchingStrategy(v), g.Component.injectEnvironment(l))
      }
      var o = e(2),
        a = e(6),
        i = e(13),
        u = e(15),
        s = (e(142), e(22)),
        l = e(32),
        c = e(38),
        p = e(40),
        d = e(43),
        f = e(55),
        h = e(53),
        v = e(58),
        m = e(65),
        g = e(67),
        y = e(84),
        C = e(94),
        b = e(95),
        _ = e(96),
        E = !1;
      t.exports = {
        inject: r
      }
    }, {
      13: 13,
      142: 142,
      15: 15,
      2: 2,
      22: 22,
      32: 32,
      38: 38,
      40: 40,
      43: 43,
      53: 53,
      55: 55,
      58: 58,
      6: 6,
      65: 65,
      67: 67,
      84: 84,
      94: 94,
      95: 95,
      96: 96
    }],
    60: [function(e, t, n) {
      "use strict";
      var r = e(165),
        o = e(35),
        a = (e(164), e(114), "function" == typeof Symbol && Symbol["for"] && Symbol["for"]("react.element") || 60103),
        i = {
          key: !0,
          ref: !0,
          __self: !0,
          __source: !0
        },
        u = function(e, t, n, r, o, i, u) {
          var s = {
            $$typeof: a,
            type: e,
            key: t,
            ref: n,
            props: u,
            _owner: i
          };
          return s
        };
      u.createElement = function(e, t, n) {
        var r, a = {},
          s = null,
          l = null,
          c = null,
          p = null;
        if (null != t) {
          l = void 0 === t.ref ? null : t.ref, s = void 0 === t.key ? null : "" + t.key, c = void 0 === t.__self ? null : t.__self, p = void 0 === t.__source ? null : t.__source;
          for (r in t) t.hasOwnProperty(r) && !i.hasOwnProperty(r) && (a[r] = t[r])
        }
        var d = arguments.length - 2;
        if (1 === d) a.children = n;
        else if (d > 1) {
          for (var f = Array(d), h = 0; d > h; h++) f[h] = arguments[h + 2];
          a.children = f
        }
        if (e && e.defaultProps) {
          var v = e.defaultProps;
          for (r in v) void 0 === a[r] && (a[r] = v[r])
        }
        return u(e, s, l, c, p, o.current, a)
      }, u.createFactory = function(e) {
        var t = u.createElement.bind(null, e);
        return t.type = e, t
      }, u.cloneAndReplaceKey = function(e, t) {
        var n = u(e.type, t, e.ref, e._self, e._source, e._owner, e.props);
        return n
      }, u.cloneElement = function(e, t, n) {
        var a, s = r({}, e.props),
          l = e.key,
          c = e.ref,
          p = e._self,
          d = e._source,
          f = e._owner;
        if (null != t) {
          void 0 !== t.ref && (c = t.ref, f = o.current), void 0 !== t.key && (l = "" + t.key);
          var h;
          e.type && e.type.defaultProps && (h = e.type.defaultProps);
          for (a in t) t.hasOwnProperty(a) && !i.hasOwnProperty(a) && (void 0 === t[a] && void 0 !== h ? s[a] = h[a] : s[a] = t[a])
        }
        var v = arguments.length - 2;
        if (1 === v) s.children = n;
        else if (v > 1) {
          for (var m = Array(v), g = 0; v > g; g++) m[g] = arguments[g + 2];
          s.children = m
        }
        return u(e.type, l, c, p, d, f, s)
      }, u.isValidElement = function(e) {
        return "object" == typeof e && null !== e && e.$$typeof === a
      }, t.exports = u
    }, {
      114: 114,
      164: 164,
      165: 165,
      35: 35
    }],
    61: [function(e, t, n) {
      "use strict";

      function r() {
        if (p.current) {
          var e = p.current.getName();
          if (e) return " Check the render method of `" + e + "`."
        }
        return ""
      }

      function o(e, t) {
        e._store && !e._store.validated && null == e.key && (e._store.validated = !0, a("uniqueKey", e, t))
      }

      function a(e, t, n) {
        var o = r();
        if (!o) {
          var a = "string" == typeof n ? n : n.displayName || n.name;
          a && (o = " Check the top-level render call using <" + a + ">.")
        }
        var i = h[e] || (h[e] = {});
        if (i[o]) return null;
        i[o] = !0;
        var u = {
          parentOrOwner: o,
          url: " See https://fb.me/react-warning-keys for more information.",
          childOwner: null
        };
        return t && t._owner && t._owner !== p.current && (u.childOwner = " It was passed a child from " + t._owner.getName() + "."), u
      }

      function i(e, t) {
        if ("object" == typeof e)
          if (Array.isArray(e))
            for (var n = 0; n < e.length; n++) {
              var r = e[n];
              l.isValidElement(r) && o(r, t)
            } else if (l.isValidElement(e)) e._store && (e._store.validated = !0);
            else if (e) {
          var a = d(e);
          if (a && a !== e.entries)
            for (var i, u = a.call(e); !(i = u.next()).done;) l.isValidElement(i.value) && o(i.value, t)
        }
      }

      function u(e, t, n, o) {
        for (var a in t)
          if (t.hasOwnProperty(a)) {
            var i;
            try {
              "function" != typeof t[a] ? f(!1) : void 0, i = t[a](n, a, e, o)
            } catch (u) {
              i = u
            }
            i instanceof Error && !(i.message in v) && (v[i.message] = !0, r())
          }
      }

      function s(e) {
        var t = e.type;
        if ("function" == typeof t) {
          var n = t.displayName || t.name;
          t.propTypes && u(n, t.propTypes, e.props, c.prop), "function" == typeof t.getDefaultProps
        }
      }
      var l = e(60),
        c = e(82),
        p = (e(81), e(35)),
        d = (e(114), e(125)),
        f = e(156),
        h = (e(164), {}),
        v = {},
        m = {
          createElement: function(e, t, n) {
            var r = "string" == typeof e || "function" == typeof e,
              o = l.createElement.apply(this, arguments);
            if (null == o) return o;
            if (r)
              for (var a = 2; a < arguments.length; a++) i(arguments[a], e);
            return s(o), o
          },
          createFactory: function(e) {
            var t = m.createElement.bind(null, e);
            return t.type = e, t
          },
          cloneElement: function(e, t, n) {
            for (var r = l.cloneElement.apply(this, arguments), o = 2; o < arguments.length; o++) i(arguments[o], r.type);
            return s(r), r
          }
        };
      t.exports = m
    }, {
      114: 114,
      125: 125,
      156: 156,
      164: 164,
      35: 35,
      60: 60,
      81: 81,
      82: 82
    }],
    62: [function(e, t, n) {
      "use strict";
      var r, o = {
          injectEmptyComponentFactory: function(e) {
            r = e
          }
        },
        a = {
          create: function(e) {
            return r(e)
          }
        };
      a.injection = o, t.exports = a
    }, {}],
    63: [function(e, t, n) {
      "use strict";

      function r(e, t, n, r) {
        try {
          return t(n, r)
        } catch (a) {
          return void(null === o && (o = a))
        }
      }
      var o = null,
        a = {
          invokeGuardedCallback: r,
          invokeGuardedCallbackWithCatch: r,
          rethrowCaughtError: function() {
            if (o) {
              var e = o;
              throw o = null, e
            }
          }
        };
      t.exports = a
    }, {}],
    64: [function(e, t, n) {
      "use strict";

      function r(e) {
        o.enqueueEvents(e), o.processEventQueue(!1)
      }
      var o = e(17),
        a = {
          handleTopLevel: function(e, t, n, a) {
            var i = o.extractEvents(e, t, n, a);
            r(i)
          }
        };
      t.exports = a
    }, {
      17: 17
    }],
    65: [function(e, t, n) {
      "use strict";

      function r(e) {
        for (; e._nativeParent;) e = e._nativeParent;
        var t = p.getNodeFromInstance(e),
          n = t.parentNode;
        return p.getClosestInstanceFromNode(n)
      }

      function o(e, t) {
        this.topLevelType = e, this.nativeEvent = t, this.ancestors = []
      }

      function a(e) {
        var t = f(e.nativeEvent),
          n = p.getClosestInstanceFromNode(t),
          o = n;
        do e.ancestors.push(o), o = o && r(o); while (o);
        for (var a = 0; a < e.ancestors.length; a++) n = e.ancestors[a], v._handleTopLevel(e.topLevelType, n, e.nativeEvent, f(e.nativeEvent))
      }

      function i(e) {
        var t = h(window);
        e(t)
      }
      var u = e(165),
        s = e(141),
        l = e(142),
        c = e(25),
        p = e(40),
        d = e(92),
        f = e(124),
        h = e(153);
      u(o.prototype, {
        destructor: function() {
          this.topLevelType = null, this.nativeEvent = null, this.ancestors.length = 0
        }
      }), c.addPoolingTo(o, c.twoArgumentPooler);
      var v = {
        _enabled: !0,
        _handleTopLevel: null,
        WINDOW_HANDLE: l.canUseDOM ? window : null,
        setHandleTopLevel: function(e) {
          v._handleTopLevel = e
        },
        setEnabled: function(e) {
          v._enabled = !!e
        },
        isEnabled: function() {
          return v._enabled
        },
        trapBubbledEvent: function(e, t, n) {
          var r = n;
          return r ? s.listen(r, t, v.dispatchEvent.bind(null, e)) : null
        },
        trapCapturedEvent: function(e, t, n) {
          var r = n;
          return r ? s.capture(r, t, v.dispatchEvent.bind(null, e)) : null
        },
        monitorScrollValue: function(e) {
          var t = i.bind(null, e);
          s.listen(window, "scroll", t)
        },
        dispatchEvent: function(e, t) {
          if (v._enabled) {
            var n = o.getPooled(e, t);
            try {
              d.batchedUpdates(a, n)
            } finally {
              o.release(n)
            }
          }
        }
      };
      t.exports = v
    }, {
      124: 124,
      141: 141,
      142: 142,
      153: 153,
      165: 165,
      25: 25,
      40: 40,
      92: 92
    }],
    66: [function(e, t, n) {
      "use strict";
      var r = {
        logTopLevelRenders: !1
      };
      t.exports = r
    }, {}],
    67: [function(e, t, n) {
      "use strict";
      var r = e(10),
        o = e(17),
        a = e(19),
        i = e(33),
        u = e(30),
        s = e(62),
        l = e(27),
        c = e(76),
        p = e(80),
        d = e(92),
        f = {
          Component: i.injection,
          Class: u.injection,
          DOMProperty: r.injection,
          EmptyComponent: s.injection,
          EventPluginHub: o.injection,
          EventPluginUtils: a.injection,
          EventEmitter: l.injection,
          NativeComponent: c.injection,
          Perf: p.injection,
          Updates: d.injection
        };
      t.exports = f
    }, {
      10: 10,
      17: 17,
      19: 19,
      27: 27,
      30: 30,
      33: 33,
      62: 62,
      76: 76,
      80: 80,
      92: 92
    }],
    68: [function(e, t, n) {
      "use strict";

      function r(e) {
        return a(document.documentElement, e)
      }
      var o = e(51),
        a = e(145),
        i = e(150),
        u = e(151),
        s = {
          hasSelectionCapabilities: function(e) {
            var t = e && e.nodeName && e.nodeName.toLowerCase();
            return t && ("input" === t && "text" === e.type || "textarea" === t || "true" === e.contentEditable)
          },
          getSelectionInformation: function() {
            var e = u();
            return {
              focusedElem: e,
              selectionRange: s.hasSelectionCapabilities(e) ? s.getSelection(e) : null
            }
          },
          restoreSelection: function(e) {
            var t = u(),
              n = e.focusedElem,
              o = e.selectionRange;
            t !== n && r(n) && (s.hasSelectionCapabilities(n) && s.setSelection(n, o), i(n))
          },
          getSelection: function(e) {
            var t;
            if ("selectionStart" in e) t = {
              start: e.selectionStart,
              end: e.selectionEnd
            };
            else if (document.selection && e.nodeName && "input" === e.nodeName.toLowerCase()) {
              var n = document.selection.createRange();
              n.parentElement() === e && (t = {
                start: -n.moveStart("character", -e.value.length),
                end: -n.moveEnd("character", -e.value.length)
              })
            } else t = o.getOffsets(e);
            return t || {
              start: 0,
              end: 0
            }
          },
          setSelection: function(e, t) {
            var n = t.start,
              r = t.end;
            if (void 0 === r && (r = n), "selectionStart" in e) e.selectionStart = n, e.selectionEnd = Math.min(r, e.value.length);
            else if (document.selection && e.nodeName && "input" === e.nodeName.toLowerCase()) {
              var a = e.createTextRange();
              a.collapse(!0), a.moveStart("character", n), a.moveEnd("character", r - n), a.select()
            } else o.setOffsets(e, t)
          }
        };
      t.exports = s
    }, {
      145: 145,
      150: 150,
      151: 151,
      51: 51
    }],
    69: [function(e, t, n) {
      "use strict";
      var r = {
        remove: function(e) {
          e._reactInternalInstance = void 0
        },
        get: function(e) {
          return e._reactInternalInstance
        },
        has: function(e) {
          return void 0 !== e._reactInternalInstance
        },
        set: function(e, t) {
          e._reactInternalInstance = t
        }
      };
      t.exports = r
    }, {}],
    70: [function(e, t, n) {
      "use strict";
      var r = e(57);
      t.exports = {
        debugTool: r
      }
    }, {
      57: 57
    }],
    71: [function(e, t, n) {
      "use strict";
      var r, o, a = (e(164), {
        onBeginProcessingChildContext: function() {
          r = !0
        },
        onEndProcessingChildContext: function() {
          r = !1
        },
        onSetState: function() {
          o()
        }
      });
      t.exports = a
    }, {
      164: 164
    }],
    72: [function(e, t, n) {
      "use strict";
      var r = e(113),
        o = /\/?>/,
        a = /^<\!\-\-/,
        i = {
          CHECKSUM_ATTR_NAME: "data-react-checksum",
          addChecksumToMarkup: function(e) {
            var t = r(e);
            return a.test(e) ? e : e.replace(o, " " + i.CHECKSUM_ATTR_NAME + '="' + t + '"$&')
          },
          canReuseMarkup: function(e, t) {
            var n = t.getAttribute(i.CHECKSUM_ATTR_NAME);
            n = n && parseInt(n, 10);
            var o = r(e);
            return o === n
          }
        };
      t.exports = i
    }, {
      113: 113
    }],
    73: [function(e, t, n) {
      "use strict";

      function r(e, t) {
        for (var n = Math.min(e.length, t.length), r = 0; n > r; r++)
          if (e.charAt(r) !== t.charAt(r)) return r;
        return e.length === t.length ? -1 : n
      }

      function o(e) {
        return e ? e.nodeType === I ? e.documentElement : e.firstChild : null
      }

      function a(e) {
        return e.getAttribute && e.getAttribute(k) || ""
      }

      function i(e, t, n, r, o) {
        var a;
        if (C.logTopLevelRenders) {
          var i = e._currentElement.props,
            u = i.type;
          a = "React mount: " + ("string" == typeof u ? u : u.displayName || u.name), console.time(a)
        }
        var s = E.mountComponent(e, n, null, m(e, t), o);
        a && console.timeEnd(a), e._renderedComponent._topLevelWrapper = e, F._mountImageIntoNode(s, t, e, r, n)
      }

      function u(e, t, n, r) {
        var o = N.ReactReconcileTransaction.getPooled(!n && g.useCreateElement);
        o.perform(i, null, e, t, o, n, r), N.ReactReconcileTransaction.release(o)
      }

      function s(e, t, n) {
        for (E.unmountComponent(e, n), t.nodeType === I && (t = t.documentElement); t.lastChild;) t.removeChild(t.lastChild)
      }

      function l(e) {
        var t = o(e);
        if (t) {
          var n = v.getInstanceFromNode(t);
          return !(!n || !n._nativeParent)
        }
      }

      function c(e) {
        var t = o(e),
          n = t && v.getInstanceFromNode(t);
        return n && !n._nativeParent ? n : null
      }

      function p(e) {
        var t = c(e);
        return t ? t._nativeContainerInfo._topLevelWrapper : null
      }
      var d = e(8),
        f = e(10),
        h = e(27),
        v = (e(35), e(40)),
        m = e(41),
        g = e(45),
        y = e(60),
        C = e(66),
        b = (e(70), e(72)),
        _ = e(80),
        E = e(85),
        x = e(91),
        N = e(92),
        P = e(149),
        T = e(130),
        w = e(156),
        M = e(136),
        S = e(138),
        k = (e(164), f.ID_ATTRIBUTE_NAME),
        R = f.ROOT_ATTRIBUTE_NAME,
        D = 1,
        I = 9,
        O = 11,
        A = {},
        L = 1,
        U = function() {
          this.rootID = L++
        };
      U.prototype.isReactComponent = {}, U.prototype.render = function() {
        return this.props
      };
      var F = {
        TopLevelWrapper: U,
        _instancesByReactRootID: A,
        scrollMonitor: function(e, t) {
          t()
        },
        _updateRootComponent: function(e, t, n, r) {
          return F.scrollMonitor(n, function() {
            x.enqueueElementInternal(e, t), r && x.enqueueCallbackInternal(e, r)
          }), e
        },
        _renderNewRootComponent: function(e, t, n, r) {
          !t || t.nodeType !== D && t.nodeType !== I && t.nodeType !== O ? w(!1) : void 0, h.ensureScrollValueMonitoring();
          var o = T(e);
          N.batchedUpdates(u, o, t, n, r);
          var a = o._instance.rootID;
          return A[a] = o, o
        },
        renderSubtreeIntoContainer: function(e, t, n, r) {
          return null == e || null == e._reactInternalInstance ? w(!1) : void 0, F._renderSubtreeIntoContainer(e, t, n, r)
        },
        _renderSubtreeIntoContainer: function(e, t, n, r) {
          x.validateCallback(r, "ReactDOM.render"), y.isValidElement(t) ? void 0 : w(!1);
          var i = y(U, null, null, null, null, null, t),
            u = p(n);
          if (u) {
            var s = u._currentElement,
              c = s.props;
            if (S(c, t)) {
              var d = u._renderedComponent.getPublicInstance(),
                f = r && function() {
                  r.call(d)
                };
              return F._updateRootComponent(u, i, n, f), d
            }
            F.unmountComponentAtNode(n)
          }
          var h = o(n),
            v = h && !!a(h),
            m = l(n),
            g = v && !u && !m,
            C = F._renderNewRootComponent(i, n, g, null != e ? e._reactInternalInstance._processChildContext(e._reactInternalInstance._context) : P)._renderedComponent.getPublicInstance();
          return r && r.call(C), C
        },
        render: function(e, t, n) {
          return F._renderSubtreeIntoContainer(null, e, t, n)
        },
        unmountComponentAtNode: function(e) {
          !e || e.nodeType !== D && e.nodeType !== I && e.nodeType !== O ? w(!1) : void 0;
          var t = p(e);
          return t ? (delete A[t._instance.rootID], N.batchedUpdates(s, t, e, !1), !0) : (l(e), 1 === e.nodeType && e.hasAttribute(R), !1)
        },
        _mountImageIntoNode: function(e, t, n, a, i) {
          if (!t || t.nodeType !== D && t.nodeType !== I && t.nodeType !== O ? w(!1) : void 0, a) {
            var u = o(t);
            if (b.canReuseMarkup(e, u)) return void v.precacheNode(n, u);
            var s = u.getAttribute(b.CHECKSUM_ATTR_NAME);
            u.removeAttribute(b.CHECKSUM_ATTR_NAME);
            var l = u.outerHTML;
            u.setAttribute(b.CHECKSUM_ATTR_NAME, s);
            var c = e,
              p = r(c, l);
            " (client) " + c.substring(p - 20, p + 20) + "\n (server) " + l.substring(p - 20, p + 20), t.nodeType === I ? w(!1) : void 0
          }
          if (t.nodeType === I ? w(!1) : void 0, i.useCreateElement) {
            for (; t.lastChild;) t.removeChild(t.lastChild);
            d.insertTreeBefore(t, e, null)
          } else M(t, e), v.precacheNode(n, t.firstChild)
        }
      };
      _.measureMethods(F, "ReactMount", {
        _renderNewRootComponent: "_renderNewRootComponent",
        _mountImageIntoNode: "_mountImageIntoNode"
      }), t.exports = F
    }, {
      10: 10,
      130: 130,
      136: 136,
      138: 138,
      149: 149,
      156: 156,
      164: 164,
      27: 27,
      35: 35,
      40: 40,
      41: 41,
      45: 45,
      60: 60,
      66: 66,
      70: 70,
      72: 72,
      8: 8,
      80: 80,
      85: 85,
      91: 91,
      92: 92
    }],
    74: [function(e, t, n) {
      "use strict";

      function r(e, t, n) {
        return {
          type: p.INSERT_MARKUP,
          content: e,
          fromIndex: null,
          fromNode: null,
          toIndex: n,
          afterNode: t
        }
      }

      function o(e, t, n) {
        return {
          type: p.MOVE_EXISTING,
          content: null,
          fromIndex: e._mountIndex,
          fromNode: d.getNativeNode(e),
          toIndex: n,
          afterNode: t
        }
      }

      function a(e, t) {
        return {
          type: p.REMOVE_NODE,
          content: null,
          fromIndex: e._mountIndex,
          fromNode: t,
          toIndex: null,
          afterNode: null
        }
      }

      function i(e) {
        return {
          type: p.SET_MARKUP,
          content: e,
          fromIndex: null,
          fromNode: null,
          toIndex: null,
          afterNode: null
        }
      }

      function u(e) {
        return {
          type: p.TEXT_CONTENT,
          content: e,
          fromIndex: null,
          fromNode: null,
          toIndex: null,
          afterNode: null
        }
      }

      function s(e, t) {
        return t && (e = e || [], e.push(t)), e
      }

      function l(e, t) {
        c.processChildrenUpdates(e, t)
      }
      var c = e(33),
        p = e(75),
        d = (e(35), e(85)),
        f = e(28),
        h = e(119),
        v = e(156),
        m = {
          Mixin: {
            _reconcilerInstantiateChildren: function(e, t, n) {
              return f.instantiateChildren(e, t, n)
            },
            _reconcilerUpdateChildren: function(e, t, n, r, o) {
              var a;
              return a = h(t), f.updateChildren(e, a, n, r, o), a
            },
            mountChildren: function(e, t, n) {
              var r = this._reconcilerInstantiateChildren(e, t, n);
              this._renderedChildren = r;
              var o = [],
                a = 0;
              for (var i in r)
                if (r.hasOwnProperty(i)) {
                  var u = r[i],
                    s = d.mountComponent(u, t, this, this._nativeContainerInfo, n);
                  u._mountIndex = a++, o.push(s)
                }
              return o
            },
            updateTextContent: function(e) {
              var t = this._renderedChildren;
              f.unmountChildren(t, !1);
              for (var n in t) t.hasOwnProperty(n) && v(!1);
              var r = [u(e)];
              l(this, r)
            },
            updateMarkup: function(e) {
              var t = this._renderedChildren;
              f.unmountChildren(t, !1);
              for (var n in t) t.hasOwnProperty(n) && v(!1);
              var r = [i(e)];
              l(this, r)
            },
            updateChildren: function(e, t, n) {
              this._updateChildren(e, t, n)
            },
            _updateChildren: function(e, t, n) {
              var r = this._renderedChildren,
                o = {},
                a = this._reconcilerUpdateChildren(r, e, o, t, n);
              if (a || r) {
                var i, u = null,
                  c = 0,
                  p = 0,
                  f = null;
                for (i in a)
                  if (a.hasOwnProperty(i)) {
                    var h = r && r[i],
                      v = a[i];
                    h === v ? (u = s(u, this.moveChild(h, f, p, c)), c = Math.max(h._mountIndex, c), h._mountIndex = p) : (h && (c = Math.max(h._mountIndex, c)), u = s(u, this._mountChildAtIndex(v, f, p, t, n))), p++, f = d.getNativeNode(v)
                  }
                for (i in o) o.hasOwnProperty(i) && (u = s(u, this._unmountChild(r[i], o[i])));
                u && l(this, u), this._renderedChildren = a
              }
            },
            unmountChildren: function(e) {
              var t = this._renderedChildren;
              f.unmountChildren(t, e), this._renderedChildren = null
            },
            moveChild: function(e, t, n, r) {
              return e._mountIndex < r ? o(e, t, n) : void 0
            },
            createChild: function(e, t, n) {
              return r(n, t, e._mountIndex)
            },
            removeChild: function(e, t) {
              return a(e, t)
            },
            _mountChildAtIndex: function(e, t, n, r, o) {
              var a = d.mountComponent(e, r, this, this._nativeContainerInfo, o);
              return e._mountIndex = n, this.createChild(e, t, a)
            },
            _unmountChild: function(e, t) {
              var n = this.removeChild(e, t);
              return e._mountIndex = null, n
            }
          }
        };
      t.exports = m
    }, {
      119: 119,
      156: 156,
      28: 28,
      33: 33,
      35: 35,
      75: 75,
      85: 85
    }],
    75: [function(e, t, n) {
      "use strict";
      var r = e(159),
        o = r({
          INSERT_MARKUP: null,
          MOVE_EXISTING: null,
          REMOVE_NODE: null,
          SET_MARKUP: null,
          TEXT_CONTENT: null
        });
      t.exports = o
    }, {
      159: 159
    }],
    76: [function(e, t, n) {
      "use strict";

      function r(e) {
        if ("function" == typeof e.type) return e.type;
        var t = e.type,
          n = p[t];
        return null == n && (p[t] = n = l(t)), n
      }

      function o(e) {
        return c ? void 0 : s(!1), new c(e)
      }

      function a(e) {
        return new d(e)
      }

      function i(e) {
        return e instanceof d
      }
      var u = e(165),
        s = e(156),
        l = null,
        c = null,
        p = {},
        d = null,
        f = {
          injectGenericComponentClass: function(e) {
            c = e
          },
          injectTextComponentClass: function(e) {
            d = e
          },
          injectComponentClasses: function(e) {
            u(p, e)
          }
        },
        h = {
          getComponentClassForElement: r,
          createInternalComponent: o,
          createInstanceForText: a,
          isTextComponent: i,
          injection: f
        };
      t.exports = h
    }, {
      156: 156,
      165: 165
    }],
    77: [function(e, t, n) {
      "use strict";
      var r = e(60),
        o = e(156),
        a = {
          NATIVE: 0,
          COMPOSITE: 1,
          EMPTY: 2,
          getType: function(e) {
            return null === e || e === !1 ? a.EMPTY : r.isValidElement(e) ? "function" == typeof e.type ? a.COMPOSITE : a.NATIVE : void o(!1)
          }
        };
      t.exports = a
    }, {
      156: 156,
      60: 60
    }],
    78: [function(e, t, n) {
      "use strict";

      function r(e, t) {}
      var o = (e(164), {
        isMounted: function(e) {
          return !1
        },
        enqueueCallback: function(e, t) {},
        enqueueForceUpdate: function(e) {
          r(e, "forceUpdate")
        },
        enqueueReplaceState: function(e, t) {
          r(e, "replaceState")
        },
        enqueueSetState: function(e, t) {
          r(e, "setState")
        }
      });
      t.exports = o
    }, {
      164: 164
    }],
    79: [function(e, t, n) {
      "use strict";
      var r = e(156),
        o = {
          isValidOwner: function(e) {
            return !(!e || "function" != typeof e.attachRef || "function" != typeof e.detachRef)
          },
          addComponentAsRefTo: function(e, t, n) {
            o.isValidOwner(n) ? void 0 : r(!1), n.attachRef(t, e)
          },
          removeComponentAsRefFrom: function(e, t, n) {
            o.isValidOwner(n) ? void 0 : r(!1);
            var a = n.getPublicInstance();
            a && a.refs[t] === e.getPublicInstance() && n.detachRef(t)
          }
        };
      t.exports = o
    }, {
      156: 156
    }],
    80: [function(e, t, n) {
      "use strict";

      function r(e, t, n) {
        return n
      }
      var o = {
        enableMeasure: !1,
        storedMeasure: r,
        measureMethods: function(e, t, n) {},
        measure: function(e, t, n) {
          return n
        },
        injection: {
          injectMeasure: function(e) {
            o.storedMeasure = e
          }
        }
      };
      t.exports = o
    }, {}],
    81: [function(e, t, n) {
      "use strict";
      var r = {};
      t.exports = r
    }, {}],
    82: [function(e, t, n) {
      "use strict";
      var r = e(159),
        o = r({
          prop: null,
          context: null,
          childContext: null
        });
      t.exports = o
    }, {
      159: 159
    }],
    83: [function(e, t, n) {
      "use strict";

      function r(e, t) {
        return e === t ? 0 !== e || 1 / e === 1 / t : e !== e && t !== t
      }

      function o(e) {
        function t(t, n, r, o, a, i) {
          if (o = o || x, i = i || r, null == n[r]) {
            var u = b[a];
            return t ? new Error("Required " + u + " `" + i + "` was not specified in " + ("`" + o + "`.")) : null
          }
          return e(n, r, o, a, i)
        }
        var n = t.bind(null, !1);
        return n.isRequired = t.bind(null, !0), n
      }

      function a(e) {
        function t(t, n, r, o, a) {
          var i = t[n],
            u = m(i);
          if (u !== e) {
            var s = b[o],
              l = g(i);
            return new Error("Invalid " + s + " `" + a + "` of type " + ("`" + l + "` supplied to `" + r + "`, expected ") + ("`" + e + "`."));
          }
          return null
        }
        return o(t)
      }

      function i() {
        return o(_.thatReturns(null))
      }

      function u(e) {
        function t(t, n, r, o, a) {
          if ("function" != typeof e) return new Error("Property `" + a + "` of component `" + r + "` has invalid PropType notation inside arrayOf.");
          var i = t[n];
          if (!Array.isArray(i)) {
            var u = b[o],
              s = m(i);
            return new Error("Invalid " + u + " `" + a + "` of type " + ("`" + s + "` supplied to `" + r + "`, expected an array."))
          }
          for (var l = 0; l < i.length; l++) {
            var c = e(i, l, r, o, a + "[" + l + "]");
            if (c instanceof Error) return c
          }
          return null
        }
        return o(t)
      }

      function s() {
        function e(e, t, n, r, o) {
          if (!C.isValidElement(e[t])) {
            var a = b[r];
            return new Error("Invalid " + a + " `" + o + "` supplied to " + ("`" + n + "`, expected a single ReactElement."))
          }
          return null
        }
        return o(e)
      }

      function l(e) {
        function t(t, n, r, o, a) {
          if (!(t[n] instanceof e)) {
            var i = b[o],
              u = e.name || x,
              s = y(t[n]);
            return new Error("Invalid " + i + " `" + a + "` of type " + ("`" + s + "` supplied to `" + r + "`, expected ") + ("instance of `" + u + "`."))
          }
          return null
        }
        return o(t)
      }

      function c(e) {
        function t(t, n, o, a, i) {
          for (var u = t[n], s = 0; s < e.length; s++)
            if (r(u, e[s])) return null;
          var l = b[a],
            c = JSON.stringify(e);
          return new Error("Invalid " + l + " `" + i + "` of value `" + u + "` " + ("supplied to `" + o + "`, expected one of " + c + "."))
        }
        return o(Array.isArray(e) ? t : function() {
          return new Error("Invalid argument supplied to oneOf, expected an instance of array.")
        })
      }

      function p(e) {
        function t(t, n, r, o, a) {
          if ("function" != typeof e) return new Error("Property `" + a + "` of component `" + r + "` has invalid PropType notation inside objectOf.");
          var i = t[n],
            u = m(i);
          if ("object" !== u) {
            var s = b[o];
            return new Error("Invalid " + s + " `" + a + "` of type " + ("`" + u + "` supplied to `" + r + "`, expected an object."))
          }
          for (var l in i)
            if (i.hasOwnProperty(l)) {
              var c = e(i, l, r, o, a + "." + l);
              if (c instanceof Error) return c
            }
          return null
        }
        return o(t)
      }

      function d(e) {
        function t(t, n, r, o, a) {
          for (var i = 0; i < e.length; i++) {
            var u = e[i];
            if (null == u(t, n, r, o, a)) return null
          }
          var s = b[o];
          return new Error("Invalid " + s + " `" + a + "` supplied to " + ("`" + r + "`."))
        }
        return o(Array.isArray(e) ? t : function() {
          return new Error("Invalid argument supplied to oneOfType, expected an instance of array.")
        })
      }

      function f() {
        function e(e, t, n, r, o) {
          if (!v(e[t])) {
            var a = b[r];
            return new Error("Invalid " + a + " `" + o + "` supplied to " + ("`" + n + "`, expected a ReactNode."))
          }
          return null
        }
        return o(e)
      }

      function h(e) {
        function t(t, n, r, o, a) {
          var i = t[n],
            u = m(i);
          if ("object" !== u) {
            var s = b[o];
            return new Error("Invalid " + s + " `" + a + "` of type `" + u + "` " + ("supplied to `" + r + "`, expected `object`."))
          }
          for (var l in e) {
            var c = e[l];
            if (c) {
              var p = c(i, l, r, o, a + "." + l);
              if (p) return p
            }
          }
          return null
        }
        return o(t)
      }

      function v(e) {
        switch (typeof e) {
          case "number":
          case "string":
          case "undefined":
            return !0;
          case "boolean":
            return !e;
          case "object":
            if (Array.isArray(e)) return e.every(v);
            if (null === e || C.isValidElement(e)) return !0;
            var t = E(e);
            if (!t) return !1;
            var n, r = t.call(e);
            if (t !== e.entries) {
              for (; !(n = r.next()).done;)
                if (!v(n.value)) return !1
            } else
              for (; !(n = r.next()).done;) {
                var o = n.value;
                if (o && !v(o[1])) return !1
              }
            return !0;
          default:
            return !1
        }
      }

      function m(e) {
        var t = typeof e;
        return Array.isArray(e) ? "array" : e instanceof RegExp ? "object" : t
      }

      function g(e) {
        var t = m(e);
        if ("object" === t) {
          if (e instanceof Date) return "date";
          if (e instanceof RegExp) return "regexp"
        }
        return t
      }

      function y(e) {
        return e.constructor && e.constructor.name ? e.constructor.name : x
      }
      var C = e(60),
        b = e(81),
        _ = e(148),
        E = e(125),
        x = "<<anonymous>>",
        N = {
          array: a("array"),
          bool: a("boolean"),
          func: a("function"),
          number: a("number"),
          object: a("object"),
          string: a("string"),
          any: i(),
          arrayOf: u,
          element: s(),
          instanceOf: l,
          node: f(),
          objectOf: p,
          oneOf: c,
          oneOfType: d,
          shape: h
        };
      t.exports = N
    }, {
      125: 125,
      148: 148,
      60: 60,
      81: 81
    }],
    84: [function(e, t, n) {
      "use strict";

      function r(e) {
        this.reinitializeTransaction(), this.renderToStaticMarkup = !1, this.reactMountReady = a.getPooled(null), this.useCreateElement = e
      }
      var o = e(165),
        a = e(5),
        i = e(25),
        u = e(27),
        s = e(68),
        l = e(110),
        c = {
          initialize: s.getSelectionInformation,
          close: s.restoreSelection
        },
        p = {
          initialize: function() {
            var e = u.isEnabled();
            return u.setEnabled(!1), e
          },
          close: function(e) {
            u.setEnabled(e)
          }
        },
        d = {
          initialize: function() {
            this.reactMountReady.reset()
          },
          close: function() {
            this.reactMountReady.notifyAll()
          }
        },
        f = [c, p, d],
        h = {
          getTransactionWrappers: function() {
            return f
          },
          getReactMountReady: function() {
            return this.reactMountReady
          },
          checkpoint: function() {
            return this.reactMountReady.checkpoint()
          },
          rollback: function(e) {
            this.reactMountReady.rollback(e)
          },
          destructor: function() {
            a.release(this.reactMountReady), this.reactMountReady = null
          }
        };
      o(r.prototype, l.Mixin, h), i.addPoolingTo(r), t.exports = r
    }, {
      110: 110,
      165: 165,
      25: 25,
      27: 27,
      5: 5,
      68: 68
    }],
    85: [function(e, t, n) {
      "use strict";

      function r() {
        o.attachRefs(this, this._currentElement)
      }
      var o = e(86),
        a = (e(70), {
          mountComponent: function(e, t, n, o, a) {
            var i = e.mountComponent(t, n, o, a);
            return e._currentElement && null != e._currentElement.ref && t.getReactMountReady().enqueue(r, e), i
          },
          getNativeNode: function(e) {
            return e.getNativeNode()
          },
          unmountComponent: function(e, t) {
            o.detachRefs(e, e._currentElement), e.unmountComponent(t)
          },
          receiveComponent: function(e, t, n, a) {
            var i = e._currentElement;
            if (t !== i || a !== e._context) {
              var u = o.shouldUpdateRefs(i, t);
              u && o.detachRefs(e, i), e.receiveComponent(t, n, a), u && e._currentElement && null != e._currentElement.ref && n.getReactMountReady().enqueue(r, e)
            }
          },
          performUpdateIfNecessary: function(e, t) {
            e.performUpdateIfNecessary(t)
          }
        });
      t.exports = a
    }, {
      70: 70,
      86: 86
    }],
    86: [function(e, t, n) {
      "use strict";

      function r(e, t, n) {
        "function" == typeof e ? e(t.getPublicInstance()) : a.addComponentAsRefTo(t, e, n)
      }

      function o(e, t, n) {
        "function" == typeof e ? e(null) : a.removeComponentAsRefFrom(t, e, n)
      }
      var a = e(79),
        i = {};
      i.attachRefs = function(e, t) {
        if (null !== t && t !== !1) {
          var n = t.ref;
          null != n && r(n, e, t._owner)
        }
      }, i.shouldUpdateRefs = function(e, t) {
        var n = null === e || e === !1,
          r = null === t || t === !1;
        return n || r || t._owner !== e._owner || t.ref !== e.ref
      }, i.detachRefs = function(e, t) {
        if (null !== t && t !== !1) {
          var n = t.ref;
          null != n && o(n, e, t._owner)
        }
      }, t.exports = i
    }, {
      79: 79
    }],
    87: [function(e, t, n) {
      "use strict";
      var r = {
        isBatchingUpdates: !1,
        batchedUpdates: function(e) {}
      };
      t.exports = r
    }, {}],
    88: [function(e, t, n) {
      "use strict";

      function r(e, t) {
        var n;
        try {
          return d.injection.injectBatchingStrategy(c), n = p.getPooled(t), n.perform(function() {
            var r = h(e),
              o = r.mountComponent(n, null, i(), f);
            return t || (o = l.addChecksumToMarkup(o)), o
          }, null)
        } finally {
          p.release(n), d.injection.injectBatchingStrategy(u)
        }
      }

      function o(e) {
        return s.isValidElement(e) ? void 0 : v(!1), r(e, !1)
      }

      function a(e) {
        return s.isValidElement(e) ? void 0 : v(!1), r(e, !0)
      }
      var i = e(41),
        u = e(58),
        s = e(60),
        l = e(72),
        c = e(87),
        p = e(89),
        d = e(92),
        f = e(149),
        h = e(130),
        v = e(156);
      t.exports = {
        renderToString: o,
        renderToStaticMarkup: a
      }
    }, {
      130: 130,
      149: 149,
      156: 156,
      41: 41,
      58: 58,
      60: 60,
      72: 72,
      87: 87,
      89: 89,
      92: 92
    }],
    89: [function(e, t, n) {
      "use strict";

      function r(e) {
        this.reinitializeTransaction(), this.renderToStaticMarkup = e, this.useCreateElement = !1
      }
      var o = e(165),
        a = e(25),
        i = e(110),
        u = [],
        s = {
          enqueue: function() {}
        },
        l = {
          getTransactionWrappers: function() {
            return u
          },
          getReactMountReady: function() {
            return s
          },
          destructor: function() {}
        };
      o(r.prototype, i.Mixin, l), a.addPoolingTo(r), t.exports = r
    }, {
      110: 110,
      165: 165,
      25: 25
    }],
    90: [function(e, t, n) {
      "use strict";
      var r = e(165),
        o = e(36),
        a = e(52),
        i = e(26),
        u = r({
          __SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: o,
          __SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: a
        }, i);
      t.exports = u
    }, {
      165: 165,
      26: 26,
      36: 36,
      52: 52
    }],
    91: [function(e, t, n) {
      "use strict";

      function r(e) {
        i.enqueueUpdate(e)
      }

      function o(e, t) {
        var n = a.get(e);
        return n ? n : null
      }
      var a = (e(35), e(69)),
        i = e(92),
        u = e(156),
        s = (e(164), {
          isMounted: function(e) {
            var t = a.get(e);
            return t ? !!t._renderedComponent : !1
          },
          enqueueCallback: function(e, t, n) {
            s.validateCallback(t, n);
            var a = o(e);
            return a ? (a._pendingCallbacks ? a._pendingCallbacks.push(t) : a._pendingCallbacks = [t], void r(a)) : null
          },
          enqueueCallbackInternal: function(e, t) {
            e._pendingCallbacks ? e._pendingCallbacks.push(t) : e._pendingCallbacks = [t], r(e)
          },
          enqueueForceUpdate: function(e) {
            var t = o(e, "forceUpdate");
            t && (t._pendingForceUpdate = !0, r(t))
          },
          enqueueReplaceState: function(e, t) {
            var n = o(e, "replaceState");
            n && (n._pendingStateQueue = [t], n._pendingReplaceState = !0, r(n))
          },
          enqueueSetState: function(e, t) {
            var n = o(e, "setState");
            if (n) {
              var a = n._pendingStateQueue || (n._pendingStateQueue = []);
              a.push(t), r(n)
            }
          },
          enqueueElementInternal: function(e, t) {
            e._pendingElement = t, r(e)
          },
          validateCallback: function(e, t) {
            e && "function" != typeof e ? u(!1) : void 0
          }
        });
      t.exports = s
    }, {
      156: 156,
      164: 164,
      35: 35,
      69: 69,
      92: 92
    }],
    92: [function(e, t, n) {
      "use strict";

      function r() {
        w.ReactReconcileTransaction && _ ? void 0 : g(!1)
      }

      function o() {
        this.reinitializeTransaction(), this.dirtyComponentsLength = null, this.callbackQueue = p.getPooled(), this.reconcileTransaction = w.ReactReconcileTransaction.getPooled(!0)
      }

      function a(e, t, n, o, a, i) {
        r(), _.batchedUpdates(e, t, n, o, a, i)
      }

      function i(e, t) {
        return e._mountOrder - t._mountOrder
      }

      function u(e) {
        var t = e.dirtyComponentsLength;
        t !== y.length ? g(!1) : void 0, y.sort(i);
        for (var n = 0; t > n; n++) {
          var r = y[n],
            o = r._pendingCallbacks;
          r._pendingCallbacks = null;
          var a;
          if (f.logTopLevelRenders) {
            var u = r;
            r._currentElement.props === r._renderedComponent._currentElement && (u = r._renderedComponent), a = "React update: " + u.getName(), console.time(a)
          }
          if (v.performUpdateIfNecessary(r, e.reconcileTransaction), a && console.timeEnd(a), o)
            for (var s = 0; s < o.length; s++) e.callbackQueue.enqueue(o[s], r.getPublicInstance())
        }
      }

      function s(e) {
        return r(), _.isBatchingUpdates ? void y.push(e) : void _.batchedUpdates(s, e)
      }

      function l(e, t) {
        _.isBatchingUpdates ? void 0 : g(!1), C.enqueue(e, t), b = !0
      }
      var c = e(165),
        p = e(5),
        d = e(25),
        f = e(66),
        h = e(80),
        v = e(85),
        m = e(110),
        g = e(156),
        y = [],
        C = p.getPooled(),
        b = !1,
        _ = null,
        E = {
          initialize: function() {
            this.dirtyComponentsLength = y.length
          },
          close: function() {
            this.dirtyComponentsLength !== y.length ? (y.splice(0, this.dirtyComponentsLength), P()) : y.length = 0
          }
        },
        x = {
          initialize: function() {
            this.callbackQueue.reset()
          },
          close: function() {
            this.callbackQueue.notifyAll()
          }
        },
        N = [E, x];
      c(o.prototype, m.Mixin, {
        getTransactionWrappers: function() {
          return N
        },
        destructor: function() {
          this.dirtyComponentsLength = null, p.release(this.callbackQueue), this.callbackQueue = null, w.ReactReconcileTransaction.release(this.reconcileTransaction), this.reconcileTransaction = null
        },
        perform: function(e, t, n) {
          return m.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, e, t, n)
        }
      }), d.addPoolingTo(o);
      var P = function() {
        for (; y.length || b;) {
          if (y.length) {
            var e = o.getPooled();
            e.perform(u, null, e), o.release(e)
          }
          if (b) {
            b = !1;
            var t = C;
            C = p.getPooled(), t.notifyAll(), p.release(t)
          }
        }
      };
      P = h.measure("ReactUpdates", "flushBatchedUpdates", P);
      var T = {
          injectReconcileTransaction: function(e) {
            e ? void 0 : g(!1), w.ReactReconcileTransaction = e
          },
          injectBatchingStrategy: function(e) {
            e ? void 0 : g(!1), "function" != typeof e.batchedUpdates ? g(!1) : void 0, "boolean" != typeof e.isBatchingUpdates ? g(!1) : void 0, _ = e
          }
        },
        w = {
          ReactReconcileTransaction: null,
          batchedUpdates: a,
          enqueueUpdate: s,
          flushBatchedUpdates: P,
          injection: T,
          asap: l
        };
      t.exports = w
    }, {
      110: 110,
      156: 156,
      165: 165,
      25: 25,
      5: 5,
      66: 66,
      80: 80,
      85: 85
    }],
    93: [function(e, t, n) {
      "use strict";
      t.exports = "15.0.2"
    }, {}],
    94: [function(e, t, n) {
      "use strict";
      var r = {
          xlink: "http://www.w3.org/1999/xlink",
          xml: "http://www.w3.org/XML/1998/namespace"
        },
        o = {
          accentHeight: "accent-height",
          accumulate: 0,
          additive: 0,
          alignmentBaseline: "alignment-baseline",
          allowReorder: "allowReorder",
          alphabetic: 0,
          amplitude: 0,
          arabicForm: "arabic-form",
          ascent: 0,
          attributeName: "attributeName",
          attributeType: "attributeType",
          autoReverse: "autoReverse",
          azimuth: 0,
          baseFrequency: "baseFrequency",
          baseProfile: "baseProfile",
          baselineShift: "baseline-shift",
          bbox: 0,
          begin: 0,
          bias: 0,
          by: 0,
          calcMode: "calcMode",
          capHeight: "cap-height",
          clip: 0,
          clipPath: "clip-path",
          clipRule: "clip-rule",
          clipPathUnits: "clipPathUnits",
          colorInterpolation: "color-interpolation",
          colorInterpolationFilters: "color-interpolation-filters",
          colorProfile: "color-profile",
          colorRendering: "color-rendering",
          contentScriptType: "contentScriptType",
          contentStyleType: "contentStyleType",
          cursor: 0,
          cx: 0,
          cy: 0,
          d: 0,
          decelerate: 0,
          descent: 0,
          diffuseConstant: "diffuseConstant",
          direction: 0,
          display: 0,
          divisor: 0,
          dominantBaseline: "dominant-baseline",
          dur: 0,
          dx: 0,
          dy: 0,
          edgeMode: "edgeMode",
          elevation: 0,
          enableBackground: "enable-background",
          end: 0,
          exponent: 0,
          externalResourcesRequired: "externalResourcesRequired",
          fill: 0,
          fillOpacity: "fill-opacity",
          fillRule: "fill-rule",
          filter: 0,
          filterRes: "filterRes",
          filterUnits: "filterUnits",
          floodColor: "flood-color",
          floodOpacity: "flood-opacity",
          focusable: 0,
          fontFamily: "font-family",
          fontSize: "font-size",
          fontSizeAdjust: "font-size-adjust",
          fontStretch: "font-stretch",
          fontStyle: "font-style",
          fontVariant: "font-variant",
          fontWeight: "font-weight",
          format: 0,
          from: 0,
          fx: 0,
          fy: 0,
          g1: 0,
          g2: 0,
          glyphName: "glyph-name",
          glyphOrientationHorizontal: "glyph-orientation-horizontal",
          glyphOrientationVertical: "glyph-orientation-vertical",
          glyphRef: "glyphRef",
          gradientTransform: "gradientTransform",
          gradientUnits: "gradientUnits",
          hanging: 0,
          horizAdvX: "horiz-adv-x",
          horizOriginX: "horiz-origin-x",
          ideographic: 0,
          imageRendering: "image-rendering",
          "in": 0,
          in2: 0,
          intercept: 0,
          k: 0,
          k1: 0,
          k2: 0,
          k3: 0,
          k4: 0,
          kernelMatrix: "kernelMatrix",
          kernelUnitLength: "kernelUnitLength",
          kerning: 0,
          keyPoints: "keyPoints",
          keySplines: "keySplines",
          keyTimes: "keyTimes",
          lengthAdjust: "lengthAdjust",
          letterSpacing: "letter-spacing",
          lightingColor: "lighting-color",
          limitingConeAngle: "limitingConeAngle",
          local: 0,
          markerEnd: "marker-end",
          markerMid: "marker-mid",
          markerStart: "marker-start",
          markerHeight: "markerHeight",
          markerUnits: "markerUnits",
          markerWidth: "markerWidth",
          mask: 0,
          maskContentUnits: "maskContentUnits",
          maskUnits: "maskUnits",
          mathematical: 0,
          mode: 0,
          numOctaves: "numOctaves",
          offset: 0,
          opacity: 0,
          operator: 0,
          order: 0,
          orient: 0,
          orientation: 0,
          origin: 0,
          overflow: 0,
          overlinePosition: "overline-position",
          overlineThickness: "overline-thickness",
          paintOrder: "paint-order",
          panose1: "panose-1",
          pathLength: "pathLength",
          patternContentUnits: "patternContentUnits",
          patternTransform: "patternTransform",
          patternUnits: "patternUnits",
          pointerEvents: "pointer-events",
          points: 0,
          pointsAtX: "pointsAtX",
          pointsAtY: "pointsAtY",
          pointsAtZ: "pointsAtZ",
          preserveAlpha: "preserveAlpha",
          preserveAspectRatio: "preserveAspectRatio",
          primitiveUnits: "primitiveUnits",
          r: 0,
          radius: 0,
          refX: "refX",
          refY: "refY",
          renderingIntent: "rendering-intent",
          repeatCount: "repeatCount",
          repeatDur: "repeatDur",
          requiredExtensions: "requiredExtensions",
          requiredFeatures: "requiredFeatures",
          restart: 0,
          result: 0,
          rotate: 0,
          rx: 0,
          ry: 0,
          scale: 0,
          seed: 0,
          shapeRendering: "shape-rendering",
          slope: 0,
          spacing: 0,
          specularConstant: "specularConstant",
          specularExponent: "specularExponent",
          speed: 0,
          spreadMethod: "spreadMethod",
          startOffset: "startOffset",
          stdDeviation: "stdDeviation",
          stemh: 0,
          stemv: 0,
          stitchTiles: "stitchTiles",
          stopColor: "stop-color",
          stopOpacity: "stop-opacity",
          strikethroughPosition: "strikethrough-position",
          strikethroughThickness: "strikethrough-thickness",
          string: 0,
          stroke: 0,
          strokeDasharray: "stroke-dasharray",
          strokeDashoffset: "stroke-dashoffset",
          strokeLinecap: "stroke-linecap",
          strokeLinejoin: "stroke-linejoin",
          strokeMiterlimit: "stroke-miterlimit",
          strokeOpacity: "stroke-opacity",
          strokeWidth: "stroke-width",
          surfaceScale: "surfaceScale",
          systemLanguage: "systemLanguage",
          tableValues: "tableValues",
          targetX: "targetX",
          targetY: "targetY",
          textAnchor: "text-anchor",
          textDecoration: "text-decoration",
          textRendering: "text-rendering",
          textLength: "textLength",
          to: 0,
          transform: 0,
          u1: 0,
          u2: 0,
          underlinePosition: "underline-position",
          underlineThickness: "underline-thickness",
          unicode: 0,
          unicodeBidi: "unicode-bidi",
          unicodeRange: "unicode-range",
          unitsPerEm: "units-per-em",
          vAlphabetic: "v-alphabetic",
          vHanging: "v-hanging",
          vIdeographic: "v-ideographic",
          vMathematical: "v-mathematical",
          values: 0,
          vectorEffect: "vector-effect",
          version: 0,
          vertAdvY: "vert-adv-y",
          vertOriginX: "vert-origin-x",
          vertOriginY: "vert-origin-y",
          viewBox: "viewBox",
          viewTarget: "viewTarget",
          visibility: 0,
          widths: 0,
          wordSpacing: "word-spacing",
          writingMode: "writing-mode",
          x: 0,
          xHeight: "x-height",
          x1: 0,
          x2: 0,
          xChannelSelector: "xChannelSelector",
          xlinkActuate: "xlink:actuate",
          xlinkArcrole: "xlink:arcrole",
          xlinkHref: "xlink:href",
          xlinkRole: "xlink:role",
          xlinkShow: "xlink:show",
          xlinkTitle: "xlink:title",
          xlinkType: "xlink:type",
          xmlBase: "xml:base",
          xmlLang: "xml:lang",
          xmlSpace: "xml:space",
          y: 0,
          y1: 0,
          y2: 0,
          yChannelSelector: "yChannelSelector",
          z: 0,
          zoomAndPan: "zoomAndPan"
        },
        a = {
          Properties: {},
          DOMAttributeNamespaces: {
            xlinkActuate: r.xlink,
            xlinkArcrole: r.xlink,
            xlinkHref: r.xlink,
            xlinkRole: r.xlink,
            xlinkShow: r.xlink,
            xlinkTitle: r.xlink,
            xlinkType: r.xlink,
            xmlBase: r.xml,
            xmlLang: r.xml,
            xmlSpace: r.xml
          },
          DOMAttributeNames: {}
        };
      Object.keys(o).forEach(function(e) {
        a.Properties[e] = 0, o[e] && (a.DOMAttributeNames[e] = o[e])
      }), t.exports = a
    }, {}],
    95: [function(e, t, n) {
      "use strict";

      function r(e) {
        if ("selectionStart" in e && l.hasSelectionCapabilities(e)) return {
          start: e.selectionStart,
          end: e.selectionEnd
        };
        if (window.getSelection) {
          var t = window.getSelection();
          return {
            anchorNode: t.anchorNode,
            anchorOffset: t.anchorOffset,
            focusNode: t.focusNode,
            focusOffset: t.focusOffset
          }
        }
        if (document.selection) {
          var n = document.selection.createRange();
          return {
            parentElement: n.parentElement(),
            text: n.text,
            top: n.boundingTop,
            left: n.boundingLeft
          }
        }
      }

      function o(e, t) {
        if (_ || null == y || y !== p()) return null;
        var n = r(y);
        if (!b || !h(b, n)) {
          b = n;
          var o = c.getPooled(g.select, C, e, t);
          return o.type = "select", o.target = y, i.accumulateTwoPhaseDispatches(o), o
        }
        return null
      }
      var a = e(16),
        i = e(20),
        u = e(142),
        s = e(40),
        l = e(68),
        c = e(101),
        p = e(151),
        d = e(132),
        f = e(160),
        h = e(163),
        v = a.topLevelTypes,
        m = u.canUseDOM && "documentMode" in document && document.documentMode <= 11,
        g = {
          select: {
            phasedRegistrationNames: {
              bubbled: f({
                onSelect: null
              }),
              captured: f({
                onSelectCapture: null
              })
            },
            dependencies: [v.topBlur, v.topContextMenu, v.topFocus, v.topKeyDown, v.topMouseDown, v.topMouseUp, v.topSelectionChange]
          }
        },
        y = null,
        C = null,
        b = null,
        _ = !1,
        E = !1,
        x = f({
          onSelect: null
        }),
        N = {
          eventTypes: g,
          extractEvents: function(e, t, n, r) {
            if (!E) return null;
            var a = t ? s.getNodeFromInstance(t) : window;
            switch (e) {
              case v.topFocus:
                (d(a) || "true" === a.contentEditable) && (y = a, C = t, b = null);
                break;
              case v.topBlur:
                y = null, C = null, b = null;
                break;
              case v.topMouseDown:
                _ = !0;
                break;
              case v.topContextMenu:
              case v.topMouseUp:
                return _ = !1, o(n, r);
              case v.topSelectionChange:
                if (m) break;
              case v.topKeyDown:
              case v.topKeyUp:
                return o(n, r)
            }
            return null
          },
          didPutListener: function(e, t, n) {
            t === x && (E = !0)
          }
        };
      t.exports = N
    }, {
      101: 101,
      132: 132,
      142: 142,
      151: 151,
      16: 16,
      160: 160,
      163: 163,
      20: 20,
      40: 40,
      68: 68
    }],
    96: [function(e, t, n) {
      "use strict";
      var r = e(16),
        o = e(141),
        a = e(20),
        i = e(40),
        u = e(97),
        s = e(98),
        l = e(101),
        c = e(102),
        p = e(104),
        d = e(105),
        f = e(100),
        h = e(106),
        v = e(107),
        m = e(108),
        g = e(109),
        y = e(148),
        C = e(121),
        b = e(156),
        _ = e(160),
        E = r.topLevelTypes,
        x = {
          abort: {
            phasedRegistrationNames: {
              bubbled: _({
                onAbort: !0
              }),
              captured: _({
                onAbortCapture: !0
              })
            }
          },
          animationEnd: {
            phasedRegistrationNames: {
              bubbled: _({
                onAnimationEnd: !0
              }),
              captured: _({
                onAnimationEndCapture: !0
              })
            }
          },
          animationIteration: {
            phasedRegistrationNames: {
              bubbled: _({
                onAnimationIteration: !0
              }),
              captured: _({
                onAnimationIterationCapture: !0
              })
            }
          },
          animationStart: {
            phasedRegistrationNames: {
              bubbled: _({
                onAnimationStart: !0
              }),
              captured: _({
                onAnimationStartCapture: !0
              })
            }
          },
          blur: {
            phasedRegistrationNames: {
              bubbled: _({
                onBlur: !0
              }),
              captured: _({
                onBlurCapture: !0
              })
            }
          },
          canPlay: {
            phasedRegistrationNames: {
              bubbled: _({
                onCanPlay: !0
              }),
              captured: _({
                onCanPlayCapture: !0
              })
            }
          },
          canPlayThrough: {
            phasedRegistrationNames: {
              bubbled: _({
                onCanPlayThrough: !0
              }),
              captured: _({
                onCanPlayThroughCapture: !0
              })
            }
          },
          click: {
            phasedRegistrationNames: {
              bubbled: _({
                onClick: !0
              }),
              captured: _({
                onClickCapture: !0
              })
            }
          },
          contextMenu: {
            phasedRegistrationNames: {
              bubbled: _({
                onContextMenu: !0
              }),
              captured: _({
                onContextMenuCapture: !0
              })
            }
          },
          copy: {
            phasedRegistrationNames: {
              bubbled: _({
                onCopy: !0
              }),
              captured: _({
                onCopyCapture: !0
              })
            }
          },
          cut: {
            phasedRegistrationNames: {
              bubbled: _({
                onCut: !0
              }),
              captured: _({
                onCutCapture: !0
              })
            }
          },
          doubleClick: {
            phasedRegistrationNames: {
              bubbled: _({
                onDoubleClick: !0
              }),
              captured: _({
                onDoubleClickCapture: !0
              })
            }
          },
          drag: {
            phasedRegistrationNames: {
              bubbled: _({
                onDrag: !0
              }),
              captured: _({
                onDragCapture: !0
              })
            }
          },
          dragEnd: {
            phasedRegistrationNames: {
              bubbled: _({
                onDragEnd: !0
              }),
              captured: _({
                onDragEndCapture: !0
              })
            }
          },
          dragEnter: {
            phasedRegistrationNames: {
              bubbled: _({
                onDragEnter: !0
              }),
              captured: _({
                onDragEnterCapture: !0
              })
            }
          },
          dragExit: {
            phasedRegistrationNames: {
              bubbled: _({
                onDragExit: !0
              }),
              captured: _({
                onDragExitCapture: !0
              })
            }
          },
          dragLeave: {
            phasedRegistrationNames: {
              bubbled: _({
                onDragLeave: !0
              }),
              captured: _({
                onDragLeaveCapture: !0
              })
            }
          },
          dragOver: {
            phasedRegistrationNames: {
              bubbled: _({
                onDragOver: !0
              }),
              captured: _({
                onDragOverCapture: !0
              })
            }
          },
          dragStart: {
            phasedRegistrationNames: {
              bubbled: _({
                onDragStart: !0
              }),
              captured: _({
                onDragStartCapture: !0
              })
            }
          },
          drop: {
            phasedRegistrationNames: {
              bubbled: _({
                onDrop: !0
              }),
              captured: _({
                onDropCapture: !0
              })
            }
          },
          durationChange: {
            phasedRegistrationNames: {
              bubbled: _({
                onDurationChange: !0
              }),
              captured: _({
                onDurationChangeCapture: !0
              })
            }
          },
          emptied: {
            phasedRegistrationNames: {
              bubbled: _({
                onEmptied: !0
              }),
              captured: _({
                onEmptiedCapture: !0
              })
            }
          },
          encrypted: {
            phasedRegistrationNames: {
              bubbled: _({
                onEncrypted: !0
              }),
              captured: _({
                onEncryptedCapture: !0
              })
            }
          },
          ended: {
            phasedRegistrationNames: {
              bubbled: _({
                onEnded: !0
              }),
              captured: _({
                onEndedCapture: !0
              })
            }
          },
          error: {
            phasedRegistrationNames: {
              bubbled: _({
                onError: !0
              }),
              captured: _({
                onErrorCapture: !0
              })
            }
          },
          focus: {
            phasedRegistrationNames: {
              bubbled: _({
                onFocus: !0
              }),
              captured: _({
                onFocusCapture: !0
              })
            }
          },
          input: {
            phasedRegistrationNames: {
              bubbled: _({
                onInput: !0
              }),
              captured: _({
                onInputCapture: !0
              })
            }
          },
          invalid: {
            phasedRegistrationNames: {
              bubbled: _({
                onInvalid: !0
              }),
              captured: _({
                onInvalidCapture: !0
              })
            }
          },
          keyDown: {
            phasedRegistrationNames: {
              bubbled: _({
                onKeyDown: !0
              }),
              captured: _({
                onKeyDownCapture: !0
              })
            }
          },
          keyPress: {
            phasedRegistrationNames: {
              bubbled: _({
                onKeyPress: !0
              }),
              captured: _({
                onKeyPressCapture: !0
              })
            }
          },
          keyUp: {
            phasedRegistrationNames: {
              bubbled: _({
                onKeyUp: !0
              }),
              captured: _({
                onKeyUpCapture: !0
              })
            }
          },
          load: {
            phasedRegistrationNames: {
              bubbled: _({
                onLoad: !0
              }),
              captured: _({
                onLoadCapture: !0
              })
            }
          },
          loadedData: {
            phasedRegistrationNames: {
              bubbled: _({
                onLoadedData: !0
              }),
              captured: _({
                onLoadedDataCapture: !0
              })
            }
          },
          loadedMetadata: {
            phasedRegistrationNames: {
              bubbled: _({
                onLoadedMetadata: !0
              }),
              captured: _({
                onLoadedMetadataCapture: !0
              })
            }
          },
          loadStart: {
            phasedRegistrationNames: {
              bubbled: _({
                onLoadStart: !0
              }),
              captured: _({
                onLoadStartCapture: !0
              })
            }
          },
          mouseDown: {
            phasedRegistrationNames: {
              bubbled: _({
                onMouseDown: !0
              }),
              captured: _({
                onMouseDownCapture: !0
              })
            }
          },
          mouseMove: {
            phasedRegistrationNames: {
              bubbled: _({
                onMouseMove: !0
              }),
              captured: _({
                onMouseMoveCapture: !0
              })
            }
          },
          mouseOut: {
            phasedRegistrationNames: {
              bubbled: _({
                onMouseOut: !0
              }),
              captured: _({
                onMouseOutCapture: !0
              })
            }
          },
          mouseOver: {
            phasedRegistrationNames: {
              bubbled: _({
                onMouseOver: !0
              }),
              captured: _({
                onMouseOverCapture: !0
              })
            }
          },
          mouseUp: {
            phasedRegistrationNames: {
              bubbled: _({
                onMouseUp: !0
              }),
              captured: _({
                onMouseUpCapture: !0
              })
            }
          },
          paste: {
            phasedRegistrationNames: {
              bubbled: _({
                onPaste: !0
              }),
              captured: _({
                onPasteCapture: !0
              })
            }
          },
          pause: {
            phasedRegistrationNames: {
              bubbled: _({
                onPause: !0
              }),
              captured: _({
                onPauseCapture: !0
              })
            }
          },
          play: {
            phasedRegistrationNames: {
              bubbled: _({
                onPlay: !0
              }),
              captured: _({
                onPlayCapture: !0
              })
            }
          },
          playing: {
            phasedRegistrationNames: {
              bubbled: _({
                onPlaying: !0
              }),
              captured: _({
                onPlayingCapture: !0
              })
            }
          },
          progress: {
            phasedRegistrationNames: {
              bubbled: _({
                onProgress: !0
              }),
              captured: _({
                onProgressCapture: !0
              })
            }
          },
          rateChange: {
            phasedRegistrationNames: {
              bubbled: _({
                onRateChange: !0
              }),
              captured: _({
                onRateChangeCapture: !0
              })
            }
          },
          reset: {
            phasedRegistrationNames: {
              bubbled: _({
                onReset: !0
              }),
              captured: _({
                onResetCapture: !0
              })
            }
          },
          scroll: {
            phasedRegistrationNames: {
              bubbled: _({
                onScroll: !0
              }),
              captured: _({
                onScrollCapture: !0
              })
            }
          },
          seeked: {
            phasedRegistrationNames: {
              bubbled: _({
                onSeeked: !0
              }),
              captured: _({
                onSeekedCapture: !0
              })
            }
          },
          seeking: {
            phasedRegistrationNames: {
              bubbled: _({
                onSeeking: !0
              }),
              captured: _({
                onSeekingCapture: !0
              })
            }
          },
          stalled: {
            phasedRegistrationNames: {
              bubbled: _({
                onStalled: !0
              }),
              captured: _({
                onStalledCapture: !0
              })
            }
          },
          submit: {
            phasedRegistrationNames: {
              bubbled: _({
                onSubmit: !0
              }),
              captured: _({
                onSubmitCapture: !0
              })
            }
          },
          suspend: {
            phasedRegistrationNames: {
              bubbled: _({
                onSuspend: !0
              }),
              captured: _({
                onSuspendCapture: !0
              })
            }
          },
          timeUpdate: {
            phasedRegistrationNames: {
              bubbled: _({
                onTimeUpdate: !0
              }),
              captured: _({
                onTimeUpdateCapture: !0
              })
            }
          },
          touchCancel: {
            phasedRegistrationNames: {
              bubbled: _({
                onTouchCancel: !0
              }),
              captured: _({
                onTouchCancelCapture: !0
              })
            }
          },
          touchEnd: {
            phasedRegistrationNames: {
              bubbled: _({
                onTouchEnd: !0
              }),
              captured: _({
                onTouchEndCapture: !0
              })
            }
          },
          touchMove: {
            phasedRegistrationNames: {
              bubbled: _({
                onTouchMove: !0
              }),
              captured: _({
                onTouchMoveCapture: !0
              })
            }
          },
          touchStart: {
            phasedRegistrationNames: {
              bubbled: _({
                onTouchStart: !0
              }),
              captured: _({
                onTouchStartCapture: !0
              })
            }
          },
          transitionEnd: {
            phasedRegistrationNames: {
              bubbled: _({
                onTransitionEnd: !0
              }),
              captured: _({
                onTransitionEndCapture: !0
              })
            }
          },
          volumeChange: {
            phasedRegistrationNames: {
              bubbled: _({
                onVolumeChange: !0
              }),
              captured: _({
                onVolumeChangeCapture: !0
              })
            }
          },
          waiting: {
            phasedRegistrationNames: {
              bubbled: _({
                onWaiting: !0
              }),
              captured: _({
                onWaitingCapture: !0
              })
            }
          },
          wheel: {
            phasedRegistrationNames: {
              bubbled: _({
                onWheel: !0
              }),
              captured: _({
                onWheelCapture: !0
              })
            }
          }
        },
        N = {
          topAbort: x.abort,
          topAnimationEnd: x.animationEnd,
          topAnimationIteration: x.animationIteration,
          topAnimationStart: x.animationStart,
          topBlur: x.blur,
          topCanPlay: x.canPlay,
          topCanPlayThrough: x.canPlayThrough,
          topClick: x.click,
          topContextMenu: x.contextMenu,
          topCopy: x.copy,
          topCut: x.cut,
          topDoubleClick: x.doubleClick,
          topDrag: x.drag,
          topDragEnd: x.dragEnd,
          topDragEnter: x.dragEnter,
          topDragExit: x.dragExit,
          topDragLeave: x.dragLeave,
          topDragOver: x.dragOver,
          topDragStart: x.dragStart,
          topDrop: x.drop,
          topDurationChange: x.durationChange,
          topEmptied: x.emptied,
          topEncrypted: x.encrypted,
          topEnded: x.ended,
          topError: x.error,
          topFocus: x.focus,
          topInput: x.input,
          topInvalid: x.invalid,
          topKeyDown: x.keyDown,
          topKeyPress: x.keyPress,
          topKeyUp: x.keyUp,
          topLoad: x.load,
          topLoadedData: x.loadedData,
          topLoadedMetadata: x.loadedMetadata,
          topLoadStart: x.loadStart,
          topMouseDown: x.mouseDown,
          topMouseMove: x.mouseMove,
          topMouseOut: x.mouseOut,
          topMouseOver: x.mouseOver,
          topMouseUp: x.mouseUp,
          topPaste: x.paste,
          topPause: x.pause,
          topPlay: x.play,
          topPlaying: x.playing,
          topProgress: x.progress,
          topRateChange: x.rateChange,
          topReset: x.reset,
          topScroll: x.scroll,
          topSeeked: x.seeked,
          topSeeking: x.seeking,
          topStalled: x.stalled,
          topSubmit: x.submit,
          topSuspend: x.suspend,
          topTimeUpdate: x.timeUpdate,
          topTouchCancel: x.touchCancel,
          topTouchEnd: x.touchEnd,
          topTouchMove: x.touchMove,
          topTouchStart: x.touchStart,
          topTransitionEnd: x.transitionEnd,
          topVolumeChange: x.volumeChange,
          topWaiting: x.waiting,
          topWheel: x.wheel
        };
      for (var P in N) N[P].dependencies = [P];
      var T = _({
          onClick: null
        }),
        w = {},
        M = {
          eventTypes: x,
          extractEvents: function(e, t, n, r) {
            var o = N[e];
            if (!o) return null;
            var i;
            switch (e) {
              case E.topAbort:
              case E.topCanPlay:
              case E.topCanPlayThrough:
              case E.topDurationChange:
              case E.topEmptied:
              case E.topEncrypted:
              case E.topEnded:
              case E.topError:
              case E.topInput:
              case E.topInvalid:
              case E.topLoad:
              case E.topLoadedData:
              case E.topLoadedMetadata:
              case E.topLoadStart:
              case E.topPause:
              case E.topPlay:
              case E.topPlaying:
              case E.topProgress:
              case E.topRateChange:
              case E.topReset:
              case E.topSeeked:
              case E.topSeeking:
              case E.topStalled:
              case E.topSubmit:
              case E.topSuspend:
              case E.topTimeUpdate:
              case E.topVolumeChange:
              case E.topWaiting:
                i = l;
                break;
              case E.topKeyPress:
                if (0 === C(n)) return null;
              case E.topKeyDown:
              case E.topKeyUp:
                i = p;
                break;
              case E.topBlur:
              case E.topFocus:
                i = c;
                break;
              case E.topClick:
                if (2 === n.button) return null;
              case E.topContextMenu:
              case E.topDoubleClick:
              case E.topMouseDown:
              case E.topMouseMove:
              case E.topMouseOut:
              case E.topMouseOver:
              case E.topMouseUp:
                i = d;
                break;
              case E.topDrag:
              case E.topDragEnd:
              case E.topDragEnter:
              case E.topDragExit:
              case E.topDragLeave:
              case E.topDragOver:
              case E.topDragStart:
              case E.topDrop:
                i = f;
                break;
              case E.topTouchCancel:
              case E.topTouchEnd:
              case E.topTouchMove:
              case E.topTouchStart:
                i = h;
                break;
              case E.topAnimationEnd:
              case E.topAnimationIteration:
              case E.topAnimationStart:
                i = u;
                break;
              case E.topTransitionEnd:
                i = v;
                break;
              case E.topScroll:
                i = m;
                break;
              case E.topWheel:
                i = g;
                break;
              case E.topCopy:
              case E.topCut:
              case E.topPaste:
                i = s
            }
            i ? void 0 : b(!1);
            var y = i.getPooled(o, t, n, r);
            return a.accumulateTwoPhaseDispatches(y), y
          },
          didPutListener: function(e, t, n) {
            if (t === T) {
              var r = e._rootNodeID,
                a = i.getNodeFromInstance(e);
              w[r] || (w[r] = o.listen(a, "click", y))
            }
          },
          willDeleteListener: function(e, t) {
            if (t === T) {
              var n = e._rootNodeID;
              w[n].remove(), delete w[n]
            }
          }
        };
      t.exports = M
    }, {
      100: 100,
      101: 101,
      102: 102,
      104: 104,
      105: 105,
      106: 106,
      107: 107,
      108: 108,
      109: 109,
      121: 121,
      141: 141,
      148: 148,
      156: 156,
      16: 16,
      160: 160,
      20: 20,
      40: 40,
      97: 97,
      98: 98
    }],
    97: [function(e, t, n) {
      "use strict";

      function r(e, t, n, r) {
        return o.call(this, e, t, n, r)
      }
      var o = e(101),
        a = {
          animationName: null,
          elapsedTime: null,
          pseudoElement: null
        };
      o.augmentClass(r, a), t.exports = r
    }, {
      101: 101
    }],
    98: [function(e, t, n) {
      "use strict";

      function r(e, t, n, r) {
        return o.call(this, e, t, n, r)
      }
      var o = e(101),
        a = {
          clipboardData: function(e) {
            return "clipboardData" in e ? e.clipboardData : window.clipboardData
          }
        };
      o.augmentClass(r, a), t.exports = r
    }, {
      101: 101
    }],
    99: [function(e, t, n) {
      "use strict";

      function r(e, t, n, r) {
        return o.call(this, e, t, n, r)
      }
      var o = e(101),
        a = {
          data: null
        };
      o.augmentClass(r, a), t.exports = r
    }, {
      101: 101
    }],
    100: [function(e, t, n) {
      "use strict";

      function r(e, t, n, r) {
        return o.call(this, e, t, n, r)
      }
      var o = e(105),
        a = {
          dataTransfer: null
        };
      o.augmentClass(r, a), t.exports = r
    }, {
      105: 105
    }],
    101: [function(e, t, n) {
      "use strict";

      function r(e, t, n, r) {
        this.dispatchConfig = e, this._targetInst = t, this.nativeEvent = n;
        var o = this.constructor.Interface;
        for (var a in o)
          if (o.hasOwnProperty(a)) {
            var u = o[a];
            u ? this[a] = u(n) : "target" === a ? this.target = r : this[a] = n[a]
          }
        var s = null != n.defaultPrevented ? n.defaultPrevented : n.returnValue === !1;
        return s ? this.isDefaultPrevented = i.thatReturnsTrue : this.isDefaultPrevented = i.thatReturnsFalse, this.isPropagationStopped = i.thatReturnsFalse, this
      }
      var o = e(165),
        a = e(25),
        i = e(148),
        u = (e(164), "function" == typeof Proxy, ["dispatchConfig", "_targetInst", "nativeEvent", "isDefaultPrevented", "isPropagationStopped", "_dispatchListeners", "_dispatchInstances"]),
        s = {
          type: null,
          target: null,
          currentTarget: i.thatReturnsNull,
          eventPhase: null,
          bubbles: null,
          cancelable: null,
          timeStamp: function(e) {
            return e.timeStamp || Date.now()
          },
          defaultPrevented: null,
          isTrusted: null
        };
      o(r.prototype, {
        preventDefault: function() {
          this.defaultPrevented = !0;
          var e = this.nativeEvent;
          e && (e.preventDefault ? e.preventDefault() : e.returnValue = !1, this.isDefaultPrevented = i.thatReturnsTrue)
        },
        stopPropagation: function() {
          var e = this.nativeEvent;
          e && (e.stopPropagation ? e.stopPropagation() : e.cancelBubble = !0, this.isPropagationStopped = i.thatReturnsTrue)
        },
        persist: function() {
          this.isPersistent = i.thatReturnsTrue
        },
        isPersistent: i.thatReturnsFalse,
        destructor: function() {
          var e = this.constructor.Interface;
          for (var t in e) this[t] = null;
          for (var n = 0; n < u.length; n++) this[u[n]] = null
        }
      }), r.Interface = s, r.augmentClass = function(e, t) {
        var n = this,
          r = function() {};
        r.prototype = n.prototype;
        var i = new r;
        o(i, e.prototype), e.prototype = i, e.prototype.constructor = e, e.Interface = o({}, n.Interface, t), e.augmentClass = n.augmentClass, a.addPoolingTo(e, a.fourArgumentPooler)
      }, a.addPoolingTo(r, a.fourArgumentPooler), t.exports = r
    }, {
      148: 148,
      164: 164,
      165: 165,
      25: 25
    }],
    102: [function(e, t, n) {
      "use strict";

      function r(e, t, n, r) {
        return o.call(this, e, t, n, r)
      }
      var o = e(108),
        a = {
          relatedTarget: null
        };
      o.augmentClass(r, a), t.exports = r
    }, {
      108: 108
    }],
    103: [function(e, t, n) {
      "use strict";

      function r(e, t, n, r) {
        return o.call(this, e, t, n, r)
      }
      var o = e(101),
        a = {
          data: null
        };
      o.augmentClass(r, a), t.exports = r
    }, {
      101: 101
    }],
    104: [function(e, t, n) {
      "use strict";

      function r(e, t, n, r) {
        return o.call(this, e, t, n, r)
      }
      var o = e(108),
        a = e(121),
        i = e(122),
        u = e(123),
        s = {
          key: i,
          location: null,
          ctrlKey: null,
          shiftKey: null,
          altKey: null,
          metaKey: null,
          repeat: null,
          locale: null,
          getModifierState: u,
          charCode: function(e) {
            return "keypress" === e.type ? a(e) : 0
          },
          keyCode: function(e) {
            return "keydown" === e.type || "keyup" === e.type ? e.keyCode : 0
          },
          which: function(e) {
            return "keypress" === e.type ? a(e) : "keydown" === e.type || "keyup" === e.type ? e.keyCode : 0
          }
        };
      o.augmentClass(r, s), t.exports = r
    }, {
      108: 108,
      121: 121,
      122: 122,
      123: 123
    }],
    105: [function(e, t, n) {
      "use strict";

      function r(e, t, n, r) {
        return o.call(this, e, t, n, r)
      }
      var o = e(108),
        a = e(111),
        i = e(123),
        u = {
          screenX: null,
          screenY: null,
          clientX: null,
          clientY: null,
          ctrlKey: null,
          shiftKey: null,
          altKey: null,
          metaKey: null,
          getModifierState: i,
          button: function(e) {
            var t = e.button;
            return "which" in e ? t : 2 === t ? 2 : 4 === t ? 1 : 0
          },
          buttons: null,
          relatedTarget: function(e) {
            return e.relatedTarget || (e.fromElement === e.srcElement ? e.toElement : e.fromElement)
          },
          pageX: function(e) {
            return "pageX" in e ? e.pageX : e.clientX + a.currentScrollLeft
          },
          pageY: function(e) {
            return "pageY" in e ? e.pageY : e.clientY + a.currentScrollTop
          }
        };
      o.augmentClass(r, u), t.exports = r
    }, {
      108: 108,
      111: 111,
      123: 123
    }],
    106: [function(e, t, n) {
      "use strict";

      function r(e, t, n, r) {
        return o.call(this, e, t, n, r)
      }
      var o = e(108),
        a = e(123),
        i = {
          touches: null,
          targetTouches: null,
          changedTouches: null,
          altKey: null,
          metaKey: null,
          ctrlKey: null,
          shiftKey: null,
          getModifierState: a
        };
      o.augmentClass(r, i), t.exports = r
    }, {
      108: 108,
      123: 123
    }],
    107: [function(e, t, n) {
      "use strict";

      function r(e, t, n, r) {
        return o.call(this, e, t, n, r)
      }
      var o = e(101),
        a = {
          propertyName: null,
          elapsedTime: null,
          pseudoElement: null
        };
      o.augmentClass(r, a), t.exports = r
    }, {
      101: 101
    }],
    108: [function(e, t, n) {
      "use strict";

      function r(e, t, n, r) {
        return o.call(this, e, t, n, r)
      }
      var o = e(101),
        a = e(124),
        i = {
          view: function(e) {
            if (e.view) return e.view;
            var t = a(e);
            if (null != t && t.window === t) return t;
            var n = t.ownerDocument;
            return n ? n.defaultView || n.parentWindow : window
          },
          detail: function(e) {
            return e.detail || 0
          }
        };
      o.augmentClass(r, i), t.exports = r
    }, {
      101: 101,
      124: 124
    }],
    109: [function(e, t, n) {
      "use strict";

      function r(e, t, n, r) {
        return o.call(this, e, t, n, r)
      }
      var o = e(105),
        a = {
          deltaX: function(e) {
            return "deltaX" in e ? e.deltaX : "wheelDeltaX" in e ? -e.wheelDeltaX : 0
          },
          deltaY: function(e) {
            return "deltaY" in e ? e.deltaY : "wheelDeltaY" in e ? -e.wheelDeltaY : "wheelDelta" in e ? -e.wheelDelta : 0
          },
          deltaZ: null,
          deltaMode: null
        };
      o.augmentClass(r, a), t.exports = r
    }, {
      105: 105
    }],
    110: [function(e, t, n) {
      "use strict";
      var r = e(156),
        o = {
          reinitializeTransaction: function() {
            this.transactionWrappers = this.getTransactionWrappers(), this.wrapperInitData ? this.wrapperInitData.length = 0 : this.wrapperInitData = [], this._isInTransaction = !1
          },
          _isInTransaction: !1,
          getTransactionWrappers: null,
          isInTransaction: function() {
            return !!this._isInTransaction
          },
          perform: function(e, t, n, o, a, i, u, s) {
            this.isInTransaction() ? r(!1) : void 0;
            var l, c;
            try {
              this._isInTransaction = !0, l = !0, this.initializeAll(0), c = e.call(t, n, o, a, i, u, s), l = !1
            } finally {
              try {
                if (l) try {
                  this.closeAll(0)
                } catch (p) {} else this.closeAll(0)
              } finally {
                this._isInTransaction = !1
              }
            }
            return c
          },
          initializeAll: function(e) {
            for (var t = this.transactionWrappers, n = e; n < t.length; n++) {
              var r = t[n];
              try {
                this.wrapperInitData[n] = a.OBSERVED_ERROR, this.wrapperInitData[n] = r.initialize ? r.initialize.call(this) : null
              } finally {
                if (this.wrapperInitData[n] === a.OBSERVED_ERROR) try {
                  this.initializeAll(n + 1)
                } catch (o) {}
              }
            }
          },
          closeAll: function(e) {
            this.isInTransaction() ? void 0 : r(!1);
            for (var t = this.transactionWrappers, n = e; n < t.length; n++) {
              var o, i = t[n],
                u = this.wrapperInitData[n];
              try {
                o = !0, u !== a.OBSERVED_ERROR && i.close && i.close.call(this, u), o = !1
              } finally {
                if (o) try {
                  this.closeAll(n + 1)
                } catch (s) {}
              }
            }
            this.wrapperInitData.length = 0
          }
        },
        a = {
          Mixin: o,
          OBSERVED_ERROR: {}
        };
      t.exports = a
    }, {
      156: 156
    }],
    111: [function(e, t, n) {
      "use strict";
      var r = {
        currentScrollLeft: 0,
        currentScrollTop: 0,
        refreshScrollValues: function(e) {
          r.currentScrollLeft = e.x, r.currentScrollTop = e.y
        }
      };
      t.exports = r
    }, {}],
    112: [function(e, t, n) {
      "use strict";

      function r(e, t) {
        if (null == t ? o(!1) : void 0, null == e) return t;
        var n = Array.isArray(e),
          r = Array.isArray(t);
        return n && r ? (e.push.apply(e, t), e) : n ? (e.push(t), e) : r ? [e].concat(t) : [e, t]
      }
      var o = e(156);
      t.exports = r
    }, {
      156: 156
    }],
    113: [function(e, t, n) {
      "use strict";

      function r(e) {
        for (var t = 1, n = 0, r = 0, a = e.length, i = -4 & a; i > r;) {
          for (var u = Math.min(r + 4096, i); u > r; r += 4) n += (t += e.charCodeAt(r)) + (t += e.charCodeAt(r + 1)) + (t += e.charCodeAt(r + 2)) + (t += e.charCodeAt(r + 3));
          t %= o, n %= o
        }
        for (; a > r; r++) n += t += e.charCodeAt(r);
        return t %= o, n %= o, t | n << 16
      }
      var o = 65521;
      t.exports = r
    }, {}],
    114: [function(e, t, n) {
      "use strict";
      var r = !1;
      t.exports = r
    }, {}],
    115: [function(e, t, n) {
      "use strict";
      var r = function(e) {
        return "undefined" != typeof MSApp && MSApp.execUnsafeLocalFunction ? function(t, n, r, o) {
          MSApp.execUnsafeLocalFunction(function() {
            return e(t, n, r, o)
          })
        } : e
      };
      t.exports = r
    }, {}],
    116: [function(e, t, n) {
      "use strict";

      function r(e, t, n) {
        var r = null == t || "boolean" == typeof t || "" === t;
        if (r) return "";
        var o = isNaN(t);
        return o || 0 === t || a.hasOwnProperty(e) && a[e] ? "" + t : ("string" == typeof t && (t = t.trim()), t + "px")
      }
      var o = e(3),
        a = (e(164), o.isUnitlessNumber);
      t.exports = r
    }, {
      164: 164,
      3: 3
    }],
    117: [function(e, t, n) {
      "use strict";

      function r(e) {
        return a[e]
      }

      function o(e) {
        return ("" + e).replace(i, r)
      }
      var a = {
          "&": "&amp;",
          ">": "&gt;",
          "<": "&lt;",
          '"': "&quot;",
          "'": "&#x27;"
        },
        i = /[&><"']/g;
      t.exports = o
    }, {}],
    118: [function(e, t, n) {
      "use strict";

      function r(e) {
        if (null == e) return null;
        if (1 === e.nodeType) return e;
        var t = a.get(e);
        return t ? (t = i(t), t ? o.getNodeFromInstance(t) : null) : void u(("function" == typeof e.render, !1))
      }
      var o = (e(35), e(40)),
        a = e(69),
        i = e(126),
        u = e(156);
      e(164);
      t.exports = r
    }, {
      126: 126,
      156: 156,
      164: 164,
      35: 35,
      40: 40,
      69: 69
    }],
    119: [function(e, t, n) {
      "use strict";

      function r(e, t, n) {
        var r = e,
          o = void 0 === r[n];
        o && null != t && (r[n] = t)
      }

      function o(e) {
        if (null == e) return e;
        var t = {};
        return a(e, r, t), t
      }
      var a = (e(23), e(139));
      e(164);
      t.exports = o
    }, {
      139: 139,
      164: 164,
      23: 23
    }],
    120: [function(e, t, n) {
      "use strict";
      var r = function(e, t, n) {
        Array.isArray(e) ? e.forEach(t, n) : e && t.call(n, e)
      };
      t.exports = r
    }, {}],
    121: [function(e, t, n) {
      "use strict";

      function r(e) {
        var t, n = e.keyCode;
        return "charCode" in e ? (t = e.charCode, 0 === t && 13 === n && (t = 13)) : t = n, t >= 32 || 13 === t ? t : 0
      }
      t.exports = r
    }, {}],
    122: [function(e, t, n) {
      "use strict";

      function r(e) {
        if (e.key) {
          var t = a[e.key] || e.key;
          if ("Unidentified" !== t) return t
        }
        if ("keypress" === e.type) {
          var n = o(e);
          return 13 === n ? "Enter" : String.fromCharCode(n)
        }
        return "keydown" === e.type || "keyup" === e.type ? i[e.keyCode] || "Unidentified" : ""
      }
      var o = e(121),
        a = {
          Esc: "Escape",
          Spacebar: " ",
          Left: "ArrowLeft",
          Up: "ArrowUp",
          Right: "ArrowRight",
          Down: "ArrowDown",
          Del: "Delete",
          Win: "OS",
          Menu: "ContextMenu",
          Apps: "ContextMenu",
          Scroll: "ScrollLock",
          MozPrintableKey: "Unidentified"
        },
        i = {
          8: "Backspace",
          9: "Tab",
          12: "Clear",
          13: "Enter",
          16: "Shift",
          17: "Control",
          18: "Alt",
          19: "Pause",
          20: "CapsLock",
          27: "Escape",
          32: " ",
          33: "PageUp",
          34: "PageDown",
          35: "End",
          36: "Home",
          37: "ArrowLeft",
          38: "ArrowUp",
          39: "ArrowRight",
          40: "ArrowDown",
          45: "Insert",
          46: "Delete",
          112: "F1",
          113: "F2",
          114: "F3",
          115: "F4",
          116: "F5",
          117: "F6",
          118: "F7",
          119: "F8",
          120: "F9",
          121: "F10",
          122: "F11",
          123: "F12",
          144: "NumLock",
          145: "ScrollLock",
          224: "Meta"
        };
      t.exports = r
    }, {
      121: 121
    }],
    123: [function(e, t, n) {
      "use strict";

      function r(e) {
        var t = this,
          n = t.nativeEvent;
        if (n.getModifierState) return n.getModifierState(e);
        var r = a[e];
        return r ? !!n[r] : !1
      }

      function o(e) {
        return r
      }
      var a = {
        Alt: "altKey",
        Control: "ctrlKey",
        Meta: "metaKey",
        Shift: "shiftKey"
      };
      t.exports = o
    }, {}],
    124: [function(e, t, n) {
      "use strict";

      function r(e) {
        var t = e.target || e.srcElement || window;
        return t.correspondingUseElement && (t = t.correspondingUseElement), 3 === t.nodeType ? t.parentNode : t
      }
      t.exports = r
    }, {}],
    125: [function(e, t, n) {
      "use strict";

      function r(e) {
        var t = e && (o && e[o] || e[a]);
        return "function" == typeof t ? t : void 0
      }
      var o = "function" == typeof Symbol && Symbol.iterator,
        a = "@@iterator";
      t.exports = r
    }, {}],
    126: [function(e, t, n) {
      "use strict";

      function r(e) {
        for (var t;
          (t = e._renderedNodeType) === o.COMPOSITE;) e = e._renderedComponent;
        return t === o.NATIVE ? e._renderedComponent : t === o.EMPTY ? null : void 0
      }
      var o = e(77);
      t.exports = r
    }, {
      77: 77
    }],
    127: [function(e, t, n) {
      "use strict";

      function r(e) {
        for (; e && e.firstChild;) e = e.firstChild;
        return e
      }

      function o(e) {
        for (; e;) {
          if (e.nextSibling) return e.nextSibling;
          e = e.parentNode
        }
      }

      function a(e, t) {
        for (var n = r(e), a = 0, i = 0; n;) {
          if (3 === n.nodeType) {
            if (i = a + n.textContent.length, t >= a && i >= t) return {
              node: n,
              offset: t - a
            };
            a = i
          }
          n = r(o(n))
        }
      }
      t.exports = a
    }, {}],
    128: [function(e, t, n) {
      "use strict";

      function r() {
        return !a && o.canUseDOM && (a = "textContent" in document.documentElement ? "textContent" : "innerText"), a
      }
      var o = e(142),
        a = null;
      t.exports = r
    }, {
      142: 142
    }],
    129: [function(e, t, n) {
      "use strict";

      function r(e, t) {
        var n = {};
        return n[e.toLowerCase()] = t.toLowerCase(), n["Webkit" + e] = "webkit" + t, n["Moz" + e] = "moz" + t, n["ms" + e] = "MS" + t, n["O" + e] = "o" + t.toLowerCase(), n
      }

      function o(e) {
        if (u[e]) return u[e];
        if (!i[e]) return e;
        var t = i[e];
        for (var n in t)
          if (t.hasOwnProperty(n) && n in s) return u[e] = t[n];
        return ""
      }
      var a = e(142),
        i = {
          animationend: r("Animation", "AnimationEnd"),
          animationiteration: r("Animation", "AnimationIteration"),
          animationstart: r("Animation", "AnimationStart"),
          transitionend: r("Transition", "TransitionEnd")
        },
        u = {},
        s = {};
      a.canUseDOM && (s = document.createElement("div").style, "AnimationEvent" in window || (delete i.animationend.animation, delete i.animationiteration.animation, delete i.animationstart.animation), "TransitionEvent" in window || delete i.transitionend.transition), t.exports = o
    }, {
      142: 142
    }],
    130: [function(e, t, n) {
      "use strict";

      function r(e) {
        return "function" == typeof e && "undefined" != typeof e.prototype && "function" == typeof e.prototype.mountComponent && "function" == typeof e.prototype.receiveComponent
      }

      function o(e) {
        var t;
        if (null === e || e === !1) t = u.create(o);
        else if ("object" == typeof e) {
          var n = e;
          !n || "function" != typeof n.type && "string" != typeof n.type ? l(!1) : void 0, t = "string" == typeof n.type ? s.createInternalComponent(n) : r(n.type) ? new n.type(n) : new c(n)
        } else "string" == typeof e || "number" == typeof e ? t = s.createInstanceForText(e) : l(!1);
        return t._mountIndex = 0, t._mountImage = null, t
      }
      var a = e(165),
        i = e(34),
        u = e(62),
        s = e(76),
        l = e(156),
        c = (e(164), function(e) {
          this.construct(e)
        });
      a(c.prototype, i.Mixin, {
        _instantiateReactComponent: o
      }), t.exports = o
    }, {
      156: 156,
      164: 164,
      165: 165,
      34: 34,
      62: 62,
      76: 76
    }],
    131: [function(e, t, n) {
      "use strict";

      function r(e, t) {
        if (!a.canUseDOM || t && !("addEventListener" in document)) return !1;
        var n = "on" + e,
          r = n in document;
        if (!r) {
          var i = document.createElement("div");
          i.setAttribute(n, "return;"), r = "function" == typeof i[n]
        }
        return !r && o && "wheel" === e && (r = document.implementation.hasFeature("Events.wheel", "3.0")), r
      }
      var o, a = e(142);
      a.canUseDOM && (o = document.implementation && document.implementation.hasFeature && document.implementation.hasFeature("", "") !== !0), t.exports = r
    }, {
      142: 142
    }],
    132: [function(e, t, n) {
      "use strict";

      function r(e) {
        var t = e && e.nodeName && e.nodeName.toLowerCase();
        return t && ("input" === t && o[e.type] || "textarea" === t)
      }
      var o = {
        color: !0,
        date: !0,
        datetime: !0,
        "datetime-local": !0,
        email: !0,
        month: !0,
        number: !0,
        password: !0,
        range: !0,
        search: !0,
        tel: !0,
        text: !0,
        time: !0,
        url: !0,
        week: !0
      };
      t.exports = r
    }, {}],
    133: [function(e, t, n) {
      "use strict";

      function r(e) {
        return o.isValidElement(e) ? void 0 : a(!1), e
      }
      var o = e(60),
        a = e(156);
      t.exports = r
    }, {
      156: 156,
      60: 60
    }],
    134: [function(e, t, n) {
      "use strict";

      function r(e) {
        return '"' + o(e) + '"'
      }
      var o = e(117);
      t.exports = r
    }, {
      117: 117
    }],
    135: [function(e, t, n) {
      "use strict";
      var r = e(73);
      t.exports = r.renderSubtreeIntoContainer
    }, {
      73: 73
    }],
    136: [function(e, t, n) {
      "use strict";
      var r = e(142),
        o = /^[ \r\n\t\f]/,
        a = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/,
        i = e(115),
        u = i(function(e, t) {
          e.innerHTML = t
        });
      if (r.canUseDOM) {
        var s = document.createElement("div");
        s.innerHTML = " ", "" === s.innerHTML && (u = function(e, t) {
          if (e.parentNode && e.parentNode.replaceChild(e, e), o.test(t) || "<" === t[0] && a.test(t)) {
            e.innerHTML = String.fromCharCode(65279) + t;
            var n = e.firstChild;
            1 === n.data.length ? e.removeChild(n) : n.deleteData(0, 1)
          } else e.innerHTML = t
        }), s = null
      }
      t.exports = u
    }, {
      115: 115,
      142: 142
    }],
    137: [function(e, t, n) {
      "use strict";
      var r = e(142),
        o = e(117),
        a = e(136),
        i = function(e, t) {
          e.textContent = t
        };
      r.canUseDOM && ("textContent" in document.documentElement || (i = function(e, t) {
        a(e, o(t))
      })), t.exports = i
    }, {
      117: 117,
      136: 136,
      142: 142
    }],
    138: [function(e, t, n) {
      "use strict";

      function r(e, t) {
        var n = null === e || e === !1,
          r = null === t || t === !1;
        if (n || r) return n === r;
        var o = typeof e,
          a = typeof t;
        return "string" === o || "number" === o ? "string" === a || "number" === a : "object" === a && e.type === t.type && e.key === t.key
      }
      t.exports = r
    }, {}],
    139: [function(e, t, n) {
      "use strict";

      function r(e, t) {
        return e && "object" == typeof e && null != e.key ? l.escape(e.key) : t.toString(36)
      }

      function o(e, t, n, a) {
        var d = typeof e;
        if ("undefined" !== d && "boolean" !== d  && Opal.nil !== e || (e = null), null === e || "string" === d || "number" === d || i.isValidElement(e)) return n(a, e, "" === t ? c + r(e, 0) : t), 1;
        var f, h, v = 0,
          m = "" === t ? c : t + p;
        if (Array.isArray(e))
          for (var g = 0; g < e.length; g++) f = e[g], h = m + r(f, g), v += o(f, h, n, a);
        else {
          var y = u(e);
          if (y) {
            var C, b = y.call(e);
            if (y !== e.entries)
              for (var _ = 0; !(C = b.next()).done;) f = C.value, h = m + r(f, _++), v += o(f, h, n, a);
            else
              for (; !(C = b.next()).done;) {
                var E = C.value;
                E && (f = E[1], h = m + l.escape(E[0]) + p + r(f, 0), v += o(f, h, n, a))
              }
          } else "object" === d && (String(e), s(!1))
        }
        return v
      }

      function a(e, t, n) {
        return null == e ? 0 : o(e, "", t, n)
      }
      var i = (e(35), e(60)),
        u = e(125),
        s = e(156),
        l = e(23),
        c = (e(164), "."),
        p = ":";
      t.exports = a
    }, {
      125: 125,
      156: 156,
      164: 164,
      23: 23,
      35: 35,
      60: 60
    }],
    140: [function(e, t, n) {
      "use strict";
      var r = (e(165), e(148)),
        o = (e(164), r);
      t.exports = o
    }, {
      148: 148,
      164: 164,
      165: 165
    }],
    141: [function(e, t, n) {
      "use strict";
      var r = e(148),
        o = {
          listen: function(e, t, n) {
            return e.addEventListener ? (e.addEventListener(t, n, !1), {
              remove: function() {
                e.removeEventListener(t, n, !1)
              }
            }) : e.attachEvent ? (e.attachEvent("on" + t, n), {
              remove: function() {
                e.detachEvent("on" + t, n)
              }
            }) : void 0
          },
          capture: function(e, t, n) {
            return e.addEventListener ? (e.addEventListener(t, n, !0), {
              remove: function() {
                e.removeEventListener(t, n, !0)
              }
            }) : {
              remove: r
            }
          },
          registerDefault: function() {}
        };
      t.exports = o
    }, {
      148: 148
    }],
    142: [function(e, t, n) {
      "use strict";
      var r = !("undefined" == typeof window || !window.document || !window.document.createElement),
        o = {
          canUseDOM: r,
          canUseWorkers: "undefined" != typeof Worker,
          canUseEventListeners: r && !(!window.addEventListener && !window.attachEvent),
          canUseViewport: r && !!window.screen,
          isInWorker: !r
        };
      t.exports = o
    }, {}],
    143: [function(e, t, n) {
      "use strict";

      function r(e) {
        return e.replace(o, function(e, t) {
          return t.toUpperCase()
        })
      }
      var o = /-(.)/g;
      t.exports = r
    }, {}],
    144: [function(e, t, n) {
      "use strict";

      function r(e) {
        return o(e.replace(a, "ms-"))
      }
      var o = e(143),
        a = /^-ms-/;
      t.exports = r
    }, {
      143: 143
    }],
    145: [function(e, t, n) {
      "use strict";

      function r(e, t) {
        return e && t ? e === t ? !0 : o(e) ? !1 : o(t) ? r(e, t.parentNode) : e.contains ? e.contains(t) : e.compareDocumentPosition ? !!(16 & e.compareDocumentPosition(t)) : !1 : !1
      }
      var o = e(158);
      t.exports = r
    }, {
      158: 158
    }],
    146: [function(e, t, n) {
      "use strict";

      function r(e) {
        var t = e.length;
        if (Array.isArray(e) || "object" != typeof e && "function" != typeof e ? i(!1) : void 0, "number" != typeof t ? i(!1) : void 0, 0 === t || t - 1 in e ? void 0 : i(!1), "function" == typeof e.callee ? i(!1) : void 0, e.hasOwnProperty) try {
          return Array.prototype.slice.call(e)
        } catch (n) {}
        for (var r = Array(t), o = 0; t > o; o++) r[o] = e[o];
        return r
      }

      function o(e) {
        return !!e && ("object" == typeof e || "function" == typeof e) && "length" in e && !("setInterval" in e) && "number" != typeof e.nodeType && (Array.isArray(e) || "callee" in e || "item" in e)
      }

      function a(e) {
        return o(e) ? Array.isArray(e) ? e.slice() : r(e) : [e]
      }
      var i = e(156);
      t.exports = a
    }, {
      156: 156
    }],
    147: [function(e, t, n) {
      "use strict";

      function r(e) {
        var t = e.match(c);
        return t && t[1].toLowerCase()
      }

      function o(e, t) {
        var n = l;
        l ? void 0 : s(!1);
        var o = r(e),
          a = o && u(o);
        if (a) {
          n.innerHTML = a[1] + e + a[2];
          for (var c = a[0]; c--;) n = n.lastChild
        } else n.innerHTML = e;
        var p = n.getElementsByTagName("script");
        p.length && (t ? void 0 : s(!1), i(p).forEach(t));
        for (var d = Array.from(n.childNodes); n.lastChild;) n.removeChild(n.lastChild);
        return d
      }
      var a = e(142),
        i = e(146),
        u = e(152),
        s = e(156),
        l = a.canUseDOM ? document.createElement("div") : null,
        c = /^\s*<(\w+)/;
      t.exports = o
    }, {
      142: 142,
      146: 146,
      152: 152,
      156: 156
    }],
    148: [function(e, t, n) {
      "use strict";

      function r(e) {
        return function() {
          return e
        }
      }

      function o() {}
      o.thatReturns = r, o.thatReturnsFalse = r(!1), o.thatReturnsTrue = r(!0), o.thatReturnsNull = r(null), o.thatReturnsThis = function() {
        return this
      }, o.thatReturnsArgument = function(e) {
        return e
      }, t.exports = o
    }, {}],
    149: [function(e, t, n) {
      "use strict";
      var r = {};
      t.exports = r
    }, {}],
    150: [function(e, t, n) {
      "use strict";

      function r(e) {
        try {
          e.focus()
        } catch (t) {}
      }
      t.exports = r
    }, {}],
    151: [function(e, t, n) {
      "use strict";

      function r() {
        if ("undefined" == typeof document) return null;
        try {
          return document.activeElement || document.body
        } catch (e) {
          return document.body
        }
      }
      t.exports = r
    }, {}],
    152: [function(e, t, n) {
      "use strict";

      function r(e) {
        return i ? void 0 : a(!1), d.hasOwnProperty(e) || (e = "*"), u.hasOwnProperty(e) || ("*" === e ? i.innerHTML = "<link />" : i.innerHTML = "<" + e + "></" + e + ">", u[e] = !i.firstChild), u[e] ? d[e] : null
      }
      var o = e(142),
        a = e(156),
        i = o.canUseDOM ? document.createElement("div") : null,
        u = {},
        s = [1, '<select multiple="true">', "</select>"],
        l = [1, "<table>", "</table>"],
        c = [3, "<table><tbody><tr>", "</tr></tbody></table>"],
        p = [1, '<svg xmlns="http://www.w3.org/2000/svg">', "</svg>"],
        d = {
          "*": [1, "?<div>", "</div>"],
          area: [1, "<map>", "</map>"],
          col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
          legend: [1, "<fieldset>", "</fieldset>"],
          param: [1, "<object>", "</object>"],
          tr: [2, "<table><tbody>", "</tbody></table>"],
          optgroup: s,
          option: s,
          caption: l,
          colgroup: l,
          tbody: l,
          tfoot: l,
          thead: l,
          td: c,
          th: c
        },
        f = ["circle", "clipPath", "defs", "ellipse", "g", "image", "line", "linearGradient", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "text", "tspan"];
      f.forEach(function(e) {
        d[e] = p, u[e] = !0
      }), t.exports = r
    }, {
      142: 142,
      156: 156
    }],
    153: [function(e, t, n) {
      "use strict";

      function r(e) {
        return e === window ? {
          x: window.pageXOffset || document.documentElement.scrollLeft,
          y: window.pageYOffset || document.documentElement.scrollTop
        } : {
          x: e.scrollLeft,
          y: e.scrollTop
        }
      }
      t.exports = r
    }, {}],
    154: [function(e, t, n) {
      "use strict";

      function r(e) {
        return e.replace(o, "-$1").toLowerCase()
      }
      var o = /([A-Z])/g;
      t.exports = r
    }, {}],
    155: [function(e, t, n) {
      "use strict";

      function r(e) {
        return o(e).replace(a, "-ms-")
      }
      var o = e(154),
        a = /^ms-/;
      t.exports = r
    }, {
      154: 154
    }],
    156: [function(e, t, n) {
      "use strict";

      function r(e, t, n, r, o, a, i, u) {
        if (!e) {
          var s;
          if (void 0 === t) s = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
          else {
            var l = [n, r, o, a, i, u],
              c = 0;
            s = new Error(t.replace(/%s/g, function() {
              return l[c++]
            })), s.name = "Invariant Violation"
          }
          throw s.framesToPop = 1, s
        }
      }
      t.exports = r
    }, {}],
    157: [function(e, t, n) {
      "use strict";

      function r(e) {
        return !(!e || !("function" == typeof Node ? e instanceof Node : "object" == typeof e && "number" == typeof e.nodeType && "string" == typeof e.nodeName))
      }
      t.exports = r
    }, {}],
    158: [function(e, t, n) {
      "use strict";

      function r(e) {
        return o(e) && 3 == e.nodeType
      }
      var o = e(157);
      t.exports = r
    }, {
      157: 157
    }],
    159: [function(e, t, n) {
      "use strict";
      var r = e(156),
        o = function(e) {
          var t, n = {};
          e instanceof Object && !Array.isArray(e) ? void 0 : r(!1);
          for (t in e) e.hasOwnProperty(t) && (n[t] = t);
          return n
        };
      t.exports = o
    }, {
      156: 156
    }],
    160: [function(e, t, n) {
      "use strict";
      var r = function(e) {
        var t;
        for (t in e)
          if (e.hasOwnProperty(t)) return t;
        return null
      };
      t.exports = r
    }, {}],
    161: [function(e, t, n) {
      "use strict";

      function r(e, t, n) {
        if (!e) return null;
        var r = {};
        for (var a in e) o.call(e, a) && (r[a] = t.call(n, e[a], a, e));
        return r
      }
      var o = Object.prototype.hasOwnProperty;
      t.exports = r
    }, {}],
    162: [function(e, t, n) {
      "use strict";

      function r(e) {
        var t = {};
        return function(n) {
          return t.hasOwnProperty(n) || (t[n] = e.call(this, n)), t[n]
        }
      }
      t.exports = r
    }, {}],
    163: [function(e, t, n) {
      "use strict";

      function r(e, t) {
        return e === t ? 0 !== e || 1 / e === 1 / t : e !== e && t !== t
      }

      function o(e, t) {
        if (r(e, t)) return !0;
        if ("object" != typeof e || null === e || "object" != typeof t || null === t) return !1;
        var n = Object.keys(e),
          o = Object.keys(t);
        if (n.length !== o.length) return !1;
        for (var i = 0; i < n.length; i++)
          if (!a.call(t, n[i]) || !r(e[n[i]], t[n[i]])) return !1;
        return !0
      }
      var a = Object.prototype.hasOwnProperty;
      t.exports = o
    }, {}],
    164: [function(e, t, n) {
      "use strict";
      var r = e(148),
        o = r;
      t.exports = o
    }, {
      148: 148
    }],
    165: [function(e, t, n) {
      "use strict";

      function r(e) {
        if (null === e || void 0 === e) throw new TypeError("Object.assign cannot be called with null or undefined");
        return Object(e)
      }
      var o = Object.prototype.hasOwnProperty,
        a = Object.prototype.propertyIsEnumerable;
      t.exports = Object.assign || function(e, t) {
        for (var n, i, u = r(e), s = 1; s < arguments.length; s++) {
          n = Object(arguments[s]);
          for (var l in n) o.call(n, l) && (u[l] = n[l]);
          if (Object.getOwnPropertySymbols) {
            i = Object.getOwnPropertySymbols(n);
            for (var c = 0; c < i.length; c++) a.call(n, i[c]) && (u[i[c]] = n[i[c]])
          }
        }
        return u
      }
    }, {}]
  }, {}, [90])(90)
});

/**
 * ReactDOM v15.0.2
 *
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e(require("react"));else if("function"==typeof define&&define.amd)define(["react"],e);else{var f;f="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,f.ReactDOM=e(f.React)}}(function(e){return e.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED});
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("react")):"function"==typeof define&&define.amd?define(["react"],t):"object"==typeof exports?exports.ReactRouter=t(require("react")):e.ReactRouter=t(e.React)}(this,function(e){return function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return e[r].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0,t.createMemoryHistory=t.hashHistory=t.browserHistory=t.applyRouterMiddleware=t.formatPattern=t.useRouterHistory=t.match=t.routerShape=t.locationShape=t.PropTypes=t.RoutingContext=t.RouterContext=t.createRoutes=t.useRoutes=t.RouteContext=t.Lifecycle=t.History=t.Route=t.Redirect=t.IndexRoute=t.IndexRedirect=t.withRouter=t.IndexLink=t.Link=t.Router=void 0;var o=n(5);Object.defineProperty(t,"createRoutes",{enumerable:!0,get:function(){return o.createRoutes}});var u=n(15);Object.defineProperty(t,"locationShape",{enumerable:!0,get:function(){return u.locationShape}}),Object.defineProperty(t,"routerShape",{enumerable:!0,get:function(){return u.routerShape}});var a=n(8);Object.defineProperty(t,"formatPattern",{enumerable:!0,get:function(){return a.formatPattern}});var i=n(38),s=r(i),c=n(20),f=r(c),l=n(32),d=r(l),p=n(51),h=r(p),v=n(33),y=r(v),m=n(34),g=r(m),_=n(21),R=r(_),O=n(36),P=r(O),b=n(31),x=r(b),w=n(35),M=r(w),j=n(37),E=r(j),S=n(50),A=r(S),C=n(10),k=r(C),T=n(39),H=r(T),q=r(u),L=n(48),U=r(L),N=n(25),B=r(N),I=n(41),D=r(I),W=n(42),F=r(W),K=n(46),Q=r(K),V=n(23),$=r(V);t.Router=s["default"],t.Link=f["default"],t.IndexLink=d["default"],t.withRouter=h["default"],t.IndexRedirect=y["default"],t.IndexRoute=g["default"],t.Redirect=R["default"],t.Route=P["default"],t.History=x["default"],t.Lifecycle=M["default"],t.RouteContext=E["default"],t.useRoutes=A["default"],t.RouterContext=k["default"],t.RoutingContext=H["default"],t.PropTypes=q["default"],t.match=U["default"],t.useRouterHistory=B["default"],t.applyRouterMiddleware=D["default"],t.browserHistory=F["default"],t.hashHistory=Q["default"],t.createMemoryHistory=$["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(-1!==t.indexOf("deprecated")){if(s[t])return;s[t]=!0}t="[react-router] "+t;for(var n=arguments.length,r=Array(n>2?n-2:0),o=2;n>o;o++)r[o-2]=arguments[o];i["default"].apply(void 0,[e,t].concat(r))}function u(){s={}}t.__esModule=!0,t["default"]=o,t._resetWarned=u;var a=n(4),i=r(a),s={}},function(t,n){t.exports=e},function(e,t,n){"use strict";var r=function(e,t,n,r,o,u,a,i){if(!e){var s;if(void 0===t)s=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,u,a,i],f=0;s=new Error(t.replace(/%s/g,function(){return c[f++]})),s.name="Invariant Violation"}throw s.framesToPop=1,s}};e.exports=r},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){return null==e||p["default"].isValidElement(e)}function u(e){return o(e)||Array.isArray(e)&&e.every(o)}function a(e,t,n){e=e||"UnknownComponent";for(var r in t)if(Object.prototype.hasOwnProperty.call(t,r)){var o=t[r](n,r,e);o instanceof Error}}function i(e,t){return l({},e,t)}function s(e){var t=e.type,n=i(t.defaultProps,e.props);if(t.propTypes&&a(t.displayName||t.name,t.propTypes,n),n.children){var r=c(n.children,n);r.length&&(n.childRoutes=r),delete n.children}return n}function c(e,t){var n=[];return p["default"].Children.forEach(e,function(e){if(p["default"].isValidElement(e))if(e.type.createRouteFromReactElement){var r=e.type.createRouteFromReactElement(e,t);r&&n.push(r)}else n.push(s(e))}),n}function f(e){return u(e)?e=c(e):e&&!Array.isArray(e)&&(e=[e]),e}t.__esModule=!0;var l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.isReactChildren=u,t.createRouteFromReactElement=s,t.createRoutesFromReactChildren=c,t.createRoutes=f;var d=n(2),p=r(d),h=n(1);r(h)},function(e,t,n){"use strict";function r(e,t,n){return e[t]?new Error("<"+n+'> should not have a "'+t+'" prop'):void 0}t.__esModule=!0,t.routes=t.route=t.components=t.component=t.history=void 0,t.falsy=r;var o=n(2),u=o.PropTypes.func,a=o.PropTypes.object,i=o.PropTypes.arrayOf,s=o.PropTypes.oneOfType,c=o.PropTypes.element,f=o.PropTypes.shape,l=o.PropTypes.string,d=(t.history=f({listen:u.isRequired,push:u.isRequired,replace:u.isRequired,go:u.isRequired,goBack:u.isRequired,goForward:u.isRequired}),t.component=s([u,l])),p=(t.components=s([d,a]),t.route=s([a,c]));t.routes=s([p,i(p)])},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){var t=e.match(/^https?:\/\/[^\/]*/);return null==t?e:e.substring(t[0].length)}function u(e){var t=o(e),n="",r="",u=t.indexOf("#");-1!==u&&(r=t.substring(u),t=t.substring(0,u));var a=t.indexOf("?");return-1!==a&&(n=t.substring(a),t=t.substring(0,a)),""===t&&(t="/"),{pathname:t,search:n,hash:r}}t.__esModule=!0,t.extractPath=o,t.parsePath=u;var a=n(4);r(a)},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function u(e){for(var t="",n=[],r=[],u=void 0,a=0,i=/:([a-zA-Z_$][a-zA-Z0-9_$]*)|\*\*|\*|\(|\)/g;u=i.exec(e);)u.index!==a&&(r.push(e.slice(a,u.index)),t+=o(e.slice(a,u.index))),u[1]?(t+="([^/]+)",n.push(u[1])):"**"===u[0]?(t+="(.*)",n.push("splat")):"*"===u[0]?(t+="(.*?)",n.push("splat")):"("===u[0]?t+="(?:":")"===u[0]&&(t+=")?"),r.push(u[0]),a=i.lastIndex;return a!==e.length&&(r.push(e.slice(a,e.length)),t+=o(e.slice(a,e.length))),{pattern:e,regexpSource:t,paramNames:n,tokens:r}}function a(e){return e in p||(p[e]=u(e)),p[e]}function i(e,t){"/"!==e.charAt(0)&&(e="/"+e);var n=a(e),r=n.regexpSource,o=n.paramNames,u=n.tokens;"/"!==e.charAt(e.length-1)&&(r+="/?"),"*"===u[u.length-1]&&(r+="$");var i=t.match(new RegExp("^"+r,"i"));if(null==i)return null;var s=i[0],c=t.substr(s.length);if(c){if("/"!==s.charAt(s.length-1))return null;c="/"+c}return{remainingPathname:c,paramNames:o,paramValues:i.slice(1).map(function(e){return e&&decodeURIComponent(e)})}}function s(e){return a(e).paramNames}function c(e,t){var n=i(e,t);if(!n)return null;var r=n.paramNames,o=n.paramValues,u={};return r.forEach(function(e,t){u[e]=o[t]}),u}function f(e,t){t=t||{};for(var n=a(e),r=n.tokens,o=0,u="",i=0,s=void 0,c=void 0,f=void 0,l=0,p=r.length;p>l;++l)s=r[l],"*"===s||"**"===s?(f=Array.isArray(t.splat)?t.splat[i++]:t.splat,null!=f||o>0?void 0:(0,d["default"])(!1),null!=f&&(u+=encodeURI(f))):"("===s?o+=1:")"===s?o-=1:":"===s.charAt(0)?(c=s.substring(1),f=t[c],null!=f||o>0?void 0:(0,d["default"])(!1),null!=f&&(u+=encodeURIComponent(f))):u+=s;return u.replace(/\/+/g,"/")}t.__esModule=!0,t.compilePattern=a,t.matchPattern=i,t.getParamNames=s,t.getParams=c,t.formatPattern=f;var l=n(3),d=r(l),p={}},function(e,t){"use strict";t.__esModule=!0;var n="PUSH";t.PUSH=n;var r="REPLACE";t.REPLACE=r;var o="POP";t.POP=o,t["default"]={PUSH:n,REPLACE:r,POP:o}},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0;var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=n(3),i=r(a),s=n(2),c=r(s),f=n(11),l=(r(f),n(45)),d=r(l),p=n(5),h=n(1),v=(r(h),c["default"].PropTypes),y=v.array,m=v.func,g=v.object,_=c["default"].createClass({displayName:"RouterContext",propTypes:{history:g,router:g.isRequired,location:g.isRequired,routes:y.isRequired,params:g.isRequired,components:y.isRequired,createElement:m.isRequired},getDefaultProps:function(){return{createElement:c["default"].createElement}},childContextTypes:{history:g,location:g.isRequired,router:g.isRequired},getChildContext:function(){var e=this.props,t=e.router,n=e.history,r=e.location;return t||(t=u({},n,{setRouteLeaveHook:n.listenBeforeLeavingRoute}),delete t.listenBeforeLeavingRoute),{history:n,location:r,router:t}},createElement:function(e,t){return null==e?null:this.props.createElement(e,t)},render:function(){var e=this,t=this.props,n=t.history,r=t.location,a=t.routes,s=t.params,f=t.components,l=null;return f&&(l=f.reduceRight(function(t,i,c){if(null==i)return t;var f=a[c],l=(0,d["default"])(f,s),h={history:n,location:r,params:s,route:f,routeParams:l,routes:a};if((0,p.isReactChildren)(t))h.children=t;else if(t)for(var v in t)Object.prototype.hasOwnProperty.call(t,v)&&(h[v]=t[v]);if("object"===("undefined"==typeof i?"undefined":o(i))){var y={};for(var m in i)Object.prototype.hasOwnProperty.call(i,m)&&(y[m]=e.createElement(i[m],u({key:m},h)));return y}return e.createElement(i,h)},l)),null===l||l===!1||c["default"].isValidElement(l)?void 0:(0,i["default"])(!1),l}});t["default"]=_,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0,t.canUseMembrane=void 0;var o=n(1),u=(r(o),t.canUseMembrane=!1,function(e){return e});t["default"]=u},function(e,t){"use strict";t.__esModule=!0;var n=!("undefined"==typeof window||!window.document||!window.document.createElement);t.canUseDOM=n},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){return s.stringify(e).replace(/%20/g,"+")}function u(e){return function(){function t(e){if(null==e.query){var t=e.search;e.query=P(t.substring(1)),e[h]={search:t,searchBase:""}}return e}function n(e,t){var n,r=e[h],o=t?O(t):"";if(!r&&!o)return e;"string"==typeof e&&(e=l.parsePath(e));var u=void 0;u=r&&e.search===r.search?r.searchBase:e.search||"";var i=u;return o&&(i+=(i?"&":"?")+o),a({},e,(n={search:i},n[h]={search:i,searchBase:u},n))}function r(e){return R.listenBefore(function(n,r){f["default"](e,t(n),r)})}function u(e){return R.listen(function(n){e(t(n))})}function i(e){R.push(n(e,e.query))}function s(e){R.replace(n(e,e.query))}function c(e,t){return R.createPath(n(e,t||e.query))}function d(e,t){return R.createHref(n(e,t||e.query))}function y(e){for(var r=arguments.length,o=Array(r>1?r-1:0),u=1;r>u;u++)o[u-1]=arguments[u];var a=R.createLocation.apply(R,[n(e,e.query)].concat(o));return e.query&&(a.query=e.query),t(a)}function m(e,t,n){"string"==typeof t&&(t=l.parsePath(t)),i(a({state:e},t,{query:n}))}function g(e,t,n){"string"==typeof t&&(t=l.parsePath(t)),s(a({state:e},t,{query:n}))}var _=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],R=e(_),O=_.stringifyQuery,P=_.parseQueryString;return"function"!=typeof O&&(O=o),"function"!=typeof P&&(P=v),a({},R,{listenBefore:r,listen:u,push:i,replace:s,createPath:c,createHref:d,createLocation:y,pushState:p["default"](m,"pushState is deprecated; use push instead"),replaceState:p["default"](g,"replaceState is deprecated; use replace instead")})}}t.__esModule=!0;var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(4),s=(r(i),n(60)),c=n(19),f=r(c),l=n(7),d=n(18),p=r(d),h="$searchBase",v=s.parse;t["default"]=u,e.exports=t["default"]},function(e,t){"use strict";function n(e,t,n){function r(){return a=!0,i?void(c=[].concat(Array.prototype.slice.call(arguments))):void n.apply(this,arguments)}function o(){if(!a&&(s=!0,!i)){for(i=!0;!a&&e>u&&s;)s=!1,t.call(this,u++,o,r);return i=!1,a?void n.apply(this,c):void(u>=e&&s&&(a=!0,n()))}}var u=0,a=!1,i=!1,s=!1,c=void 0;o()}function r(e,t,n){function r(e,t,r){a||(t?(a=!0,n(t)):(u[e]=r,a=++i===o,a&&n(null,u)))}var o=e.length,u=[];if(0===o)return n(null,u);var a=!1,i=0;e.forEach(function(e,n){t(e,n,function(e,t){r(n,e,t)})})}t.__esModule=!0,t.loopAsync=n,t.mapAsync=r},function(e,t,n){"use strict";function r(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t["default"]=e,t}function o(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0,t.router=t.routes=t.route=t.components=t.component=t.location=t.history=t.falsy=t.locationShape=t.routerShape=void 0;var u=n(2),a=n(11),i=(o(a),n(6)),s=r(i),c=n(1),f=(o(c),u.PropTypes.func),l=u.PropTypes.object,d=u.PropTypes.shape,p=u.PropTypes.string,h=t.routerShape=d({push:f.isRequired,replace:f.isRequired,go:f.isRequired,goBack:f.isRequired,goForward:f.isRequired,setRouteLeaveHook:f.isRequired,isActive:f.isRequired}),v=t.locationShape=d({pathname:p.isRequired,search:p.isRequired,state:l,action:p.isRequired,key:p}),y=t.falsy=s.falsy,m=t.history=s.history,g=t.location=v,_=t.component=s.component,R=t.components=s.components,O=t.route=s.route,P=(t.routes=s.routes,t.router=h),b={falsy:y,history:m,location:g,component:_,components:R,route:O,router:P};t["default"]=b},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!0;return!1}function u(e,t){function n(t){var n=arguments.length<=1||void 0===arguments[1]?!1:arguments[1],r=arguments.length<=2||void 0===arguments[2]?null:arguments[2],o=void 0;return n&&n!==!0||null!==r?(t={pathname:t,query:n},o=r||!1):(t=e.createLocation(t),o=n),(0,p["default"])(t,o,O.location,O.routes,O.params)}function r(t){return e.createLocation(t,s.REPLACE)}function u(e,n){P&&P.location===e?i(P,n):(0,m["default"])(t,e,function(t,r){t?n(t):r?i(a({},r,{location:e}),n):n()})}function i(e,t){function n(n,r){return n||r?o(n,r):void(0,v["default"])(e,function(n,r){n?t(n):t(null,null,O=a({},e,{components:r}))})}function o(e,n){e?t(e):t(null,r(n))}var u=(0,f["default"])(O,e),i=u.leaveRoutes,s=u.changeRoutes,c=u.enterRoutes;(0,l.runLeaveHooks)(i),i.filter(function(e){return-1===c.indexOf(e)}).forEach(g),(0,l.runChangeHooks)(s,O,e,function(t,r){return t||r?o(t,r):void(0,l.runEnterHooks)(c,e,n)})}function c(e){var t=arguments.length<=1||void 0===arguments[1]?!0:arguments[1];return e.__id__||t&&(e.__id__=b++)}function d(e){return e.reduce(function(e,t){return e.push.apply(e,x[c(t)]),e},[])}function h(e,n){(0,m["default"])(t,e,function(t,r){if(null==r)return void n();P=a({},r,{location:e});for(var o=d((0,f["default"])(O,P).leaveRoutes),u=void 0,i=0,s=o.length;null==u&&s>i;++i)u=o[i](e);n(u)})}function y(){if(O.routes){for(var e=d(O.routes),t=void 0,n=0,r=e.length;"string"!=typeof t&&r>n;++n)t=e[n]();return t}}function g(e){var t=c(e,!1);t&&(delete x[t],o(x)||(w&&(w(),w=null),M&&(M(),M=null)))}function _(t,n){var r=c(t),u=x[r];if(u)-1===u.indexOf(n)&&u.push(n);else{var a=!o(x);x[r]=[n],a&&(w=e.listenBefore(h),e.listenBeforeUnload&&(M=e.listenBeforeUnload(y)))}return function(){var e=x[r];if(e){var o=e.filter(function(e){return e!==n});0===o.length?g(t):x[r]=o}}}function R(t){return e.listen(function(n){O.location===n?t(null,O):u(n,function(n,r,o){n?t(n):r?e.transitionTo(r):o&&t(null,o)})})}var O={},P=void 0,b=1,x=Object.create(null),w=void 0,M=void 0;return{isActive:n,match:u,listenBeforeLeavingRoute:_,listen:R}}t.__esModule=!0;var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t["default"]=u;var i=n(1),s=(r(i),n(9)),c=n(43),f=r(c),l=n(40),d=n(47),p=r(d),h=n(44),v=r(h),y=n(49),m=r(y);e.exports=t["default"]},function(e,t){"use strict";function n(e,t,n){e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)}function r(e,t,n){e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)}function o(){return window.location.href.split("#")[1]||""}function u(e){window.location.replace(window.location.pathname+window.location.search+"#"+e)}function a(){return window.location.pathname+window.location.search+window.location.hash}function i(e){e&&window.history.go(e)}function s(e,t){t(window.confirm(e))}function c(){var e=navigator.userAgent;return-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone")?window.history&&"pushState"in window.history:!1}function f(){var e=navigator.userAgent;return-1===e.indexOf("Firefox")}t.__esModule=!0,t.addEventListener=n,t.removeEventListener=r,t.getHashPath=o,t.replaceHashPath=u,t.getWindowPath=a,t.go=i,t.getUserConfirmation=s,t.supportsHistory=c,t.supportsGoWithoutReloadUsingHash=f},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){return function(){return e.apply(this,arguments)}}t.__esModule=!0;var u=n(4);r(u);t["default"]=o,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t,n){var r=e(t,n);e.length<2&&n(r)}t.__esModule=!0;var u=n(4);r(u);t["default"]=o,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}function u(e){return 0===e.button}function a(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}function i(e){for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!1;return!0}function s(e,t){var n=t.query,r=t.hash,o=t.state;return n||r||o?{pathname:e,query:n,hash:r,state:o}:e}t.__esModule=!0;var c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},f=n(2),l=r(f),d=n(1),p=(r(d),n(15)),h=l["default"].PropTypes,v=h.bool,y=h.object,m=h.string,g=h.func,_=h.oneOfType,R=l["default"].createClass({displayName:"Link",contextTypes:{router:p.routerShape},propTypes:{to:_([m,y]).isRequired,query:y,hash:m,state:y,activeStyle:y,activeClassName:m,onlyActiveOnIndex:v.isRequired,onClick:g,target:m},getDefaultProps:function(){return{onlyActiveOnIndex:!1,style:{}}},handleClick:function(e){var t=!0;if(this.props.onClick&&this.props.onClick(e),!a(e)&&u(e)){if(e.defaultPrevented===!0&&(t=!1),this.props.target)return void(t||e.preventDefault());if(e.preventDefault(),t){var n=this.props,r=n.to,o=n.query,i=n.hash,c=n.state,f=s(r,{query:o,hash:i,state:c});this.context.router.push(f)}}},render:function(){var e=this.props,t=e.to,n=e.query,r=e.hash,u=e.state,a=e.activeClassName,f=e.activeStyle,d=e.onlyActiveOnIndex,p=o(e,["to","query","hash","state","activeClassName","activeStyle","onlyActiveOnIndex"]),h=this.context.router;if(h){var v=s(t,{query:n,hash:r,state:u});p.href=h.createHref(v),(a||null!=f&&!i(f))&&h.isActive(v,d)&&(a&&(p.className?p.className+=" "+a:p.className=a),f&&(p.style=c({},p.style,f)))}return l["default"].createElement("a",c({},p,{onClick:this.handleClick}))}});t["default"]=R,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0;var o=n(2),u=r(o),a=n(3),i=r(a),s=n(5),c=n(8),f=n(6),l=u["default"].PropTypes,d=l.string,p=l.object,h=u["default"].createClass({displayName:"Redirect",statics:{createRouteFromReactElement:function(e){var t=(0,s.createRouteFromReactElement)(e);return t.from&&(t.path=t.from),t.onEnter=function(e,n){var r=e.location,o=e.params,u=void 0;if("/"===t.to.charAt(0))u=(0,c.formatPattern)(t.to,o);else if(t.to){var a=e.routes.indexOf(t),i=h.getRoutePattern(e.routes,a-1),s=i.replace(/\/*$/,"/")+t.to;u=(0,c.formatPattern)(s,o)}else u=r.pathname;n({pathname:u,query:t.query||r.query,state:t.state||r.state})},t},getRoutePattern:function(e,t){for(var n="",r=t;r>=0;r--){var o=e[r],u=o.path||"";if(n=u.replace(/\/*$/,"/")+n,0===u.indexOf("/"))break}return"/"+n}},propTypes:{path:d,from:d,to:d.isRequired,query:p,state:p,onEnter:f.falsy,children:f.falsy},render:function(){(0,i["default"])(!1)}});t["default"]=h,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){return a({},e,{setRouteLeaveHook:t.listenBeforeLeavingRoute,isActive:t.isActive})}function u(e,t){return e=a({},e,t)}t.__esModule=!0;var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.createRouterObject=o,t.createRoutingHistory=u;var i=n(11);r(i)},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){var t=(0,f["default"])(e),n=function(){return t},r=(0,a["default"])((0,s["default"])(n))(e);return r.__v2_compatible__=!0,r}t.__esModule=!0,t["default"]=o;var u=n(13),a=r(u),i=n(30),s=r(i),c=n(58),f=r(c);e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0,t["default"]=function(e){var t=void 0;return a&&(t=(0,u["default"])(e)()),t};var o=n(25),u=r(o),a=!("undefined"==typeof window||!window.document||!window.document.createElement);e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){return function(t){var n=(0,a["default"])((0,s["default"])(e))(t);return n.__v2_compatible__=!0,n}}t.__esModule=!0,t["default"]=o;var u=n(13),a=r(u),i=n(30),s=r(i);e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){return s+e}function u(e,t){try{null==t?window.sessionStorage.removeItem(o(e)):window.sessionStorage.setItem(o(e),JSON.stringify(t))}catch(n){if(n.name===f)return;if(c.indexOf(n.name)>=0&&0===window.sessionStorage.length)return;throw n}}function a(e){var t=void 0;try{t=window.sessionStorage.getItem(o(e))}catch(n){if(n.name===f)return null}if(t)try{return JSON.parse(t)}catch(n){}return null}t.__esModule=!0,t.saveState=u,t.readState=a;var i=n(4),s=(r(i),"@@History/"),c=["QuotaExceededError","QUOTA_EXCEEDED_ERR"],f="SecurityError"},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){function t(e){return s.canUseDOM?void 0:i["default"](!1),n.listen(e)}var n=l["default"](u({getUserConfirmation:c.getUserConfirmation},e,{go:c.go}));return u({},n,{listen:t})}t.__esModule=!0;var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=n(3),i=r(a),s=n(12),c=n(17),f=n(29),l=r(f);t["default"]=o,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){return"string"==typeof e&&"/"===e.charAt(0)}function u(){var e=m.getHashPath();return o(e)?!0:(m.replaceHashPath("/"+e),!1)}function a(e,t,n){return e+(-1===e.indexOf("?")?"?":"&")+(t+"="+n)}function i(e,t){return e.replace(new RegExp("[?&]?"+t+"=[a-zA-Z0-9]+"),"")}function s(e,t){var n=e.match(new RegExp("\\?.*?\\b"+t+"=(.+?)\\b"));return n&&n[1]}function c(){function e(){var e=m.getHashPath(),t=void 0,n=void 0;j?(t=s(e,j),e=i(e,j),t?n=g.readState(t):(n=null,t=E.createKey(),m.replaceHashPath(a(e,j,t)))):t=n=null;var r=v.parsePath(e);return E.createLocation(f({},r,{state:n}),void 0,t)}function t(t){function n(){u()&&r(e())}var r=t.transitionTo;return u(),m.addEventListener(window,"hashchange",n),function(){m.removeEventListener(window,"hashchange",n)}}function n(e){var t=e.basename,n=e.pathname,r=e.search,o=e.state,u=e.action,i=e.key;if(u!==h.POP){var s=(t||"")+n+r;j?(s=a(s,j,i),g.saveState(i,o)):e.key=e.state=null;var c=m.getHashPath();u===h.PUSH?c!==s&&(window.location.hash=s):c!==s&&m.replaceHashPath(s)}}function r(e){1===++S&&(A=t(E));var n=E.listenBefore(e);return function(){n(),0===--S&&A()}}function o(e){1===++S&&(A=t(E));var n=E.listen(e);return function(){n(),0===--S&&A()}}function c(e){E.push(e)}function l(e){E.replace(e)}function d(e){E.go(e)}function _(e){return"#"+E.createHref(e)}function P(e){1===++S&&(A=t(E)),E.registerTransitionHook(e)}function b(e){E.unregisterTransitionHook(e),0===--S&&A()}function x(e,t){E.pushState(e,t)}function w(e,t){E.replaceState(e,t)}var M=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];y.canUseDOM?void 0:p["default"](!1);var j=M.queryKey;(void 0===j||j)&&(j="string"==typeof j?j:O);var E=R["default"](f({},M,{getCurrentLocation:e,finishTransition:n,saveState:g.saveState})),S=0,A=void 0;m.supportsGoWithoutReloadUsingHash();return f({},E,{listenBefore:r,listen:o,push:c,replace:l,go:d,createHref:_,registerTransitionHook:P,unregisterTransitionHook:b,pushState:x,replaceState:w})}t.__esModule=!0;var f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},l=n(4),d=(r(l),n(3)),p=r(d),h=n(9),v=n(7),y=n(12),m=n(17),g=n(26),_=n(27),R=r(_),O="_k";t["default"]=c,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){return Math.random().toString(36).substr(2,e)}function u(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.key===t.key&&f["default"](e.state,t.state)}function a(){function e(e){return N.push(e),function(){N=N.filter(function(t){return t!==e})}}function t(){return W&&W.action===p.POP?B.indexOf(W.key):D?B.indexOf(D.key):-1}function n(e){var n=t();D=e,D.action===p.PUSH?B=[].concat(B.slice(0,n+1),[D.key]):D.action===p.REPLACE&&(B[n]=D.key),I.forEach(function(e){e(D)})}function r(e){if(I.push(e),D)e(D);else{var t=k();B=[t.key],n(t)}return function(){I=I.filter(function(t){return t!==e})}}function a(e,t){d.loopAsync(N.length,function(t,n,r){m["default"](N[t],e,function(e){null!=e?r(e):n()})},function(e){L&&"string"==typeof e?L(e,function(e){t(e!==!1)}):t(e!==!1)})}function s(e){D&&u(D,e)||(W=e,a(e,function(t){if(W===e)if(t){if(e.action===p.PUSH){var r=P(D),o=P(e);o===r&&f["default"](D.state,e.state)&&(e.action=p.REPLACE)}T(e)!==!1&&n(e)}else if(D&&e.action===p.POP){var u=B.indexOf(D.key),a=B.indexOf(e.key);-1!==u&&-1!==a&&q(u-a)}}))}function c(e){s(x(e,p.PUSH,O()))}function h(e){s(x(e,p.REPLACE,O()))}function y(){q(-1)}function g(){q(1)}function O(){return o(U)}function P(e){if(null==e||"string"==typeof e)return e;var t=e.pathname,n=e.search,r=e.hash,o=t;return n&&(o+=n),r&&(o+=r),o}function b(e){return P(e)}function x(e,t){var n=arguments.length<=2||void 0===arguments[2]?O():arguments[2];return"object"==typeof t&&("string"==typeof e&&(e=l.parsePath(e)),e=i({},e,{state:t}),t=n,n=arguments[3]||O()),v["default"](e,t,n)}function w(e){D?(M(D,e),n(D)):M(k(),e)}function M(e,t){e.state=i({},e.state,t),H(e.key,e.state)}function j(e){-1===N.indexOf(e)&&N.push(e)}function E(e){N=N.filter(function(t){return t!==e})}function S(e,t){"string"==typeof t&&(t=l.parsePath(t)),c(i({state:e},t))}function A(e,t){"string"==typeof t&&(t=l.parsePath(t)),h(i({state:e},t))}var C=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],k=C.getCurrentLocation,T=C.finishTransition,H=C.saveState,q=C.go,L=C.getUserConfirmation,U=C.keyLength;"number"!=typeof U&&(U=R);var N=[],B=[],I=[],D=void 0,W=void 0;return{listenBefore:e,listen:r,transitionTo:s,push:c,replace:h,go:q,goBack:y,goForward:g,createKey:O,createPath:P,createHref:b,createLocation:x,setState:_["default"](w,"setState is deprecated; use location.key to save state instead"),registerTransitionHook:_["default"](j,"registerTransitionHook is deprecated; use listenBefore instead"),unregisterTransitionHook:_["default"](E,"unregisterTransitionHook is deprecated; use the callback returned from listenBefore instead"),pushState:_["default"](S,"pushState is deprecated; use push instead"),replaceState:_["default"](A,"replaceState is deprecated; use replace instead")}}t.__esModule=!0;var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s=n(4),c=(r(s),n(52)),f=r(c),l=n(7),d=n(55),p=n(9),h=n(57),v=r(h),y=n(19),m=r(y),g=n(18),_=r(g),R=6;t["default"]=a,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){return function(){function t(e){return _&&null==e.basename&&(0===e.pathname.indexOf(_)?(e.pathname=e.pathname.substring(_.length),e.basename=_,""===e.pathname&&(e.pathname="/")):e.basename=""),e}function n(e){if(!_)return e;"string"==typeof e&&(e=i.parsePath(e));var t=e.pathname,n="/"===_.slice(-1)?_:_+"/",r="/"===t.charAt(0)?t.slice(1):t,o=n+r;return u({},e,{pathname:o})}function r(e){return g.listenBefore(function(n,r){c["default"](e,t(n),r)})}function o(e){return g.listen(function(n){e(t(n))})}function s(e){g.push(n(e))}function f(e){g.replace(n(e))}function d(e){return g.createPath(n(e))}function p(e){return g.createHref(n(e))}function h(e){for(var r=arguments.length,o=Array(r>1?r-1:0),u=1;r>u;u++)o[u-1]=arguments[u];return t(g.createLocation.apply(g,[n(e)].concat(o)))}function v(e,t){"string"==typeof t&&(t=i.parsePath(t)),s(u({state:e},t))}function y(e,t){"string"==typeof t&&(t=i.parsePath(t)),f(u({state:e},t))}var m=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],g=e(m),_=m.basename;if(null==_&&a.canUseDOM){var R=document.getElementsByTagName("base")[0];R&&(_=R.getAttribute("href"))}return u({},g,{listenBefore:r,listen:o,push:s,replace:f,createPath:d,createHref:p,createLocation:h,pushState:l["default"](v,"pushState is deprecated; use push instead"),replaceState:l["default"](y,"replaceState is deprecated; use replace instead")})}}t.__esModule=!0;var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=n(12),i=n(7),s=n(19),c=r(s),f=n(18),l=r(f);t["default"]=o,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0;var o=n(1),u=(r(o),n(6)),a={contextTypes:{history:u.history},componentWillMount:function(){this.history=this.context.history}};t["default"]=a,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0;var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},u=n(2),a=r(u),i=n(20),s=r(i),c=a["default"].createClass({displayName:"IndexLink",render:function(){return a["default"].createElement(s["default"],o({},this.props,{onlyActiveOnIndex:!0}))}});t["default"]=c,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0;var o=n(2),u=r(o),a=n(1),i=(r(a),n(3)),s=r(i),c=n(21),f=r(c),l=n(6),d=u["default"].PropTypes,p=d.string,h=d.object,v=u["default"].createClass({displayName:"IndexRedirect",statics:{createRouteFromReactElement:function(e,t){t&&(t.indexRoute=f["default"].createRouteFromReactElement(e))}},propTypes:{to:p.isRequired,query:h,state:h,onEnter:l.falsy,children:l.falsy},render:function(){(0,s["default"])(!1)}});t["default"]=v,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0;var o=n(2),u=r(o),a=n(1),i=(r(a),n(3)),s=r(i),c=n(5),f=n(6),l=u["default"].PropTypes.func,d=u["default"].createClass({displayName:"IndexRoute",statics:{createRouteFromReactElement:function(e,t){t&&(t.indexRoute=(0,c.createRouteFromReactElement)(e))}},propTypes:{path:f.falsy,component:f.component,components:f.components,getComponent:l,getComponents:l},render:function(){(0,s["default"])(!1)}});t["default"]=d,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0;var o=n(1),u=(r(o),n(2)),a=r(u),i=n(3),s=r(i),c=a["default"].PropTypes.object,f={contextTypes:{history:c.isRequired,route:c},propTypes:{route:c},componentDidMount:function(){this.routerWillLeave?void 0:(0,s["default"])(!1);
var e=this.props.route||this.context.route;e?void 0:(0,s["default"])(!1),this._unlistenBeforeLeavingRoute=this.context.history.listenBeforeLeavingRoute(e,this.routerWillLeave)},componentWillUnmount:function(){this._unlistenBeforeLeavingRoute&&this._unlistenBeforeLeavingRoute()}};t["default"]=f,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0;var o=n(2),u=r(o),a=n(3),i=r(a),s=n(5),c=n(6),f=u["default"].PropTypes,l=f.string,d=f.func,p=u["default"].createClass({displayName:"Route",statics:{createRouteFromReactElement:s.createRouteFromReactElement},propTypes:{path:l,component:c.component,components:c.components,getComponent:d,getComponents:d},render:function(){(0,i["default"])(!1)}});t["default"]=p,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0;var o=n(1),u=(r(o),n(2)),a=r(u),i=a["default"].PropTypes.object,s={propTypes:{route:i.isRequired},childContextTypes:{route:i.isRequired},getChildContext:function(){return{route:this.props.route}},componentWillMount:function(){}};t["default"]=s,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}function u(e){return!e||!e.__v2_compatible__}t.__esModule=!0;var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(28),s=r(i),c=n(13),f=r(c),l=n(2),d=r(l),p=n(16),h=r(p),v=n(6),y=n(10),m=r(y),g=n(5),_=n(22),R=n(1),O=(r(R),d["default"].PropTypes),P=O.func,b=O.object,x=d["default"].createClass({displayName:"Router",propTypes:{history:b,children:v.routes,routes:v.routes,render:P,createElement:P,onError:P,onUpdate:P,matchContext:b},getDefaultProps:function(){return{render:function(e){return d["default"].createElement(m["default"],e)}}},getInitialState:function(){return{location:null,routes:null,params:null,components:null}},handleError:function(e){if(!this.props.onError)throw e;this.props.onError.call(this,e)},componentWillMount:function(){var e=this,t=this.props,n=(t.parseQueryString,t.stringifyQuery,this.createRouterObjects()),r=n.history,o=n.transitionManager,u=n.router;this._unlisten=o.listen(function(t,n){t?e.handleError(t):e.setState(n,e.props.onUpdate)}),this.history=r,this.router=u},createRouterObjects:function(){var e=this.props.matchContext;if(e)return e;var t=this.props.history,n=this.props,r=n.routes,o=n.children;u(t)&&(t=this.wrapDeprecatedHistory(t));var a=(0,h["default"])(t,(0,g.createRoutes)(r||o)),i=(0,_.createRouterObject)(t,a),s=(0,_.createRoutingHistory)(t,a);return{history:s,transitionManager:a,router:i}},wrapDeprecatedHistory:function(e){var t=this.props,n=t.parseQueryString,r=t.stringifyQuery,o=void 0;return o=e?function(){return e}:s["default"],(0,f["default"])(o)({parseQueryString:n,stringifyQuery:r})},componentWillReceiveProps:function(e){},componentWillUnmount:function(){this._unlisten&&this._unlisten()},render:function w(){var e=this.state,t=e.location,n=e.routes,r=e.params,u=e.components,i=this.props,s=i.createElement,w=i.render,c=o(i,["createElement","render"]);return null==t?null:(Object.keys(x.propTypes).forEach(function(e){return delete c[e]}),w(a({},c,{history:this.history,router:this.router,location:t,routes:n,params:r,components:u,createElement:s})))}});t["default"]=x,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0;var o=n(2),u=r(o),a=n(10),i=r(a),s=n(1),c=(r(s),u["default"].createClass({displayName:"RoutingContext",componentWillMount:function(){},render:function(){return u["default"].createElement(i["default"],this.props)}}));t["default"]=c,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t,n){return function(){for(var r=arguments.length,o=Array(r),u=0;r>u;u++)o[u]=arguments[u];if(e.apply(t,o),e.length<n){var a=o[o.length-1];a()}}}function u(e){return e.reduce(function(e,t){return t.onEnter&&e.push(o(t.onEnter,t,3)),e},[])}function a(e){return e.reduce(function(e,t){return t.onChange&&e.push(o(t.onChange,t,4)),e},[])}function i(e,t,n){function r(e,t,n){return t?void(o={pathname:t,query:n,state:e}):void(o=e)}if(!e)return void n();var o=void 0;(0,l.loopAsync)(e,function(e,n,u){t(e,r,function(e){e||o?u(e,o):n()})},n)}function s(e,t,n){var r=u(e);return i(r.length,function(e,n,o){r[e](t,n,o)},n)}function c(e,t,n,r){var o=a(e);return i(o.length,function(e,r,u){o[e](t,n,r,u)},r)}function f(e){for(var t=0,n=e.length;n>t;++t)e[t].onLeave&&e[t].onLeave.call(e[t])}t.__esModule=!0,t.runEnterHooks=s,t.runChangeHooks=c,t.runLeaveHooks=f;var l=n(14),d=n(1);r(d)},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0;var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},u=n(2),a=r(u),i=n(10),s=r(i);t["default"]=function(){for(var e=arguments.length,t=Array(e),n=0;e>n;n++)t[n]=arguments[n];var r=t.map(function(e){return e.renderRouterContext}).filter(function(e){return e}),i=t.map(function(e){return e.renderRouteComponent}).filter(function(e){return e}),c=function(){var e=arguments.length<=0||void 0===arguments[0]?u.createElement:arguments[0];return function(t,n){return i.reduceRight(function(e,t){return t(e,n)},e(t,n))}};return function(e){return r.reduceRight(function(t,n){return n(t,e)},a["default"].createElement(s["default"],o({},e,{createElement:c(e.createElement)})))}},e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0;var o=n(56),u=r(o),a=n(24),i=r(a);t["default"]=(0,i["default"])(u["default"]),e.exports=t["default"]},function(e,t,n){"use strict";function r(e,t,n){if(!e.path)return!1;var r=(0,u.getParamNames)(e.path);return r.some(function(e){return t.params[e]!==n.params[e]})}function o(e,t){var n=e&&e.routes,o=t.routes,u=void 0,a=void 0,i=void 0;return n?!function(){var s=!1;u=n.filter(function(n){if(s)return!0;var u=-1===o.indexOf(n)||r(n,e,t);return u&&(s=!0),u}),u.reverse(),i=[],a=[],o.forEach(function(e){var t=-1===n.indexOf(e),r=-1!==u.indexOf(e);t||r?i.push(e):a.push(e)})}():(u=[],a=[],i=o),{leaveRoutes:u,changeRoutes:a,enterRoutes:i}}t.__esModule=!0;var u=n(8);t["default"]=o,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t,n){if(t.component||t.components)return void n(null,t.component||t.components);var r=t.getComponent||t.getComponents;if(!r)return void n();var o=e.location,u=void 0;u=a({},e,o),r.call(t,u,n)}function u(e,t){(0,i.mapAsync)(e.routes,function(t,n,r){o(e,t,r)},t)}t.__esModule=!0;var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(14),s=(n(11),n(1));r(s);t["default"]=u,e.exports=t["default"]},function(e,t,n){"use strict";function r(e,t){var n={};if(!e.path)return n;var r=(0,o.getParamNames)(e.path);for(var u in t)Object.prototype.hasOwnProperty.call(t,u)&&-1!==r.indexOf(u)&&(n[u]=t[u]);return n}t.__esModule=!0;var o=n(8);t["default"]=r,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0;var o=n(28),u=r(o),a=n(24),i=r(a);t["default"]=(0,i["default"])(u["default"]),e.exports=t["default"]},function(e,t,n){"use strict";function r(e,t){if(e==t)return!0;if(null==e||null==t)return!1;if(Array.isArray(e))return Array.isArray(t)&&e.length===t.length&&e.every(function(e,n){return r(e,t[n])});if("object"===("undefined"==typeof e?"undefined":s(e))){for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n))if(void 0===e[n]){if(void 0!==t[n])return!1}else{if(!Object.prototype.hasOwnProperty.call(t,n))return!1;if(!r(e[n],t[n]))return!1}return!0}return String(e)===String(t)}function o(e,t){return"/"!==t.charAt(0)&&(t="/"+t),"/"!==e.charAt(e.length-1)&&(e+="/"),"/"!==t.charAt(t.length-1)&&(t+="/"),t===e}function u(e,t,n){for(var r=e,o=[],u=[],a=0,i=t.length;i>a;++a){var s=t[a],f=s.path||"";if("/"===f.charAt(0)&&(r=e,o=[],u=[]),null!==r&&f){var l=(0,c.matchPattern)(f,r);if(l?(r=l.remainingPathname,o=[].concat(o,l.paramNames),u=[].concat(u,l.paramValues)):r=null,""===r)return o.every(function(e,t){return String(u[t])===String(n[e])})}}return!1}function a(e,t){return null==t?null==e:null==e?!0:r(e,t)}function i(e,t,n,r,i){var s=e.pathname,c=e.query;return null==n?!1:("/"!==s.charAt(0)&&(s="/"+s),o(s,n.pathname)||!t&&u(s,r,i)?a(c,n.query):!1)}t.__esModule=!0;var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};t["default"]=i;var c=n(8);e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}function u(e,t){var n=e.history,r=e.routes,u=e.location,i=o(e,["history","routes","location"]);n||u?void 0:(0,s["default"])(!1),n=n?n:(0,f["default"])(i);var c=(0,d["default"])(n,(0,p.createRoutes)(r)),l=void 0;u?u=n.createLocation(u):l=n.listen(function(e){u=e});var v=(0,h.createRouterObject)(n,c);n=(0,h.createRoutingHistory)(n,c),c.match(u,function(e,r,o){t(e,r,o&&a({},o,{history:n,router:v,matchContext:{history:n,transitionManager:c,router:v}})),l&&l()})}t.__esModule=!0;var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(3),s=r(i),c=n(23),f=r(c),l=n(16),d=r(l),p=n(5),h=n(22);t["default"]=u,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t,n){if(e.childRoutes)return[null,e.childRoutes];if(!e.getChildRoutes)return[];var r=!0,o=void 0;return e.getChildRoutes(t,function(e,t){return t=!e&&(0,v.createRoutes)(t),r?void(o=[e,t]):void n(e,t)}),r=!1,o}function u(e,t,n){e.indexRoute?n(null,e.indexRoute):e.getIndexRoute?e.getIndexRoute(t,function(e,t){n(e,!e&&(0,v.createRoutes)(t)[0])}):e.childRoutes?!function(){var r=e.childRoutes.filter(function(e){return!e.path});(0,p.loopAsync)(r.length,function(e,n,o){u(r[e],t,function(t,u){if(t||u){var a=[r[e]].concat(Array.isArray(u)?u:[u]);o(t,a)}else n()})},function(e,t){n(null,t)})}():n()}function a(e,t,n){return t.reduce(function(e,t,r){var o=n&&n[r];return Array.isArray(e[t])?e[t].push(o):t in e?e[t]=[e[t],o]:e[t]=o,e},e)}function i(e,t){return a({},e,t)}function s(e,t,n,r,a,s){var f=e.path||"";if("/"===f.charAt(0)&&(n=t.pathname,r=[],a=[]),null!==n&&f){var d=(0,h.matchPattern)(f,n);if(d?(n=d.remainingPathname,r=[].concat(r,d.paramNames),a=[].concat(a,d.paramValues)):n=null,""===n){var p=function(){var n={routes:[e],params:i(r,a)};return u(e,t,function(e,t){if(e)s(e);else{if(Array.isArray(t)){var r;(r=n.routes).push.apply(r,t)}else t&&n.routes.push(t);s(null,n)}}),{v:void 0}}();if("object"===("undefined"==typeof p?"undefined":l(p)))return p.v}}if(null!=n||e.childRoutes){var v=function(o,u){o?s(o):u?c(u,t,function(t,n){t?s(t):n?(n.routes.unshift(e),s(null,n)):s()},n,r,a):s()},y=o(e,t,v);y&&v.apply(void 0,y)}else s()}function c(e,t,n,r){var o=arguments.length<=4||void 0===arguments[4]?[]:arguments[4],u=arguments.length<=5||void 0===arguments[5]?[]:arguments[5];void 0===r&&("/"!==t.pathname.charAt(0)&&(t=f({},t,{pathname:"/"+t.pathname})),r=t.pathname),(0,p.loopAsync)(e.length,function(n,a,i){s(e[n],t,r,o,u,function(e,t){e||t?i(e,t):a()})},n)}t.__esModule=!0;var f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};t["default"]=c;var d=n(1),p=(r(d),n(14)),h=n(8),v=n(5);e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}function u(e){return function(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],n=t.routes,r=o(t,["routes"]),u=(0,s["default"])(e)(r),i=(0,f["default"])(u,n);return a({},u,i)}}t.__esModule=!0;var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(13),s=r(i),c=n(16),f=r(c),l=n(1);r(l);t["default"]=u,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){return e.displayName||e.name||"Component"}function u(e){var t=s["default"].createClass({displayName:"WithRouter",contextTypes:{router:l.routerShape},render:function(){return s["default"].createElement(e,a({},this.props,{router:this.context.router}))}});return t.displayName="withRouter("+o(e)+")",t.WrappedComponent=e,(0,f["default"])(t,e)}t.__esModule=!0;var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t["default"]=u;var i=n(2),s=r(i),c=n(59),f=r(c),l=n(15);e.exports=t["default"]},function(e,t,n){function r(e){return null===e||void 0===e}function o(e){return e&&"object"==typeof e&&"number"==typeof e.length?"function"!=typeof e.copy||"function"!=typeof e.slice?!1:!(e.length>0&&"number"!=typeof e[0]):!1}function u(e,t,n){var u,f;if(r(e)||r(t))return!1;if(e.prototype!==t.prototype)return!1;if(s(e))return s(t)?(e=a.call(e),t=a.call(t),c(e,t,n)):!1;if(o(e)){if(!o(t))return!1;if(e.length!==t.length)return!1;for(u=0;u<e.length;u++)if(e[u]!==t[u])return!1;return!0}try{var l=i(e),d=i(t)}catch(p){return!1}if(l.length!=d.length)return!1;for(l.sort(),d.sort(),u=l.length-1;u>=0;u--)if(l[u]!=d[u])return!1;for(u=l.length-1;u>=0;u--)if(f=l[u],!c(e[f],t[f],n))return!1;return typeof e==typeof t}var a=Array.prototype.slice,i=n(54),s=n(53),c=e.exports=function(e,t,n){return n||(n={}),e===t?!0:e instanceof Date&&t instanceof Date?e.getTime()===t.getTime():!e||!t||"object"!=typeof e&&"object"!=typeof t?n.strict?e===t:e==t:u(e,t,n)}},function(e,t){function n(e){return"[object Arguments]"==Object.prototype.toString.call(e)}function r(e){return e&&"object"==typeof e&&"number"==typeof e.length&&Object.prototype.hasOwnProperty.call(e,"callee")&&!Object.prototype.propertyIsEnumerable.call(e,"callee")||!1}var o="[object Arguments]"==function(){return Object.prototype.toString.call(arguments)}();t=e.exports=o?n:r,t.supported=n,t.unsupported=r},function(e,t){function n(e){var t=[];for(var n in e)t.push(n);return t}t=e.exports="function"==typeof Object.keys?Object.keys:n,t.shim=n},function(e,t){"use strict";function n(e,t,n){function o(){return i=!0,s?void(f=[].concat(r.call(arguments))):void n.apply(this,arguments)}function u(){if(!i&&(c=!0,!s)){for(s=!0;!i&&e>a&&c;)c=!1,t.call(this,a++,u,o);return s=!1,i?void n.apply(this,f):void(a>=e&&c&&(i=!0,n()))}}var a=0,i=!1,s=!1,c=!1,f=void 0;u()}t.__esModule=!0;var r=Array.prototype.slice;t.loopAsync=n},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(){function e(e){e=e||window.history.state||{};var t=l.getWindowPath(),n=e,r=n.key,o=void 0;r?o=d.readState(r):(o=null,r=_.createKey(),m&&window.history.replaceState(u({},e,{key:r}),null));var a=c.parsePath(t);return _.createLocation(u({},a,{state:o}),void 0,r)}function t(t){function n(t){void 0!==t.state&&r(e(t.state))}var r=t.transitionTo;return l.addEventListener(window,"popstate",n),function(){l.removeEventListener(window,"popstate",n)}}function n(e){var t=e.basename,n=e.pathname,r=e.search,o=e.hash,u=e.state,a=e.action,i=e.key;if(a!==s.POP){d.saveState(i,u);var c=(t||"")+n+r+o,f={key:i};if(a===s.PUSH){if(g)return window.location.href=c,!1;window.history.pushState(f,null,c)}else{if(g)return window.location.replace(c),!1;window.history.replaceState(f,null,c)}}}function r(e){1===++R&&(O=t(_));var n=_.listenBefore(e);return function(){n(),0===--R&&O()}}function o(e){1===++R&&(O=t(_));var n=_.listen(e);return function(){n(),0===--R&&O()}}function a(e){1===++R&&(O=t(_)),_.registerTransitionHook(e)}function p(e){_.unregisterTransitionHook(e),0===--R&&O()}var v=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];f.canUseDOM?void 0:i["default"](!1);var y=v.forceRefresh,m=l.supportsHistory(),g=!m||y,_=h["default"](u({},v,{getCurrentLocation:e,finishTransition:n,saveState:d.saveState})),R=0,O=void 0;return u({},_,{listenBefore:r,listen:o,registerTransitionHook:a,unregisterTransitionHook:p})}t.__esModule=!0;var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=n(3),i=r(a),s=n(9),c=n(7),f=n(12),l=n(17),d=n(26),p=n(27),h=r(p);t["default"]=o,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(){var e=arguments.length<=0||void 0===arguments[0]?"/":arguments[0],t=arguments.length<=1||void 0===arguments[1]?i.POP:arguments[1],n=arguments.length<=2||void 0===arguments[2]?null:arguments[2],r=arguments.length<=3||void 0===arguments[3]?null:arguments[3];"string"==typeof e&&(e=s.parsePath(e)),"object"==typeof t&&(e=u({},e,{state:t}),t=n||i.POP,n=r);var o=e.pathname||"/",a=e.search||"",c=e.hash||"",f=e.state||null;return{pathname:o,search:a,hash:c,state:f,action:t,key:n}}t.__esModule=!0;var u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=n(4),i=(r(a),n(9)),s=n(7);t["default"]=o,e.exports=t["default"]},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){return e.filter(function(e){return e.state}).reduce(function(e,t){return e[t.key]=t.state,e},{})}function u(){function e(e,t){m[e]=t}function t(e){return m[e]}function n(){var e=v[y],n=e.basename,r=e.pathname,o=e.search,u=(n||"")+r+(o||""),i=void 0,s=void 0;e.key?(i=e.key,s=t(i)):(i=d.createKey(),s=null,e.key=i);var c=f.parsePath(u);return d.createLocation(a({},c,{state:s}),void 0,i)}function r(e){var t=y+e;return t>=0&&t<v.length}function u(e){if(e){if(!r(e))return;y+=e;var t=n();d.transitionTo(a({},t,{action:l.POP}))}}function i(t){switch(t.action){case l.PUSH:y+=1,y<v.length&&v.splice(y),v.push(t),e(t.key,t.state);break;case l.REPLACE:v[y]=t,e(t.key,t.state)}}var s=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];Array.isArray(s)?s={entries:s}:"string"==typeof s&&(s={entries:[s]});var d=p["default"](a({},s,{getCurrentLocation:n,finishTransition:i,saveState:e,go:u})),h=s,v=h.entries,y=h.current;"string"==typeof v?v=[v]:Array.isArray(v)||(v=["/"]),v=v.map(function(e){var t=d.createKey();return"string"==typeof e?{pathname:e,key:t}:"object"==typeof e&&e?a({},e,{key:t}):void c["default"](!1)}),null==y?y=v.length-1:y>=0&&y<v.length?void 0:c["default"](!1);var m=o(v);return d}t.__esModule=!0;var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=n(4),s=(r(i),n(3)),c=r(s),f=n(7),l=n(9),d=n(29),p=r(d);t["default"]=u,e.exports=t["default"]},function(e,t){"use strict";var n={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,mixins:!0,propTypes:!0,type:!0},r={name:!0,length:!0,prototype:!0,caller:!0,arguments:!0,arity:!0};e.exports=function(e,t){for(var o=Object.getOwnPropertyNames(t),u=0;u<o.length;++u)if(!n[o[u]]&&!r[o[u]])try{e[o[u]]=t[o[u]]}catch(a){}return e}},function(e,t,n){"use strict";var r=n(61);t.extract=function(e){return e.split("?")[1]||""},t.parse=function(e){return"string"!=typeof e?{}:(e=e.trim().replace(/^(\?|#|&)/,""),e?e.split("&").reduce(function(e,t){var n=t.replace(/\+/g," ").split("="),r=n.shift(),o=n.length>0?n.join("="):void 0;return r=decodeURIComponent(r),o=void 0===o?null:decodeURIComponent(o),e.hasOwnProperty(r)?Array.isArray(e[r])?e[r].push(o):e[r]=[e[r],o]:e[r]=o,e},{}):{})},t.stringify=function(e){return e?Object.keys(e).sort().map(function(t){var n=e[t];return void 0===n?"":null===n?t:Array.isArray(n)?n.slice().sort().map(function(e){return r(t)+"="+r(e)}).join("&"):r(t)+"="+r(n)}).filter(function(e){return e.length>0}).join("&"):""}},function(e,t){"use strict";e.exports=function(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}}])});
//! moment.js
//! version : 2.10.6
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.moment = factory()
}(this, function () { 'use strict';

    var hookCallback;

    function utils_hooks__hooks () {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback (callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return Object.prototype.toString.call(input) === '[object Array]';
    }

    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }

    function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function create_utc__createUTC (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty           : false,
            unusedTokens    : [],
            unusedInput     : [],
            overflow        : -2,
            charsLeftOver   : 0,
            nullInput       : false,
            invalidMonth    : null,
            invalidFormat   : false,
            userInvalidated : false,
            iso             : false
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    function valid__isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            m._isValid = !isNaN(m._d.getTime()) &&
                flags.overflow < 0 &&
                !flags.empty &&
                !flags.invalidMonth &&
                !flags.invalidWeekday &&
                !flags.nullInput &&
                !flags.invalidFormat &&
                !flags.userInvalidated;

            if (m._strict) {
                m._isValid = m._isValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }
        }
        return m._isValid;
    }

    function valid__createInvalid (flags) {
        var m = create_utc__createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        }
        else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    var momentProperties = utils_hooks__hooks.momentProperties = [];

    function copyConfig(to, from) {
        var i, prop, val;

        if (typeof from._isAMomentObject !== 'undefined') {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (typeof from._i !== 'undefined') {
            to._i = from._i;
        }
        if (typeof from._f !== 'undefined') {
            to._f = from._f;
        }
        if (typeof from._l !== 'undefined') {
            to._l = from._l;
        }
        if (typeof from._strict !== 'undefined') {
            to._strict = from._strict;
        }
        if (typeof from._tzm !== 'undefined') {
            to._tzm = from._tzm;
        }
        if (typeof from._isUTC !== 'undefined') {
            to._isUTC = from._isUTC;
        }
        if (typeof from._offset !== 'undefined') {
            to._offset = from._offset;
        }
        if (typeof from._pf !== 'undefined') {
            to._pf = getParsingFlags(from);
        }
        if (typeof from._locale !== 'undefined') {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i in momentProperties) {
                prop = momentProperties[i];
                val = from[prop];
                if (typeof val !== 'undefined') {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    var updateInProgress = false;

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            utils_hooks__hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment (obj) {
        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
    }

    function absFloor (number) {
        if (number < 0) {
            return Math.ceil(number);
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function Locale() {
    }

    var locales = {};
    var globalLocale;

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return null;
    }

    function loadLocale(name) {
        var oldLocale = null;
        // TODO: Find a better way to register and load all the locales in Node
        if (!locales[name] && typeof module !== 'undefined' &&
                module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                require('./locale/' + name);
                // because defineLocale currently also sets the global locale, we
                // want to undo that for lazy loaded locales
                locale_locales__getSetGlobalLocale(oldLocale);
            } catch (e) { }
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function locale_locales__getSetGlobalLocale (key, values) {
        var data;
        if (key) {
            if (typeof values === 'undefined') {
                data = locale_locales__getLocale(key);
            }
            else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale (name, values) {
        if (values !== null) {
            values.abbr = name;
            locales[name] = locales[name] || new Locale();
            locales[name].set(values);

            // backwards compat for now: also set the locale
            locale_locales__getSetGlobalLocale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    // returns locale data
    function locale_locales__getLocale (key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    var aliases = {};

    function addUnitAlias (unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    function makeGetSet (unit, keepTime) {
        return function (value) {
            if (value != null) {
                get_set__set(this, unit, value);
                utils_hooks__hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get_set__get(this, unit);
            }
        };
    }

    function get_set__get (mom, unit) {
        return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();
    }

    function get_set__set (mom, unit, value) {
        return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
    }

    // MOMENTS

    function getSet (units, value) {
        var unit;
        if (typeof units === 'object') {
            for (unit in units) {
                this.set(unit, units[unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (typeof this[units] === 'function') {
                return this[units](value);
            }
        }
        return this;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

    var formatFunctions = {};

    var formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken (token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '';
            for (i = 0; i < length; i++) {
                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var match1         = /\d/;            //       0 - 9
    var match2         = /\d\d/;          //      00 - 99
    var match3         = /\d{3}/;         //     000 - 999
    var match4         = /\d{4}/;         //    0000 - 9999
    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
    var match1to2      = /\d\d?/;         //       0 - 99
    var match1to3      = /\d{1,3}/;       //       0 - 999
    var match1to4      = /\d{1,4}/;       //       0 - 9999
    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

    var matchUnsigned  = /\d+/;           //       0 - inf
    var matchSigned    = /[+-]?\d+/;      //    -inf - inf

    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z

    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

    // any word (or two) characters or numbers including two/three word month in arabic.
    var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;

    var regexes = {};

    function isFunction (sth) {
        // https://github.com/moment/moment/issues/2325
        return typeof sth === 'function' &&
            Object.prototype.toString.call(sth) === '[object Function]';
    }


    function addRegexToken (token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict) {
            return (isStrict && strictRegex) ? strictRegex : regex;
        };
    }

    function getParseRegexForToken (token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }).replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken (token, callback) {
        var i, func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (typeof callback === 'number') {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken (token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;

    function daysInMonth(year, month) {
        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PARSING

    addRegexToken('M',    match1to2);
    addRegexToken('MM',   match1to2, match2);
    addRegexToken('MMM',  matchWord);
    addRegexToken('MMMM', matchWord);

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths (m) {
        return this._months[m.month()];
    }

    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort (m) {
        return this._monthsShort[m.month()];
    }

    function localeMonthsParse (monthName, format, strict) {
        var i, mom, regex;

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = create_utc__createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth (mom, value) {
        var dayOfMonth;

        // TODO: Move this out of here!
        if (typeof value === 'string') {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (typeof value !== 'number') {
                return mom;
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth (value) {
        if (value != null) {
            setMonth(this, value);
            utils_hooks__hooks.updateOffset(this, true);
            return this;
        } else {
            return get_set__get(this, 'Month');
        }
    }

    function getDaysInMonth () {
        return daysInMonth(this.year(), this.month());
    }

    function checkOverflow (m) {
        var overflow;
        var a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    function warn(msg) {
        if (utils_hooks__hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (firstTime) {
                warn(msg + '\n' + (new Error()).stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    utils_hooks__hooks.suppressDeprecationWarnings = false;

    var from_string__isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

    var isoDates = [
        ['YYYYYY-MM-DD', /[+-]\d{6}-\d{2}-\d{2}/],
        ['YYYY-MM-DD', /\d{4}-\d{2}-\d{2}/],
        ['GGGG-[W]WW-E', /\d{4}-W\d{2}-\d/],
        ['GGGG-[W]WW', /\d{4}-W\d{2}/],
        ['YYYY-DDD', /\d{4}-\d{3}/]
    ];

    // iso time formats and regexes
    var isoTimes = [
        ['HH:mm:ss.SSSS', /(T| )\d\d:\d\d:\d\d\.\d+/],
        ['HH:mm:ss', /(T| )\d\d:\d\d:\d\d/],
        ['HH:mm', /(T| )\d\d:\d\d/],
        ['HH', /(T| )\d\d/]
    ];

    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

    // date from iso format
    function configFromISO(config) {
        var i, l,
            string = config._i,
            match = from_string__isoRegex.exec(string);

        if (match) {
            getParsingFlags(config).iso = true;
            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(string)) {
                    config._f = isoDates[i][0];
                    break;
                }
            }
            for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(string)) {
                    // match[6] should be 'T' or space
                    config._f += (match[6] || ' ') + isoTimes[i][0];
                    break;
                }
            }
            if (string.match(matchOffset)) {
                config._f += 'Z';
            }
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);

        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
            utils_hooks__hooks.createFromInputFallback(config);
        }
    }

    utils_hooks__hooks.createFromInputFallback = deprecate(
        'moment construction falls back to js Date. This is ' +
        'discouraged and will be removed in upcoming major ' +
        'release. Please refer to ' +
        'https://github.com/moment/moment/issues/1407 for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    function createDate (y, m, d, h, M, s, ms) {
        //can't just apply() to create a date:
        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
        var date = new Date(y, m, d, h, M, s, ms);

        //the date constructor doesn't accept years < 1970
        if (y < 1970) {
            date.setFullYear(y);
        }
        return date;
    }

    function createUTCDate (y) {
        var date = new Date(Date.UTC.apply(null, arguments));
        if (y < 1970) {
            date.setUTCFullYear(y);
        }
        return date;
    }

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY',   4],       0, 'year');
    addFormatToken(0, ['YYYYY',  5],       0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PARSING

    addRegexToken('Y',      matchSigned);
    addRegexToken('YY',     match1to2, match2);
    addRegexToken('YYYY',   match1to4, match4);
    addRegexToken('YYYYY',  match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    // HOOKS

    utils_hooks__hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', false);

    function getIsLeapYear () {
        return isLeapYear(this.year());
    }

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PARSING

    addRegexToken('w',  match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W',  match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // firstDayOfWeek       0 = sun, 6 = sat
    //                      the day of the week that starts the week
    //                      (usually sunday or monday)
    // firstDayOfWeekOfYear 0 = sun, 6 = sat
    //                      the first week is the week that contains the first
    //                      of this day of the week
    //                      (eg. ISO weeks use thursday (4))
    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
        var end = firstDayOfWeekOfYear - firstDayOfWeek,
            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),
            adjustedMoment;


        if (daysToDayOfWeek > end) {
            daysToDayOfWeek -= 7;
        }

        if (daysToDayOfWeek < end - 7) {
            daysToDayOfWeek += 7;
        }

        adjustedMoment = local__createLocal(mom).add(daysToDayOfWeek, 'd');
        return {
            week: Math.ceil(adjustedMoment.dayOfYear() / 7),
            year: adjustedMoment.year()
        };
    }

    // LOCALES

    function localeWeek (mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    };

    function localeFirstDayOfWeek () {
        return this._week.dow;
    }

    function localeFirstDayOfYear () {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek (input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek (input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PARSING

    addRegexToken('DDD',  match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
        var week1Jan = 6 + firstDayOfWeek - firstDayOfWeekOfYear, janX = createUTCDate(year, 0, 1 + week1Jan), d = janX.getUTCDay(), dayOfYear;
        if (d < firstDayOfWeek) {
            d += 7;
        }

        weekday = weekday != null ? 1 * weekday : firstDayOfWeek;

        dayOfYear = 1 + week1Jan + 7 * (week - 1) - d + weekday;

        return {
            year: dayOfYear > 0 ? year : year - 1,
            dayOfYear: dayOfYear > 0 ?  dayOfYear : daysInYear(year - 1) + dayOfYear
        };
    }

    // MOMENTS

    function getSetDayOfYear (input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
    }

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        var now = new Date();
        if (config._useUTC) {
            return [now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()];
        }
        return [now.getFullYear(), now.getMonth(), now.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray (config) {
        var i, date, input = [], currentDate, yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse)) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);
            week = defaults(w.w, 1);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < dow) {
                    ++week;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from begining of week
                weekday = w.e + dow;
            } else {
                // default to begining of week
                weekday = dow;
            }
        }
        temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);

        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
    }

    utils_hooks__hooks.ISO_8601 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === utils_hooks__hooks.ISO_8601) {
            configFromISO(config);
            return;
        }

        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                }
                else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (getParsingFlags(config).bigHour === true &&
                config._a[HOUR] <= 12 &&
                config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

        configFromArray(config);
        checkOverflow(config);
    }


    function meridiemFixWrap (locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (!valid__isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i);
        config._a = [i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond];

        configFromArray(config);
    }

    function createFromConfig (config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig (config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || locale_locales__getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return valid__createInvalid({nullInput: true});
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        } else if (isDate(input)) {
            config._d = input;
        } else {
            configFromInput(config);
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (input === undefined) {
            config._d = new Date();
        } else if (isDate(input)) {
            config._d = new Date(+input);
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (typeof(input) === 'object') {
            configFromObject(config);
        } else if (typeof(input) === 'number') {
            // from milliseconds
            config._d = new Date(input);
        } else {
            utils_hooks__hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC (input, format, locale, strict, isUTC) {
        var c = {};

        if (typeof(locale) === 'boolean') {
            strict = locale;
            locale = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function local__createLocal (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
         'moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548',
         function () {
             var other = local__createLocal.apply(null, arguments);
             return other < this ? this : other;
         }
     );

    var prototypeMax = deprecate(
        'moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548',
        function () {
            var other = local__createLocal.apply(null, arguments);
            return other > this ? this : other;
        }
    );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return local__createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    function Duration (duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 36e5; // 1000 * 60 * 60
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            quarters * 3 +
            years * 12;

        this._data = {};

        this._locale = locale_locales__getLocale();

        this._bubble();
    }

    function isDuration (obj) {
        return obj instanceof Duration;
    }

    function offset (token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z',  matchOffset);
    addRegexToken('ZZ', matchOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(string) {
        var matches = ((string || '').match(matchOffset) || []);
        var chunk   = matches[matches.length - 1] || [];
        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);

        return parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? +input : +local__createLocal(input)) - (+res);
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(+res._d + diff);
            utils_hooks__hooks.updateOffset(res, false);
            return res;
        } else {
            return local__createLocal(input).local();
        }
    }

    function getDateOffset (m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    utils_hooks__hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset (input, keepLocalTime) {
        var offset = this._offset || 0,
            localAdjust;
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(input);
            }
            if (Math.abs(input) < 16) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    utils_hooks__hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone (input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC (keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal (keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset () {
        if (this._tzm) {
            this.utcOffset(this._tzm);
        } else if (typeof this._i === 'string') {
            this.utcOffset(offsetFromString(this._i));
        }
        return this;
    }

    function hasAlignedHourOffset (input) {
        input = input ? local__createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime () {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted () {
        if (typeof this._isDSTShifted !== 'undefined') {
            return this._isDSTShifted;
        }

        var c = {};

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);
            this._isDSTShifted = this.isValid() &&
                compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal () {
        return !this._isUTC;
    }

    function isUtcOffset () {
        return this._isUTC;
    }

    function isUtc () {
        return this._isUTC && this._offset === 0;
    }

    var aspNetRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/;

    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    var create__isoRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;

    function create__createDuration (input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms : input._milliseconds,
                d  : input._days,
                M  : input._months
            };
        } else if (typeof input === 'number') {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y  : 0,
                d  : toInt(match[DATE])        * sign,
                h  : toInt(match[HOUR])        * sign,
                m  : toInt(match[MINUTE])      * sign,
                s  : toInt(match[SECOND])      * sign,
                ms : toInt(match[MILLISECOND]) * sign
            };
        } else if (!!(match = create__isoRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y : parseIso(match[2], sign),
                M : parseIso(match[3], sign),
                d : parseIso(match[4], sign),
                h : parseIso(match[5], sign),
                m : parseIso(match[6], sign),
                s : parseIso(match[7], sign),
                w : parseIso(match[8], sign)
            };
        } else if (duration == null) {// checks for null or undefined
            duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    }

    create__createDuration.fn = Duration.prototype;

    function parseIso (inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {milliseconds: 0, months: 0};

        res.months = other.month() - base.month() +
            (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');
                tmp = val; val = period; period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = create__createDuration(val, period);
            add_subtract__addSubtract(this, dur, direction);
            return this;
        };
    }

    function add_subtract__addSubtract (mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = duration._days,
            months = duration._months;
        updateOffset = updateOffset == null ? true : updateOffset;

        if (milliseconds) {
            mom._d.setTime(+mom._d + milliseconds * isAdding);
        }
        if (days) {
            get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);
        }
        if (months) {
            setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);
        }
        if (updateOffset) {
            utils_hooks__hooks.updateOffset(mom, days || months);
        }
    }

    var add_subtract__add      = createAdder(1, 'add');
    var add_subtract__subtract = createAdder(-1, 'subtract');

    function moment_calendar__calendar (time, formats) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || local__createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            diff = this.diff(sod, 'days', true),
            format = diff < -6 ? 'sameElse' :
                diff < -1 ? 'lastWeek' :
                diff < 0 ? 'lastDay' :
                diff < 1 ? 'sameDay' :
                diff < 2 ? 'nextDay' :
                diff < 7 ? 'nextWeek' : 'sameElse';
        return this.format(formats && formats[format] || this.localeData().calendar(format, this, local__createLocal(now)));
    }

    function clone () {
        return new Moment(this);
    }

    function isAfter (input, units) {
        var inputMs;
        units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
        if (units === 'millisecond') {
            input = isMoment(input) ? input : local__createLocal(input);
            return +this > +input;
        } else {
            inputMs = isMoment(input) ? +input : +local__createLocal(input);
            return inputMs < +this.clone().startOf(units);
        }
    }

    function isBefore (input, units) {
        var inputMs;
        units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
        if (units === 'millisecond') {
            input = isMoment(input) ? input : local__createLocal(input);
            return +this < +input;
        } else {
            inputMs = isMoment(input) ? +input : +local__createLocal(input);
            return +this.clone().endOf(units) < inputMs;
        }
    }

    function isBetween (from, to, units) {
        return this.isAfter(from, units) && this.isBefore(to, units);
    }

    function isSame (input, units) {
        var inputMs;
        units = normalizeUnits(units || 'millisecond');
        if (units === 'millisecond') {
            input = isMoment(input) ? input : local__createLocal(input);
            return +this === +input;
        } else {
            inputMs = +local__createLocal(input);
            return +(this.clone().startOf(units)) <= inputMs && inputMs <= +(this.clone().endOf(units));
        }
    }

    function diff (input, units, asFloat) {
        var that = cloneWithOffset(input, this),
            zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4,
            delta, output;

        units = normalizeUnits(units);

        if (units === 'year' || units === 'month' || units === 'quarter') {
            output = monthDiff(this, that);
            if (units === 'quarter') {
                output = output / 3;
            } else if (units === 'year') {
                output = output / 12;
            }
        } else {
            delta = this - that;
            output = units === 'second' ? delta / 1e3 : // 1000
                units === 'minute' ? delta / 6e4 : // 1000 * 60
                units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
                units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
                units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
                delta;
        }
        return asFloat ? output : absFloor(output);
    }

    function monthDiff (a, b) {
        // difference in months
        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2, adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        return -(wholeMonthDiff + adjust);
    }

    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';

    function toString () {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function moment_format__toISOString () {
        var m = this.clone().utc();
        if (0 < m.year() && m.year() <= 9999) {
            if ('function' === typeof Date.prototype.toISOString) {
                // native implementation is ~50x faster, use it when we can
                return this.toDate().toISOString();
            } else {
                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            }
        } else {
            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
        }
    }

    function format (inputString) {
        var output = formatMoment(this, inputString || utils_hooks__hooks.defaultFormat);
        return this.localeData().postformat(output);
    }

    function from (time, withoutSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }
        return create__createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
    }

    function fromNow (withoutSuffix) {
        return this.from(local__createLocal(), withoutSuffix);
    }

    function to (time, withoutSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }
        return create__createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
    }

    function toNow (withoutSuffix) {
        return this.to(local__createLocal(), withoutSuffix);
    }

    function locale (key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = locale_locales__getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData () {
        return this._locale;
    }

    function startOf (units) {
        units = normalizeUnits(units);
        // the following switch intentionally omits break keywords
        // to utilize falling through the cases.
        switch (units) {
        case 'year':
            this.month(0);
            /* falls through */
        case 'quarter':
        case 'month':
            this.date(1);
            /* falls through */
        case 'week':
        case 'isoWeek':
        case 'day':
            this.hours(0);
            /* falls through */
        case 'hour':
            this.minutes(0);
            /* falls through */
        case 'minute':
            this.seconds(0);
            /* falls through */
        case 'second':
            this.milliseconds(0);
        }

        // weeks are a special case
        if (units === 'week') {
            this.weekday(0);
        }
        if (units === 'isoWeek') {
            this.isoWeekday(1);
        }

        // quarters are also special
        if (units === 'quarter') {
            this.month(Math.floor(this.month() / 3) * 3);
        }

        return this;
    }

    function endOf (units) {
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond') {
            return this;
        }
        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
    }

    function to_type__valueOf () {
        return +this._d - ((this._offset || 0) * 60000);
    }

    function unix () {
        return Math.floor(+this / 1000);
    }

    function toDate () {
        return this._offset ? new Date(+this) : this._d;
    }

    function toArray () {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }

    function toObject () {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }

    function moment_valid__isValid () {
        return valid__isValid(this);
    }

    function parsingFlags () {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt () {
        return getParsingFlags(this).overflow;
    }

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken (token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg',     'weekYear');
    addWeekYearFormatToken('ggggg',    'weekYear');
    addWeekYearFormatToken('GGGG',  'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PARSING

    addRegexToken('G',      matchSigned);
    addRegexToken('g',      matchSigned);
    addRegexToken('GG',     match1to2, match2);
    addRegexToken('gg',     match1to2, match2);
    addRegexToken('GGGG',   match1to4, match4);
    addRegexToken('gggg',   match1to4, match4);
    addRegexToken('GGGGG',  match1to6, match6);
    addRegexToken('ggggg',  match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);
    });

    // HELPERS

    function weeksInYear(year, dow, doy) {
        return weekOfYear(local__createLocal([year, 11, 31 + dow - doy]), dow, doy).week;
    }

    // MOMENTS

    function getSetWeekYear (input) {
        var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
        return input == null ? year : this.add((input - year), 'y');
    }

    function getSetISOWeekYear (input) {
        var year = weekOfYear(this, 1, 4).year;
        return input == null ? year : this.add((input - year), 'y');
    }

    function getISOWeeksInYear () {
        return weeksInYear(this.year(), 1, 4);
    }

    function getWeeksInYear () {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    addFormatToken('Q', 0, 0, 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter (input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PARSING

    addRegexToken('D',  match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0], 10);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PARSING

    addRegexToken('d',    match1to2);
    addRegexToken('e',    match1to2);
    addRegexToken('E',    match1to2);
    addRegexToken('dd',   matchWord);
    addRegexToken('ddd',  matchWord);
    addRegexToken('dddd', matchWord);

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config) {
        var weekday = config._locale.weekdaysParse(input);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    // LOCALES

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays (m) {
        return this._weekdays[m.day()];
    }

    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort (m) {
        return this._weekdaysShort[m.day()];
    }

    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin (m) {
        return this._weekdaysMin[m.day()];
    }

    function localeWeekdaysParse (weekdayName) {
        var i, mom, regex;

        this._weekdaysParse = this._weekdaysParse || [];

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            if (!this._weekdaysParse[i]) {
                mom = local__createLocal([2000, 1]).day(i);
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek (input) {
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek (input) {
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek (input) {
        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.
        return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, function () {
        return this.hours() % 12 || 12;
    });

    function meridiem (token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PARSING

    function matchMeridiem (isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a',  matchMeridiem);
    addRegexToken('A',  matchMeridiem);
    addRegexToken('H',  match1to2);
    addRegexToken('h',  match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });

    // LOCALES

    function localeIsPM (input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return ((input + '').toLowerCase().charAt(0) === 'p');
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }


    // MOMENTS

    // Setting the hour should keep the time, because the user explicitly
    // specified which hour he wants. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    var getSetHour = makeGetSet('Hours', true);

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PARSING

    addRegexToken('m',  match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PARSING

    addRegexToken('s',  match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });


    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PARSING

    addRegexToken('S',    match1to3, match1);
    addRegexToken('SS',   match1to3, match2);
    addRegexToken('SSS',  match1to3, match3);

    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }
    // MOMENTS

    var getSetMillisecond = makeGetSet('Milliseconds', false);

    addFormatToken('z',  0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr () {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName () {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var momentPrototype__proto = Moment.prototype;

    momentPrototype__proto.add          = add_subtract__add;
    momentPrototype__proto.calendar     = moment_calendar__calendar;
    momentPrototype__proto.clone        = clone;
    momentPrototype__proto.diff         = diff;
    momentPrototype__proto.endOf        = endOf;
    momentPrototype__proto.format       = format;
    momentPrototype__proto.from         = from;
    momentPrototype__proto.fromNow      = fromNow;
    momentPrototype__proto.to           = to;
    momentPrototype__proto.toNow        = toNow;
    momentPrototype__proto.get          = getSet;
    momentPrototype__proto.invalidAt    = invalidAt;
    momentPrototype__proto.isAfter      = isAfter;
    momentPrototype__proto.isBefore     = isBefore;
    momentPrototype__proto.isBetween    = isBetween;
    momentPrototype__proto.isSame       = isSame;
    momentPrototype__proto.isValid      = moment_valid__isValid;
    momentPrototype__proto.lang         = lang;
    momentPrototype__proto.locale       = locale;
    momentPrototype__proto.localeData   = localeData;
    momentPrototype__proto.max          = prototypeMax;
    momentPrototype__proto.min          = prototypeMin;
    momentPrototype__proto.parsingFlags = parsingFlags;
    momentPrototype__proto.set          = getSet;
    momentPrototype__proto.startOf      = startOf;
    momentPrototype__proto.subtract     = add_subtract__subtract;
    momentPrototype__proto.toArray      = toArray;
    momentPrototype__proto.toObject     = toObject;
    momentPrototype__proto.toDate       = toDate;
    momentPrototype__proto.toISOString  = moment_format__toISOString;
    momentPrototype__proto.toJSON       = moment_format__toISOString;
    momentPrototype__proto.toString     = toString;
    momentPrototype__proto.unix         = unix;
    momentPrototype__proto.valueOf      = to_type__valueOf;

    // Year
    momentPrototype__proto.year       = getSetYear;
    momentPrototype__proto.isLeapYear = getIsLeapYear;

    // Week Year
    momentPrototype__proto.weekYear    = getSetWeekYear;
    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;

    // Quarter
    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;

    // Month
    momentPrototype__proto.month       = getSetMonth;
    momentPrototype__proto.daysInMonth = getDaysInMonth;

    // Week
    momentPrototype__proto.week           = momentPrototype__proto.weeks        = getSetWeek;
    momentPrototype__proto.isoWeek        = momentPrototype__proto.isoWeeks     = getSetISOWeek;
    momentPrototype__proto.weeksInYear    = getWeeksInYear;
    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;

    // Day
    momentPrototype__proto.date       = getSetDayOfMonth;
    momentPrototype__proto.day        = momentPrototype__proto.days             = getSetDayOfWeek;
    momentPrototype__proto.weekday    = getSetLocaleDayOfWeek;
    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;
    momentPrototype__proto.dayOfYear  = getSetDayOfYear;

    // Hour
    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;

    // Minute
    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;

    // Second
    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;

    // Millisecond
    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;

    // Offset
    momentPrototype__proto.utcOffset            = getSetOffset;
    momentPrototype__proto.utc                  = setOffsetToUTC;
    momentPrototype__proto.local                = setOffsetToLocal;
    momentPrototype__proto.parseZone            = setOffsetToParsedOffset;
    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;
    momentPrototype__proto.isDST                = isDaylightSavingTime;
    momentPrototype__proto.isDSTShifted         = isDaylightSavingTimeShifted;
    momentPrototype__proto.isLocal              = isLocal;
    momentPrototype__proto.isUtcOffset          = isUtcOffset;
    momentPrototype__proto.isUtc                = isUtc;
    momentPrototype__proto.isUTC                = isUtc;

    // Timezone
    momentPrototype__proto.zoneAbbr = getZoneAbbr;
    momentPrototype__proto.zoneName = getZoneName;

    // Deprecations
    momentPrototype__proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    momentPrototype__proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    momentPrototype__proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779', getSetZone);

    var momentPrototype = momentPrototype__proto;

    function moment__createUnix (input) {
        return local__createLocal(input * 1000);
    }

    function moment__createInZone () {
        return local__createLocal.apply(null, arguments).parseZone();
    }

    var defaultCalendar = {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    };

    function locale_calendar__calendar (key, mom, now) {
        var output = this._calendar[key];
        return typeof output === 'function' ? output.call(mom, now) : output;
    }

    var defaultLongDateFormat = {
        LTS  : 'h:mm:ss A',
        LT   : 'h:mm A',
        L    : 'MM/DD/YYYY',
        LL   : 'MMMM D, YYYY',
        LLL  : 'MMMM D, YYYY h:mm A',
        LLLL : 'dddd, MMMM D, YYYY h:mm A'
    };

    function longDateFormat (key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
            return val.slice(1);
        });

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate () {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d';
    var defaultOrdinalParse = /\d{1,2}/;

    function ordinal (number) {
        return this._ordinal.replace('%d', number);
    }

    function preParsePostFormat (string) {
        return string;
    }

    var defaultRelativeTime = {
        future : 'in %s',
        past   : '%s ago',
        s  : 'a few seconds',
        m  : 'a minute',
        mm : '%d minutes',
        h  : 'an hour',
        hh : '%d hours',
        d  : 'a day',
        dd : '%d days',
        M  : 'a month',
        MM : '%d months',
        y  : 'a year',
        yy : '%d years'
    };

    function relative__relativeTime (number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return (typeof output === 'function') ?
            output(number, withoutSuffix, string, isFuture) :
            output.replace(/%d/i, number);
    }

    function pastFuture (diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
    }

    function locale_set__set (config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (typeof prop === 'function') {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _ordinalParseLenient.
        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
    }

    var prototype__proto = Locale.prototype;

    prototype__proto._calendar       = defaultCalendar;
    prototype__proto.calendar        = locale_calendar__calendar;
    prototype__proto._longDateFormat = defaultLongDateFormat;
    prototype__proto.longDateFormat  = longDateFormat;
    prototype__proto._invalidDate    = defaultInvalidDate;
    prototype__proto.invalidDate     = invalidDate;
    prototype__proto._ordinal        = defaultOrdinal;
    prototype__proto.ordinal         = ordinal;
    prototype__proto._ordinalParse   = defaultOrdinalParse;
    prototype__proto.preparse        = preParsePostFormat;
    prototype__proto.postformat      = preParsePostFormat;
    prototype__proto._relativeTime   = defaultRelativeTime;
    prototype__proto.relativeTime    = relative__relativeTime;
    prototype__proto.pastFuture      = pastFuture;
    prototype__proto.set             = locale_set__set;

    // Month
    prototype__proto.months       =        localeMonths;
    prototype__proto._months      = defaultLocaleMonths;
    prototype__proto.monthsShort  =        localeMonthsShort;
    prototype__proto._monthsShort = defaultLocaleMonthsShort;
    prototype__proto.monthsParse  =        localeMonthsParse;

    // Week
    prototype__proto.week = localeWeek;
    prototype__proto._week = defaultLocaleWeek;
    prototype__proto.firstDayOfYear = localeFirstDayOfYear;
    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;

    // Day of Week
    prototype__proto.weekdays       =        localeWeekdays;
    prototype__proto._weekdays      = defaultLocaleWeekdays;
    prototype__proto.weekdaysMin    =        localeWeekdaysMin;
    prototype__proto._weekdaysMin   = defaultLocaleWeekdaysMin;
    prototype__proto.weekdaysShort  =        localeWeekdaysShort;
    prototype__proto._weekdaysShort = defaultLocaleWeekdaysShort;
    prototype__proto.weekdaysParse  =        localeWeekdaysParse;

    // Hours
    prototype__proto.isPM = localeIsPM;
    prototype__proto._meridiemParse = defaultLocaleMeridiemParse;
    prototype__proto.meridiem = localeMeridiem;

    function lists__get (format, index, field, setter) {
        var locale = locale_locales__getLocale();
        var utc = create_utc__createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function list (format, index, field, count, setter) {
        if (typeof format === 'number') {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return lists__get(format, index, field, setter);
        }

        var i;
        var out = [];
        for (i = 0; i < count; i++) {
            out[i] = lists__get(format, i, field, setter);
        }
        return out;
    }

    function lists__listMonths (format, index) {
        return list(format, index, 'months', 12, 'month');
    }

    function lists__listMonthsShort (format, index) {
        return list(format, index, 'monthsShort', 12, 'month');
    }

    function lists__listWeekdays (format, index) {
        return list(format, index, 'weekdays', 7, 'day');
    }

    function lists__listWeekdaysShort (format, index) {
        return list(format, index, 'weekdaysShort', 7, 'day');
    }

    function lists__listWeekdaysMin (format, index) {
        return list(format, index, 'weekdaysMin', 7, 'day');
    }

    locale_locales__getSetGlobalLocale('en', {
        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    // Side effect imports
    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);
    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);

    var mathAbs = Math.abs;

    function duration_abs__abs () {
        var data           = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days         = mathAbs(this._days);
        this._months       = mathAbs(this._months);

        data.milliseconds  = mathAbs(data.milliseconds);
        data.seconds       = mathAbs(data.seconds);
        data.minutes       = mathAbs(data.minutes);
        data.hours         = mathAbs(data.hours);
        data.months        = mathAbs(data.months);
        data.years         = mathAbs(data.years);

        return this;
    }

    function duration_add_subtract__addSubtract (duration, input, value, direction) {
        var other = create__createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days         += direction * other._days;
        duration._months       += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function duration_add_subtract__add (input, value) {
        return duration_add_subtract__addSubtract(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function duration_add_subtract__subtract (input, value) {
        return duration_add_subtract__addSubtract(this, input, value, -1);
    }

    function absCeil (number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble () {
        var milliseconds = this._milliseconds;
        var days         = this._days;
        var months       = this._months;
        var data         = this._data;
        var seconds, minutes, hours, years, monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0))) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds           = absFloor(milliseconds / 1000);
        data.seconds      = seconds % 60;

        minutes           = absFloor(seconds / 60);
        data.minutes      = minutes % 60;

        hours             = absFloor(minutes / 60);
        data.hours        = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days   = days;
        data.months = months;
        data.years  = years;

        return this;
    }

    function daysToMonths (days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
    }

    function monthsToDays (months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
    }

    function as (units) {
        var days;
        var months;
        var milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'year') {
            days   = this._days   + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            return units === 'month' ? months : months / 12;
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week'   : return days / 7     + milliseconds / 6048e5;
                case 'day'    : return days         + milliseconds / 864e5;
                case 'hour'   : return days * 24    + milliseconds / 36e5;
                case 'minute' : return days * 1440  + milliseconds / 6e4;
                case 'second' : return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
                default: throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function duration_as__valueOf () {
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs (alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms');
    var asSeconds      = makeAs('s');
    var asMinutes      = makeAs('m');
    var asHours        = makeAs('h');
    var asDays         = makeAs('d');
    var asWeeks        = makeAs('w');
    var asMonths       = makeAs('M');
    var asYears        = makeAs('y');

    function duration_get__get (units) {
        units = normalizeUnits(units);
        return this[units + 's']();
    }

    function makeGetter(name) {
        return function () {
            return this._data[name];
        };
    }

    var milliseconds = makeGetter('milliseconds');
    var seconds      = makeGetter('seconds');
    var minutes      = makeGetter('minutes');
    var hours        = makeGetter('hours');
    var days         = makeGetter('days');
    var months       = makeGetter('months');
    var years        = makeGetter('years');

    function weeks () {
        return absFloor(this.days() / 7);
    }

    var round = Math.round;
    var thresholds = {
        s: 45,  // seconds to minute
        m: 45,  // minutes to hour
        h: 22,  // hours to day
        d: 26,  // days to month
        M: 11   // months to year
    };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function duration_humanize__relativeTime (posNegDuration, withoutSuffix, locale) {
        var duration = create__createDuration(posNegDuration).abs();
        var seconds  = round(duration.as('s'));
        var minutes  = round(duration.as('m'));
        var hours    = round(duration.as('h'));
        var days     = round(duration.as('d'));
        var months   = round(duration.as('M'));
        var years    = round(duration.as('y'));

        var a = seconds < thresholds.s && ['s', seconds]  ||
                minutes === 1          && ['m']           ||
                minutes < thresholds.m && ['mm', minutes] ||
                hours   === 1          && ['h']           ||
                hours   < thresholds.h && ['hh', hours]   ||
                days    === 1          && ['d']           ||
                days    < thresholds.d && ['dd', days]    ||
                months  === 1          && ['M']           ||
                months  < thresholds.M && ['MM', months]  ||
                years   === 1          && ['y']           || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set a threshold for relative time strings
    function duration_humanize__getSetRelativeTimeThreshold (threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        return true;
    }

    function humanize (withSuffix) {
        var locale = this.localeData();
        var output = duration_humanize__relativeTime(this, !withSuffix, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var iso_string__abs = Math.abs;

    function iso_string__toISOString() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        var seconds = iso_string__abs(this._milliseconds) / 1000;
        var days         = iso_string__abs(this._days);
        var months       = iso_string__abs(this._months);
        var minutes, hours, years;

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes           = absFloor(seconds / 60);
        hours             = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years  = absFloor(months / 12);
        months %= 12;


        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds;
        var total = this.asSeconds();

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        return (total < 0 ? '-' : '') +
            'P' +
            (Y ? Y + 'Y' : '') +
            (M ? M + 'M' : '') +
            (D ? D + 'D' : '') +
            ((h || m || s) ? 'T' : '') +
            (h ? h + 'H' : '') +
            (m ? m + 'M' : '') +
            (s ? s + 'S' : '');
    }

    var duration_prototype__proto = Duration.prototype;

    duration_prototype__proto.abs            = duration_abs__abs;
    duration_prototype__proto.add            = duration_add_subtract__add;
    duration_prototype__proto.subtract       = duration_add_subtract__subtract;
    duration_prototype__proto.as             = as;
    duration_prototype__proto.asMilliseconds = asMilliseconds;
    duration_prototype__proto.asSeconds      = asSeconds;
    duration_prototype__proto.asMinutes      = asMinutes;
    duration_prototype__proto.asHours        = asHours;
    duration_prototype__proto.asDays         = asDays;
    duration_prototype__proto.asWeeks        = asWeeks;
    duration_prototype__proto.asMonths       = asMonths;
    duration_prototype__proto.asYears        = asYears;
    duration_prototype__proto.valueOf        = duration_as__valueOf;
    duration_prototype__proto._bubble        = bubble;
    duration_prototype__proto.get            = duration_get__get;
    duration_prototype__proto.milliseconds   = milliseconds;
    duration_prototype__proto.seconds        = seconds;
    duration_prototype__proto.minutes        = minutes;
    duration_prototype__proto.hours          = hours;
    duration_prototype__proto.days           = days;
    duration_prototype__proto.weeks          = weeks;
    duration_prototype__proto.months         = months;
    duration_prototype__proto.years          = years;
    duration_prototype__proto.humanize       = humanize;
    duration_prototype__proto.toISOString    = iso_string__toISOString;
    duration_prototype__proto.toString       = iso_string__toISOString;
    duration_prototype__proto.toJSON         = iso_string__toISOString;
    duration_prototype__proto.locale         = locale;
    duration_prototype__proto.localeData     = localeData;

    // Deprecations
    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);
    duration_prototype__proto.lang = lang;

    // Side effect imports

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    // Side effect imports


    utils_hooks__hooks.version = '2.10.6';

    setHookCallback(local__createLocal);

    utils_hooks__hooks.fn                    = momentPrototype;
    utils_hooks__hooks.min                   = min;
    utils_hooks__hooks.max                   = max;
    utils_hooks__hooks.utc                   = create_utc__createUTC;
    utils_hooks__hooks.unix                  = moment__createUnix;
    utils_hooks__hooks.months                = lists__listMonths;
    utils_hooks__hooks.isDate                = isDate;
    utils_hooks__hooks.locale                = locale_locales__getSetGlobalLocale;
    utils_hooks__hooks.invalid               = valid__createInvalid;
    utils_hooks__hooks.duration              = create__createDuration;
    utils_hooks__hooks.isMoment              = isMoment;
    utils_hooks__hooks.weekdays              = lists__listWeekdays;
    utils_hooks__hooks.parseZone             = moment__createInZone;
    utils_hooks__hooks.localeData            = locale_locales__getLocale;
    utils_hooks__hooks.isDuration            = isDuration;
    utils_hooks__hooks.monthsShort           = lists__listMonthsShort;
    utils_hooks__hooks.weekdaysMin           = lists__listWeekdaysMin;
    utils_hooks__hooks.defineLocale          = defineLocale;
    utils_hooks__hooks.weekdaysShort         = lists__listWeekdaysShort;
    utils_hooks__hooks.normalizeUnits        = normalizeUnits;
    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;

    var _moment = utils_hooks__hooks;

    return _moment;

}));
/*!
Waypoints - 4.0.0
Copyright © 2011-2015 Caleb Troughton
Licensed under the MIT license.
https://github.com/imakewebthings/waypoints/blob/master/licenses.txt
*/

!function(){"use strict";function t(o){if(!o)throw new Error("No options passed to Waypoint constructor");if(!o.element)throw new Error("No element option passed to Waypoint constructor");if(!o.handler)throw new Error("No handler option passed to Waypoint constructor");this.key="waypoint-"+e,this.options=t.Adapter.extend({},t.defaults,o),this.element=this.options.element,this.adapter=new t.Adapter(this.element),this.callback=o.handler,this.axis=this.options.horizontal?"horizontal":"vertical",this.enabled=this.options.enabled,this.triggerPoint=null,this.group=t.Group.findOrCreate({name:this.options.group,axis:this.axis}),this.context=t.Context.findOrCreateByElement(this.options.context),t.offsetAliases[this.options.offset]&&(this.options.offset=t.offsetAliases[this.options.offset]),this.group.add(this),this.context.add(this),i[this.key]=this,e+=1}var e=0,i={};t.prototype.queueTrigger=function(t){this.group.queueTrigger(this,t)},t.prototype.trigger=function(t){this.enabled&&this.callback&&this.callback.apply(this,t)},t.prototype.destroy=function(){this.context.remove(this),this.group.remove(this),delete i[this.key]},t.prototype.disable=function(){return this.enabled=!1,this},t.prototype.enable=function(){return this.context.refresh(),this.enabled=!0,this},t.prototype.next=function(){return this.group.next(this)},t.prototype.previous=function(){return this.group.previous(this)},t.invokeAll=function(t){var e=[];for(var o in i)e.push(i[o]);for(var n=0,r=e.length;r>n;n++)e[n][t]()},t.destroyAll=function(){t.invokeAll("destroy")},t.disableAll=function(){t.invokeAll("disable")},t.enableAll=function(){t.invokeAll("enable")},t.refreshAll=function(){t.Context.refreshAll()},t.viewportHeight=function(){return window.innerHeight||document.documentElement.clientHeight},t.viewportWidth=function(){return document.documentElement.clientWidth},t.adapters=[],t.defaults={context:window,continuous:!0,enabled:!0,group:"default",horizontal:!1,offset:0},t.offsetAliases={"bottom-in-view":function(){return this.context.innerHeight()-this.adapter.outerHeight()},"right-in-view":function(){return this.context.innerWidth()-this.adapter.outerWidth()}},window.Waypoint=t}(),function(){"use strict";function t(t){window.setTimeout(t,1e3/60)}function e(t){this.element=t,this.Adapter=n.Adapter,this.adapter=new this.Adapter(t),this.key="waypoint-context-"+i,this.didScroll=!1,this.didResize=!1,this.oldScroll={x:this.adapter.scrollLeft(),y:this.adapter.scrollTop()},this.waypoints={vertical:{},horizontal:{}},t.waypointContextKey=this.key,o[t.waypointContextKey]=this,i+=1,this.createThrottledScrollHandler(),this.createThrottledResizeHandler()}var i=0,o={},n=window.Waypoint,r=window.onload;e.prototype.add=function(t){var e=t.options.horizontal?"horizontal":"vertical";this.waypoints[e][t.key]=t,this.refresh()},e.prototype.checkEmpty=function(){var t=this.Adapter.isEmptyObject(this.waypoints.horizontal),e=this.Adapter.isEmptyObject(this.waypoints.vertical);t&&e&&(this.adapter.off(".waypoints"),delete o[this.key])},e.prototype.createThrottledResizeHandler=function(){function t(){e.handleResize(),e.didResize=!1}var e=this;this.adapter.on("resize.waypoints",function(){e.didResize||(e.didResize=!0,n.requestAnimationFrame(t))})},e.prototype.createThrottledScrollHandler=function(){function t(){e.handleScroll(),e.didScroll=!1}var e=this;this.adapter.on("scroll.waypoints",function(){(!e.didScroll||n.isTouch)&&(e.didScroll=!0,n.requestAnimationFrame(t))})},e.prototype.handleResize=function(){n.Context.refreshAll()},e.prototype.handleScroll=function(){var t={},e={horizontal:{newScroll:this.adapter.scrollLeft(),oldScroll:this.oldScroll.x,forward:"right",backward:"left"},vertical:{newScroll:this.adapter.scrollTop(),oldScroll:this.oldScroll.y,forward:"down",backward:"up"}};for(var i in e){var o=e[i],n=o.newScroll>o.oldScroll,r=n?o.forward:o.backward;for(var s in this.waypoints[i]){var a=this.waypoints[i][s],l=o.oldScroll<a.triggerPoint,h=o.newScroll>=a.triggerPoint,p=l&&h,c=!l&&!h;(p||c)&&(a.queueTrigger(r),t[a.group.id]=a.group)}}for(var u in t)t[u].flushTriggers();this.oldScroll={x:e.horizontal.newScroll,y:e.vertical.newScroll}},e.prototype.innerHeight=function(){return this.element==this.element.window?n.viewportHeight():this.adapter.innerHeight()},e.prototype.remove=function(t){delete this.waypoints[t.axis][t.key],this.checkEmpty()},e.prototype.innerWidth=function(){return this.element==this.element.window?n.viewportWidth():this.adapter.innerWidth()},e.prototype.destroy=function(){var t=[];for(var e in this.waypoints)for(var i in this.waypoints[e])t.push(this.waypoints[e][i]);for(var o=0,n=t.length;n>o;o++)t[o].destroy()},e.prototype.refresh=function(){var t,e=this.element==this.element.window,i=e?void 0:this.adapter.offset(),o={};this.handleScroll(),t={horizontal:{contextOffset:e?0:i.left,contextScroll:e?0:this.oldScroll.x,contextDimension:this.innerWidth(),oldScroll:this.oldScroll.x,forward:"right",backward:"left",offsetProp:"left"},vertical:{contextOffset:e?0:i.top,contextScroll:e?0:this.oldScroll.y,contextDimension:this.innerHeight(),oldScroll:this.oldScroll.y,forward:"down",backward:"up",offsetProp:"top"}};for(var r in t){var s=t[r];for(var a in this.waypoints[r]){var l,h,p,c,u,d=this.waypoints[r][a],f=d.options.offset,w=d.triggerPoint,y=0,g=null==w;d.element!==d.element.window&&(y=d.adapter.offset()[s.offsetProp]),"function"==typeof f?f=f.apply(d):"string"==typeof f&&(f=parseFloat(f),d.options.offset.indexOf("%")>-1&&(f=Math.ceil(s.contextDimension*f/100))),l=s.contextScroll-s.contextOffset,d.triggerPoint=y+l-f,h=w<s.oldScroll,p=d.triggerPoint>=s.oldScroll,c=h&&p,u=!h&&!p,!g&&c?(d.queueTrigger(s.backward),o[d.group.id]=d.group):!g&&u?(d.queueTrigger(s.forward),o[d.group.id]=d.group):g&&s.oldScroll>=d.triggerPoint&&(d.queueTrigger(s.forward),o[d.group.id]=d.group)}}return n.requestAnimationFrame(function(){for(var t in o)o[t].flushTriggers()}),this},e.findOrCreateByElement=function(t){return e.findByElement(t)||new e(t)},e.refreshAll=function(){for(var t in o)o[t].refresh()},e.findByElement=function(t){return o[t.waypointContextKey]},window.onload=function(){r&&r(),e.refreshAll()},n.requestAnimationFrame=function(e){var i=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||t;i.call(window,e)},n.Context=e}(),function(){"use strict";function t(t,e){return t.triggerPoint-e.triggerPoint}function e(t,e){return e.triggerPoint-t.triggerPoint}function i(t){this.name=t.name,this.axis=t.axis,this.id=this.name+"-"+this.axis,this.waypoints=[],this.clearTriggerQueues(),o[this.axis][this.name]=this}var o={vertical:{},horizontal:{}},n=window.Waypoint;i.prototype.add=function(t){this.waypoints.push(t)},i.prototype.clearTriggerQueues=function(){this.triggerQueues={up:[],down:[],left:[],right:[]}},i.prototype.flushTriggers=function(){for(var i in this.triggerQueues){var o=this.triggerQueues[i],n="up"===i||"left"===i;o.sort(n?e:t);for(var r=0,s=o.length;s>r;r+=1){var a=o[r];(a.options.continuous||r===o.length-1)&&a.trigger([i])}}this.clearTriggerQueues()},i.prototype.next=function(e){this.waypoints.sort(t);var i=n.Adapter.inArray(e,this.waypoints),o=i===this.waypoints.length-1;return o?null:this.waypoints[i+1]},i.prototype.previous=function(e){this.waypoints.sort(t);var i=n.Adapter.inArray(e,this.waypoints);return i?this.waypoints[i-1]:null},i.prototype.queueTrigger=function(t,e){this.triggerQueues[e].push(t)},i.prototype.remove=function(t){var e=n.Adapter.inArray(t,this.waypoints);e>-1&&this.waypoints.splice(e,1)},i.prototype.first=function(){return this.waypoints[0]},i.prototype.last=function(){return this.waypoints[this.waypoints.length-1]},i.findOrCreate=function(t){return o[t.axis][t.name]||new i(t)},n.Group=i}(),function(){"use strict";function t(t){this.element=t,this.$element=e(t)}var e=window.Zepto,i=window.Waypoint;e.each(["off","on","scrollLeft","scrollTop"],function(e,i){t.prototype[i]=function(){var t=Array.prototype.slice.call(arguments);return this.$element[i].apply(this.$element,t)}}),t.prototype.offset=function(){return this.element!==this.element.window?this.$element.offset():void 0},e.each(["width","height"],function(i,o){function n(t,i){return function(t){var n=this.$element,r=n[o](),s={width:["left","right"],height:["top","bottom"]};return e.each(s[o],function(e,o){r+=parseInt(n.css("padding-"+o),10),i&&(r+=parseInt(n.css("border-"+o+"-width"),10)),t&&(r+=parseInt(n.css("margin-"+o),10))}),r}}var r=e.camelCase("inner-"+o),s=e.camelCase("outer-"+o);t.prototype[r]=n(!1),t.prototype[s]=n(!0)}),e.each(["extend","inArray"],function(i,o){t[o]=e[o]}),t.isEmptyObject=function(t){for(var e in t)return!1;return!0},i.adapters.push({name:"zepto",Adapter:t}),i.Adapter=t}(),function(){"use strict";function t(t){return function(){var i=[],o=arguments[0];return t.isFunction(arguments[0])&&(o=t.extend({},arguments[1]),o.handler=arguments[0]),this.each(function(){var n=t.extend({},o,{element:this});"string"==typeof n.context&&(n.context=t(this).closest(n.context)[0]),i.push(new e(n))}),i}}var e=window.Waypoint;window.jQuery&&(window.jQuery.fn.waypoint=t(window.jQuery)),window.Zepto&&(window.Zepto.fn.waypoint=t(window.Zepto))}();
/*! wysihtml - v0.5.1 (2015-10-28) */


var wysihtml5={version:"0.5.1",commands:{},dom:{},quirks:{},toolbar:{},lang:{},selection:{},views:{},INVISIBLE_SPACE:"\ufeff",INVISIBLE_SPACE_REG_EXP:/\uFEFF/g,EMPTY_FUNCTION:function(){},ELEMENT_NODE:1,TEXT_NODE:3,BACKSPACE_KEY:8,ENTER_KEY:13,ESCAPE_KEY:27,SPACE_KEY:32,TAB_KEY:9,DELETE_KEY:46};wysihtml5.polyfills=function(a,b){String.prototype.trim||!function(){var a=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;String.prototype.trim=function(){return this.replace(a,"")}}(),function(){var c="addEventListener",d="removeEventListener";b[c]||(a.Element.prototype[c]=a[c]=b[c]=function(b,c,d){return(d=this).attachEvent("on"+b,function(b){var b=b||a.event;b.target=b.target||b.srcElement,b.preventDefault=b.preventDefault||function(){b.returnValue=!1},b.stopPropagation=b.stopPropagation||function(){b.cancelBubble=!0},b.which=b.button?2===b.button?3:4===b.button?2:b.button:b.keyCode,c.call(d,b)})},a.Element.prototype[d]=a[d]=b[d]=function(a,b){return this.detachEvent("on"+a,b)})}(),Object.defineProperty&&Object.getOwnPropertyDescriptor&&Object.getOwnPropertyDescriptor(a.Element.prototype,"textContent")&&!Object.getOwnPropertyDescriptor(a.Element.prototype,"textContent").get&&!function(){var b=Object.getOwnPropertyDescriptor(a.Element.prototype,"innerText");Object.defineProperty(a.Element.prototype,"textContent",{get:function(){return b.get.call(this)},set:function(a){return b.set.call(this,a)}})}(),Array.isArray||(Array.isArray=function(a){return"[object Array]"===Object.prototype.toString.call(a)}),Array.prototype.indexOf||(Array.prototype.indexOf=function(a,b){for(var c=this.length,d=-1,e=b>>>0;~(c-e);d=this[--c]===a?c:d);return d}),Function.prototype.bind||(Function.prototype.bind=function(a){if("function"!=typeof this)throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");var b=Array.prototype.slice.call(arguments,1),c=this,d=function(){},e=function(){return c.apply(this instanceof d&&a?this:a,b.concat(Array.prototype.slice.call(arguments)))};return d.prototype=this.prototype,e.prototype=new d,e}),a.Element&&function(a){a.matches=a.matches||a.matchesSelector||a.mozMatchesSelector||a.msMatchesSelector||a.oMatchesSelector||a.webkitMatchesSelector||function(a){for(var b=this,c=(b.parentNode||b.document).querySelectorAll(a),d=-1;c[++d]&&c[d]!=b;);return!!c[d]}}(a.Element.prototype),"document"in a&&("classList"in b.createElement("_")?"DOMTokenList"in a&&!function(){"use strict";var c=b.createElement("_");if(c.classList.add("c1","c2"),!c.classList.contains("c2")){var d=function(b){var c=a.DOMTokenList.prototype[b];a.DOMTokenList.prototype[b]=function(a){var b,d=arguments.length;for(b=0;d>b;b++)a=arguments[b],c.call(this,a)}};d("add"),d("remove")}if(c.classList.toggle("c3",!1),c.classList.contains("c3")){var e=a.DOMTokenList.prototype.toggle;a.DOMTokenList.prototype.toggle=function(a,b){return 1 in arguments&&!this.contains(a)==!b?b:e.call(this,a)}}c=null}():!function(a){"use strict";if("Element"in a){var b="classList",c="prototype",d=a.Element[c],e=Object,f=String[c].trim||function(){return this.replace(/^\s+|\s+$/g,"")},g=Array[c].indexOf||function(a){for(var b=0,c=this.length;c>b;b++)if(b in this&&this[b]===a)return b;return-1},h=function(a,b){this.name=a,this.code=DOMException[a],this.message=b},i=function(a,b){if(""===b)throw new h("SYNTAX_ERR","An invalid or illegal string was specified");if(/\s/.test(b))throw new h("INVALID_CHARACTER_ERR","String contains an invalid character");return g.call(a,b)},j=function(a){for(var b=f.call(a.getAttribute("class")||""),c=b?b.split(/\s+/):[],d=0,e=c.length;e>d;d++)this.push(c[d]);this._updateClassName=function(){a.setAttribute("class",this.toString())}},k=j[c]=[],l=function(){return new j(this)};if(h[c]=Error[c],k.item=function(a){return this[a]||null},k.contains=function(a){return a+="",-1!==i(this,a)},k.add=function(){var a,b=arguments,c=0,d=b.length,e=!1;do a=b[c]+"",-1===i(this,a)&&(this.push(a),e=!0);while(++c<d);e&&this._updateClassName()},k.remove=function(){var a,b,c=arguments,d=0,e=c.length,f=!1;do for(a=c[d]+"",b=i(this,a);-1!==b;)this.splice(b,1),f=!0,b=i(this,a);while(++d<e);f&&this._updateClassName()},k.toggle=function(a,b){a+="";var c=this.contains(a),d=c?b!==!0&&"remove":b!==!1&&"add";return d&&this[d](a),b===!0||b===!1?b:!c},k.toString=function(){return this.join(" ")},e.defineProperty){var m={get:l,enumerable:!0,configurable:!0};try{e.defineProperty(d,b,m)}catch(n){-2146823252===n.number&&(m.enumerable=!1,e.defineProperty(d,b,m))}}else e[c].__defineGetter__&&d.__defineGetter__(b,l)}}(a));var c=function(){if("createRange"in document&&"getSelection"in window){var a,b,c=document.createElement("div"),d=document.createTextNode("a"),e=document.createTextNode("a"),f=document.createTextNode("a"),g=document.createRange();return c.setAttribute("contenteditable","true"),c.appendChild(d),c.appendChild(e),c.appendChild(f),document.body.appendChild(c),g.setStart(e,1),g.setEnd(e,1),a=window.getSelection(),a.removeAllRanges(),a.addRange(g),c.normalize(),a=window.getSelection(),b=1!==c.childNodes.length||a.anchorNode!==c.firstChild||2!==a.anchorOffset,c.parentNode.removeChild(c),a.removeAllRanges(),b}},d=function(a){var b=[];for(a=a.firstChild;a;a=a.nextSibling)3==a.nodeType?b.push(a):b=b.concat(d(a));return b},e=function(){var a=(Node.prototype.normalize,function(){var a=d(this),b=this.ownerDocument.defaultView.getSelection(),c=b.anchorNode,e=b.anchorOffset,f=c&&1===c.nodeType&&c.childNodes.length>0?c.childNodes[e]:void 0,g=b.focusNode,h=b.focusOffset,i=g&&1===g.nodeType&&h>0?g.childNodes[h-1]:void 0,j=this.ownerDocument.createRange(),k=a.shift(),l=k?a.shift():null;for(i&&3===i.nodeType&&(g=i,h=i.nodeValue.length,i=void 0),f&&3===f.nodeType&&(c=f,e=0,f=void 0),(c===g&&e>h||c!==g&&c.compareDocumentPosition(g)&Node.DOCUMENT_POSITION_PRECEDING&&!(c.compareDocumentPosition(g)&Node.DOCUMENT_POSITION_CONTAINS))&&(g=[c,c=g][0],h=[e,e=h][0]);k&&l;)l.previousSibling&&l.previousSibling===k?(c===l&&(c=k,e=k.nodeValue.length+e),g===l&&(g=k,h=k.nodeValue.length+h),k.nodeValue=k.nodeValue+l.nodeValue,l.parentNode.removeChild(l),l=a.shift()):(k=l,l=a.shift());i&&(h=Array.prototype.indexOf.call(i.parentNode.childNodes,i)+1),f&&(e=Array.prototype.indexOf.call(f.parentNode.childNodes,f)),c&&c.parentNode&&g&&g.parentNode&&(j.setStart(c,e),j.setEnd(g,h),b.removeAllRanges(),b.addRange(j))});Node.prototype.normalize=a},f=function(){window.removeEventListener("load",f),"Node"in window&&"normalize"in Node.prototype&&c()&&e()};"complete"!==b.readyState?window.addEventListener("load",f):f()},wysihtml5.polyfills(window,document),function(a,b){"function"==typeof define&&define.amd?define(a):"undefined"!=typeof module&&"object"==typeof exports?module.exports=a():b.rangy=a()}(function(){function a(a,b){var c=typeof a[b];return c==u||!(c!=t||!a[b])||"unknown"==c}function b(a,b){return!(typeof a[b]!=t||!a[b])}function c(a,b){return typeof a[b]!=v}function d(a){return function(b,c){for(var d=c.length;d--;)if(!a(b,c[d]))return!1;return!0}}function e(a){return a&&A(a,z)&&C(a,y)}function f(a){return b(a,"body")?a.body:a.getElementsByTagName("body")[0]}function g(b){typeof console!=v&&a(console,"log")&&console.log(b)}function h(a,b){F&&b?alert(a):g(a)}function i(a){H.initialized=!0,H.supported=!1,h("Rangy is not supported in this environment. Reason: "+a,H.config.alertOnFail)}function j(a){h("Rangy warning: "+a,H.config.alertOnWarn)}function k(a){return a.message||a.description||String(a)}function l(){if(F&&!H.initialized){var b,c=!1,d=!1;a(document,"createRange")&&(b=document.createRange(),A(b,x)&&C(b,w)&&(c=!0));var h=f(document);if(!h||"body"!=h.nodeName.toLowerCase())return void i("No body element found");if(h&&a(h,"createTextRange")&&(b=h.createTextRange(),e(b)&&(d=!0)),!c&&!d)return void i("Neither Range nor TextRange are available");H.initialized=!0,H.features={implementsDomRange:c,implementsTextRange:d};var j,l;for(var m in E)(j=E[m])instanceof p&&j.init(j,H);for(var n=0,o=K.length;o>n;++n)try{K[n](H)}catch(q){l="Rangy init listener threw an exception. Continuing. Detail: "+k(q),g(l)}}}function m(a,b,c){c&&(a+=" in module "+c.name),H.warn("DEPRECATED: "+a+" is deprecated. Please use "+b+" instead.")}function n(a,b,c,d){a[b]=function(){return m(b,c,d),a[c].apply(a,G.toArray(arguments))}}function o(a){a=a||window,l();for(var b=0,c=L.length;c>b;++b)L[b](a)}function p(a,b,c){this.name=a,this.dependencies=b,this.initialized=!1,this.supported=!1,this.initializer=c}function q(a,b,c){var d=new p(a,b,function(b){if(!b.initialized){b.initialized=!0;try{c(H,b),b.supported=!0}catch(d){var e="Module '"+a+"' failed to load: "+k(d);g(e),d.stack&&g(d.stack)}}});return E[a]=d,d}function r(){}function s(){}var t="object",u="function",v="undefined",w=["startContainer","startOffset","endContainer","endOffset","collapsed","commonAncestorContainer"],x=["setStart","setStartBefore","setStartAfter","setEnd","setEndBefore","setEndAfter","collapse","selectNode","selectNodeContents","compareBoundaryPoints","deleteContents","extractContents","cloneContents","insertNode","surroundContents","cloneRange","toString","detach"],y=["boundingHeight","boundingLeft","boundingTop","boundingWidth","htmlText","text"],z=["collapse","compareEndPoints","duplicate","moveToElementText","parentElement","select","setEndPoint","getBoundingClientRect"],A=d(a),B=d(b),C=d(c),D=[].forEach?function(a,b){a.forEach(b)}:function(a,b){for(var c=0,d=a.length;d>c;++c)b(a[c],c)},E={},F=typeof window!=v&&typeof document!=v,G={isHostMethod:a,isHostObject:b,isHostProperty:c,areHostMethods:A,areHostObjects:B,areHostProperties:C,isTextRange:e,getBody:f,forEach:D},H={version:"1.3.0",initialized:!1,isBrowser:F,supported:!0,util:G,features:{},modules:E,config:{alertOnFail:!1,alertOnWarn:!1,preferTextRange:!1,autoInitialize:typeof rangyAutoInitialize==v?!0:rangyAutoInitialize}};H.fail=i,H.warn=j;var I;({}).hasOwnProperty?(G.extend=I=function(a,b,c){var d,e;for(var f in b)b.hasOwnProperty(f)&&(d=a[f],e=b[f],c&&null!==d&&"object"==typeof d&&null!==e&&"object"==typeof e&&I(d,e,!0),a[f]=e);return b.hasOwnProperty("toString")&&(a.toString=b.toString),a},G.createOptions=function(a,b){var c={};return I(c,b),a&&I(c,a),c}):i("hasOwnProperty not supported"),F||i("Rangy can only run in a browser"),function(){var a;if(F){var b=document.createElement("div");b.appendChild(document.createElement("span"));var c=[].slice;try{1==c.call(b.childNodes,0)[0].nodeType&&(a=function(a){return c.call(a,0)})}catch(d){}}a||(a=function(a){for(var b=[],c=0,d=a.length;d>c;++c)b[c]=a[c];return b}),G.toArray=a}();var J;F&&(a(document,"addEventListener")?J=function(a,b,c){a.addEventListener(b,c,!1)}:a(document,"attachEvent")?J=function(a,b,c){a.attachEvent("on"+b,c)}:i("Document does not have required addEventListener or attachEvent method"),G.addListener=J);var K=[];G.deprecationNotice=m,G.createAliasForDeprecatedMethod=n,H.init=l,H.addInitListener=function(a){H.initialized?a(H):K.push(a)};var L=[];H.addShimListener=function(a){L.push(a)},F&&(H.shim=H.createMissingNativeApi=o,n(H,"createMissingNativeApi","shim")),p.prototype={init:function(){for(var a,b,c=this.dependencies||[],d=0,e=c.length;e>d;++d){if(b=c[d],a=E[b],!(a&&a instanceof p))throw new Error("required module '"+b+"' not found");if(a.init(),!a.supported)throw new Error("required module '"+b+"' not supported")}this.initializer(this)},fail:function(a){throw this.initialized=!0,this.supported=!1,new Error(a)},warn:function(a){H.warn("Module "+this.name+": "+a)},deprecationNotice:function(a,b){H.warn("DEPRECATED: "+a+" in module "+this.name+" is deprecated. Please use "+b+" instead")},createError:function(a){return new Error("Error in Rangy "+this.name+" module: "+a)}},H.createModule=function(a){var b,c;2==arguments.length?(b=arguments[1],c=[]):(b=arguments[2],c=arguments[1]);var d=q(a,c,b);H.initialized&&H.supported&&d.init()},H.createCoreModule=function(a,b,c){q(a,b,c)},H.RangePrototype=r,H.rangePrototype=new r,H.selectionPrototype=new s,H.createCoreModule("DomUtil",[],function(a,b){function c(a){var b;return typeof a.namespaceURI==F||null===(b=a.namespaceURI)||"http://www.w3.org/1999/xhtml"==b}function d(a){var b=a.parentNode;return 1==b.nodeType?b:null}function e(a){for(var b=0;a=a.previousSibling;)++b;return b}function f(a){switch(a.nodeType){case 7:case 10:return 0;case 3:case 8:return a.length;default:return a.childNodes.length}}function g(a,b){var c,d=[];for(c=a;c;c=c.parentNode)d.push(c);for(c=b;c;c=c.parentNode)if(K(d,c))return c;return null}function h(a,b,c){for(var d=c?b:b.parentNode;d;){if(d===a)return!0;d=d.parentNode}return!1}function i(a,b){return h(a,b,!0)}function j(a,b,c){for(var d,e=c?a:a.parentNode;e;){if(d=e.parentNode,d===b)return e;e=d}return null}function k(a){var b=a.nodeType;return 3==b||4==b||8==b}function l(a){if(!a)return!1;var b=a.nodeType;return 3==b||8==b}function m(a,b){var c=b.nextSibling,d=b.parentNode;return c?d.insertBefore(a,c):d.appendChild(a),a}function n(a,b,c){var d=a.cloneNode(!1);if(d.deleteData(0,b),a.deleteData(b,a.length-b),m(d,a),c)for(var f,g=0;f=c[g++];)f.node==a&&f.offset>b?(f.node=d,f.offset-=b):f.node==a.parentNode&&f.offset>e(a)&&++f.offset;return d}function o(a){if(9==a.nodeType)return a;if(typeof a.ownerDocument!=F)return a.ownerDocument;if(typeof a.document!=F)return a.document;if(a.parentNode)return o(a.parentNode);throw b.createError("getDocument: no document found for node")}function p(a){var c=o(a);if(typeof c.defaultView!=F)return c.defaultView;if(typeof c.parentWindow!=F)return c.parentWindow;throw b.createError("Cannot get a window object for node")}function q(a){if(typeof a.contentDocument!=F)return a.contentDocument;if(typeof a.contentWindow!=F)return a.contentWindow.document;throw b.createError("getIframeDocument: No Document object found for iframe element")}function r(a){if(typeof a.contentWindow!=F)return a.contentWindow;if(typeof a.contentDocument!=F)return a.contentDocument.defaultView;throw b.createError("getIframeWindow: No Window object found for iframe element")}function s(a){return a&&G.isHostMethod(a,"setTimeout")&&G.isHostObject(a,"document")}function t(a,b,c){var d;if(a?G.isHostProperty(a,"nodeType")?d=1==a.nodeType&&"iframe"==a.tagName.toLowerCase()?q(a):o(a):s(a)&&(d=a.document):d=document,!d)throw b.createError(c+"(): Parameter must be a Window object or DOM node");return d}function u(a){for(var b;b=a.parentNode;)a=b;return a}function v(a,c,d,f){var h,i,k,l,m;if(a==d)return c===f?0:f>c?-1:1;if(h=j(d,a,!0))return c<=e(h)?-1:1;if(h=j(a,d,!0))return e(h)<f?-1:1;if(i=g(a,d),!i)throw new Error("comparePoints error: nodes have no common ancestor");if(k=a===i?i:j(a,i,!0),l=d===i?i:j(d,i,!0),k===l)throw b.createError("comparePoints got to case 4 and childA and childB are the same!");for(m=i.firstChild;m;){if(m===k)return-1;if(m===l)return 1;m=m.nextSibling}}function w(a){var b;try{return b=a.parentNode,!1}catch(c){return!0}}function x(a){if(!a)return"[No node]";if(L&&w(a))return"[Broken node]";if(k(a))return'"'+a.data+'"';if(1==a.nodeType){var b=a.id?' id="'+a.id+'"':"";return"<"+a.nodeName+b+">[index:"+e(a)+",length:"+a.childNodes.length+"]["+(a.innerHTML||"[innerHTML not supported]").slice(0,25)+"]"}return a.nodeName}function y(a){for(var b,c=o(a).createDocumentFragment();b=a.firstChild;)c.appendChild(b);return c}function z(a,b,c){var d=H(a),e=a.createElement("div");e.contentEditable=""+!!c,b&&(e.innerHTML=b);var f=d.firstChild;return f?d.insertBefore(e,f):d.appendChild(e),e}function A(a){return a.parentNode.removeChild(a)}function B(a){this.root=a,this._next=a}function C(a){return new B(a)}function D(a,b){this.node=a,this.offset=b}function E(a){this.code=this[a],this.codeName=a,this.message="DOMException: "+this.codeName}var F="undefined",G=a.util,H=G.getBody;G.areHostMethods(document,["createDocumentFragment","createElement","createTextNode"])||b.fail("document missing a Node creation method"),G.isHostMethod(document,"getElementsByTagName")||b.fail("document missing getElementsByTagName method");var I=document.createElement("div");G.areHostMethods(I,["insertBefore","appendChild","cloneNode"]||!G.areHostObjects(I,["previousSibling","nextSibling","childNodes","parentNode"]))||b.fail("Incomplete Element implementation"),G.isHostProperty(I,"innerHTML")||b.fail("Element is missing innerHTML property");var J=document.createTextNode("test");G.areHostMethods(J,["splitText","deleteData","insertData","appendData","cloneNode"]||!G.areHostObjects(I,["previousSibling","nextSibling","childNodes","parentNode"])||!G.areHostProperties(J,["data"]))||b.fail("Incomplete Text Node implementation");var K=function(a,b){for(var c=a.length;c--;)if(a[c]===b)return!0;return!1},L=!1;!function(){var b=document.createElement("b");b.innerHTML="1";var c=b.firstChild;b.innerHTML="<br />",L=w(c),a.features.crashyTextNodes=L}();var M;typeof window.getComputedStyle!=F?M=function(a,b){return p(a).getComputedStyle(a,null)[b]}:typeof document.documentElement.currentStyle!=F?M=function(a,b){return a.currentStyle?a.currentStyle[b]:""}:b.fail("No means of obtaining computed style properties found"),B.prototype={_current:null,hasNext:function(){return!!this._next},next:function(){var a,b,c=this._current=this._next;if(this._current)if(a=c.firstChild)this._next=a;else{for(b=null;c!==this.root&&!(b=c.nextSibling);)c=c.parentNode;this._next=b}return this._current},detach:function(){this._current=this._next=this.root=null}},D.prototype={equals:function(a){return!!a&&this.node===a.node&&this.offset==a.offset},inspect:function(){return"[DomPosition("+x(this.node)+":"+this.offset+")]"},toString:function(){return this.inspect()}},E.prototype={INDEX_SIZE_ERR:1,HIERARCHY_REQUEST_ERR:3,WRONG_DOCUMENT_ERR:4,NO_MODIFICATION_ALLOWED_ERR:7,NOT_FOUND_ERR:8,NOT_SUPPORTED_ERR:9,INVALID_STATE_ERR:11,INVALID_NODE_TYPE_ERR:24},E.prototype.toString=function(){return this.message},a.dom={arrayContains:K,isHtmlNamespace:c,parentElement:d,getNodeIndex:e,getNodeLength:f,getCommonAncestor:g,isAncestorOf:h,isOrIsAncestorOf:i,getClosestAncestorIn:j,isCharacterDataNode:k,isTextOrCommentNode:l,insertAfter:m,splitDataNode:n,getDocument:o,getWindow:p,getIframeWindow:r,getIframeDocument:q,getBody:H,isWindow:s,getContentDocument:t,getRootContainer:u,comparePoints:v,isBrokenNode:w,inspectNode:x,getComputedStyleProperty:M,createTestElement:z,removeNode:A,fragmentFromNodeChildren:y,createIterator:C,DomPosition:D},a.DOMException=E}),H.createCoreModule("DomRange",["DomUtil"],function(a,b){function c(a,b){return 3!=a.nodeType&&(P(a,b.startContainer)||P(a,b.endContainer))}function d(a){return a.document||Q(a.startContainer)}function e(a){return W(a.startContainer)}function f(a){return new L(a.parentNode,O(a))}function g(a){return new L(a.parentNode,O(a)+1)}function h(a,b,c){var d=11==a.nodeType?a.firstChild:a;return N(b)?c==b.length?J.insertAfter(a,b):b.parentNode.insertBefore(a,0==c?b:S(b,c)):c>=b.childNodes.length?b.appendChild(a):b.insertBefore(a,b.childNodes[c]),d}function i(a,b,c){if(z(a),z(b),d(b)!=d(a))throw new M("WRONG_DOCUMENT_ERR");var e=R(a.startContainer,a.startOffset,b.endContainer,b.endOffset),f=R(a.endContainer,a.endOffset,b.startContainer,b.startOffset);return c?0>=e&&f>=0:0>e&&f>0}function j(a){for(var b,c,e,f=d(a.range).createDocumentFragment();c=a.next();){if(b=a.isPartiallySelectedSubtree(),c=c.cloneNode(!b),b&&(e=a.getSubtreeIterator(),c.appendChild(j(e)),e.detach()),10==c.nodeType)throw new M("HIERARCHY_REQUEST_ERR");f.appendChild(c)}return f}function k(a,b,c){var d,e;c=c||{stop:!1};for(var f,g;f=a.next();)if(a.isPartiallySelectedSubtree()){if(b(f)===!1)return void(c.stop=!0);if(g=a.getSubtreeIterator(),k(g,b,c),g.detach(),c.stop)return}else for(d=J.createIterator(f);e=d.next();)if(b(e)===!1)return void(c.stop=!0)}function l(a){for(var b;a.next();)a.isPartiallySelectedSubtree()?(b=a.getSubtreeIterator(),l(b),b.detach()):a.remove()}function m(a){for(var b,c,e=d(a.range).createDocumentFragment();b=a.next();){if(a.isPartiallySelectedSubtree()?(b=b.cloneNode(!1),c=a.getSubtreeIterator(),b.appendChild(m(c)),c.detach()):a.remove(),10==b.nodeType)throw new M("HIERARCHY_REQUEST_ERR");e.appendChild(b)}return e}function n(a,b,c){var d,e=!(!b||!b.length),f=!!c;e&&(d=new RegExp("^("+b.join("|")+")$"));var g=[];return k(new p(a,!1),function(b){if((!e||d.test(b.nodeType))&&(!f||c(b))){var h=a.startContainer;if(b!=h||!N(h)||a.startOffset!=h.length){var i=a.endContainer;b==i&&N(i)&&0==a.endOffset||g.push(b)}}}),g}function o(a){var b="undefined"==typeof a.getName?"Range":a.getName();return"["+b+"("+J.inspectNode(a.startContainer)+":"+a.startOffset+", "+J.inspectNode(a.endContainer)+":"+a.endOffset+")]"}function p(a,b){if(this.range=a,this.clonePartiallySelectedTextNodes=b,!a.collapsed){this.sc=a.startContainer,this.so=a.startOffset,this.ec=a.endContainer,this.eo=a.endOffset;var c=a.commonAncestorContainer;this.sc===this.ec&&N(this.sc)?(this.isSingleCharacterDataNode=!0,this._first=this._last=this._next=this.sc):(this._first=this._next=this.sc!==c||N(this.sc)?T(this.sc,c,!0):this.sc.childNodes[this.so],this._last=this.ec!==c||N(this.ec)?T(this.ec,c,!0):this.ec.childNodes[this.eo-1])}}function q(a){return function(b,c){for(var d,e=c?b:b.parentNode;e;){if(d=e.nodeType,V(a,d))return e;e=e.parentNode}return null}}function r(a,b){if(ea(a,b))throw new M("INVALID_NODE_TYPE_ERR")}function s(a,b){if(!V(b,a.nodeType))throw new M("INVALID_NODE_TYPE_ERR")}function t(a,b){if(0>b||b>(N(a)?a.length:a.childNodes.length))throw new M("INDEX_SIZE_ERR")}function u(a,b){if(ca(a,!0)!==ca(b,!0))throw new M("WRONG_DOCUMENT_ERR")}function v(a){if(da(a,!0))throw new M("NO_MODIFICATION_ALLOWED_ERR")}function w(a,b){if(!a)throw new M(b)}function x(a,b){return b<=(N(a)?a.length:a.childNodes.length)}function y(a){return!!a.startContainer&&!!a.endContainer&&!(X&&(J.isBrokenNode(a.startContainer)||J.isBrokenNode(a.endContainer)))&&W(a.startContainer)==W(a.endContainer)&&x(a.startContainer,a.startOffset)&&x(a.endContainer,a.endOffset)}function z(a){if(!y(a))throw new Error("Range error: Range is not valid. This usually happens after DOM mutation. Range: ("+a.inspect()+")")}function A(a,b){z(a);var c=a.startContainer,d=a.startOffset,e=a.endContainer,f=a.endOffset,g=c===e;N(e)&&f>0&&f<e.length&&S(e,f,b),N(c)&&d>0&&d<c.length&&(c=S(c,d,b),g?(f-=d,e=c):e==c.parentNode&&f>=O(c)&&f++,d=0),a.setStartAndEnd(c,d,e,f)}function B(a){z(a);var b=a.commonAncestorContainer.parentNode.cloneNode(!1);return b.appendChild(a.cloneContents()),b.innerHTML}function C(a){a.START_TO_START=ka,a.START_TO_END=la,a.END_TO_END=ma,a.END_TO_START=na,a.NODE_BEFORE=oa,a.NODE_AFTER=pa,a.NODE_BEFORE_AND_AFTER=qa,a.NODE_INSIDE=ra}function D(a){C(a),C(a.prototype)}function E(a,b){return function(){z(this);var c,d,e=this.startContainer,f=this.startOffset,h=this.commonAncestorContainer,i=new p(this,!0);e!==h&&(c=T(e,h,!0),d=g(c),e=d.node,f=d.offset),k(i,v),i.reset();var j=a(i);return i.detach(),b(this,e,f,e,f),j}}function F(b,d){function e(a,b){return function(c){s(c,Z),s(W(c),$);var d=(a?f:g)(c);(b?h:i)(this,d.node,d.offset)}}function h(a,b,c){var e=a.endContainer,f=a.endOffset;(b!==a.startContainer||c!==a.startOffset)&&((W(b)!=W(e)||1==R(b,c,e,f))&&(e=b,f=c),d(a,b,c,e,f))}function i(a,b,c){var e=a.startContainer,f=a.startOffset;(b!==a.endContainer||c!==a.endOffset)&&((W(b)!=W(e)||-1==R(b,c,e,f))&&(e=b,f=c),d(a,e,f,b,c))}var j=function(){};j.prototype=a.rangePrototype,b.prototype=new j,K.extend(b.prototype,{setStart:function(a,b){r(a,!0),t(a,b),h(this,a,b)},setEnd:function(a,b){r(a,!0),t(a,b),i(this,a,b)},setStartAndEnd:function(){var a=arguments,b=a[0],c=a[1],e=b,f=c;switch(a.length){case 3:f=a[2];break;case 4:e=a[2],f=a[3]}d(this,b,c,e,f)},setBoundary:function(a,b,c){this["set"+(c?"Start":"End")](a,b)},setStartBefore:e(!0,!0),setStartAfter:e(!1,!0),setEndBefore:e(!0,!1),setEndAfter:e(!1,!1),collapse:function(a){z(this),a?d(this,this.startContainer,this.startOffset,this.startContainer,this.startOffset):d(this,this.endContainer,this.endOffset,this.endContainer,this.endOffset)},selectNodeContents:function(a){r(a,!0),d(this,a,0,a,U(a))},selectNode:function(a){r(a,!1),s(a,Z);var b=f(a),c=g(a);d(this,b.node,b.offset,c.node,c.offset)},extractContents:E(m,d),deleteContents:E(l,d),canSurroundContents:function(){z(this),v(this.startContainer),v(this.endContainer);var a=new p(this,!0),b=a._first&&c(a._first,this)||a._last&&c(a._last,this);return a.detach(),!b},splitBoundaries:function(){A(this)},splitBoundariesPreservingPositions:function(a){A(this,a)},normalizeBoundaries:function(){z(this);var a,b=this.startContainer,c=this.startOffset,e=this.endContainer,f=this.endOffset,g=function(a){var b=a.nextSibling;b&&b.nodeType==a.nodeType&&(e=a,f=a.length,a.appendData(b.data),Y(b))},h=function(a){var d=a.previousSibling;if(d&&d.nodeType==a.nodeType){b=a;var g=a.length;if(c=d.length,a.insertData(0,d.data),Y(d),b==e)f+=c,e=b;else if(e==a.parentNode){var h=O(a);f==h?(e=a,f=g):f>h&&f--}}},i=!0;if(N(e))f==e.length?g(e):0==f&&(a=e.previousSibling,a&&a.nodeType==e.nodeType&&(f=a.length,b==e&&(i=!1),a.appendData(e.data),Y(e),e=a));else{if(f>0){var j=e.childNodes[f-1];j&&N(j)&&g(j)}i=!this.collapsed}if(i){if(N(b))0==c?h(b):c==b.length&&(a=b.nextSibling,a&&a.nodeType==b.nodeType&&(e==a&&(e=b,f+=b.length),b.appendData(a.data),Y(a)));else if(c<b.childNodes.length){var k=b.childNodes[c];k&&N(k)&&h(k)}}else b=e,c=f;d(this,b,c,e,f)},collapseToPoint:function(a,b){r(a,!0),t(a,b),this.setStartAndEnd(a,b)}}),D(b)}function G(a){a.collapsed=a.startContainer===a.endContainer&&a.startOffset===a.endOffset,a.commonAncestorContainer=a.collapsed?a.startContainer:J.getCommonAncestor(a.startContainer,a.endContainer)}function H(a,b,c,d,e){a.startContainer=b,a.startOffset=c,a.endContainer=d,a.endOffset=e,a.document=J.getDocument(b),G(a)}function I(a){this.startContainer=a,this.startOffset=0,this.endContainer=a,this.endOffset=0,this.document=a,G(this)}var J=a.dom,K=a.util,L=J.DomPosition,M=a.DOMException,N=J.isCharacterDataNode,O=J.getNodeIndex,P=J.isOrIsAncestorOf,Q=J.getDocument,R=J.comparePoints,S=J.splitDataNode,T=J.getClosestAncestorIn,U=J.getNodeLength,V=J.arrayContains,W=J.getRootContainer,X=a.features.crashyTextNodes,Y=J.removeNode;p.prototype={_current:null,_next:null,_first:null,_last:null,isSingleCharacterDataNode:!1,reset:function(){this._current=null,this._next=this._first},hasNext:function(){return!!this._next},next:function(){var a=this._current=this._next;return a&&(this._next=a!==this._last?a.nextSibling:null,N(a)&&this.clonePartiallySelectedTextNodes&&(a===this.ec&&(a=a.cloneNode(!0)).deleteData(this.eo,a.length-this.eo),this._current===this.sc&&(a=a.cloneNode(!0)).deleteData(0,this.so))),a},remove:function(){var a,b,c=this._current;!N(c)||c!==this.sc&&c!==this.ec?c.parentNode&&Y(c):(a=c===this.sc?this.so:0,b=c===this.ec?this.eo:c.length,a!=b&&c.deleteData(a,b-a))},isPartiallySelectedSubtree:function(){var a=this._current;return c(a,this.range)},getSubtreeIterator:function(){var a;if(this.isSingleCharacterDataNode)a=this.range.cloneRange(),a.collapse(!1);else{a=new I(d(this.range));var b=this._current,c=b,e=0,f=b,g=U(b);P(b,this.sc)&&(c=this.sc,e=this.so),P(b,this.ec)&&(f=this.ec,g=this.eo),H(a,c,e,f,g)}return new p(a,this.clonePartiallySelectedTextNodes)},detach:function(){this.range=this._current=this._next=this._first=this._last=this.sc=this.so=this.ec=this.eo=null}};var Z=[1,3,4,5,7,8,10],$=[2,9,11],_=[5,6,10,12],aa=[1,3,4,5,7,8,10,11],ba=[1,3,4,5,7,8],ca=q([9,11]),da=q(_),ea=q([6,10,12]),fa=document.createElement("style"),ga=!1;try{fa.innerHTML="<b>x</b>",ga=3==fa.firstChild.nodeType}catch(ha){}a.features.htmlParsingConforms=ga;var ia=ga?function(a){var b=this.startContainer,c=Q(b);if(!b)throw new M("INVALID_STATE_ERR");var d=null;return 1==b.nodeType?d=b:N(b)&&(d=J.parentElement(b)),d=null===d||"HTML"==d.nodeName&&J.isHtmlNamespace(Q(d).documentElement)&&J.isHtmlNamespace(d)?c.createElement("body"):d.cloneNode(!1),d.innerHTML=a,J.fragmentFromNodeChildren(d)}:function(a){var b=d(this),c=b.createElement("body");return c.innerHTML=a,J.fragmentFromNodeChildren(c)},ja=["startContainer","startOffset","endContainer","endOffset","collapsed","commonAncestorContainer"],ka=0,la=1,ma=2,na=3,oa=0,pa=1,qa=2,ra=3;K.extend(a.rangePrototype,{compareBoundaryPoints:function(a,b){z(this),u(this.startContainer,b.startContainer);var c,d,e,f,g=a==na||a==ka?"start":"end",h=a==la||a==ka?"start":"end";return c=this[g+"Container"],d=this[g+"Offset"],e=b[h+"Container"],f=b[h+"Offset"],R(c,d,e,f)},insertNode:function(a){if(z(this),s(a,aa),v(this.startContainer),P(a,this.startContainer))throw new M("HIERARCHY_REQUEST_ERR");var b=h(a,this.startContainer,this.startOffset);this.setStartBefore(b)},cloneContents:function(){z(this);var a,b;if(this.collapsed)return d(this).createDocumentFragment();if(this.startContainer===this.endContainer&&N(this.startContainer))return a=this.startContainer.cloneNode(!0),a.data=a.data.slice(this.startOffset,this.endOffset),b=d(this).createDocumentFragment(),b.appendChild(a),b;var c=new p(this,!0);return a=j(c),c.detach(),a},canSurroundContents:function(){z(this),v(this.startContainer),v(this.endContainer);var a=new p(this,!0),b=a._first&&c(a._first,this)||a._last&&c(a._last,this);return a.detach(),!b},surroundContents:function(a){if(s(a,ba),!this.canSurroundContents())throw new M("INVALID_STATE_ERR");var b=this.extractContents();if(a.hasChildNodes())for(;a.lastChild;)a.removeChild(a.lastChild);h(a,this.startContainer,this.startOffset),a.appendChild(b),this.selectNode(a)},cloneRange:function(){z(this);for(var a,b=new I(d(this)),c=ja.length;c--;)a=ja[c],b[a]=this[a];return b},toString:function(){z(this);var a=this.startContainer;if(a===this.endContainer&&N(a))return 3==a.nodeType||4==a.nodeType?a.data.slice(this.startOffset,this.endOffset):"";var b=[],c=new p(this,!0);return k(c,function(a){(3==a.nodeType||4==a.nodeType)&&b.push(a.data)}),c.detach(),b.join("")},compareNode:function(a){z(this);var b=a.parentNode,c=O(a);if(!b)throw new M("NOT_FOUND_ERR");var d=this.comparePoint(b,c),e=this.comparePoint(b,c+1);return 0>d?e>0?qa:oa:e>0?pa:ra},comparePoint:function(a,b){return z(this),w(a,"HIERARCHY_REQUEST_ERR"),u(a,this.startContainer),R(a,b,this.startContainer,this.startOffset)<0?-1:R(a,b,this.endContainer,this.endOffset)>0?1:0},createContextualFragment:ia,toHtml:function(){return B(this)},intersectsNode:function(a,b){if(z(this),W(a)!=e(this))return!1;var c=a.parentNode,d=O(a);if(!c)return!0;var f=R(c,d,this.endContainer,this.endOffset),g=R(c,d+1,this.startContainer,this.startOffset);return b?0>=f&&g>=0:0>f&&g>0},isPointInRange:function(a,b){return z(this),w(a,"HIERARCHY_REQUEST_ERR"),u(a,this.startContainer),R(a,b,this.startContainer,this.startOffset)>=0&&R(a,b,this.endContainer,this.endOffset)<=0},intersectsRange:function(a){return i(this,a,!1)},intersectsOrTouchesRange:function(a){return i(this,a,!0)},intersection:function(a){if(this.intersectsRange(a)){var b=R(this.startContainer,this.startOffset,a.startContainer,a.startOffset),c=R(this.endContainer,this.endOffset,a.endContainer,a.endOffset),d=this.cloneRange();return-1==b&&d.setStart(a.startContainer,a.startOffset),1==c&&d.setEnd(a.endContainer,a.endOffset),d}return null},union:function(a){if(this.intersectsOrTouchesRange(a)){var b=this.cloneRange();return-1==R(a.startContainer,a.startOffset,this.startContainer,this.startOffset)&&b.setStart(a.startContainer,a.startOffset),1==R(a.endContainer,a.endOffset,this.endContainer,this.endOffset)&&b.setEnd(a.endContainer,a.endOffset),b}throw new M("Ranges do not intersect")},containsNode:function(a,b){return b?this.intersectsNode(a,!1):this.compareNode(a)==ra},containsNodeContents:function(a){return this.comparePoint(a,0)>=0&&this.comparePoint(a,U(a))<=0},containsRange:function(a){var b=this.intersection(a);return null!==b&&a.equals(b)},containsNodeText:function(a){var b=this.cloneRange();b.selectNode(a);var c=b.getNodes([3]);if(c.length>0){b.setStart(c[0],0);var d=c.pop();return b.setEnd(d,d.length),this.containsRange(b)}return this.containsNodeContents(a)},getNodes:function(a,b){return z(this),n(this,a,b);
},getDocument:function(){return d(this)},collapseBefore:function(a){this.setEndBefore(a),this.collapse(!1)},collapseAfter:function(a){this.setStartAfter(a),this.collapse(!0)},getBookmark:function(b){var c=d(this),e=a.createRange(c);b=b||J.getBody(c),e.selectNodeContents(b);var f=this.intersection(e),g=0,h=0;return f&&(e.setEnd(f.startContainer,f.startOffset),g=e.toString().length,h=g+f.toString().length),{start:g,end:h,containerNode:b}},moveToBookmark:function(a){var b=a.containerNode,c=0;this.setStart(b,0),this.collapse(!0);for(var d,e,f,g,h=[b],i=!1,j=!1;!j&&(d=h.pop());)if(3==d.nodeType)e=c+d.length,!i&&a.start>=c&&a.start<=e&&(this.setStart(d,a.start-c),i=!0),i&&a.end>=c&&a.end<=e&&(this.setEnd(d,a.end-c),j=!0),c=e;else for(g=d.childNodes,f=g.length;f--;)h.push(g[f])},getName:function(){return"DomRange"},equals:function(a){return I.rangesEqual(this,a)},isValid:function(){return y(this)},inspect:function(){return o(this)},detach:function(){}}),F(I,H),K.extend(I,{rangeProperties:ja,RangeIterator:p,copyComparisonConstants:D,createPrototypeRange:F,inspect:o,toHtml:B,getRangeDocument:d,rangesEqual:function(a,b){return a.startContainer===b.startContainer&&a.startOffset===b.startOffset&&a.endContainer===b.endContainer&&a.endOffset===b.endOffset}}),a.DomRange=I}),H.createCoreModule("WrappedRange",["DomRange"],function(a,b){var c,d,e=a.dom,f=a.util,g=e.DomPosition,h=a.DomRange,i=e.getBody,j=e.getContentDocument,k=e.isCharacterDataNode;if(a.features.implementsDomRange&&!function(){function d(a){for(var b,c=m.length;c--;)b=m[c],a[b]=a.nativeRange[b];a.collapsed=a.startContainer===a.endContainer&&a.startOffset===a.endOffset}function g(a,b,c,d,e){var f=a.startContainer!==b||a.startOffset!=c,g=a.endContainer!==d||a.endOffset!=e,h=!a.equals(a.nativeRange);(f||g||h)&&(a.setEnd(d,e),a.setStart(b,c))}var k,l,m=h.rangeProperties;c=function(a){if(!a)throw b.createError("WrappedRange: Range must be specified");this.nativeRange=a,d(this)},h.createPrototypeRange(c,g),k=c.prototype,k.selectNode=function(a){this.nativeRange.selectNode(a),d(this)},k.cloneContents=function(){return this.nativeRange.cloneContents()},k.surroundContents=function(a){this.nativeRange.surroundContents(a),d(this)},k.collapse=function(a){this.nativeRange.collapse(a),d(this)},k.cloneRange=function(){return new c(this.nativeRange.cloneRange())},k.refresh=function(){d(this)},k.toString=function(){return this.nativeRange.toString()};var n=document.createTextNode("test");i(document).appendChild(n);var o=document.createRange();o.setStart(n,0),o.setEnd(n,0);try{o.setStart(n,1),k.setStart=function(a,b){this.nativeRange.setStart(a,b),d(this)},k.setEnd=function(a,b){this.nativeRange.setEnd(a,b),d(this)},l=function(a){return function(b){this.nativeRange[a](b),d(this)}}}catch(p){k.setStart=function(a,b){try{this.nativeRange.setStart(a,b)}catch(c){this.nativeRange.setEnd(a,b),this.nativeRange.setStart(a,b)}d(this)},k.setEnd=function(a,b){try{this.nativeRange.setEnd(a,b)}catch(c){this.nativeRange.setStart(a,b),this.nativeRange.setEnd(a,b)}d(this)},l=function(a,b){return function(c){try{this.nativeRange[a](c)}catch(e){this.nativeRange[b](c),this.nativeRange[a](c)}d(this)}}}k.setStartBefore=l("setStartBefore","setEndBefore"),k.setStartAfter=l("setStartAfter","setEndAfter"),k.setEndBefore=l("setEndBefore","setStartBefore"),k.setEndAfter=l("setEndAfter","setStartAfter"),k.selectNodeContents=function(a){this.setStartAndEnd(a,0,e.getNodeLength(a))},o.selectNodeContents(n),o.setEnd(n,3);var q=document.createRange();q.selectNodeContents(n),q.setEnd(n,4),q.setStart(n,2),-1==o.compareBoundaryPoints(o.START_TO_END,q)&&1==o.compareBoundaryPoints(o.END_TO_START,q)?k.compareBoundaryPoints=function(a,b){return b=b.nativeRange||b,a==b.START_TO_END?a=b.END_TO_START:a==b.END_TO_START&&(a=b.START_TO_END),this.nativeRange.compareBoundaryPoints(a,b)}:k.compareBoundaryPoints=function(a,b){return this.nativeRange.compareBoundaryPoints(a,b.nativeRange||b)};var r=document.createElement("div");r.innerHTML="123";var s=r.firstChild,t=i(document);t.appendChild(r),o.setStart(s,1),o.setEnd(s,2),o.deleteContents(),"13"==s.data&&(k.deleteContents=function(){this.nativeRange.deleteContents(),d(this)},k.extractContents=function(){var a=this.nativeRange.extractContents();return d(this),a}),t.removeChild(r),t=null,f.isHostMethod(o,"createContextualFragment")&&(k.createContextualFragment=function(a){return this.nativeRange.createContextualFragment(a)}),i(document).removeChild(n),k.getName=function(){return"WrappedRange"},a.WrappedRange=c,a.createNativeRange=function(a){return a=j(a,b,"createNativeRange"),a.createRange()}}(),a.features.implementsTextRange){var l=function(a){var b=a.parentElement(),c=a.duplicate();c.collapse(!0);var d=c.parentElement();c=a.duplicate(),c.collapse(!1);var f=c.parentElement(),g=d==f?d:e.getCommonAncestor(d,f);return g==b?g:e.getCommonAncestor(b,g)},m=function(a){return 0==a.compareEndPoints("StartToEnd",a)},n=function(a,b,c,d,f){var h=a.duplicate();h.collapse(c);var i=h.parentElement();if(e.isOrIsAncestorOf(b,i)||(i=b),!i.canHaveHTML){var j=new g(i.parentNode,e.getNodeIndex(i));return{boundaryPosition:j,nodeInfo:{nodeIndex:j.offset,containerElement:j.node}}}var l=e.getDocument(i).createElement("span");l.parentNode&&e.removeNode(l);for(var m,n,o,p,q,r=c?"StartToStart":"StartToEnd",s=f&&f.containerElement==i?f.nodeIndex:0,t=i.childNodes.length,u=t,v=u;;){if(v==t?i.appendChild(l):i.insertBefore(l,i.childNodes[v]),h.moveToElementText(l),m=h.compareEndPoints(r,a),0==m||s==u)break;if(-1==m){if(u==s+1)break;s=v}else u=u==s+1?s:v;v=Math.floor((s+u)/2),i.removeChild(l)}if(q=l.nextSibling,-1==m&&q&&k(q)){h.setEndPoint(c?"EndToStart":"EndToEnd",a);var w;if(/[\r\n]/.test(q.data)){var x=h.duplicate(),y=x.text.replace(/\r\n/g,"\r").length;for(w=x.moveStart("character",y);-1==(m=x.compareEndPoints("StartToEnd",x));)w++,x.moveStart("character",1)}else w=h.text.length;p=new g(q,w)}else n=(d||!c)&&l.previousSibling,o=(d||c)&&l.nextSibling,p=o&&k(o)?new g(o,0):n&&k(n)?new g(n,n.data.length):new g(i,e.getNodeIndex(l));return e.removeNode(l),{boundaryPosition:p,nodeInfo:{nodeIndex:v,containerElement:i}}},o=function(a,b){var c,d,f,g,h=a.offset,j=e.getDocument(a.node),l=i(j).createTextRange(),m=k(a.node);return m?(c=a.node,d=c.parentNode):(g=a.node.childNodes,c=h<g.length?g[h]:null,d=a.node),f=j.createElement("span"),f.innerHTML="&#feff;",c?d.insertBefore(f,c):d.appendChild(f),l.moveToElementText(f),l.collapse(!b),d.removeChild(f),m&&l[b?"moveStart":"moveEnd"]("character",h),l};d=function(a){this.textRange=a,this.refresh()},d.prototype=new h(document),d.prototype.refresh=function(){var a,b,c,d=l(this.textRange);m(this.textRange)?b=a=n(this.textRange,d,!0,!0).boundaryPosition:(c=n(this.textRange,d,!0,!1),a=c.boundaryPosition,b=n(this.textRange,d,!1,!1,c.nodeInfo).boundaryPosition),this.setStart(a.node,a.offset),this.setEnd(b.node,b.offset)},d.prototype.getName=function(){return"WrappedTextRange"},h.copyComparisonConstants(d);var p=function(a){if(a.collapsed)return o(new g(a.startContainer,a.startOffset),!0);var b=o(new g(a.startContainer,a.startOffset),!0),c=o(new g(a.endContainer,a.endOffset),!1),d=i(h.getRangeDocument(a)).createTextRange();return d.setEndPoint("StartToStart",b),d.setEndPoint("EndToEnd",c),d};if(d.rangeToTextRange=p,d.prototype.toTextRange=function(){return p(this)},a.WrappedTextRange=d,!a.features.implementsDomRange||a.config.preferTextRange){var q=function(a){return a("return this;")()}(Function);"undefined"==typeof q.Range&&(q.Range=d),a.createNativeRange=function(a){return a=j(a,b,"createNativeRange"),i(a).createTextRange()},a.WrappedRange=d}}a.createRange=function(c){return c=j(c,b,"createRange"),new a.WrappedRange(a.createNativeRange(c))},a.createRangyRange=function(a){return a=j(a,b,"createRangyRange"),new h(a)},f.createAliasForDeprecatedMethod(a,"createIframeRange","createRange"),f.createAliasForDeprecatedMethod(a,"createIframeRangyRange","createRangyRange"),a.addShimListener(function(b){var c=b.document;"undefined"==typeof c.createRange&&(c.createRange=function(){return a.createRange(c)}),c=b=null})}),H.createCoreModule("WrappedSelection",["DomRange","WrappedRange"],function(a,b){function c(a){return"string"==typeof a?/^backward(s)?$/i.test(a):!!a}function d(a,c){if(a){if(C.isWindow(a))return a;if(a instanceof r)return a.win;var d=C.getContentDocument(a,b,c);return C.getWindow(d)}return window}function e(a){return d(a,"getWinSelection").getSelection()}function f(a){return d(a,"getDocSelection").document.selection}function g(a){var b=!1;return a.anchorNode&&(b=1==C.comparePoints(a.anchorNode,a.anchorOffset,a.focusNode,a.focusOffset)),b}function h(a,b,c){var d=c?"end":"start",e=c?"start":"end";a.anchorNode=b[d+"Container"],a.anchorOffset=b[d+"Offset"],a.focusNode=b[e+"Container"],a.focusOffset=b[e+"Offset"]}function i(a){var b=a.nativeSelection;a.anchorNode=b.anchorNode,a.anchorOffset=b.anchorOffset,a.focusNode=b.focusNode,a.focusOffset=b.focusOffset}function j(a){a.anchorNode=a.focusNode=null,a.anchorOffset=a.focusOffset=0,a.rangeCount=0,a.isCollapsed=!0,a._ranges.length=0}function k(b){var c;return b instanceof F?(c=a.createNativeRange(b.getDocument()),c.setEnd(b.endContainer,b.endOffset),c.setStart(b.startContainer,b.startOffset)):b instanceof G?c=b.nativeRange:J.implementsDomRange&&b instanceof C.getWindow(b.startContainer).Range&&(c=b),c}function l(a){if(!a.length||1!=a[0].nodeType)return!1;for(var b=1,c=a.length;c>b;++b)if(!C.isAncestorOf(a[0],a[b]))return!1;return!0}function m(a){var c=a.getNodes();if(!l(c))throw b.createError("getSingleElementFromRange: range "+a.inspect()+" did not consist of a single element");return c[0]}function n(a){return!!a&&"undefined"!=typeof a.text}function o(a,b){var c=new G(b);a._ranges=[c],h(a,c,!1),a.rangeCount=1,a.isCollapsed=c.collapsed}function p(b){if(b._ranges.length=0,"None"==b.docSelection.type)j(b);else{var c=b.docSelection.createRange();if(n(c))o(b,c);else{b.rangeCount=c.length;for(var d,e=L(c.item(0)),f=0;f<b.rangeCount;++f)d=a.createRange(e),d.selectNode(c.item(f)),b._ranges.push(d);b.isCollapsed=1==b.rangeCount&&b._ranges[0].collapsed,h(b,b._ranges[b.rangeCount-1],!1)}}}function q(a,c){for(var d=a.docSelection.createRange(),e=m(c),f=L(d.item(0)),g=M(f).createControlRange(),h=0,i=d.length;i>h;++h)g.add(d.item(h));try{g.add(e)}catch(j){throw b.createError("addRange(): Element within the specified Range could not be added to control selection (does it have layout?)")}g.select(),p(a)}function r(a,b,c){this.nativeSelection=a,this.docSelection=b,this._ranges=[],this.win=c,this.refresh()}function s(a){a.win=a.anchorNode=a.focusNode=a._ranges=null,a.rangeCount=a.anchorOffset=a.focusOffset=0,a.detached=!0}function t(a,b){for(var c,d,e=ba.length;e--;)if(c=ba[e],d=c.selection,"deleteAll"==b)s(d);else if(c.win==a)return"delete"==b?(ba.splice(e,1),!0):d;return"deleteAll"==b&&(ba.length=0),null}function u(a,c){for(var d,e=L(c[0].startContainer),f=M(e).createControlRange(),g=0,h=c.length;h>g;++g){d=m(c[g]);try{f.add(d)}catch(i){throw b.createError("setRanges(): Element within one of the specified Ranges could not be added to control selection (does it have layout?)")}}f.select(),p(a)}function v(a,b){if(a.win.document!=L(b))throw new H("WRONG_DOCUMENT_ERR")}function w(b){return function(c,d){var e;this.rangeCount?(e=this.getRangeAt(0),e["set"+(b?"Start":"End")](c,d)):(e=a.createRange(this.win.document),e.setStartAndEnd(c,d)),this.setSingleRange(e,this.isBackward())}}function x(a){var b=[],c=new I(a.anchorNode,a.anchorOffset),d=new I(a.focusNode,a.focusOffset),e="function"==typeof a.getName?a.getName():"Selection";if("undefined"!=typeof a.rangeCount)for(var f=0,g=a.rangeCount;g>f;++f)b[f]=F.inspect(a.getRangeAt(f));return"["+e+"(Ranges: "+b.join(", ")+")(anchor: "+c.inspect()+", focus: "+d.inspect()+"]"}a.config.checkSelectionRanges=!0;var y,z,A="boolean",B="number",C=a.dom,D=a.util,E=D.isHostMethod,F=a.DomRange,G=a.WrappedRange,H=a.DOMException,I=C.DomPosition,J=a.features,K="Control",L=C.getDocument,M=C.getBody,N=F.rangesEqual,O=E(window,"getSelection"),P=D.isHostObject(document,"selection");J.implementsWinGetSelection=O,J.implementsDocSelection=P;var Q=P&&(!O||a.config.preferTextRange);if(Q)y=f,a.isSelectionValid=function(a){var b=d(a,"isSelectionValid").document,c=b.selection;return"None"!=c.type||L(c.createRange().parentElement())==b};else{if(!O)return b.fail("Neither document.selection or window.getSelection() detected."),!1;y=e,a.isSelectionValid=function(){return!0}}a.getNativeSelection=y;var R=y();if(!R)return b.fail("Native selection was null (possibly issue 138?)"),!1;var S=a.createNativeRange(document),T=M(document),U=D.areHostProperties(R,["anchorNode","focusNode","anchorOffset","focusOffset"]);J.selectionHasAnchorAndFocus=U;var V=E(R,"extend");J.selectionHasExtend=V;var W=typeof R.rangeCount==B;J.selectionHasRangeCount=W;var X=!1,Y=!0,Z=V?function(b,c){var d=F.getRangeDocument(c),e=a.createRange(d);e.collapseToPoint(c.endContainer,c.endOffset),b.addRange(k(e)),b.extend(c.startContainer,c.startOffset)}:null;D.areHostMethods(R,["addRange","getRangeAt","removeAllRanges"])&&typeof R.rangeCount==B&&J.implementsDomRange&&!function(){var b=window.getSelection();if(b){for(var c=b.rangeCount,d=c>1,e=[],f=g(b),h=0;c>h;++h)e[h]=b.getRangeAt(h);var i=C.createTestElement(document,"",!1),j=i.appendChild(document.createTextNode("   ")),k=document.createRange();if(k.setStart(j,1),k.collapse(!0),b.removeAllRanges(),b.addRange(k),Y=1==b.rangeCount,b.removeAllRanges(),!d){var l=window.navigator.appVersion.match(/Chrome\/(.*?) /);if(l&&parseInt(l[1])>=36)X=!1;else{var m=k.cloneRange();k.setStart(j,0),m.setEnd(j,3),m.setStart(j,2),b.addRange(k),b.addRange(m),X=2==b.rangeCount}}for(C.removeNode(i),b.removeAllRanges(),h=0;c>h;++h)0==h&&f?Z?Z(b,e[h]):(a.warn("Rangy initialization: original selection was backwards but selection has been restored forwards because the browser does not support Selection.extend"),b.addRange(e[h])):b.addRange(e[h])}}(),J.selectionSupportsMultipleRanges=X,J.collapsedNonEditableSelectionsSupported=Y;var $,_=!1;T&&E(T,"createControlRange")&&($=T.createControlRange(),D.areHostProperties($,["item","add"])&&(_=!0)),J.implementsControlRange=_,z=U?function(a){return a.anchorNode===a.focusNode&&a.anchorOffset===a.focusOffset}:function(a){return a.rangeCount?a.getRangeAt(a.rangeCount-1).collapsed:!1};var aa;E(R,"getRangeAt")?aa=function(a,b){try{return a.getRangeAt(b)}catch(c){return null}}:U&&(aa=function(b){var c=L(b.anchorNode),d=a.createRange(c);return d.setStartAndEnd(b.anchorNode,b.anchorOffset,b.focusNode,b.focusOffset),d.collapsed!==this.isCollapsed&&d.setStartAndEnd(b.focusNode,b.focusOffset,b.anchorNode,b.anchorOffset),d}),r.prototype=a.selectionPrototype;var ba=[],ca=function(a){if(a&&a instanceof r)return a.refresh(),a;a=d(a,"getNativeSelection");var b=t(a),c=y(a),e=P?f(a):null;return b?(b.nativeSelection=c,b.docSelection=e,b.refresh()):(b=new r(c,e,a),ba.push({win:a,selection:b})),b};a.getSelection=ca,D.createAliasForDeprecatedMethod(a,"getIframeSelection","getSelection");var da=r.prototype;if(!Q&&U&&D.areHostMethods(R,["removeAllRanges","addRange"])){da.removeAllRanges=function(){this.nativeSelection.removeAllRanges(),j(this)};var ea=function(a,b){Z(a.nativeSelection,b),a.refresh()};W?da.addRange=function(b,d){if(_&&P&&this.docSelection.type==K)q(this,b);else if(c(d)&&V)ea(this,b);else{var e;X?e=this.rangeCount:(this.removeAllRanges(),e=0);var f=k(b).cloneRange();try{this.nativeSelection.addRange(f)}catch(g){}if(this.rangeCount=this.nativeSelection.rangeCount,this.rangeCount==e+1){if(a.config.checkSelectionRanges){var i=aa(this.nativeSelection,this.rangeCount-1);i&&!N(i,b)&&(b=new G(i))}this._ranges[this.rangeCount-1]=b,h(this,b,ha(this.nativeSelection)),this.isCollapsed=z(this)}else this.refresh()}}:da.addRange=function(a,b){c(b)&&V?ea(this,a):(this.nativeSelection.addRange(k(a)),this.refresh())},da.setRanges=function(a){if(_&&P&&a.length>1)u(this,a);else{this.removeAllRanges();for(var b=0,c=a.length;c>b;++b)this.addRange(a[b])}}}else{if(!(E(R,"empty")&&E(S,"select")&&_&&Q))return b.fail("No means of selecting a Range or TextRange was found"),!1;da.removeAllRanges=function(){try{if(this.docSelection.empty(),"None"!=this.docSelection.type){var a;if(this.anchorNode)a=L(this.anchorNode);else if(this.docSelection.type==K){var b=this.docSelection.createRange();b.length&&(a=L(b.item(0)))}if(a){var c=M(a).createTextRange();c.select(),this.docSelection.empty()}}}catch(d){}j(this)},da.addRange=function(b){this.docSelection.type==K?q(this,b):(a.WrappedTextRange.rangeToTextRange(b).select(),this._ranges[0]=b,this.rangeCount=1,this.isCollapsed=this._ranges[0].collapsed,h(this,b,!1))},da.setRanges=function(a){this.removeAllRanges();var b=a.length;b>1?u(this,a):b&&this.addRange(a[0])}}da.getRangeAt=function(a){if(0>a||a>=this.rangeCount)throw new H("INDEX_SIZE_ERR");return this._ranges[a].cloneRange()};var fa;if(Q)fa=function(b){var c;a.isSelectionValid(b.win)?c=b.docSelection.createRange():(c=M(b.win.document).createTextRange(),c.collapse(!0)),b.docSelection.type==K?p(b):n(c)?o(b,c):j(b)};else if(E(R,"getRangeAt")&&typeof R.rangeCount==B)fa=function(b){if(_&&P&&b.docSelection.type==K)p(b);else if(b._ranges.length=b.rangeCount=b.nativeSelection.rangeCount,b.rangeCount){for(var c=0,d=b.rangeCount;d>c;++c)b._ranges[c]=new a.WrappedRange(b.nativeSelection.getRangeAt(c));h(b,b._ranges[b.rangeCount-1],ha(b.nativeSelection)),b.isCollapsed=z(b)}else j(b)};else{if(!U||typeof R.isCollapsed!=A||typeof S.collapsed!=A||!J.implementsDomRange)return b.fail("No means of obtaining a Range or TextRange from the user's selection was found"),!1;fa=function(a){var b,c=a.nativeSelection;c.anchorNode?(b=aa(c,0),a._ranges=[b],a.rangeCount=1,i(a),a.isCollapsed=z(a)):j(a)}}da.refresh=function(a){var b=a?this._ranges.slice(0):null,c=this.anchorNode,d=this.anchorOffset;if(fa(this),a){var e=b.length;if(e!=this._ranges.length)return!0;if(this.anchorNode!=c||this.anchorOffset!=d)return!0;for(;e--;)if(!N(b[e],this._ranges[e]))return!0;return!1}};var ga=function(a,b){var c=a.getAllRanges();a.removeAllRanges();for(var d=0,e=c.length;e>d;++d)N(b,c[d])||a.addRange(c[d]);a.rangeCount||j(a)};_&&P?da.removeRange=function(a){if(this.docSelection.type==K){for(var b,c=this.docSelection.createRange(),d=m(a),e=L(c.item(0)),f=M(e).createControlRange(),g=!1,h=0,i=c.length;i>h;++h)b=c.item(h),b!==d||g?f.add(c.item(h)):g=!0;f.select(),p(this)}else ga(this,a)}:da.removeRange=function(a){ga(this,a)};var ha;!Q&&U&&J.implementsDomRange?(ha=g,da.isBackward=function(){return ha(this)}):ha=da.isBackward=function(){return!1},da.isBackwards=da.isBackward,da.toString=function(){for(var a=[],b=0,c=this.rangeCount;c>b;++b)a[b]=""+this._ranges[b];return a.join("")},da.collapse=function(b,c){v(this,b);var d=a.createRange(b);d.collapseToPoint(b,c),this.setSingleRange(d),this.isCollapsed=!0},da.collapseToStart=function(){if(!this.rangeCount)throw new H("INVALID_STATE_ERR");var a=this._ranges[0];this.collapse(a.startContainer,a.startOffset)},da.collapseToEnd=function(){if(!this.rangeCount)throw new H("INVALID_STATE_ERR");var a=this._ranges[this.rangeCount-1];this.collapse(a.endContainer,a.endOffset)},da.selectAllChildren=function(b){v(this,b);var c=a.createRange(b);c.selectNodeContents(b),this.setSingleRange(c)},da.deleteFromDocument=function(){if(_&&P&&this.docSelection.type==K){for(var a,b=this.docSelection.createRange();b.length;)a=b.item(0),b.remove(a),C.removeNode(a);this.refresh()}else if(this.rangeCount){var c=this.getAllRanges();if(c.length){this.removeAllRanges();for(var d=0,e=c.length;e>d;++d)c[d].deleteContents();this.addRange(c[e-1])}}},da.eachRange=function(a,b){for(var c=0,d=this._ranges.length;d>c;++c)if(a(this.getRangeAt(c)))return b},da.getAllRanges=function(){var a=[];return this.eachRange(function(b){a.push(b)}),a},da.setSingleRange=function(a,b){this.removeAllRanges(),this.addRange(a,b)},da.callMethodOnEachRange=function(a,b){var c=[];return this.eachRange(function(d){c.push(d[a].apply(d,b||[]))}),c},da.setStart=w(!0),da.setEnd=w(!1),a.rangePrototype.select=function(a){ca(this.getDocument()).setSingleRange(this,a)},da.changeEachRange=function(a){var b=[],c=this.isBackward();this.eachRange(function(c){a(c),b.push(c)}),this.removeAllRanges(),c&&1==b.length?this.addRange(b[0],"backward"):this.setRanges(b)},da.containsNode=function(a,b){return this.eachRange(function(c){return c.containsNode(a,b)},!0)||!1},da.getBookmark=function(a){return{backward:this.isBackward(),rangeBookmarks:this.callMethodOnEachRange("getBookmark",[a])}},da.moveToBookmark=function(b){for(var c,d,e=[],f=0;c=b.rangeBookmarks[f++];)d=a.createRange(this.win),d.moveToBookmark(c),e.push(d);b.backward?this.setSingleRange(e[0],"backward"):this.setRanges(e)},da.saveRanges=function(){return{backward:this.isBackward(),ranges:this.callMethodOnEachRange("cloneRange")}},da.restoreRanges=function(a){this.removeAllRanges();for(var b,c=0;b=a.ranges[c];++c)this.addRange(b,a.backward&&0==c)},da.toHtml=function(){var a=[];return this.eachRange(function(b){a.push(F.toHtml(b))}),a.join("")},J.implementsTextRange&&(da.getNativeTextRange=function(){var c;if(c=this.docSelection){var d=c.createRange();if(n(d))return d;throw b.createError("getNativeTextRange: selection is a control selection")}if(this.rangeCount>0)return a.WrappedTextRange.rangeToTextRange(this.getRangeAt(0));throw b.createError("getNativeTextRange: selection contains no range")}),da.getName=function(){return"WrappedSelection"},da.inspect=function(){return x(this)},da.detach=function(){t(this.win,"delete"),s(this)},r.detachAll=function(){t(null,"deleteAll")},r.inspect=x,r.isDirectionBackward=c,a.Selection=r,a.selectionPrototype=da,a.addShimListener(function(a){"undefined"==typeof a.getSelection&&(a.getSelection=function(){return ca(a)}),a=null})});var M=!1,N=function(a){M||(M=!0,!H.initialized&&H.config.autoInitialize&&l())};return F&&("complete"==document.readyState?N():(a(document,"addEventListener")&&document.addEventListener("DOMContentLoaded",N,!1),J(window,"load",N))),H},this),function(a,b){"function"==typeof define&&define.amd?define(["./rangy-core"],a):"undefined"!=typeof module&&"object"==typeof exports?module.exports=a(require("rangy")):a(b.rangy)}(function(a){return a.createModule("TextRange",["WrappedSelection"],function(a,b){function c(a,b){function c(a,b,c){h.push({start:a,end:b,isWord:c})}for(var d,e,f,g=a.join(""),h=[],i=0;d=b.wordRegex.exec(g);){if(e=d.index,f=e+d[0].length,e>i&&c(i,e,!1),b.includeTrailingSpace)for(;$.test(a[f]);)++f;c(e,f,!0),i=f}return i<a.length&&c(i,a.length,!1),h}function d(a,b){for(var c=a.slice(b.start,b.end),d={isWord:b.isWord,chars:c,toString:function(){return c.join("")}},e=0,f=c.length;f>e;++e)c[e].token=d;return d}function e(a,b,c){for(var e,f=c(a,b),g=[],h=0;e=f[h++];)g.push(d(a,e));return g}function f(a){var b=a||"",c="string"==typeof b?b.split(""):b;return c.sort(function(a,b){return a.charCodeAt(0)-b.charCodeAt(0)}),c.join("").replace(/(.)\1+/g,"$1")}function g(a){var b,c;return a?(b=a.language||_,c={},U(c,ia[b]||ia[_]),U(c,a),c):ia[_]}function h(a,b){var c=V(a,b);return b.hasOwnProperty("wordOptions")&&(c.wordOptions=g(c.wordOptions)),b.hasOwnProperty("characterOptions")&&(c.characterOptions=V(c.characterOptions,ga)),c}function i(a,b){var c=na(a,"display",b),d=a.tagName.toLowerCase();return"block"==c&&fa&&oa.hasOwnProperty(d)?oa[d]:c}function j(a){for(var b=o(a),c=0,d=b.length;d>c;++c)if(1==b[c].nodeType&&"none"==i(b[c]))return!0;return!1}function k(a){var b;return 3==a.nodeType&&(b=a.parentNode)&&"hidden"==na(b,"visibility")}function l(a){return a&&(1==a.nodeType&&!/^(inline(-block|-table)?|none)$/.test(i(a))||9==a.nodeType||11==a.nodeType)}function m(a){return S.isCharacterDataNode(a)||!/^(area|base|basefont|br|col|frame|hr|img|input|isindex|link|meta|param)$/i.test(a.nodeName)}function n(a){for(var b=[];a.parentNode;)b.unshift(a.parentNode),a=a.parentNode;return b}function o(a){return n(a).concat([a])}function p(a){for(;a&&!a.nextSibling;)a=a.parentNode;return a?a.nextSibling:null}function q(a,b){return!b&&a.hasChildNodes()?a.firstChild:p(a)}function r(a){var b=a.previousSibling;if(b){for(a=b;a.hasChildNodes();)a=a.lastChild;return a}var c=a.parentNode;return c&&1==c.nodeType?c:null}function s(a){if(!a||3!=a.nodeType)return!1;var b=a.data;if(""===b)return!0;var c=a.parentNode;if(!c||1!=c.nodeType)return!1;var d=na(a.parentNode,"whiteSpace");return/^[\t\n\r ]+$/.test(b)&&/^(normal|nowrap)$/.test(d)||/^[\t\r ]+$/.test(b)&&"pre-line"==d}function t(a){if(""===a.data)return!0;if(!s(a))return!1;var b=a.parentNode;return b?j(a)?!0:!1:!0}function u(a){var b=a.nodeType;return 7==b||8==b||j(a)||/^(script|style)$/i.test(a.nodeName)||k(a)||t(a)}function v(a,b){var c=a.nodeType;return 7==c||8==c||1==c&&"none"==i(a,b)}function w(){this.store={}}function x(a,b,c){return function(d){var e=this.cache;if(e.hasOwnProperty(a))return pa++,e[a];qa++;var f=b.call(this,c?this[c]:this,d);return e[a]=f,f}}function y(a,b){this.node=a,this.session=b,this.cache=new w,this.positions=new w}function z(a,b){this.offset=b,this.nodeWrapper=a,this.node=a.node,this.session=a.session,this.cache=new w}function A(){return"[Position("+S.inspectNode(this.node)+":"+this.offset+")]"}function B(){return D(),Da=new Ea}function C(){return Da||B()}function D(){Da&&Da.detach(),Da=null}function E(a,c,d,e){function f(){var a=null;return c?(a=h,i||(h=h.previousVisible(),i=!h||d&&h.equals(d))):i||(a=h=h.nextVisible(),i=!h||d&&h.equals(d)),i&&(h=null),a}d&&(c?u(d.node)&&(d=a.previousVisible()):u(d.node)&&(d=d.nextVisible()));var g,h=a,i=!1,j=!1;return{next:function(){if(j)return j=!1,g;for(var a,b;a=f();)if(b=a.getCharacter(e))return g=a,a;return null},rewind:function(){if(!g)throw b.createError("createCharacterIterator: cannot rewind. Only one position can be rewound.");j=!0},dispose:function(){a=d=null}}}function F(a,b,c){function d(a){for(var b,c,d=[],e=a?f:g,h=!1,i=!1;b=e.next();){if(c=b.character,Z.test(c))i&&(i=!1,h=!0);else{if(h){e.rewind();break}i=!0}d.push(b)}return d}var f=E(a,!1,null,b),g=E(a,!0,null,b),h=c.tokenizer,i=d(!0),j=d(!1).reverse(),k=e(j.concat(i),c,h),l=i.length?k.slice(Fa(k,i[0].token)):[],m=j.length?k.slice(0,Fa(k,j.pop().token)+1):[];return{nextEndToken:function(){for(var a,b;1==l.length&&!(a=l[0]).isWord&&(b=d(!0)).length>0;)l=e(a.chars.concat(b),c,h);return l.shift()},previousStartToken:function(){for(var a,b;1==m.length&&!(a=m[0]).isWord&&(b=d(!1)).length>0;)m=e(b.reverse().concat(a.chars),c,h);return m.pop()},dispose:function(){f.dispose(),g.dispose(),l=m=null}}}function G(a,b,c,d,e){var f,g,h,i,j=0,k=a,l=Math.abs(c);if(0!==c){var m=0>c;switch(b){case Q:for(g=E(a,m,null,d);(f=g.next())&&l>j;)++j,k=f;h=f,g.dispose();break;case R:for(var n=F(a,d,e),o=m?n.previousStartToken:n.nextEndToken;(i=o())&&l>j;)i.isWord&&(++j,k=m?i.chars[0]:i.chars[i.chars.length-1]);break;default:throw new Error("movePositionBy: unit '"+b+"' not implemented")}m?(k=k.previousVisible(),j=-j):k&&k.isLeadingSpace&&!k.isTrailingSpace&&(b==R&&(g=E(a,!1,null,d),h=g.next(),g.dispose()),h&&(k=h.previousVisible()))}return{position:k,unitsMoved:j}}function H(a,b,c,d){var e=a.getRangeBoundaryPosition(b,!0),f=a.getRangeBoundaryPosition(b,!1),g=d?f:e,h=d?e:f;return E(g,!!d,h,c)}function I(a,b,c){for(var d,e=[],f=H(a,b,c);d=f.next();)e.push(d);return f.dispose(),e}function J(b,c,d){var e=a.createRange(b.node);return e.setStartAndEnd(b.node,b.offset,c.node,c.offset),!e.expand("word",{wordOptions:d})}function K(a,b,c,d,e){function f(a,b){var c=p[a].previousVisible(),d=p[b-1],f=!e.wholeWordsOnly||J(c,d,e.wordOptions);return{startPos:c,endPos:d,valid:f}}for(var g,h,i,j,k,l,m=aa(e.direction),n=E(a,m,a.session.getRangeBoundaryPosition(d,m),e.characterOptions),o="",p=[],q=null;g=n.next();)if(h=g.character,c||e.caseSensitive||(h=h.toLowerCase()),m?(p.unshift(g),o=h+o):(p.push(g),o+=h),c){if(k=b.exec(o))if(i=k.index,j=i+k[0].length,l){if(!m&&j<o.length||m&&i>0){q=f(i,j);break}}else l=!0}else if(-1!=(i=o.indexOf(b))){q=f(i,i+b.length);break}return l&&(q=f(i,j)),n.dispose(),q}function L(a){return function(){var b=!!Da,c=C(),d=[c].concat(T.toArray(arguments)),e=a.apply(this,d);return b||D(),e}}function M(a,b){return L(function(c,d,e,f){typeof e==P&&(e=d,d=Q),f=h(f,ka);var g=a;b&&(g=e>=0,this.collapse(!g));var i=G(c.getRangeBoundaryPosition(this,g),d,e,f.characterOptions,f.wordOptions),j=i.position;return this[g?"setStart":"setEnd"](j.node,j.offset),i.unitsMoved})}function N(a){return L(function(b,c){c=V(c,ga);for(var d,e=H(b,this,c,!a),f=0;(d=e.next())&&Z.test(d.character);)++f;e.dispose();var g=f>0;return g&&this[a?"moveStart":"moveEnd"]("character",a?f:-f,{characterOptions:c}),g})}function O(a){return L(function(b,c){var d=!1;return this.changeEachRange(function(b){d=b[a](c)||d}),d})}var P="undefined",Q="character",R="word",S=a.dom,T=a.util,U=T.extend,V=T.createOptions,W=S.getBody,X=/^[ \t\f\r\n]+$/,Y=/^[ \t\f\r]+$/,Z=/^[\t-\r \u0085\u00A0\u1680\u180E\u2000-\u200B\u2028\u2029\u202F\u205F\u3000]+$/,$=/^[\t \u00A0\u1680\u180E\u2000-\u200B\u202F\u205F\u3000]+$/,_="en",aa=a.Selection.isDirectionBackward,ba=!1,ca=!1,da=!1,ea=!0;!function(){var b=S.createTestElement(document,"<p>1 </p><p></p>",!0),c=b.firstChild,d=a.getSelection();d.collapse(c.lastChild,2),d.setStart(c.firstChild,0),ba=1==(""+d).length,b.innerHTML="1 <br />",d.collapse(b,2),d.setStart(b.firstChild,0),ca=1==(""+d).length,b.innerHTML="1 <p>1</p>",d.collapse(b,2),d.setStart(b.firstChild,0),da=1==(""+d).length,S.removeNode(b),d.removeAllRanges()}();var fa,ga={includeBlockContentTrailingSpace:!0,includeSpaceBeforeBr:!0,includeSpaceBeforeBlock:!0,includePreLineTrailingSpace:!0,ignoreCharacters:""},ha={includeBlockContentTrailingSpace:!ea,includeSpaceBeforeBr:!ca,includeSpaceBeforeBlock:!da,includePreLineTrailingSpace:!0},ia={en:{wordRegex:/[a-z0-9]+('[a-z0-9]+)*/gi,includeTrailingSpace:!1,tokenizer:c}},ja={caseSensitive:!1,withinRange:null,wholeWordsOnly:!1,wrap:!1,direction:"forward",wordOptions:null,characterOptions:null},ka={wordOptions:null,characterOptions:null},la={wordOptions:null,characterOptions:null,trim:!1,trimStart:!0,trimEnd:!0},ma={wordOptions:null,characterOptions:null,direction:"forward"},na=S.getComputedStyleProperty;!function(){var a=document.createElement("table"),b=W(document);b.appendChild(a),fa="block"==na(a,"display"),b.removeChild(a)}();var oa={table:"table",caption:"table-caption",colgroup:"table-column-group",col:"table-column",thead:"table-header-group",tbody:"table-row-group",tfoot:"table-footer-group",tr:"table-row",td:"table-cell",th:"table-cell"};w.prototype={get:function(a){return this.store.hasOwnProperty(a)?this.store[a]:null},set:function(a,b){return this.store[a]=b}};var pa=0,qa=0,ra={getPosition:function(a){var b=this.positions;return b.get(a)||b.set(a,new z(this,a))},toString:function(){return"[NodeWrapper("+S.inspectNode(this.node)+")]"}};y.prototype=ra;var sa="EMPTY",ta="NON_SPACE",ua="UNCOLLAPSIBLE_SPACE",va="COLLAPSIBLE_SPACE",wa="TRAILING_SPACE_BEFORE_BLOCK",xa="TRAILING_SPACE_IN_BLOCK",ya="TRAILING_SPACE_BEFORE_BR",za="PRE_LINE_TRAILING_SPACE_BEFORE_LINE_BREAK",Aa="TRAILING_LINE_BREAK_AFTER_BR",Ba="INCLUDED_TRAILING_LINE_BREAK_AFTER_BR";U(ra,{isCharacterDataNode:x("isCharacterDataNode",S.isCharacterDataNode,"node"),getNodeIndex:x("nodeIndex",S.getNodeIndex,"node"),getLength:x("nodeLength",S.getNodeLength,"node"),containsPositions:x("containsPositions",m,"node"),isWhitespace:x("isWhitespace",s,"node"),isCollapsedWhitespace:x("isCollapsedWhitespace",t,"node"),getComputedDisplay:x("computedDisplay",i,"node"),isCollapsed:x("collapsed",u,"node"),isIgnored:x("ignored",v,"node"),next:x("nextPos",q,"node"),previous:x("previous",r,"node"),getTextNodeInfo:x("textNodeInfo",function(a){var b=null,c=!1,d=na(a.parentNode,"whiteSpace"),e="pre-line"==d;return e?(b=Y,c=!0):("normal"==d||"nowrap"==d)&&(b=X,c=!0),{node:a,text:a.data,spaceRegex:b,collapseSpaces:c,preLine:e}},"node"),hasInnerText:x("hasInnerText",function(a,b){for(var c=this.session,d=c.getPosition(a.parentNode,this.getNodeIndex()+1),e=c.getPosition(a,0),f=b?d:e,g=b?e:d;f!==g;){
if(f.prepopulateChar(),f.isDefinitelyNonEmpty())return!0;f=b?f.previousVisible():f.nextVisible()}return!1},"node"),isRenderedBlock:x("isRenderedBlock",function(a){for(var b=a.getElementsByTagName("br"),c=0,d=b.length;d>c;++c)if(!u(b[c]))return!0;return this.hasInnerText()},"node"),getTrailingSpace:x("trailingSpace",function(a){if("br"==a.tagName.toLowerCase())return"";switch(this.getComputedDisplay()){case"inline":for(var b=a.lastChild;b;){if(!v(b))return 1==b.nodeType?this.session.getNodeWrapper(b).getTrailingSpace():"";b=b.previousSibling}break;case"inline-block":case"inline-table":case"none":case"table-column":case"table-column-group":break;case"table-cell":return"	";default:return this.isRenderedBlock(!0)?"\n":""}return""},"node"),getLeadingSpace:x("leadingSpace",function(a){switch(this.getComputedDisplay()){case"inline":case"inline-block":case"inline-table":case"none":case"table-column":case"table-column-group":case"table-cell":break;default:return this.isRenderedBlock(!1)?"\n":""}return""},"node")});var Ca={character:"",characterType:sa,isBr:!1,prepopulateChar:function(){var a=this;if(!a.prepopulatedChar){var b=a.node,c=a.offset,d="",e=sa,f=!1;if(c>0)if(3==b.nodeType){var g=b.data,h=g.charAt(c-1),i=a.nodeWrapper.getTextNodeInfo(),j=i.spaceRegex;i.collapseSpaces?j.test(h)?c>1&&j.test(g.charAt(c-2))||(i.preLine&&"\n"===g.charAt(c)?(d=" ",e=za):(d=" ",e=va)):(d=h,e=ta,f=!0):(d=h,e=ua,f=!0)}else{var k=b.childNodes[c-1];if(k&&1==k.nodeType&&!u(k)&&("br"==k.tagName.toLowerCase()?(d="\n",a.isBr=!0,e=va,f=!1):a.checkForTrailingSpace=!0),!d){var l=b.childNodes[c];l&&1==l.nodeType&&!u(l)&&(a.checkForLeadingSpace=!0)}}a.prepopulatedChar=!0,a.character=d,a.characterType=e,a.isCharInvariant=f}},isDefinitelyNonEmpty:function(){var a=this.characterType;return a==ta||a==ua},resolveLeadingAndTrailingSpaces:function(){if(this.prepopulatedChar||this.prepopulateChar(),this.checkForTrailingSpace){var a=this.session.getNodeWrapper(this.node.childNodes[this.offset-1]).getTrailingSpace();a&&(this.isTrailingSpace=!0,this.character=a,this.characterType=va),this.checkForTrailingSpace=!1}if(this.checkForLeadingSpace){var b=this.session.getNodeWrapper(this.node.childNodes[this.offset]).getLeadingSpace();b&&(this.isLeadingSpace=!0,this.character=b,this.characterType=va),this.checkForLeadingSpace=!1}},getPrecedingUncollapsedPosition:function(a){for(var b,c=this;c=c.previousVisible();)if(b=c.getCharacter(a),""!==b)return c;return null},getCharacter:function(a){function b(){return n||(k=o.getPrecedingUncollapsedPosition(a),n=!0),k}this.resolveLeadingAndTrailingSpaces();var c,d=this.character,e=f(a.ignoreCharacters),g=""!==d&&e.indexOf(d)>-1;if(this.isCharInvariant)return c=g?"":d;var h=["character",a.includeSpaceBeforeBr,a.includeBlockContentTrailingSpace,a.includePreLineTrailingSpace,e].join("_"),i=this.cache.get(h);if(null!==i)return i;var j,k,l="",m=this.characterType==va,n=!1,o=this;return m&&(this.type==Ba?l="\n":" "==d&&(!b()||k.isTrailingSpace||"\n"==k.character||" "==k.character&&k.characterType==va)||("\n"==d&&this.isLeadingSpace?b()&&"\n"!=k.character&&(l="\n"):(j=this.nextUncollapsed(),j&&(j.isBr?this.type=ya:j.isTrailingSpace&&"\n"==j.character?this.type=xa:j.isLeadingSpace&&"\n"==j.character&&(this.type=wa),"\n"==j.character?(this.type!=ya||a.includeSpaceBeforeBr)&&(this.type!=wa||a.includeSpaceBeforeBlock)&&(this.type==xa&&j.isTrailingSpace&&!a.includeBlockContentTrailingSpace||(this.type!=za||j.type!=ta||a.includePreLineTrailingSpace)&&("\n"==d?j.isTrailingSpace?this.isTrailingSpace||this.isBr&&(j.type=Aa,b()&&k.isLeadingSpace&&!k.isTrailingSpace&&"\n"==k.character?j.character="":j.type=Ba):l="\n":" "==d&&(l=" "))):l=d)))),e.indexOf(l)>-1&&(l=""),this.cache.set(h,l),l},equals:function(a){return!!a&&this.node===a.node&&this.offset===a.offset},inspect:A,toString:function(){return this.character}};z.prototype=Ca,U(Ca,{next:x("nextPos",function(a){var b=a.nodeWrapper,c=a.node,d=a.offset,e=b.session;if(!c)return null;var f,g,h;return d==b.getLength()?(f=c.parentNode,g=f?b.getNodeIndex()+1:0):b.isCharacterDataNode()?(f=c,g=d+1):(h=c.childNodes[d],e.getNodeWrapper(h).containsPositions()?(f=h,g=0):(f=c,g=d+1)),f?e.getPosition(f,g):null}),previous:x("previous",function(a){var b,c,d,e=a.nodeWrapper,f=a.node,g=a.offset,h=e.session;return 0==g?(b=f.parentNode,c=b?e.getNodeIndex():0):e.isCharacterDataNode()?(b=f,c=g-1):(d=f.childNodes[g-1],h.getNodeWrapper(d).containsPositions()?(b=d,c=S.getNodeLength(d)):(b=f,c=g-1)),b?h.getPosition(b,c):null}),nextVisible:x("nextVisible",function(a){var b=a.next();if(!b)return null;var c=b.nodeWrapper,d=b.node,e=b;return c.isCollapsed()&&(e=c.session.getPosition(d.parentNode,c.getNodeIndex()+1)),e}),nextUncollapsed:x("nextUncollapsed",function(a){for(var b=a;b=b.nextVisible();)if(b.resolveLeadingAndTrailingSpaces(),""!==b.character)return b;return null}),previousVisible:x("previousVisible",function(a){var b=a.previous();if(!b)return null;var c=b.nodeWrapper,d=b.node,e=b;return c.isCollapsed()&&(e=c.session.getPosition(d.parentNode,c.getNodeIndex())),e})});var Da=null,Ea=function(){function a(a){var b=new w;return{get:function(c){var d=b.get(c[a]);if(d)for(var e,f=0;e=d[f++];)if(e.node===c)return e;return null},set:function(c){var d=c.node[a],e=b.get(d)||b.set(d,[]);e.push(c)}}}function b(){this.initCaches()}var c=T.isHostProperty(document.documentElement,"uniqueID");return b.prototype={initCaches:function(){this.elementCache=c?function(){var a=new w;return{get:function(b){return a.get(b.uniqueID)},set:function(b){a.set(b.node.uniqueID,b)}}}():a("tagName"),this.textNodeCache=a("data"),this.otherNodeCache=a("nodeName")},getNodeWrapper:function(a){var b;switch(a.nodeType){case 1:b=this.elementCache;break;case 3:b=this.textNodeCache;break;default:b=this.otherNodeCache}var c=b.get(a);return c||(c=new y(a,this),b.set(c)),c},getPosition:function(a,b){return this.getNodeWrapper(a).getPosition(b)},getRangeBoundaryPosition:function(a,b){var c=b?"start":"end";return this.getPosition(a[c+"Container"],a[c+"Offset"])},detach:function(){this.elementCache=this.textNodeCache=this.otherNodeCache=null}},b}();U(S,{nextNode:q,previousNode:r});var Fa=Array.prototype.indexOf?function(a,b){return a.indexOf(b)}:function(a,b){for(var c=0,d=a.length;d>c;++c)if(a[c]===b)return c;return-1};U(a.rangePrototype,{moveStart:M(!0,!1),moveEnd:M(!1,!1),move:M(!0,!0),trimStart:N(!0),trimEnd:N(!1),trim:L(function(a,b){var c=this.trimStart(b),d=this.trimEnd(b);return c||d}),expand:L(function(a,b,c){var d=!1;c=h(c,la);var e=c.characterOptions;if(b||(b=Q),b==R){var f,g,i=c.wordOptions,j=a.getRangeBoundaryPosition(this,!0),k=a.getRangeBoundaryPosition(this,!1),l=F(j,e,i),m=l.nextEndToken(),n=m.chars[0].previousVisible();if(this.collapsed)f=m;else{var o=F(k,e,i);f=o.previousStartToken()}return g=f.chars[f.chars.length-1],n.equals(j)||(this.setStart(n.node,n.offset),d=!0),g&&!g.equals(k)&&(this.setEnd(g.node,g.offset),d=!0),c.trim&&(c.trimStart&&(d=this.trimStart(e)||d),c.trimEnd&&(d=this.trimEnd(e)||d)),d}return this.moveEnd(Q,1,c)}),text:L(function(a,b){return this.collapsed?"":I(a,this,V(b,ga)).join("")}),selectCharacters:L(function(a,b,c,d,e){var f={characterOptions:e};b||(b=W(this.getDocument())),this.selectNodeContents(b),this.collapse(!0),this.moveStart("character",c,f),this.collapse(!0),this.moveEnd("character",d-c,f)}),toCharacterRange:L(function(a,b,c){b||(b=W(this.getDocument()));var d,e,f=b.parentNode,g=S.getNodeIndex(b),h=-1==S.comparePoints(this.startContainer,this.endContainer,f,g),i=this.cloneRange();return h?(i.setStartAndEnd(this.startContainer,this.startOffset,f,g),d=-i.text(c).length):(i.setStartAndEnd(f,g,this.startContainer,this.startOffset),d=i.text(c).length),e=d+this.text(c).length,{start:d,end:e}}),findText:L(function(b,c,d){d=h(d,ja),d.wholeWordsOnly&&(d.wordOptions.includeTrailingSpace=!1);var e=aa(d.direction),f=d.withinRange;f||(f=a.createRange(),f.selectNodeContents(this.getDocument()));var g=c,i=!1;"string"==typeof g?d.caseSensitive||(g=g.toLowerCase()):i=!0;var j=b.getRangeBoundaryPosition(this,!e),k=f.comparePoint(j.node,j.offset);-1===k?j=b.getRangeBoundaryPosition(f,!0):1===k&&(j=b.getRangeBoundaryPosition(f,!1));for(var l,m=j,n=!1;;)if(l=K(m,g,i,f,d)){if(l.valid)return this.setStartAndEnd(l.startPos.node,l.startPos.offset,l.endPos.node,l.endPos.offset),!0;m=e?l.startPos:l.endPos}else{if(!d.wrap||n)return!1;f=f.cloneRange(),m=b.getRangeBoundaryPosition(f,!e),f.setBoundary(j.node,j.offset,e),n=!0}}),pasteHtml:function(a){if(this.deleteContents(),a){var b=this.createContextualFragment(a),c=b.lastChild;this.insertNode(b),this.collapseAfter(c)}}}),U(a.selectionPrototype,{expand:L(function(a,b,c){this.changeEachRange(function(a){a.expand(b,c)})}),move:L(function(a,b,c,d){var e=0;if(this.focusNode){this.collapse(this.focusNode,this.focusOffset);var f=this.getRangeAt(0);d||(d={}),d.characterOptions=V(d.characterOptions,ha),e=f.move(b,c,d),this.setSingleRange(f)}return e}),trimStart:O("trimStart"),trimEnd:O("trimEnd"),trim:O("trim"),selectCharacters:L(function(b,c,d,e,f,g){var h=a.createRange(c);h.selectCharacters(c,d,e,g),this.setSingleRange(h,f)}),saveCharacterRanges:L(function(a,b,c){for(var d=this.getAllRanges(),e=d.length,f=[],g=1==e&&this.isBackward(),h=0,i=d.length;i>h;++h)f[h]={characterRange:d[h].toCharacterRange(b,c),backward:g,characterOptions:c};return f}),restoreCharacterRanges:L(function(b,c,d){this.removeAllRanges();for(var e,f,g,h=0,i=d.length;i>h;++h)f=d[h],g=f.characterRange,e=a.createRange(c),e.selectCharacters(c,g.start,g.end,f.characterOptions),this.addRange(e,f.backward)}),text:L(function(a,b){for(var c=[],d=0,e=this.rangeCount;e>d;++d)c[d]=this.getRangeAt(d).text(b);return c.join("")})}),a.innerText=function(b,c){var d=a.createRange(b);d.selectNodeContents(b);var e=d.text(c);return e},a.createWordIterator=function(a,b,c){var d=C();c=h(c,ma);var e=d.getPosition(a,b),f=F(e,c.characterOptions,c.wordOptions),g=aa(c.direction);return{next:function(){return g?f.previousStartToken():f.nextEndToken()},dispose:function(){f.dispose(),this.next=function(){}}}},a.noMutation=function(a){var b=C();a(b),D()},a.noMutation.createEntryPointFunction=L,a.textRange={isBlockNode:l,isCollapsedWhitespaceNode:t,createPosition:L(function(a,b,c){return a.getPosition(b,c)})}}),a},this),function(a,b){"function"==typeof define&&define.amd?define(["./rangy-core"],a):"undefined"!=typeof module&&"object"==typeof exports?module.exports=a(require("rangy")):a(b.rangy)}(function(a){return a.createModule("SaveRestore",["WrappedRange"],function(a,b){function c(a,b){return(b||document).getElementById(a)}function d(a,b){var c,d="selectionBoundary_"+ +new Date+"_"+(""+Math.random()).slice(2),e=o.getDocument(a.startContainer),f=a.cloneRange();return f.collapse(b),c=e.createElement("span"),c.id=d,c.style.lineHeight="0",c.style.display="none",c.className="rangySelectionBoundary",c.appendChild(e.createTextNode(r)),f.insertNode(c),c}function e(a,d,e,f){var g=c(e,a);g?(d[f?"setStartBefore":"setEndBefore"](g),p(g)):b.warn("Marker element has been removed. Cannot restore selection.")}function f(a,b){return b.compareBoundaryPoints(a.START_TO_START,a)}function g(b,c){var e,f,g=a.DomRange.getRangeDocument(b),h=b.toString(),i=q(c);return b.collapsed?(f=d(b,!1),{document:g,markerId:f.id,collapsed:!0}):(f=d(b,!1),e=d(b,!0),{document:g,startMarkerId:e.id,endMarkerId:f.id,collapsed:!1,backward:i,toString:function(){return"original text: '"+h+"', new text: '"+b.toString()+"'"}})}function h(d,f){var g=d.document;"undefined"==typeof f&&(f=!0);var h=a.createRange(g);if(d.collapsed){var i=c(d.markerId,g);if(i){i.style.display="inline";var j=i.previousSibling;j&&3==j.nodeType?(p(i),h.collapseToPoint(j,j.length)):(h.collapseBefore(i),p(i))}else b.warn("Marker element has been removed. Cannot restore selection.")}else e(g,h,d.startMarkerId,!0),e(g,h,d.endMarkerId,!1);return f&&h.normalizeBoundaries(),h}function i(b,d){var e,h,i=[],j=q(d);b=b.slice(0),b.sort(f);for(var k=0,l=b.length;l>k;++k)i[k]=g(b[k],j);for(k=l-1;k>=0;--k)e=b[k],h=a.DomRange.getRangeDocument(e),e.collapsed?e.collapseAfter(c(i[k].markerId,h)):(e.setEndBefore(c(i[k].endMarkerId,h)),e.setStartAfter(c(i[k].startMarkerId,h)));return i}function j(c){if(!a.isSelectionValid(c))return b.warn("Cannot save selection. This usually happens when the selection is collapsed and the selection document has lost focus."),null;var d=a.getSelection(c),e=d.getAllRanges(),f=1==e.length&&d.isBackward(),g=i(e,f);return f?d.setSingleRange(e[0],f):d.setRanges(e),{win:c,rangeInfos:g,restored:!1}}function k(a){for(var b=[],c=a.length,d=c-1;d>=0;d--)b[d]=h(a[d],!0);return b}function l(b,c){if(!b.restored){var d=b.rangeInfos,e=a.getSelection(b.win),f=k(d),g=d.length;1==g&&c&&a.features.selectionHasExtend&&d[0].backward?(e.removeAllRanges(),e.addRange(f[0],!0)):e.setRanges(f),b.restored=!0}}function m(a,b){var d=c(b,a);d&&p(d)}function n(a){for(var b,c=a.rangeInfos,d=0,e=c.length;e>d;++d)b=c[d],b.collapsed?m(a.doc,b.markerId):(m(a.doc,b.startMarkerId),m(a.doc,b.endMarkerId))}var o=a.dom,p=o.removeNode,q=a.Selection.isDirectionBackward,r="\ufeff";a.util.extend(a,{saveRange:g,restoreRange:h,saveRanges:i,restoreRanges:k,saveSelection:j,restoreSelection:l,removeMarkerElement:m,removeMarkers:n})}),a},this);var Base=function(){};Base.extend=function(a,b){var c=Base.prototype.extend;Base._prototyping=!0;var d=new this;c.call(d,a),d.base=function(){},delete Base._prototyping;var e=d.constructor,f=d.constructor=function(){if(!Base._prototyping)if(this._constructing||this.constructor==f)this._constructing=!0,e.apply(this,arguments),delete this._constructing;else if(null!=arguments[0])return(arguments[0].extend||c).call(arguments[0],d)};return f.ancestor=this,f.extend=this.extend,f.forEach=this.forEach,f.implement=this.implement,f.prototype=d,f.toString=this.toString,f.valueOf=function(a){return"object"==a?f:e.valueOf()},c.call(f,b),"function"==typeof f.init&&f.init(),f},Base.prototype={extend:function(a,b){if(arguments.length>1){var c=this[a];if(c&&"function"==typeof b&&(!c.valueOf||c.valueOf()!=b.valueOf())&&/\bbase\b/.test(b)){var d=b.valueOf();b=function(){var a=this.base||Base.prototype.base;this.base=c;var b=d.apply(this,arguments);return this.base=a,b},b.valueOf=function(a){return"object"==a?b:d},b.toString=Base.toString}this[a]=b}else if(a){var e=Base.prototype.extend;Base._prototyping||"function"==typeof this||(e=this.extend||e);for(var f={toSource:null},g=["constructor","toString","valueOf"],h=Base._prototyping?0:1;i=g[h++];)a[i]!=f[i]&&e.call(this,i,a[i]);for(var i in a)f[i]||e.call(this,i,a[i])}return this}},Base=Base.extend({constructor:function(){this.extend(arguments[0])}},{ancestor:Object,version:"1.1",forEach:function(a,b,c){for(var d in a)void 0===this.prototype[d]&&b.call(c,a[d],d,a)},implement:function(){for(var a=0;a<arguments.length;a++)"function"==typeof arguments[a]?arguments[a](this.prototype):this.prototype.extend(arguments[a]);return this},toString:function(){return String(this.valueOf())}}),wysihtml5.browser=function(){function a(a){return+(/ipad|iphone|ipod/.test(a)&&a.match(/ os (\d+).+? like mac os x/)||[void 0,0])[1]}function b(a){return+(a.match(/android (\d+)/)||[void 0,0])[1]}function c(a,b){var c,d=-1;return"Microsoft Internet Explorer"==navigator.appName?c=new RegExp("MSIE ([0-9]{1,}[.0-9]{0,})"):"Netscape"==navigator.appName&&(navigator.userAgent.indexOf("Trident")>-1?c=new RegExp("Trident/.*rv:([0-9]{1,}[.0-9]{0,})"):/Edge\/(\d+)./i.test(navigator.userAgent)&&(c=/Edge\/(\d+)./i)),c&&null!=c.exec(navigator.userAgent)&&(d=parseFloat(RegExp.$1)),-1===d?!1:a?b?"<"===b?d>a:">"===b?a>d:"<="===b?d>=a:">="===b?a>=d:void 0:a===d:!0}var d=navigator.userAgent,e=document.createElement("div"),f=-1!==d.indexOf("Gecko")&&-1===d.indexOf("KHTML"),g=-1!==d.indexOf("AppleWebKit/"),h=-1!==d.indexOf("Chrome/"),i=-1!==d.indexOf("Opera/");return{USER_AGENT:d,supported:function(){var c=this.USER_AGENT.toLowerCase(),d="contentEditable"in e,f=document.execCommand&&document.queryCommandSupported&&document.queryCommandState,g=document.querySelector&&document.querySelectorAll,h=this.isIos()&&a(c)<5||this.isAndroid()&&b(c)<4||-1!==c.indexOf("opera mobi")||-1!==c.indexOf("hpwos/");return d&&f&&g&&!h},isTouchDevice:function(){return this.supportsEvent("touchmove")},isIos:function(){return/ipad|iphone|ipod/i.test(this.USER_AGENT)},isAndroid:function(){return-1!==this.USER_AGENT.indexOf("Android")},supportsSandboxedIframes:function(){return c()},throwsMixedContentWarningWhenIframeSrcIsEmpty:function(){return!("querySelector"in document)},displaysCaretInEmptyContentEditableCorrectly:function(){return c(12,">")},hasCurrentStyleProperty:function(){return"currentStyle"in e},insertsLineBreaksOnReturn:function(){return f},supportsPlaceholderAttributeOn:function(a){return"placeholder"in a},supportsEvent:function(a){return"on"+a in e||function(){return e.setAttribute("on"+a,"return;"),"function"==typeof e["on"+a]}()},supportsEventsInIframeCorrectly:function(){return!i},supportsHTML5Tags:function(a){var b=a.createElement("div"),c="<article>foo</article>";return b.innerHTML=c,b.innerHTML.toLowerCase()===c},supportsCommand:function(){var a={formatBlock:c(10,"<="),insertUnorderedList:c(9,">=")||c(12,"<="),insertOrderedList:c(9,">=")||c(12,"<=")},b={insertHTML:f};return function(c,d){var e=a[d];if(!e){try{return c.queryCommandSupported(d)}catch(f){}try{return c.queryCommandEnabled(d)}catch(g){return!!b[d]}}return!1}}(),doesAutoLinkingInContentEditable:function(){return c()},canDisableAutoLinking:function(){return this.supportsCommand(document,"AutoUrlDetect")},clearsContentEditableCorrectly:function(){return f||i||g},supportsGetAttributeCorrectly:function(){var a=document.createElement("td");return"1"!=a.getAttribute("rowspan")},canSelectImagesInContentEditable:function(){return f||c()||i},autoScrollsToCaret:function(){return!g},autoClosesUnclosedTags:function(){var a,b,c=e.cloneNode(!1);return c.innerHTML="<p><div></div>",b=c.innerHTML.toLowerCase(),a="<p></p><div></div>"===b||"<p><div></div></p>"===b,this.autoClosesUnclosedTags=function(){return a},a},supportsNativeGetElementsByClassName:function(){return-1!==String(document.getElementsByClassName).indexOf("[native code]")},supportsSelectionModify:function(){return"getSelection"in window&&"modify"in window.getSelection()},needsSpaceAfterLineBreak:function(){return i},supportsSpeechApiOn:function(a){var b=d.match(/Chrome\/(\d+)/)||[void 0,0];return b[1]>=11&&("onwebkitspeechchange"in a||"speech"in a)},crashesWhenDefineProperty:function(a){return c(9)&&("XMLHttpRequest"===a||"XDomainRequest"===a)},doesAsyncFocus:function(){return c(12,">")},hasProblemsSettingCaretAfterImg:function(){return c()},hasUndoInContextMenu:function(){return f||h||i},hasInsertNodeIssue:function(){return i},hasIframeFocusIssue:function(){return c()},createsNestedInvalidMarkupAfterPaste:function(){return g},supportsMutationEvents:function(){return"MutationEvent"in window},supportsModernPaste:function(){return!c()},fixStyleKey:function(a){return"cssFloat"===a?"styleFloat"in document.createElement("div").style?"styleFloat":"cssFloat":a}}}(),wysihtml5.lang.array=function(a){return{contains:function(b){if(Array.isArray(b)){for(var c=b.length;c--;)if(-1!==wysihtml5.lang.array(a).indexOf(b[c]))return!0;return!1}return-1!==wysihtml5.lang.array(a).indexOf(b)},indexOf:function(b){if(a.indexOf)return a.indexOf(b);for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},without:function(b){b=wysihtml5.lang.array(b);for(var c=[],d=0,e=a.length;e>d;d++)b.contains(a[d])||c.push(a[d]);return c},get:function(){for(var b=0,c=a.length,d=[];c>b;b++)d.push(a[b]);return d},map:function(b,c){if(Array.prototype.map)return a.map(b,c);for(var d=a.length>>>0,e=new Array(d),f=0;d>f;f++)e[f]=b.call(c,a[f],f,a);return e},unique:function(){for(var b=[],c=a.length,d=0;c>d;)wysihtml5.lang.array(b).contains(a[d])||b.push(a[d]),d++;return b}}},wysihtml5.lang.Dispatcher=Base.extend({on:function(a,b){return this.events=this.events||{},this.events[a]=this.events[a]||[],this.events[a].push(b),this},off:function(a,b){this.events=this.events||{};var c,d,e=0;if(a){for(c=this.events[a]||[],d=[];e<c.length;e++)c[e]!==b&&b&&d.push(c[e]);this.events[a]=d}else this.events={};return this},fire:function(a,b){this.events=this.events||{};for(var c=this.events[a]||[],d=0;d<c.length;d++)c[d].call(this,b);return this},observe:function(){return this.on.apply(this,arguments)},stopObserving:function(){return this.off.apply(this,arguments)}}),wysihtml5.lang.object=function(a){return{merge:function(b,c){for(var d in b)c&&wysihtml5.lang.object(b[d]).isPlainObject()&&("undefined"==typeof a[d]||wysihtml5.lang.object(a[d]).isPlainObject())?"undefined"==typeof a[d]?a[d]=wysihtml5.lang.object(b[d]).clone(!0):wysihtml5.lang.object(a[d]).merge(wysihtml5.lang.object(b[d]).clone(!0)):a[d]=wysihtml5.lang.object(b[d]).isPlainObject()?wysihtml5.lang.object(b[d]).clone(!0):b[d];return this},difference:function(b){var c={};for(var d in a)a.hasOwnProperty(d)&&(b.hasOwnProperty(d)||(c[d]=a[d]));for(var e in b)b.hasOwnProperty(e)&&(a.hasOwnProperty(e)&&a[e]===b[e]||(c[0]=a[0]));return c},get:function(){return a},clone:function(b){var c,d={};if(null===a||!wysihtml5.lang.object(a).isPlainObject())return a;for(c in a)a.hasOwnProperty(c)&&(b?d[c]=wysihtml5.lang.object(a[c]).clone(b):d[c]=a[c]);return d},isArray:function(){return"[object Array]"===Object.prototype.toString.call(a)},isFunction:function(){return"[object Function]"===Object.prototype.toString.call(a)},isPlainObject:function(){return a&&"[object Object]"===Object.prototype.toString.call(a)&&!("Node"in window?a instanceof Node:a instanceof Element||a instanceof Text)},isEmpty:function(){for(var b in a)if(a.hasOwnProperty(b))return!1;return!0}}},function(){var a=/^\s+/,b=/\s+$/,c=/[&<>\t"]/g,d={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","	":"&nbsp; "};wysihtml5.lang.string=function(e){return e=String(e),{trim:function(){return e.replace(a,"").replace(b,"")},interpolate:function(a){for(var b in a)e=this.replace("#{"+b+"}").by(a[b]);return e},replace:function(a){return{by:function(b){return e.split(a).join(b)}}},escapeHTML:function(a,b){var f=e.replace(c,function(a){return d[a]});return a&&(f=f.replace(/(?:\r\n|\r|\n)/g,"<br />")),b&&(f=f.replace(/  /gi,"&nbsp; ")),f}}}}(),function(a){function b(a,b){return f(a,b)?a:(a===a.ownerDocument.documentElement&&(a=a.ownerDocument.body),g(a,b))}function c(a){return a.replace(i,function(a,b){var c=(b.match(j)||[])[1]||"",d=l[c];b=b.replace(j,""),b.split(d).length>b.split(c).length&&(b+=c,c="");var e=b,f=b;return b.length>k&&(f=f.substr(0,k)+"..."),"www."===e.substr(0,4)&&(e="http://"+e),'<a href="'+e+'">'+f+"</a>"+c})}function d(a){var b=a._wysihtml5_tempElement;return b||(b=a._wysihtml5_tempElement=a.createElement("div")),b}function e(b){var e=b.parentNode,f=a.lang.string(b.data).escapeHTML(),g=d(e.ownerDocument);for(g.innerHTML="<span></span>"+c(f),g.removeChild(g.firstChild);g.firstChild;)e.insertBefore(g.firstChild,b);e.removeChild(b)}function f(b,c){for(var d;b.parentNode;){if(b=b.parentNode,d=b.nodeName,b.className&&a.lang.array(b.className.split(" ")).contains(c))return!0;if(h.contains(d))return!0;if("body"===d)return!1}return!1}function g(b,c){if(!(h.contains(b.nodeName)||b.className&&a.lang.array(b.className.split(" ")).contains(c))){if(b.nodeType===a.TEXT_NODE&&b.data.match(i))return void e(b);for(var d=a.lang.array(b.childNodes).get(),f=d.length,j=0;f>j;j++)g(d[j],c);return b}}var h=a.lang.array(["CODE","PRE","A","SCRIPT","HEAD","TITLE","STYLE"]),i=/((https?:\/\/|www\.)[^\s<]{3,})/gi,j=/([^\w\/\-](,?))$/i,k=100,l={")":"(","]":"[","}":"{"};a.dom.autoLink=b,a.dom.autoLink.URL_REG_EXP=i}(wysihtml5),function(a){var b=a.dom;b.addClass=function(a,c){var d=a.classList;return d?d.add(c):void(b.hasClass(a,c)||(a.className+=" "+c))},b.removeClass=function(a,b){var c=a.classList;return c?c.remove(b):void(a.className=a.className.replace(new RegExp("(^|\\s+)"+b+"(\\s+|$)")," "))},b.hasClass=function(a,b){var c=a.classList;if(c)return c.contains(b);var d=a.className;return d.length>0&&(d==b||new RegExp("(^|\\s)"+b+"(\\s|$)").test(d))}}(wysihtml5),wysihtml5.dom.contains=function(){var a=document.documentElement;return a.contains?function(a,b){if(b.nodeType!==wysihtml5.ELEMENT_NODE){if(b.parentNode===a)return!0;b=b.parentNode}return a!==b&&a.contains(b)}:a.compareDocumentPosition?function(a,b){return!!(16&a.compareDocumentPosition(b))}:void 0}(),wysihtml5.dom.convertToList=function(){function a(a,b){var c=a.createElement("li");return b.appendChild(c),c}function b(a,b){return a.createElement(b)}function c(c,d,e){if("UL"===c.nodeName||"OL"===c.nodeName||"MENU"===c.nodeName)return c;var f,g,h,i,j,k,l,m,n,o=c.ownerDocument,p=b(o,d),q=c.querySelectorAll("br"),r=q.length;for(n=0;r>n;n++)for(i=q[n];(j=i.parentNode)&&j!==c&&j.lastChild===i;){if("block"===wysihtml5.dom.getStyle("display").from(j)){j.removeChild(i);break}wysihtml5.dom.insert(i).after(i.parentNode)}for(f=wysihtml5.lang.array(c.childNodes).get(),g=f.length,n=0;g>n;n++)m=m||a(o,p),h=f[n],k="block"===wysihtml5.dom.getStyle("display").from(h),l="BR"===h.nodeName,!k||e&&wysihtml5.dom.hasClass(h,e)?l?m=m.firstChild?null:m:m.appendChild(h):(m=m.firstChild?a(o,p):m,m.appendChild(h),m=null);return 0===f.length&&a(o,p),c.parentNode.replaceChild(p,c),p}return c}(),wysihtml5.dom.copyAttributes=function(a){return{from:function(b){return{to:function(c){for(var d,e=0,f=a.length;f>e;e++)d=a[e],"undefined"!=typeof b[d]&&""!==b[d]&&(c[d]=b[d]);return{andTo:arguments.callee}}}}}},function(a){var b=["-webkit-box-sizing","-moz-box-sizing","-ms-box-sizing","box-sizing"],c=function(b){return d(b)?parseInt(a.getStyle("width").from(b),10)<b.offsetWidth:!1},d=function(c){for(var d=0,e=b.length;e>d;d++)if("border-box"===a.getStyle(b[d]).from(c))return b[d]};a.copyStyles=function(d){return{from:function(e){c(e)&&(d=wysihtml5.lang.array(d).without(b));for(var f,g="",h=d.length,i=0;h>i;i++)f=d[i],g+=f+":"+a.getStyle(f).from(e)+";";return{to:function(b){return a.setStyles(g).on(b),{andTo:arguments.callee}}}}}}}(wysihtml5.dom),function(a){a.dom.delegate=function(a,b,c,d){var e=function(c){for(var e=c.target,f=3===e.nodeType?e.parentNode:e,g=a.querySelectorAll(b),h=0,i=g.length;i>h;h++)g[h].contains(f)&&d.call(g[h],c)};return a.addEventListener(c,e,!1),{stop:function(){a.removeEventListener(c,e,!1)}}}}(wysihtml5),function(a){function b(a,b){for(var c=[a],d=a;b&&d&&d!==b||!b&&d;)c.unshift(d),d=d.parentNode;return c}a.dom.domNode=function(c){var d=[a.ELEMENT_NODE,a.TEXT_NODE];return{is:{emptyTextNode:function(b){var d=b?/^\s*$/g:/^[\r\n]*$/g;return c.nodeType===a.TEXT_NODE&&d.test(c.data)},visible:function(){var b=!/^\s*$/g.test(a.dom.getTextContent(c));return b||1===c.nodeType&&c.querySelector("img, br, hr, object, embed, canvas, input, textarea")&&(b=!0),b}},prev:function(b){var e=c.previousSibling,f=b&&b.nodeTypes?b.nodeTypes:d;return e?!a.lang.array(f).contains(e.nodeType)||b&&b.ignoreBlankTexts&&a.dom.domNode(e).is.emptyTextNode(!0)?a.dom.domNode(e).prev(b):e:null},next:function(b){var e=c.nextSibling,f=b&&b.nodeTypes?b.nodeTypes:d;return e?!a.lang.array(f).contains(e.nodeType)||b&&b.ignoreBlankTexts&&a.dom.domNode(e).is.emptyTextNode(!0)?a.dom.domNode(e).next(b):e:null},commonAncestor:function(a,d){var e=b(c,d),f=b(a,d);if(e[0]!=f[0])return null;for(var g=0;g<e.length;g++)if(e[g]!=f[g])return e[g-1];return null},lastLeafNode:function(b){var d;if(1!==c.nodeType)return c;if(d=c.lastChild,!d)return c;if(b&&b.leafClasses)for(var e=b.leafClasses.length;e--;)if(a.dom.hasClass(c,b.leafClasses[e]))return c;return a.dom.domNode(d).lastLeafNode(b)},escapeParent:function(b,d){var e,f,g,h=c;if(!a.dom.contains(b,c))throw new Error("Child is not a descendant of node.");do{for(e=h.parentNode,f=e.cloneNode(!1);e.lastChild&&e.lastChild!==h;)f.insertBefore(e.lastChild,f.firstChild);if(e!==b&&(g=e.cloneNode(!1),g.appendChild(h),h=g),e.parentNode.insertBefore(h,e.nextSibling),""!==f.innerHTML)if(/^\s+$/.test(f.innerHTML))for(;f.lastChild;)e.parentNode.insertBefore(f.lastChild,h.nextSibling);else e.parentNode.insertBefore(f,h.nextSibling);if(""===e.innerHTML)e.parentNode.removeChild(e);else if(/^\s+$/.test(e.innerHTML)){for(;e.firstChild;)e.parentNode.insertBefore(e.firstChild,e);e.parentNode.removeChild(e)}}while(e&&e!==b);d&&h&&(h.parentNode.insertBefore(d,h),d.appendChild(h))},test:function(b){var d;if(!b)return!1;if(1!==c.nodeType)return!1;if(b.query&&!c.matches(b.query))return!1;if(b.nodeName&&c.nodeName!==b.nodeName)return!1;if(b.className&&!c.classList.contains(b.className))return!1;if(b.classRegExp){var e=(c.className||"").match(b.classRegExp)||[];if(0===e.length)return!1}if(b.styleProperty&&b.styleProperty.length>0)for(var f=!1,g=Array.isArray(b.styleProperty)?b.styleProperty:[b.styleProperty],h=0,i=g.length;i>h;h++){if(d=a.browser.fixStyleKey(g[h]),c.style[d]){if(!b.styleValue){f=!0;break}if(b.styleValue instanceof RegExp){if(c.style[d].trim().match(b.styleValue).length>0){f=!0;break}}else if(Array.isArray(b.styleValue)){if(b.styleValue.indexOf(c.style[d].trim())){f=!0;break}}else if(b.styleValue===c.style[d].trim().replace(/, /g,",")){f=!0;break}}if(!f)return!1}if(b.attribute){var j=a.dom.getAttributes(c),k=[],l=!1;Array.isArray(b.attribute)?k=b.attribute:k[b.attribute]=b.attributeValue;for(var m in k)if(k.hasOwnProperty(m))if("undefined"==typeof k[m]){if("undefined"!=typeof j[m]){l=!0;break}}else if(j[m]===k[m]){l=!0;break}if(!l)return!1}return!0}}}}(wysihtml5),wysihtml5.dom.getAsDom=function(){var a=function(a,b){var c=b.createElement("div");c.style.display="none",b.body.appendChild(c);try{c.innerHTML=a}catch(d){}return b.body.removeChild(c),c},b=function(a){if(!a._wysihtml5_supportsHTML5Tags){for(var b=0,d=c.length;d>b;b++)a.createElement(c[b]);a._wysihtml5_supportsHTML5Tags=!0}},c=["abbr","article","aside","audio","bdi","canvas","command","datalist","details","figcaption","figure","footer","header","hgroup","keygen","mark","meter","nav","output","progress","rp","rt","ruby","svg","section","source","summary","time","track","video","wbr"];return function(c,d){d=d||document;var e;return"object"==typeof c&&c.nodeType?(e=d.createElement("div"),e.appendChild(c)):wysihtml5.browser.supportsHTML5Tags(d)?(e=d.createElement("div"),e.innerHTML=c):(b(d),e=a(c,d)),e}}(),wysihtml5.dom.getParentElement=function(){return function(a,b,c,d){for(c=c||50;c--&&a&&"BODY"!==a.nodeName&&(!d||a!==d);){if(wysihtml5.dom.domNode(a).test(b))return a;a=a.parentNode}return null}}(),wysihtml5.dom.getStyle=function(){function a(a){return a.replace(c,function(a){return a.charAt(1).toUpperCase()})}var b={"float":"styleFloat"in document.createElement("div").style?"styleFloat":"cssFloat"},c=/\-[a-z]/g;return function(c){return{from:function(d){if(d.nodeType===wysihtml5.ELEMENT_NODE){var e=d.ownerDocument,f=b[c]||a(c),g=d.style,h=d.currentStyle,i=g[f];if(i)return i;if(h)try{return h[f]}catch(j){}var k,l,m=e.defaultView||e.parentWindow,n=("height"===c||"width"===c)&&"TEXTAREA"===d.nodeName;return m.getComputedStyle?(n&&(k=g.overflow,g.overflow="hidden"),l=m.getComputedStyle(d,null).getPropertyValue(c),n&&(g.overflow=k||""),l):void 0}}}}}(),wysihtml5.dom.getTextNodes=function(a,b){var c=[];for(a=a.firstChild;a;a=a.nextSibling)3==a.nodeType?b&&/^\s*$/.test(a.innerText||a.textContent)||c.push(a):c=c.concat(wysihtml5.dom.getTextNodes(a,b));return c},wysihtml5.dom.hasElementWithTagName=function(){function a(a){return a._wysihtml5_identifier||(a._wysihtml5_identifier=c++)}var b={},c=1;return function(c,d){var e=a(c)+":"+d,f=b[e];return f||(f=b[e]=c.getElementsByTagName(d)),f.length>0}}(),function(a){function b(a){return a._wysihtml5_identifier||(a._wysihtml5_identifier=d++)}var c={},d=1;a.dom.hasElementWithClassName=function(d,e){if(!a.browser.supportsNativeGetElementsByClassName())return!!d.querySelector("."+e);var f=b(d)+":"+e,g=c[f];return g||(g=c[f]=d.getElementsByClassName(e)),g.length>0}}(wysihtml5),wysihtml5.dom.insert=function(a){return{after:function(b){b.parentNode.insertBefore(a,b.nextSibling);
},before:function(b){b.parentNode.insertBefore(a,b)},into:function(b){b.appendChild(a)}}},wysihtml5.dom.insertCSS=function(a){return a=a.join("\n"),{into:function(b){var c=b.createElement("style");c.type="text/css",c.styleSheet?c.styleSheet.cssText=a:c.appendChild(b.createTextNode(a));var d=b.querySelector("head link");if(d)return void d.parentNode.insertBefore(c,d);var e=b.querySelector("head");e&&e.appendChild(c)}}},function(a){a.dom.lineBreaks=function(b){function c(a){return"BR"===a.nodeName}function d(b){return c(b)?!0:"block"===a.dom.getStyle("display").from(b)?!0:!1}return{add:function(c){var e=b.ownerDocument,f=a.dom.domNode(b).next({ignoreBlankTexts:!0}),g=a.dom.domNode(b).prev({ignoreBlankTexts:!0});f&&!d(f)&&a.dom.insert(e.createElement("br")).after(b),g&&!d(g)&&a.dom.insert(e.createElement("br")).before(b)},remove:function(d){var e=a.dom.domNode(b).next({ignoreBlankTexts:!0}),f=a.dom.domNode(b).prev({ignoreBlankTexts:!0});e&&c(e)&&e.parentNode.removeChild(e),f&&c(f)&&f.parentNode.removeChild(f)}}}}(wysihtml5),wysihtml5.dom.observe=function(a,b,c){b="string"==typeof b?[b]:b;for(var d,e,f=0,g=b.length;g>f;f++)e=b[f],a.addEventListener?a.addEventListener(e,c,!1):(d=function(b){"target"in b||(b.target=b.srcElement),b.preventDefault=b.preventDefault||function(){this.returnValue=!1},b.stopPropagation=b.stopPropagation||function(){this.cancelBubble=!0},c.call(a,b)},a.attachEvent("on"+e,d));return{stop:function(){for(var e,f=0,g=b.length;g>f;f++)e=b[f],a.removeEventListener?a.removeEventListener(e,c,!1):a.detachEvent("on"+e,d)}}},wysihtml5.dom.parse=function(a,b){function c(a,b){wysihtml5.lang.object(t).merge(s).merge(b.rules).get();var c,f,g,h=b.context||a.ownerDocument||document,i=h.createDocumentFragment(),j="string"==typeof a,k=!1;for(b.clearInternals===!0&&(k=!0),c=j?wysihtml5.dom.getAsDom(a,h):a,t.selectors&&e(c,t.selectors);c.firstChild;)g=c.firstChild,f=d(g,b.cleanUp,k,b.uneditableClass),f&&i.appendChild(f),g!==f&&c.removeChild(g);if(b.unjoinNbsps)for(var l=wysihtml5.dom.getTextNodes(i),m=l.length;m--;)l[m].nodeValue=l[m].nodeValue.replace(/([\S\u00A0])\u00A0/gi,"$1 ");return c.innerHTML="",c.appendChild(i),j?wysihtml5.quirks.getCorrectInnerHTML(c):c}function d(a,b,c,e){var f,g,h,i,j=a.nodeType,k=a.childNodes,l=k.length,m=p[j],n=0;if(e&&1===j&&wysihtml5.dom.hasClass(a,e))return a;if(g=m&&m(a,c),!g){if(g===!1){for(f=a.ownerDocument.createDocumentFragment(),n=l;n--;)k[n]&&(h=d(k[n],b,c,e),h&&(k[n]===h&&n--,f.insertBefore(h,f.firstChild)));return i=wysihtml5.dom.getStyle("display").from(a),""===i&&(i=wysihtml5.lang.array(u).contains(a.tagName)?"block":""),wysihtml5.lang.array(["block","flex","table"]).contains(i)&&f.appendChild(a.ownerDocument.createElement("br")),wysihtml5.lang.array(["div","pre","p","table","td","th","ul","ol","li","dd","dl","footer","header","section","h1","h2","h3","h4","h5","h6"]).contains(a.nodeName.toLowerCase())&&a.parentNode.lastChild!==a&&(a.nextSibling&&3===a.nextSibling.nodeType&&/^\s/.test(a.nextSibling.nodeValue)||f.appendChild(a.ownerDocument.createTextNode(" "))),f.normalize&&f.normalize(),f}return null}for(n=0;l>n;n++)k[n]&&(h=d(k[n],b,c,e),h&&(k[n]===h&&n--,g.appendChild(h)));if(b&&g.nodeName.toLowerCase()===q&&(!g.childNodes.length||/^\s*$/gi.test(g.innerHTML)&&(c||"_wysihtml5-temp-placeholder"!==a.className&&"rangySelectionBoundary"!==a.className)||!g.attributes.length)){for(f=g.ownerDocument.createDocumentFragment();g.firstChild;)f.appendChild(g.firstChild);return f.normalize&&f.normalize(),f}return g.normalize&&g.normalize(),g}function e(a,b){var c,d,e;for(c in b)if(b.hasOwnProperty(c)){wysihtml5.lang.object(b[c]).isFunction()?d=b[c]:"string"==typeof b[c]&&z[b[c]]&&(d=z[b[c]]),e=a.querySelectorAll(c);for(var f=e.length;f--;)d(e[f])}}function f(a,b){var c,d,e,f=t.tags,h=a.nodeName.toLowerCase(),j=a.scopeName;if(a._wysihtml5)return null;if(a._wysihtml5=1,"wysihtml5-temp"===a.className)return null;if(j&&"HTML"!=j&&(h=j+":"+h),"outerHTML"in a&&(wysihtml5.browser.autoClosesUnclosedTags()||"P"!==a.nodeName||"</p>"===a.outerHTML.slice(-4).toLowerCase()||(h="div")),h in f){if(c=f[h],!c||c.remove)return null;if(c.unwrap)return!1;c="string"==typeof c?{rename_tag:c}:c}else{if(!a.firstChild)return null;c={rename_tag:q}}if(c.one_of_type&&!g(a,t,c.one_of_type,b)){if(!c.remove_action)return null;if("unwrap"===c.remove_action)return!1;if("rename"!==c.remove_action)return null;e=c.remove_action_rename_to||q}return d=a.ownerDocument.createElement(e||c.rename_tag||h),m(a,d,c,b),i(a,d,c),a=null,d.normalize&&d.normalize(),d}function g(a,b,c,d){var e,f;if("SPAN"===a.nodeName&&!d&&("_wysihtml5-temp-placeholder"===a.className||"rangySelectionBoundary"===a.className))return!0;for(f in c)if(c.hasOwnProperty(f)&&b.type_definitions&&b.type_definitions[f]&&(e=b.type_definitions[f],h(a,e)))return!0;return!1}function h(a,b){var c,d,e,f,g,h=a.getAttribute("class"),i=a.getAttribute("style");if(b.methods)for(var j in b.methods)if(b.methods.hasOwnProperty(j)&&y[j]&&y[j](a))return!0;if(h&&b.classes){h=h.replace(/^\s+/g,"").replace(/\s+$/g,"").split(r),c=h.length;for(var k=0;c>k;k++)if(b.classes[h[k]])return!0}if(i&&b.styles){i=i.split(";");for(d in b.styles)if(b.styles.hasOwnProperty(d))for(var l=i.length;l--;)if(g=i[l].split(":"),g[0].replace(/\s/g,"").toLowerCase()===d&&(b.styles[d]===!0||1===b.styles[d]||wysihtml5.lang.array(b.styles[d]).contains(g[1].replace(/\s/g,"").toLowerCase())))return!0}if(b.attrs)for(e in b.attrs)if(b.attrs.hasOwnProperty(e)&&(f=wysihtml5.dom.getAttribute(a,e),"string"==typeof f&&f.search(b.attrs[e])>-1))return!0;return!1}function i(a,b,c){var d,e;if(c&&c.keep_styles)for(d in c.keep_styles)if(c.keep_styles.hasOwnProperty(d)){if(e="float"===d?a.style.styleFloat||a.style.cssFloat:a.style[d],c.keep_styles[d]instanceof RegExp&&!c.keep_styles[d].test(e))continue;"float"===d?b.style[a.style.styleFloat?"styleFloat":"cssFloat"]=e:a.style[d]&&(b.style[d]=e)}}function j(a,b){var c=[];for(var d in b)b.hasOwnProperty(d)&&0===d.indexOf(a)&&c.push(d);return c}function k(a,b,c,d){var e,f=wysihtml5.lang.object(c).isFunction()?c:v[c];return f&&(e=f(b,d),"string"==typeof e)?e:!1}function l(a,b){var c,d,e,f=wysihtml5.lang.object(t.attributes||{}).clone(),g=wysihtml5.lang.object(f).merge(wysihtml5.lang.object(b||{}).clone()).get(),h={},i=wysihtml5.dom.getAttributes(a);for(c in g)if(/\*$/.test(c)){e=j(c.slice(0,-1),i);for(var l=0,m=e.length;m>l;l++)d=k(e[l],i[e[l]],g[c],a.nodeName),d!==!1&&(h[e[l]]=d)}else d=k(c,i[c],g[c],a.nodeName),d!==!1&&(h[c]=d);return h}function m(a,b,c,d){var e,f,g,h,i,j={},k=c.set_class,m=c.add_class,n=c.add_style,o=c.set_attributes,p=t.classes,q=0,s=[],u=[],v=[],y=[];if(o&&(j=wysihtml5.lang.object(o).clone()),j=wysihtml5.lang.object(j).merge(l(a,c.check_attributes)).get(),k&&s.push(k),m)for(h in m)i=x[m[h]],i&&(g=i(wysihtml5.dom.getAttribute(a,h)),"string"==typeof g&&s.push(g));if(n)for(h in n)i=w[n[h]],i&&(newStyle=i(wysihtml5.dom.getAttribute(a,h)),"string"==typeof newStyle&&u.push(newStyle));if("string"==typeof p&&"any"===p)if(a.getAttribute("class"))if(t.classes_blacklist){for(y=a.getAttribute("class"),y&&(s=s.concat(y.split(r))),e=s.length;e>q;q++)f=s[q],t.classes_blacklist[f]||v.push(f);v.length&&(j["class"]=wysihtml5.lang.array(v).unique().join(" "))}else j["class"]=a.getAttribute("class");else s&&s.length>0&&(j["class"]=wysihtml5.lang.array(s).unique().join(" "));else{for(d||(p["_wysihtml5-temp-placeholder"]=1,p._rangySelectionBoundary=1,p["wysiwyg-tmp-selected-cell"]=1),y=a.getAttribute("class"),y&&(s=s.concat(y.split(r))),e=s.length;e>q;q++)f=s[q],p[f]&&v.push(f);v.length&&(j["class"]=wysihtml5.lang.array(v).unique().join(" "))}j["class"]&&d&&(j["class"]=j["class"].replace("wysiwyg-tmp-selected-cell",""),/^\s*$/g.test(j["class"])&&delete j["class"]),u.length&&(j.style=wysihtml5.lang.array(u).unique().join(" "));for(h in j)try{b.setAttribute(h,j[h])}catch(z){}j.src&&("undefined"!=typeof j.width&&b.setAttribute("width",j.width),"undefined"!=typeof j.height&&b.setAttribute("height",j.height))}function n(a){var b=a.nextSibling;if(!b||b.nodeType!==wysihtml5.TEXT_NODE){var c=a.data.replace(wysihtml5.INVISIBLE_SPACE_REG_EXP,"");return a.ownerDocument.createTextNode(c)}b.data=a.data.replace(wysihtml5.INVISIBLE_SPACE_REG_EXP,"")+b.data.replace(wysihtml5.INVISIBLE_SPACE_REG_EXP,"")}function o(a){return t.comments?a.ownerDocument.createComment(a.nodeValue):void 0}var p={1:f,3:n,8:o},q="span",r=/\s+/,s={tags:{},classes:{}},t={},u=["ADDRESS","BLOCKQUOTE","CENTER","DIR","DIV","DL","FIELDSET","FORM","H1","H2","H3","H4","H5","H6","ISINDEX","MENU","NOFRAMES","NOSCRIPT","OL","P","PRE","TABLE","UL"],v={url:function(){var a=/^https?:\/\//i;return function(b){return b&&b.match(a)?b.replace(a,function(a){return a.toLowerCase()}):null}}(),src:function(){var a=/^(\/|https?:\/\/)/i;return function(b){return b&&b.match(a)?b.replace(a,function(a){return a.toLowerCase()}):null}}(),href:function(){var a=/^(#|\/|https?:\/\/|mailto:|tel:)/i;return function(b){return b&&b.match(a)?b.replace(a,function(a){return a.toLowerCase()}):null}}(),alt:function(){var a=/[^ a-z0-9_\-]/gi;return function(b,c){return b?b.replace(a,""):"IMG"===c?"":null}}(),numbers:function(){var a=/\D/g;return function(b){return b=(b||"").replace(a,""),b||null}}(),dimension:function(){var a=/\D*(\d+)(\.\d+)?\s?(%)?\D*/;return function(b){return b=(b||"").replace(a,"$1$2$3"),b||null}}(),any:function(){return function(a){return a?a:null}}()},w={align_text:function(){var a={left:"text-align: left;",right:"text-align: right;",center:"text-align: center;"};return function(b){return a[String(b).toLowerCase()]}}()},x={align_img:function(){var a={left:"wysiwyg-float-left",right:"wysiwyg-float-right"};return function(b){return a[String(b).toLowerCase()]}}(),align_text:function(){var a={left:"wysiwyg-text-align-left",right:"wysiwyg-text-align-right",center:"wysiwyg-text-align-center",justify:"wysiwyg-text-align-justify"};return function(b){return a[String(b).toLowerCase()]}}(),clear_br:function(){var a={left:"wysiwyg-clear-left",right:"wysiwyg-clear-right",both:"wysiwyg-clear-both",all:"wysiwyg-clear-both"};return function(b){return a[String(b).toLowerCase()]}}(),size_font:function(){var a={1:"wysiwyg-font-size-xx-small",2:"wysiwyg-font-size-small",3:"wysiwyg-font-size-medium",4:"wysiwyg-font-size-large",5:"wysiwyg-font-size-x-large",6:"wysiwyg-font-size-xx-large",7:"wysiwyg-font-size-xx-large","-":"wysiwyg-font-size-smaller","+":"wysiwyg-font-size-larger"};return function(b){return a[String(b).charAt(0)]}}()},y={has_visible_contet:function(){var a,b=["img","video","picture","br","script","noscript","style","table","iframe","object","embed","audio","svg","input","button","select","textarea","canvas"];return function(c){if(a=(c.innerText||c.textContent).replace(/\s/g,""),a&&a.length>0)return!0;for(var d=b.length;d--;)if(c.querySelector(b[d]))return!0;return c.offsetWidth&&c.offsetWidth>0&&c.offsetHeight&&c.offsetHeight>0?!0:!1}}()},z={unwrap:function(a){wysihtml5.dom.unwrap(a)},remove:function(a){a.parentNode.removeChild(a)}};return c(a,b)},wysihtml5.dom.removeEmptyTextNodes=function(a){for(var b,c=wysihtml5.lang.array(a.childNodes).get(),d=c.length,e=0;d>e;e++)b=c[e],b.nodeType===wysihtml5.TEXT_NODE&&/^[\n\r]*$/.test(b.data)&&b.parentNode.removeChild(b)},wysihtml5.dom.renameElement=function(a,b){for(var c,d=a.ownerDocument.createElement(b);c=a.firstChild;)d.appendChild(c);return wysihtml5.dom.copyAttributes(["align","className"]).from(a).to(d),a.parentNode&&a.parentNode.replaceChild(d,a),d},wysihtml5.dom.replaceWithChildNodes=function(a){if(a.parentNode){if(!a.firstChild)return void a.parentNode.removeChild(a);for(var b=a.ownerDocument.createDocumentFragment();a.firstChild;)b.appendChild(a.firstChild);a.parentNode.replaceChild(b,a),a=b=null}},function(a){function b(b){return"block"===a.getStyle("display").from(b)}function c(a){return"BR"===a.nodeName}function d(a){var b=a.ownerDocument.createElement("br");a.appendChild(b)}function e(a,e){if(a.nodeName.match(/^(MENU|UL|OL)$/)){var f,g,h,i,j,k,l,m=a.ownerDocument,n=m.createDocumentFragment(),o=wysihtml5.dom.domNode(a).prev({ignoreBlankTexts:!0}),p=wysihtml5.dom.domNode(a).next({ignoreBlankTexts:!0}),q=a.lastElementChild||a.lastChild;if(e)for(!o||b(o)||c(o)||d(n);k=a.firstElementChild||a.firstChild;){for(g=k.lastChild,l=k===q;f=k.firstChild;)h=f===g,i=(!l||p&&!b(p))&&h&&!b(f)&&!c(f),n.appendChild(f),i&&d(n);k.parentNode.removeChild(k)}else for(;k=a.firstElementChild||a.firstChild;){if(k.querySelector&&k.querySelector("div, p, ul, ol, menu, blockquote, h1, h2, h3, h4, h5, h6"))for(;f=k.firstChild;)n.appendChild(f);else{for(j=m.createElement("p");f=k.firstChild;)j.appendChild(f);n.appendChild(j)}k.parentNode.removeChild(k)}a.parentNode.replaceChild(n,a)}}a.resolveList=e}(wysihtml5.dom),function(a){var b=document,c=["parent","top","opener","frameElement","frames","localStorage","globalStorage","sessionStorage","indexedDB"],d=["open","close","openDialog","showModalDialog","alert","confirm","prompt","openDatabase","postMessage","XMLHttpRequest","XDomainRequest"],e=["referrer","write","open","close"];a.dom.Sandbox=Base.extend({constructor:function(b,c){this.callback=b||a.EMPTY_FUNCTION,this.config=a.lang.object({}).merge(c).get(),this.config.className||(this.config.className="wysihtml5-sandbox"),this.editableArea=this._createIframe()},insertInto:function(a){"string"==typeof a&&(a=b.getElementById(a)),a.appendChild(this.editableArea)},getIframe:function(){return this.editableArea},getWindow:function(){this._readyError()},getDocument:function(){this._readyError()},destroy:function(){var a=this.getIframe();a.parentNode.removeChild(a)},_readyError:function(){throw new Error("wysihtml5.Sandbox: Sandbox iframe isn't loaded yet")},_createIframe:function(){var c=this,d=b.createElement("iframe");return d.className=this.config.className,a.dom.setAttributes({security:"restricted",allowtransparency:"true",frameborder:0,width:0,height:0,marginwidth:0,marginheight:0}).on(d),a.browser.throwsMixedContentWarningWhenIframeSrcIsEmpty()&&(d.src="javascript:'<html></html>'"),d.onload=function(){d.onreadystatechange=d.onload=null,c._onLoadIframe(d)},d.onreadystatechange=function(){/loaded|complete/.test(d.readyState)&&(d.onreadystatechange=d.onload=null,c._onLoadIframe(d))},d},_onLoadIframe:function(f){if(a.dom.contains(b.documentElement,f)){var g=this,h=f.contentWindow,i=f.contentWindow.document,j=b.characterSet||b.charset||"utf-8",k=this._getHtml({charset:j,stylesheets:this.config.stylesheets});if(i.open("text/html","replace"),i.write(k),i.close(),this.getWindow=function(){return f.contentWindow},this.getDocument=function(){return f.contentWindow.document},h.onerror=function(a,b,c){throw new Error("wysihtml5.Sandbox: "+a,b,c)},!a.browser.supportsSandboxedIframes()){var l,m;for(l=0,m=c.length;m>l;l++)this._unset(h,c[l]);for(l=0,m=d.length;m>l;l++)this._unset(h,d[l],a.EMPTY_FUNCTION);for(l=0,m=e.length;m>l;l++)this._unset(i,e[l]);this._unset(i,"cookie","",!0)}a.polyfills&&a.polyfills(h,i),this.loaded=!0,setTimeout(function(){g.callback(g)},0)}},_getHtml:function(b){var c,d=b.stylesheets,e="",f=0;if(d="string"==typeof d?[d]:d)for(c=d.length;c>f;f++)e+='<link rel="stylesheet" href="'+d[f]+'">';return b.stylesheets=e,a.lang.string('<!DOCTYPE html><html><head><meta charset="#{charset}">#{stylesheets}</head><body></body></html>').interpolate(b)},_unset:function(b,c,d,e){try{b[c]=d}catch(f){}try{b.__defineGetter__(c,function(){return d})}catch(f){}if(e)try{b.__defineSetter__(c,function(){})}catch(f){}if(!a.browser.crashesWhenDefineProperty(c))try{var g={get:function(){return d}};e&&(g.set=function(){}),Object.defineProperty(b,c,g)}catch(f){}}})}(wysihtml5),function(a){var b=document;a.dom.ContentEditableArea=Base.extend({getContentEditable:function(){return this.element},getWindow:function(){return this.element.ownerDocument.defaultView||this.element.ownerDocument.parentWindow},getDocument:function(){return this.element.ownerDocument},constructor:function(b,c,d){this.callback=b||a.EMPTY_FUNCTION,this.config=a.lang.object({}).merge(c).get(),this.config.className||(this.config.className="wysihtml5-sandbox"),d?this.element=this._bindElement(d):this.element=this._createElement()},destroy:function(){},_createElement:function(){var a=b.createElement("div");return a.className=this.config.className,this._loadElement(a),a},_bindElement:function(a){return a.className=a.className?a.className+" wysihtml5-sandbox":"wysihtml5-sandbox",this._loadElement(a,!0),a},_loadElement:function(a,b){var c=this;if(!b){var d=this._getHtml();a.innerHTML=d}this.loaded=!0,setTimeout(function(){c.callback(c)},0)},_getHtml:function(a){return""}})}(wysihtml5),function(){var a={className:"class"};wysihtml5.dom.setAttributes=function(b){return{on:function(c){for(var d in b)c.setAttribute(a[d]||d,b[d])}}}}(),wysihtml5.dom.setStyles=function(a){return{on:function(b){var c=b.style;if("string"==typeof a)return void(c.cssText+=";"+a);for(var d in a)"float"===d?(c.cssFloat=a[d],c.styleFloat=a[d]):c[d]=a[d]}}},function(a){a.simulatePlaceholder=function(b,c,d,e){var f=e||"wysihtml5-placeholder",g=function(){var b=c.element.offsetWidth>0&&c.element.offsetHeight>0;c.hasPlaceholderSet()&&(c.clear(),c.element.focus(),b&&setTimeout(function(){var a=c.selection.getSelection();a.focusNode&&a.anchorNode||c.selection.selectNode(c.element.firstChild||c.element)},0)),c.placeholderSet=!1,a.removeClass(c.element,f)},h=function(){c.isEmpty()&&!c.placeholderSet&&(c.placeholderSet=!0,c.setValue(d,!1),a.addClass(c.element,f))};b.on("set_placeholder",h).on("unset_placeholder",g).on("focus:composer",g).on("paste:composer",g).on("blur:composer",h),h()}}(wysihtml5.dom),function(a){var b=document.documentElement;"textContent"in b?(a.setTextContent=function(a,b){a.textContent=b},a.getTextContent=function(a){return a.textContent}):"innerText"in b?(a.setTextContent=function(a,b){a.innerText=b},a.getTextContent=function(a){return a.innerText}):(a.setTextContent=function(a,b){a.nodeValue=b},a.getTextContent=function(a){return a.nodeValue})}(wysihtml5.dom),wysihtml5.dom.getAttribute=function(a,b){var c=!wysihtml5.browser.supportsGetAttributeCorrectly();b=b.toLowerCase();var d=a.nodeName;if("IMG"==d&&"src"==b&&wysihtml5.dom.isLoadedImage(a)===!0)return a.src;if(c&&"outerHTML"in a){var e=a.outerHTML.toLowerCase(),f=-1!=e.indexOf(" "+b+"=");return f?a.getAttribute(b):null}return a.getAttribute(b)},wysihtml5.dom.getAttributes=function(a){var b,c=!wysihtml5.browser.supportsGetAttributeCorrectly(),d=a.nodeName,e=[];for(b in a.attributes)(a.attributes.hasOwnProperty&&a.attributes.hasOwnProperty(b)||!a.attributes.hasOwnProperty&&Object.prototype.hasOwnProperty.call(a.attributes,b))&&a.attributes[b].specified&&("IMG"==d&&"src"==a.attributes[b].name.toLowerCase()&&wysihtml5.dom.isLoadedImage(a)===!0?e.src=a.src:wysihtml5.lang.array(["rowspan","colspan"]).contains(a.attributes[b].name.toLowerCase())&&c?1!==a.attributes[b].value&&(e[a.attributes[b].name]=a.attributes[b].value):e[a.attributes[b].name]=a.attributes[b].value);return e},wysihtml5.dom.isLoadedImage=function(a){try{return a.complete&&!a.mozMatchesSelector(":-moz-broken")}catch(b){if(a.complete&&"complete"===a.readyState)return!0}},function(a){function b(a,b){for(var c,d=[],e=0,f=a.length;f>e;e++)if(c=a[e].querySelectorAll(b))for(var g=c.length;g--;d.unshift(c[g]));return d}function d(a){a.parentNode.removeChild(a)}function e(a,b){a.parentNode.insertBefore(b,a.nextSibling)}function f(a,b){for(var c=a.nextSibling;1!=c.nodeType;)if(c=c.nextSibling,!b||b==c.tagName.toLowerCase())return c;return null}var g=a.dom,h=function(a){this.el=a,this.isColspan=!1,this.isRowspan=!1,this.firstCol=!0,this.lastCol=!0,this.firstRow=!0,this.lastRow=!0,this.isReal=!0,this.spanCollection=[],this.modified=!1},i=function(a,b){a?(this.cell=a,this.table=g.getParentElement(a,{query:"table"})):b&&(this.table=b,this.cell=this.table.querySelectorAll("th, td")[0])};i.prototype={addSpannedCellToMap:function(a,b,c,d,e,f){for(var g=[],i=c+(f?parseInt(f,10)-1:0),j=d+(e?parseInt(e,10)-1:0),k=c;i>=k;k++){"undefined"==typeof b[k]&&(b[k]=[]);for(var l=d;j>=l;l++)b[k][l]=new h(a),b[k][l].isColspan=e&&parseInt(e,10)>1,b[k][l].isRowspan=f&&parseInt(f,10)>1,b[k][l].firstCol=l==d,b[k][l].lastCol=l==j,b[k][l].firstRow=k==c,b[k][l].lastRow=k==i,b[k][l].isReal=l==d&&k==c,b[k][l].spanCollection=g,g.push(b[k][l])}},setCellAsModified:function(a){if(a.modified=!0,a.spanCollection.length>0)for(var b=0,c=a.spanCollection.length;c>b;b++)a.spanCollection[b].modified=!0},setTableMap:function(){var a,b,c,d,e,f,i,j,k=[],l=this.getTableRows();for(a=0;a<l.length;a++)for(b=l[a],c=this.getRowCells(b),f=0,"undefined"==typeof k[a]&&(k[a]=[]),d=0;d<c.length;d++){for(e=c[d];"undefined"!=typeof k[a][f];)f++;i=g.getAttribute(e,"colspan"),j=g.getAttribute(e,"rowspan"),i||j?(this.addSpannedCellToMap(e,k,a,f,i,j),f+=i?parseInt(i,10):1):(k[a][f]=new h(e),f++)}return this.map=k,k},getRowCells:function(c){var d=this.table.querySelectorAll("table"),e=d?b(d,"th, td"):[],f=c.querySelectorAll("th, td"),g=e.length>0?a.lang.array(f).without(e):f;return g},getTableRows:function(){var c=this.table.querySelectorAll("table"),d=c?b(c,"tr"):[],e=this.table.querySelectorAll("tr"),f=d.length>0?a.lang.array(e).without(d):e;return f},getMapIndex:function(a){for(var b=this.map.length,c=this.map&&this.map[0]?this.map[0].length:0,d=0;b>d;d++)for(var e=0;c>e;e++)if(this.map[d][e].el===a)return{row:d,col:e};return!1},getElementAtIndex:function(a){return this.setTableMap(),this.map[a.row]&&this.map[a.row][a.col]&&this.map[a.row][a.col].el?this.map[a.row][a.col].el:null},getMapElsTo:function(a){var b=[];if(this.setTableMap(),this.idx_start=this.getMapIndex(this.cell),this.idx_end=this.getMapIndex(a),this.idx_start.row>this.idx_end.row||this.idx_start.row==this.idx_end.row&&this.idx_start.col>this.idx_end.col){var c=this.idx_start;this.idx_start=this.idx_end,this.idx_end=c}if(this.idx_start.col>this.idx_end.col){var d=this.idx_start.col;this.idx_start.col=this.idx_end.col,this.idx_end.col=d}if(null!=this.idx_start&&null!=this.idx_end)for(var e=this.idx_start.row,f=this.idx_end.row;f>=e;e++)for(var g=this.idx_start.col,h=this.idx_end.col;h>=g;g++)b.push(this.map[e][g].el);return b},orderSelectionEnds:function(a){if(this.setTableMap(),this.idx_start=this.getMapIndex(this.cell),this.idx_end=this.getMapIndex(a),this.idx_start.row>this.idx_end.row||this.idx_start.row==this.idx_end.row&&this.idx_start.col>this.idx_end.col){var b=this.idx_start;this.idx_start=this.idx_end,this.idx_end=b}if(this.idx_start.col>this.idx_end.col){var c=this.idx_start.col;this.idx_start.col=this.idx_end.col,this.idx_end.col=c}return{start:this.map[this.idx_start.row][this.idx_start.col].el,end:this.map[this.idx_end.row][this.idx_end.col].el}},createCells:function(a,b,c){for(var d,e=this.table.ownerDocument,f=e.createDocumentFragment(),g=0;b>g;g++){if(d=e.createElement(a),c)for(var h in c)c.hasOwnProperty(h)&&d.setAttribute(h,c[h]);d.appendChild(document.createTextNode(" ")),f.appendChild(d)}return f},correctColIndexForUnreals:function(a,b){for(var c=this.map[b],d=-1,e=0;a>e;e++)c[e].isReal&&d++;return d},getLastNewCellOnRow:function(a,b){for(var c,d,e=this.getRowCells(a),f=0,g=e.length;g>f;f++)if(c=e[f],d=this.getMapIndex(c),d===!1||"undefined"!=typeof b&&d.row!=b)return c;return null},removeEmptyTable:function(){var a=this.table.querySelectorAll("td, th");return a&&0!=a.length?!1:(d(this.table),!0)},splitRowToCells:function(a){if(a.isColspan){var b=parseInt(g.getAttribute(a.el,"colspan")||1,10),c=a.el.tagName.toLowerCase();if(b>1){var d=this.createCells(c,b-1);e(a.el,d)}a.el.removeAttribute("colspan")}},getRealRowEl:function(a,b){var c=null,d=null;b=b||this.idx;for(var e=0,f=this.map[b.row].length;f>e;e++)if(d=this.map[b.row][e],d.isReal&&(c=g.getParentElement(d.el,{query:"tr"})))return c;return null===c&&a&&(c=g.getParentElement(this.map[b.row][b.col].el,{query:"tr"})||null),c},injectRowAt:function(a,b,c,d,f){var h=this.getRealRowEl(!1,{row:a,col:b}),i=this.createCells(d,c);if(h){var j=this.correctColIndexForUnreals(b,a);j>=0?e(this.getRowCells(h)[j],i):h.insertBefore(i,h.firstChild)}else{var k=this.table.ownerDocument.createElement("tr");k.appendChild(i),e(g.getParentElement(f.el,{query:"tr"}),k)}},canMerge:function(a){if(this.to=a,this.setTableMap(),this.idx_start=this.getMapIndex(this.cell),this.idx_end=this.getMapIndex(this.to),this.idx_start.row>this.idx_end.row||this.idx_start.row==this.idx_end.row&&this.idx_start.col>this.idx_end.col){var b=this.idx_start;this.idx_start=this.idx_end,this.idx_end=b}if(this.idx_start.col>this.idx_end.col){var c=this.idx_start.col;this.idx_start.col=this.idx_end.col,this.idx_end.col=c}for(var d=this.idx_start.row,e=this.idx_end.row;e>=d;d++)for(var f=this.idx_start.col,g=this.idx_end.col;g>=f;f++)if(this.map[d][f].isColspan||this.map[d][f].isRowspan)return!1;return!0},decreaseCellSpan:function(a,b){var c=parseInt(g.getAttribute(a.el,b),10)-1;c>=1?a.el.setAttribute(b,c):(a.el.removeAttribute(b),"colspan"==b&&(a.isColspan=!1),"rowspan"==b&&(a.isRowspan=!1),a.firstCol=!0,a.lastCol=!0,a.firstRow=!0,a.lastRow=!0,a.isReal=!0)},removeSurplusLines:function(){var a,b,c,e,f,h,i;if(this.setTableMap(),this.map){for(c=0,e=this.map.length;e>c;c++){for(a=this.map[c],i=!0,f=0,h=a.length;h>f;f++)if(b=a[f],!(g.getAttribute(b.el,"rowspan")&&parseInt(g.getAttribute(b.el,"rowspan"),10)>1&&b.firstRow!==!0)){i=!1;break}if(i)for(f=0;h>f;f++)this.decreaseCellSpan(a[f],"rowspan")}var j=this.getTableRows();for(c=0,e=j.length;e>c;c++)a=j[c],0==a.childNodes.length&&/^\s*$/.test(a.textContent||a.innerText)&&d(a)}},fillMissingCells:function(){var a=0,b=0,c=null;if(this.setTableMap(),this.map){a=this.map.length;for(var d=0;a>d;d++)this.map[d].length>b&&(b=this.map[d].length);for(var f=0;a>f;f++)for(var g=0;b>g;g++)this.map[f]&&!this.map[f][g]&&g>0&&(this.map[f][g]=new h(this.createCells("td",1)),c=this.map[f][g-1],c&&c.el&&c.el.parent&&e(this.map[f][g-1].el,this.map[f][g].el))}},rectify:function(){return this.removeEmptyTable()?!1:(this.removeSurplusLines(),this.fillMissingCells(),!0)},unmerge:function(){if(this.rectify()&&(this.setTableMap(),this.idx=this.getMapIndex(this.cell),this.idx)){var a=this.map[this.idx.row][this.idx.col],b=g.getAttribute(a.el,"colspan")?parseInt(g.getAttribute(a.el,"colspan"),10):1,c=a.el.tagName.toLowerCase();if(a.isRowspan){var d=parseInt(g.getAttribute(a.el,"rowspan"),10);if(d>1)for(var e=1,f=d-1;f>=e;e++)this.injectRowAt(this.idx.row+e,this.idx.col,b,c,a);a.el.removeAttribute("rowspan")}this.splitRowToCells(a)}},merge:function(a){if(this.rectify())if(this.canMerge(a)){for(var b=this.idx_end.row-this.idx_start.row+1,c=this.idx_end.col-this.idx_start.col+1,e=this.idx_start.row,f=this.idx_end.row;f>=e;e++)for(var g=this.idx_start.col,h=this.idx_end.col;h>=g;g++)e==this.idx_start.row&&g==this.idx_start.col?(b>1&&this.map[e][g].el.setAttribute("rowspan",b),c>1&&this.map[e][g].el.setAttribute("colspan",c)):(/^\s*<br\/?>\s*$/.test(this.map[e][g].el.innerHTML.toLowerCase())||(this.map[this.idx_start.row][this.idx_start.col].el.innerHTML+=" "+this.map[e][g].el.innerHTML),d(this.map[e][g].el));this.rectify()}else window.console&&console.log("Do not know how to merge allready merged cells.")},collapseCellToNextRow:function(a){var b=this.getMapIndex(a.el),c=b.row+1,d={row:c,col:b.col};if(c<this.map.length){var f=this.getRealRowEl(!1,d);if(null!==f){var h=this.correctColIndexForUnreals(d.col,d.row);if(h>=0)e(this.getRowCells(f)[h],a.el);else{var i=this.getLastNewCellOnRow(f,c);null!==i?e(i,a.el):f.insertBefore(a.el,f.firstChild)}parseInt(g.getAttribute(a.el,"rowspan"),10)>2?a.el.setAttribute("rowspan",parseInt(g.getAttribute(a.el,"rowspan"),10)-1):a.el.removeAttribute("rowspan")}}},removeRowCell:function(a){a.isReal?a.isRowspan?this.collapseCellToNextRow(a):d(a.el):parseInt(g.getAttribute(a.el,"rowspan"),10)>2?a.el.setAttribute("rowspan",parseInt(g.getAttribute(a.el,"rowspan"),10)-1):a.el.removeAttribute("rowspan")},getRowElementsByCell:function(){var a=[];if(this.setTableMap(),this.idx=this.getMapIndex(this.cell),this.idx!==!1)for(var b=this.map[this.idx.row],c=0,d=b.length;d>c;c++)b[c].isReal&&a.push(b[c].el);return a},getColumnElementsByCell:function(){var a=[];if(this.setTableMap(),this.idx=this.getMapIndex(this.cell),this.idx!==!1)for(var b=0,c=this.map.length;c>b;b++)this.map[b][this.idx.col]&&this.map[b][this.idx.col].isReal&&a.push(this.map[b][this.idx.col].el);return a},removeRow:function(){var a=g.getParentElement(this.cell,{query:"tr"});if(a){if(this.setTableMap(),this.idx=this.getMapIndex(this.cell),this.idx!==!1)for(var b=this.map[this.idx.row],c=0,e=b.length;e>c;c++)b[c].modified||(this.setCellAsModified(b[c]),this.removeRowCell(b[c]));d(a)}},removeColCell:function(a){a.isColspan?parseInt(g.getAttribute(a.el,"colspan"),10)>2?a.el.setAttribute("colspan",parseInt(g.getAttribute(a.el,"colspan"),10)-1):a.el.removeAttribute("colspan"):a.isReal&&d(a.el)},removeColumn:function(){if(this.setTableMap(),this.idx=this.getMapIndex(this.cell),this.idx!==!1)for(var a=0,b=this.map.length;b>a;a++)this.map[a][this.idx.col].modified||(this.setCellAsModified(this.map[a][this.idx.col]),this.removeColCell(this.map[a][this.idx.col]))},remove:function(a){if(this.rectify()){switch(a){case"row":this.removeRow();break;case"column":this.removeColumn()}this.rectify()}},addRow:function(a){var b=this.table.ownerDocument;if(this.setTableMap(),this.idx=this.getMapIndex(this.cell),"below"==a&&g.getAttribute(this.cell,"rowspan")&&(this.idx.row=this.idx.row+parseInt(g.getAttribute(this.cell,"rowspan"),10)-1),this.idx!==!1){for(var c=this.map[this.idx.row],d=b.createElement("tr"),f=0,h=c.length;h>f;f++)c[f].modified||(this.setCellAsModified(c[f]),this.addRowCell(c[f],d,a));switch(a){case"below":e(this.getRealRowEl(!0),d);break;case"above":var i=g.getParentElement(this.map[this.idx.row][this.idx.col].el,{query:"tr"});i&&i.parentNode.insertBefore(d,i)}}},addRowCell:function(a,b,d){var e=a.isColspan?{colspan:g.getAttribute(a.el,"colspan")}:null;a.isReal?"above"!=d&&a.isRowspan?a.el.setAttribute("rowspan",parseInt(g.getAttribute(a.el,"rowspan"),10)+1):b.appendChild(this.createCells("td",1,e)):"above"!=d&&a.isRowspan&&a.lastRow?b.appendChild(this.createCells("td",1,e)):c.isRowspan&&a.el.attr("rowspan",parseInt(g.getAttribute(a.el,"rowspan"),10)+1)},add:function(a){this.rectify()&&(("below"==a||"above"==a)&&this.addRow(a),("before"==a||"after"==a)&&this.addColumn(a))},addColCell:function(a,b,d){var f,h=a.el.tagName.toLowerCase();switch(d){case"before":f=!a.isColspan||a.firstCol;break;case"after":f=!a.isColspan||a.lastCol||a.isColspan&&c.el==this.cell}if(f){switch(d){case"before":a.el.parentNode.insertBefore(this.createCells(h,1),a.el);break;case"after":e(a.el,this.createCells(h,1))}a.isRowspan&&this.handleCellAddWithRowspan(a,b+1,d)}else a.el.setAttribute("colspan",parseInt(g.getAttribute(a.el,"colspan"),10)+1)},addColumn:function(a){var b,c;if(this.setTableMap(),this.idx=this.getMapIndex(this.cell),"after"==a&&g.getAttribute(this.cell,"colspan")&&(this.idx.col=this.idx.col+parseInt(g.getAttribute(this.cell,"colspan"),10)-1),this.idx!==!1)for(var d=0,e=this.map.length;e>d;d++)b=this.map[d],b[this.idx.col]&&(c=b[this.idx.col],c.modified||(this.setCellAsModified(c),this.addColCell(c,d,a)))},handleCellAddWithRowspan:function(a,b,c){for(var d,h,i,j=parseInt(g.getAttribute(this.cell,"rowspan"),10)-1,k=g.getParentElement(a.el,{query:"tr"}),l=a.el.tagName.toLowerCase(),m=this.table.ownerDocument,n=0;j>n;n++)if(d=this.correctColIndexForUnreals(this.idx.col,b+n),k=f(k,"tr"))if(d>0)switch(c){case"before":h=this.getRowCells(k),d>0&&this.map[b+n][this.idx.col].el!=h[d]&&d==h.length-1?e(h[d],this.createCells(l,1)):h[d].parentNode.insertBefore(this.createCells(l,1),h[d]);break;case"after":e(this.getRowCells(k)[d],this.createCells(l,1))}else k.insertBefore(this.createCells(l,1),k.firstChild);else i=m.createElement("tr"),i.appendChild(this.createCells(l,1)),this.table.appendChild(i)}},g.table={getCellsBetween:function(a,b){var c=new i(a);return c.getMapElsTo(b);
},addCells:function(a,b){var c=new i(a);c.add(b)},removeCells:function(a,b){var c=new i(a);c.remove(b)},mergeCellsBetween:function(a,b){var c=new i(a);c.merge(b)},unmergeCell:function(a){var b=new i(a);b.unmerge()},orderSelectionEnds:function(a,b){var c=new i(a);return c.orderSelectionEnds(b)},indexOf:function(a){var b=new i(a);return b.setTableMap(),b.getMapIndex(a)},findCell:function(a,b){var c=new i(null,a);return c.getElementAtIndex(b)},findRowByCell:function(a){var b=new i(a);return b.getRowElementsByCell()},findColumnByCell:function(a){var b=new i(a);return b.getColumnElementsByCell()},canMerge:function(a,b){var c=new i(a);return c.canMerge(b)}}}(wysihtml5),wysihtml5.dom.query=function(a,b){var c,d=[];a.nodeType&&(a=[a]);for(var e=0,f=a.length;f>e;e++)if(c=a[e].querySelectorAll(b))for(var g=c.length;g--;d.unshift(c[g]));return d},wysihtml5.dom.compareDocumentPosition=function(){var a=document.documentElement;return a.compareDocumentPosition?function(a,b){return a.compareDocumentPosition(b)}:function(a,b){var c,d;if(c=9===a.nodeType?a:a.ownerDocument,d=9===b.nodeType?b:b.ownerDocument,a===b)return 0;if(a===b.ownerDocument)return 20;if(a.ownerDocument===b)return 10;if(c!==d)return 1;if(2===a.nodeType&&a.childNodes&&-1!==wysihtml5.lang.array(a.childNodes).indexOf(b))return 20;if(2===b.nodeType&&b.childNodes&&-1!==wysihtml5.lang.array(b.childNodes).indexOf(a))return 10;for(var e=a,f=[],g=null;e;){if(e==b)return 10;f.push(e),e=e.parentNode}for(e=b,g=null;e;){if(e==a)return 20;var h=wysihtml5.lang.array(f).indexOf(e);if(-1!==h){var i=f[h],j=wysihtml5.lang.array(i.childNodes).indexOf(f[h-1]),k=wysihtml5.lang.array(i.childNodes).indexOf(g);return j>k?2:4}g=e,e=e.parentNode}return 1}}(),wysihtml5.dom.unwrap=function(a){var b=[];if(a.parentNode){for(;a.lastChild;)b.unshift(a.lastChild),wysihtml5.dom.insert(a.lastChild).after(a);a.parentNode.removeChild(a)}return b},wysihtml5.dom.getPastedHtml=function(a){var b;return wysihtml5.browser.supportsModernPaste()&&a.clipboardData&&(wysihtml5.lang.array(a.clipboardData.types).contains("text/html")?b=a.clipboardData.getData("text/html"):wysihtml5.lang.array(a.clipboardData.types).contains("text/plain")&&(b=wysihtml5.lang.string(a.clipboardData.getData("text/plain")).escapeHTML(!0,!0))),b},wysihtml5.dom.getPastedHtmlWithDiv=function(a,b){var c=a.selection.getBookmark(),d=a.element.ownerDocument,e=d.createElement("DIV"),f=a.getScrollPos();d.body.appendChild(e),e.style.width="1px",e.style.height="1px",e.style.overflow="hidden",e.style.position="absolute",e.style.top=f.y+"px",e.style.left=f.x+"px",e.setAttribute("contenteditable","true"),e.focus(),setTimeout(function(){var d;a.selection.setBookmark(c),d=e.innerHTML,d&&/^<br\/?>$/i.test(d.trim())&&(d=!1),b(d),e.parentNode.removeChild(e)},0)},wysihtml5.dom.removeInvisibleSpaces=function(a){for(var b=wysihtml5.dom.getTextNodes(a),c=b.length;c--;)b[c].nodeValue=b[c].nodeValue.replace(wysihtml5.INVISIBLE_SPACE_REG_EXP,"")},wysihtml5.quirks.cleanPastedHTML=function(){var a=function(a){var b=wysihtml5.lang.string(a).trim(),c=b.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&");return new RegExp("^((?!^"+c+"$).)*$","i")},b=function(b,c){var d,e,f=wysihtml5.lang.object(b).clone(!0);for(d in f.tags)if(f.tags.hasOwnProperty(d)&&f.tags[d].keep_styles)for(e in f.tags[d].keep_styles)f.tags[d].keep_styles.hasOwnProperty(e)&&c[e]&&(f.tags[d].keep_styles[e]=a(c[e]));return f},c=function(a,b){var c;if(!a)return null;for(var d=0,e=a.length;e>d;d++)if(a[d].condition||(c=a[d].set),a[d].condition&&a[d].condition.test(b))return a[d].set;return c};return function(a,d){var e,f={color:wysihtml5.dom.getStyle("color").from(d.referenceNode),fontSize:wysihtml5.dom.getStyle("font-size").from(d.referenceNode)},g=b(c(d.rules,a)||{},f);return e=wysihtml5.dom.parse(a,{rules:g,cleanUp:!0,context:d.referenceNode.ownerDocument,uneditableClass:d.uneditableClass,clearInternals:!0,unjoinNbsps:!0})}}(),wysihtml5.quirks.ensureProperClearing=function(){var a=function(){var a=this;setTimeout(function(){var b=a.innerHTML.toLowerCase();("<p>&nbsp;</p>"==b||"<p>&nbsp;</p><p>&nbsp;</p>"==b)&&(a.innerHTML="")},0)};return function(b){wysihtml5.dom.observe(b.element,["cut","keydown"],a)}}(),function(a){var b="%7E";a.quirks.getCorrectInnerHTML=function(c){var d=c.innerHTML;if(-1===d.indexOf(b))return d;var e,f,g,h,i=c.querySelectorAll("[href*='~'], [src*='~']");for(h=0,g=i.length;g>h;h++)e=i[h].href||i[h].src,f=a.lang.string(e).replace("~").by(b),d=a.lang.string(d).replace(f).by(e);return d}}(wysihtml5),function(a){var b="wysihtml5-quirks-redraw";a.quirks.redraw=function(c){a.dom.addClass(c,b),a.dom.removeClass(c,b);try{var d=c.ownerDocument;d.execCommand("italic",!1,null),d.execCommand("italic",!1,null)}catch(e){}}}(wysihtml5),wysihtml5.quirks.tableCellsSelection=function(a,b){function c(){return a.addEventListener("mousedown",n),l}function d(c){l.start=c,l.end=c,l.cells=[c],l.table=k.getParentElement(l.start,{query:"table"},!1,a),l.table&&(e(),k.addClass(c,m),a.addEventListener("mousemove",g),a.addEventListener("mouseup",h),b.fire("tableselectstart").fire("tableselectstart:composer"))}function e(){if(a){var b=a.querySelectorAll("."+m);if(b.length>0)for(var c=0;c<b.length;c++)k.removeClass(b[c],m)}}function f(a){for(var b=0;b<a.length;b++)k.addClass(a[b],m)}function g(c){var d,g=null,h=k.getParentElement(c.target,{query:"td, th"},!1,a);h&&l.table&&l.start&&(g=k.getParentElement(h,{query:"table"},!1,a),g&&g===l.table&&(e(),d=l.end,l.end=h,l.cells=k.table.getCellsBetween(l.start,h),l.cells.length>1&&b.composer.selection.deselect(),f(l.cells),l.end!==d&&b.fire("tableselectchange").fire("tableselectchange:composer")))}function h(c){a.removeEventListener("mousemove",g),a.removeEventListener("mouseup",h),b.fire("tableselect").fire("tableselect:composer"),setTimeout(function(){i()},0)}function i(){a.ownerDocument.addEventListener("click",o)}function j(c,d){l.start=c,l.end=d,l.table=k.getParentElement(l.start,{query:"table"},!1,a),selectedCells=k.table.getCellsBetween(l.start,l.end),f(selectedCells),i(),b.fire("tableselect").fire("tableselect:composer")}var k=wysihtml5.dom,l={table:null,start:null,end:null,cells:null,select:j},m="wysiwyg-tmp-selected-cell",n=function(b){var c=wysihtml5.dom.getParentElement(b.target,{query:"td, th"},!1,a);c&&d(c)},o=function(c){a.ownerDocument.removeEventListener("click",o),k.getParentElement(c.target,{query:"table"},!1,a)!=l.table&&(e(),l.table=null,l.start=null,l.end=null,b.fire("tableunselect").fire("tableunselect:composer"))};return c()},function(a){function b(a){var b,c;for(b in d)if(d.hasOwnProperty(b)&&(c=d[b],c.regex.test(a)))return c}function c(a){var c=b(a);return c?c.name:void 0}var d={rgba:{regex:/^rgba\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*([\d\.]+)\s*\)/i,name:"rgba"},rgb:{regex:/^rgb\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*\)/i,name:"rgb"},hex6:{regex:/^#([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])/i,name:"hex",radix:16},hex3:{regex:/^#([0-9a-f])([0-9a-f])([0-9a-f])/i,name:"hex",radix:16}},e=function(a){return new RegExp("(^|\\s|;)"+a+"\\s*:\\s*[^;$]+","gi")};a.quirks.styleParser={getColorParseMethod:b,getColorFormat:c,parseColor:function(c,f){var g,h,i,j,k,l=c;if(f){if(g=e(f),!(h=c.match(g)))return!1;h=h.pop().split(":")[1],l=a.lang.string(h).trim()}return(i=b(l))&&(j=l.match(i.regex))?(k=i.radix||10,i===d.hex3?(j.shift(),j.push(1),a.lang.array(j).map(function(a,b){return 3>b?parseInt(a,k)*k+parseInt(a,k):parseFloat(a)})):(j.shift(),j[3]||j.push(1),a.lang.array(j).map(function(a,b){return 3>b?parseInt(a,k):parseFloat(a)}))):!1},unparseColor:function(a,b){var c=16;return"hex"===b?(a[0].toString(c)+a[1].toString(c)+a[2].toString(c)).toUpperCase():"hash"===b?"#"+(a[0].toString(c)+a[1].toString(c)+a[2].toString(c)).toUpperCase():"rgb"===b?"rgb("+a[0]+","+a[1]+","+a[2]+")":"rgba"===b?"rgba("+a[0]+","+a[1]+","+a[2]+","+a[3]+")":"csv"===b?a[0]+","+a[1]+","+a[2]+","+a[3]:a[3]&&1!==a[3]?"rgba("+a[0]+","+a[1]+","+a[2]+","+a[3]+")":"rgb("+a[0]+","+a[1]+","+a[2]+")"},parseFontSize:function(b){var c=b.match(e("font-size"));return c?a.lang.string(c[c.length-1].split(":")[1]).trim():!1}}}(wysihtml5),function(a){function b(a){var b=0;if(a.parentNode)do b+=a.offsetTop||0,a=a.offsetParent;while(a);return b}function c(a,b){for(var c=0;b!==a;)if(c++,b=b.parentNode,!b)throw new Error("not a descendant of ancestor!");return c}function d(b){var c=document.createElement("span"),d=function(a){b.removeEventListener("mouseup",d),b.removeEventListener("keydown",d),b.removeEventListener("touchstart",d),b.removeEventListener("focus",d),b.removeEventListener("blur",d),b.removeEventListener("paste",e),b.removeEventListener("drop",e),b.removeEventListener("beforepaste",e),c&&c.parentNode&&c.parentNode.removeChild(c)},e=function(a){c&&c.parentNode&&setTimeout(d,0)};return c.appendChild(document.createTextNode(a.INVISIBLE_SPACE)),c.className="_wysihtml5-temp-caret-fix",c.style.display="block",c.style.minWidth="1px",c.style.height="0px",b.addEventListener("mouseup",d),b.addEventListener("keydown",d),b.addEventListener("touchstart",d),b.addEventListener("focus",d),b.addEventListener("blur",d),b.addEventListener("paste",e),b.addEventListener("drop",e),b.addEventListener("beforepaste",e),c}function e(a){if(!a.canSurroundContents())for(var b=a.commonAncestorContainer,d=c(b,a.startContainer),e=c(b,a.endContainer);!a.canSurroundContents();)d>e?(a.setStartBefore(a.startContainer),d=c(b,a.startContainer)):(a.setEndAfter(a.endContainer),e=c(b,a.endContainer))}var f=a.dom;a.Selection=Base.extend({constructor:function(a,b,c){window.rangy.init(),this.editor=a,this.composer=a.composer,this.doc=this.composer.doc,this.win=this.composer.win,this.contain=b,this.unselectableClass=c||!1},getBookmark:function(){var a=this.getRange();return a&&a.cloneRange()},setBookmark:function(a){a&&this.setSelection(a)},setBefore:function(a){var b=rangy.createRange(this.doc);return b.setStartBefore(a),b.setEndBefore(a),this.setSelection(b)},createTemporaryCaretSpaceAfter:function(b){var c=this.doc.createElement("span"),d=this.doc.createTextNode(a.INVISIBLE_SPACE),e=function(b){var d;this.contain.removeEventListener("mouseup",e),this.contain.removeEventListener("keydown",g),this.contain.removeEventListener("touchstart",e),this.contain.removeEventListener("focus",e),this.contain.removeEventListener("blur",e),this.contain.removeEventListener("paste",f),this.contain.removeEventListener("drop",f),this.contain.removeEventListener("beforepaste",f),c&&c.parentNode&&(c.innerHTML=c.innerHTML.replace(a.INVISIBLE_SPACE_REG_EXP,""),/[^\s]+/.test(c.innerHTML)?(d=c.lastChild,a.dom.unwrap(c),this.setAfter(d)):c.parentNode.removeChild(c))}.bind(this),f=function(a){c&&c.parentNode&&setTimeout(e,0)},g=function(a){8===a.which||91===a.which||17===a.which||86===a.which&&(a.ctrlKey||a.metaKey)||e()};return c.className="_wysihtml5-temp-caret-fix",c.style.position="absolute",c.style.display="block",c.style.minWidth="1px",c.style.zIndex="99999",c.appendChild(d),b.parentNode.insertBefore(c,b.nextSibling),this.setBefore(d),this.contain.addEventListener("mouseup",e),this.contain.addEventListener("keydown",g),this.contain.addEventListener("touchstart",e),this.contain.addEventListener("focus",e),this.contain.addEventListener("blur",e),this.contain.addEventListener("paste",f),this.contain.addEventListener("drop",f),this.contain.addEventListener("beforepaste",f),c},setAfter:function(b,c,d){var e,f=this.win,g=rangy.createRange(this.doc),h=function(){var d=b.parentNode,g=d?d.childNodes[d.childNodes.length-1]:null;if(!e||g===b&&1===b.nodeType&&"block"===f.getComputedStyle(b).display)if(c){var h=this.doc.createTextNode(a.INVISIBLE_SPACE);b.parentNode.insertBefore(h,b.nextSibling),this.selectNode(h),setTimeout(function(){h&&h.parentNode&&h.parentNode.removeChild(h)},0)}else this.createTemporaryCaretSpaceAfter(b)}.bind(this);if(g.setStartAfter(b),g.setEndAfter(b),document.activeElement&&document.activeElement===this.composer.element)e=this.setSelection(g),h(),d&&d(e);else{var i=this.composer.getScrollPos();this.composer.element.focus(),this.composer.setScrollPos(i),setTimeout(function(){e=this.setSelection(g),h(),d&&d(e)}.bind(this),0)}},selectNode:function(b,c){var d=rangy.createRange(this.doc),e=b.nodeType===a.ELEMENT_NODE,g="canHaveHTML"in b?b.canHaveHTML:"IMG"!==b.nodeName,h=e?b.innerHTML:b.data,i=""===h||h===a.INVISIBLE_SPACE,j=f.getStyle("display").from(b),k="block"===j||"list-item"===j;if(i&&e&&g&&!c)try{b.innerHTML=a.INVISIBLE_SPACE}catch(l){}g?d.selectNodeContents(b):d.selectNode(b),g&&i&&e?d.collapse(k):g&&i&&(d.setStartAfter(b),d.setEndAfter(b)),this.setSelection(d)},getSelectedNode:function(a){var b,c;return a&&this.doc.selection&&"Control"===this.doc.selection.type&&(c=this.doc.selection.createRange(),c&&c.length)?c.item(0):(b=this.getSelection(this.doc),b.focusNode===b.anchorNode?b.focusNode:(c=this.getRange(this.doc),c?c.commonAncestorContainer:this.doc.body))},fixSelBorders:function(){var a=this.getRange();e(a),this.setSelection(a)},getSelectedOwnNodes:function(a){for(var b=this.getOwnRanges(),c=[],d=0,e=b.length;e>d;d++)c.push(b[d].commonAncestorContainer||this.doc.body);return c},findNodesInSelection:function(b){for(var c,d=this.getOwnRanges(),e=[],f=0,g=d.length;g>f;f++)c=d[f].getNodes([1],function(c){return a.lang.array(b).contains(c.nodeName)}),e=e.concat(c);return e},filterElements:function(a){for(var b,c=this.getOwnRanges(),d=[],e=0,f=c.length;f>e;e++)b=c[e].getNodes([1],function(b){return a(b,c[e])}),d=d.concat(b);return d},containsUneditable:function(){for(var a=this.getOwnUneditables(),b=this.getSelection(),c=0,d=a.length;d>c;c++)if(b.containsNode(a[c]))return!0;return!1},deleteContents:function(){var a=this.getRange();this.deleteRangeContents(a),this.setSelection(a)},deleteRangeContents:function(b){var c,d,e,f;if(this.unselectableClass){(c=a.dom.getParentElement(b.startContainer,{query:"."+this.unselectableClass},!1,this.contain))&&b.setStartBefore(c),(d=a.dom.getParentElement(b.endContainer,{query:"."+this.unselectableClass},!1,this.contain))&&b.setEndAfter(d),e=b.getNodes([1],function(b){return a.dom.hasClass(b,this.unselectableClass)}.bind(this));for(var g=e.length;g--;)try{f=new CustomEvent("wysihtml5:uneditable:delete"),e[g].dispatchEvent(f)}catch(h){}}b.deleteContents()},getPreviousNode:function(b,c){var d;if(!b){var e=this.getSelection();b=e.anchorNode}if(b===this.contain)return!1;var f,g=b.previousSibling;return g===this.contain?!1:(g&&3!==g.nodeType&&1!==g.nodeType?g=this.getPreviousNode(g,c):g&&3===g.nodeType&&/^\s*$/.test(g.textContent)?g=this.getPreviousNode(g,c):c&&g&&1===g.nodeType?(d=a.dom.getStyle("display").from(g),a.lang.array(["BR","HR","IMG"]).contains(g.nodeName)||a.lang.array(["block","inline-block","flex","list-item","table"]).contains(d)||!/^[\s]*$/.test(g.innerHTML)||(g=this.getPreviousNode(g,c))):g||b===this.contain||(f=b.parentNode,f!==this.contain&&(g=this.getPreviousNode(f,c))),g!==this.contain?g:!1)},getSelectionParentsByTag:function(b){for(var c,d=this.getSelectedOwnNodes(),e=[],f=0,g=d.length;g>f;f++)c=d[f].nodeName&&"LI"===d[f].nodeName?d[f]:a.dom.getParentElement(d[f],{query:"li"},!1,this.contain),c&&e.push(c);return e.length?e:null},getRangeToNodeEnd:function(){if(this.isCollapsed()){var a=this.getRange(),b=a.startContainer,c=a.startOffset,d=rangy.createRange(this.doc);return d.selectNodeContents(b),d.setStart(b,c),d}},caretIsLastInSelection:function(){var a=(rangy.createRange(this.doc),this.getSelection(),this.getRangeToNodeEnd().cloneContents()),b=a.textContent;return/^\s*$/.test(b)},caretIsFirstInSelection:function(){var b=rangy.createRange(this.doc),c=this.getSelection(),d=this.getRange(),e=d.startContainer;return e?e.nodeType===a.TEXT_NODE?this.isCollapsed()&&e.nodeType===a.TEXT_NODE&&/^\s*$/.test(e.data.substr(0,d.startOffset)):(b.selectNodeContents(this.getRange().commonAncestorContainer),b.collapse(!0),this.isCollapsed()&&(b.startContainer===c.anchorNode||b.endContainer===c.anchorNode)&&b.startOffset===c.anchorOffset):void 0},caretIsInTheBeginnig:function(b){var c=this.getSelection(),d=c.anchorNode,e=c.anchorOffset;return b&&d?0===e&&(d.nodeName&&d.nodeName===b.toUpperCase()||a.dom.getParentElement(d.parentNode,{query:b},1)):d?0===e&&!this.getPreviousNode(d,!0):void 0},getBeforeSelection:function(b){var c,d,e=this.getSelection(),f=e.isBackwards()?e.focusNode:e.anchorNode,g=e.isBackwards()?e.focusOffset:e.anchorOffset,h=this.createRange();if(d=a.dom.getParentElement(f,{query:"._wysihtml5-temp-caret-fix"},1),d&&(f=d.parentNode,g=Array.prototype.indexOf.call(f.childNodes,d)),f){if(g>0)return 3===f.nodeType?(h.setStart(f,0),h.setEnd(f,g),{type:"text",range:h,offset:g,node:f}):(h.setStartBefore(f.childNodes[0]),c=f.childNodes[g-1],h.setEndAfter(c),{type:"element",range:h,offset:g,node:c});if(h.setStartAndEnd(f,0),b){var i=this.getPreviousNode(f,!0),j=null;if(i&&(j=1===i.nodeType&&a.dom.hasClass(i,this.unselectableClass)?i:a.dom.domNode(i).lastLeafNode()),j)return{type:"leafnode",range:h,offset:g,node:j}}return{type:"none",range:h,offset:g,node:f}}return null},executeAndRestoreRangy:function(a,b){var c=rangy.saveSelection(this.win);if(c)try{a()}catch(d){setTimeout(function(){throw d},0)}else a();rangy.restoreSelection(c)},executeAndRestore:function(b,c){var d,e,g,h,i,j,k,l,m=this.doc.body,n=c&&m.scrollTop,o=c&&m.scrollLeft,p="_wysihtml5-temp-placeholder",q='<span class="'+p+'">'+a.INVISIBLE_SPACE+"</span>",r=this.getRange(!0);if(!r)return void b(m,m);r.collapsed||(k=r.cloneRange(),j=k.createContextualFragment(q),k.collapse(!1),k.insertNode(j),k.detach()),i=r.createContextualFragment(q),r.insertNode(i),j&&(d=this.contain.querySelectorAll("."+p),r.setStartBefore(d[0]),r.setEndAfter(d[d.length-1])),this.setSelection(r);try{b(r.startContainer,r.endContainer)}catch(s){setTimeout(function(){throw s},0)}if(d=this.contain.querySelectorAll("."+p),d&&d.length){l=rangy.createRange(this.doc),g=d[0].nextSibling,d.length>1&&(h=d[d.length-1].previousSibling),h&&g?(l.setStartBefore(g),l.setEndAfter(h)):(e=this.doc.createTextNode(a.INVISIBLE_SPACE),f.insert(e).after(d[0]),l.setStartBefore(e),l.setEndAfter(e)),this.setSelection(l);for(var t=d.length;t--;)d[t].parentNode.removeChild(d[t])}else this.contain.focus();c&&(m.scrollTop=n,m.scrollLeft=o);try{d.parentNode.removeChild(d)}catch(u){}},set:function(a,b){var c=rangy.createRange(this.doc);c.setStart(a,b||0),this.setSelection(c)},insertHTML:function(a){var b,c,d=this.getRange(),e=this.doc.createElement("DIV"),f=this.doc.createDocumentFragment();if(d){for(d.deleteContents(),e.innerHTML=a,b=e.lastChild;e.firstChild;)f.appendChild(e.firstChild);for(d.insertNode(f),c=this.contain.lastChild;c&&3===c.nodeType&&c.previousSibling&&/^\s*$/.test(c.data);)c=c.previousSibling;b&&(c&&b===c&&1===b.nodeType&&this.contain.appendChild(this.doc.createElement("br")),this.setAfter(b))}},insertNode:function(a){var b=this.getRange();b&&b.insertNode(a)},canAppendChild:function(a){var b,c,d=["area","base","br","col","command","embed","hr","img","input","keygen","link","meta","param","source","track","wbr"],e=this.getRange();return b=a||e.startContainer,b&&(c=(b.tagName||b.nodeName).toLowerCase()),-1===d.indexOf(c)},splitElementAtCaret:function(b,c){var d,e,f,g,h,i=this.getSelection();if(i.rangeCount>0){d=i.getRangeAt(0).cloneRange(),d.setEndAfter(b),e=d.extractContents(),h=e.childNodes;for(var j=h.length;j--;)a.dom.domNode(h[j]).is.visible()||e.removeChild(h[j]);b.parentNode.insertBefore(e,b.nextSibling),c?(f=c.firstChild||c,g=c.lastChild||c,b.parentNode.insertBefore(c,b.nextSibling),f&&g&&(d.setStartBefore(f),d.setEndAfter(g),this.setSelection(d))):(d.setStartAfter(b),d.setEndAfter(b)),a.dom.domNode(b).is.visible()||(""===a.dom.getTextContent(b)?b.parentNode.removeChild(b):b.parentNode.replaceChild(this.doc.createTextNode(" "),b))}},surround:function(a){var b,c=this.getOwnRanges(),d=[];if(0==c.length)return d;for(var e=c.length;e--;){b=this.doc.createElement(a.nodeName),d.push(b),a.className&&(b.className=a.className),a.cssStyle&&b.setAttribute("style",a.cssStyle);try{c[e].surroundContents(b),this.selectNode(b)}catch(f){b.appendChild(c[e].extractContents()),c[e].insertNode(b)}}return d},deblockAndSurround:function(b){var c,d,e,f=this.doc.createElement("div"),g=rangy.createRange(this.doc);if(f.className=b.className,this.composer.commands.exec("formatBlock",b),c=this.contain.querySelectorAll("."+b.className),c[0])for(c[0].parentNode.insertBefore(f,c[0]),g.setStartBefore(c[0]),g.setEndAfter(c[c.length-1]),d=g.extractContents();d.firstChild;)if(e=d.firstChild,1==e.nodeType&&a.dom.hasClass(e,b.className)){for(;e.firstChild;)f.appendChild(e.firstChild);"BR"!==e.nodeName&&f.appendChild(this.doc.createElement("br")),d.removeChild(e)}else f.appendChild(e);else f=null;return f},scrollIntoView:function(){var c,d=this.doc,e=5,f=d.documentElement.scrollHeight>d.documentElement.offsetHeight,g=d._wysihtml5ScrollIntoViewElement=d._wysihtml5ScrollIntoViewElement||function(){var b=d.createElement("span");return b.innerHTML=a.INVISIBLE_SPACE,b}();f&&(this.insertNode(g),c=b(g),g.parentNode.removeChild(g),c>=d.body.scrollTop+d.documentElement.offsetHeight-e&&(d.body.scrollTop=c))},selectLine:function(){a.browser.supportsSelectionModify()?this._selectLine_W3C():this.doc.selection?this._selectLine_MSIE():this._selectLineUniversal()},_selectLine_W3C:function(){var a=this.win.getSelection(),b=[a.anchorNode,a.anchorOffset,a.focusNode,a.focusOffset];a.modify("move","left","lineboundary"),a.modify("extend","right","lineboundary"),a.anchorNode===b[0]&&a.anchorOffset===b[1]&&a.focusNode===b[2]&&a.focusOffset===b[3]&&this._selectLineUniversal()},toLineBoundary:function(b,c){if(c="undefined"==typeof c?!1:c,a.browser.supportsSelectionModify()){var d=this.win.getSelection();d.modify("extend",b,"lineboundary"),c&&("left"===b?d.collapseToStart():"right"===b&&d.collapseToEnd())}},getRangeRect:function(a){var b,c=(this.doc.createTextNode("i"),this.doc.createTextNode("i"));return a.collapsed?(a.insertNode(c),a.selectNode(c),b=a.nativeRange.getBoundingClientRect(),a.deleteContents()):b=a.nativeRange.getBoundingClientRect(),b},_selectLineUniversal:function(){var a,b,c,d,e,f,g=this.getSelection(),h=g.getRangeAt(0),i=0;b=h.cloneRange(),c=h.cloneRange(),h.collapsed&&(h.expand("word",1),a=h.nativeRange.getBoundingClientRect());do d=h.moveStart("character",-1),e=h.nativeRange.getBoundingClientRect(),e&&Math.floor(e.top)===Math.floor(a.top)||(h.moveStart("character",1),f=!0),i++;while(0!==d&&!f&&2e3>i);i=0,f=!1,a=h.nativeRange.getBoundingClientRect();do d=h.moveEnd("character",1),e=h.nativeRange.getBoundingClientRect(),e&&Math.floor(e.bottom)===Math.floor(a.bottom)||(h.moveEnd("character",-1),f=!0),i++;while(0!==d&&!f&&2e3>i);h.select()},_selectLine_MSIE:function(){var a,b,c,d,e,f=this.doc.selection&&this.doc.selection.createRange?this.doc.selection.createRange():this.doc.createRange(),g=f.boundingTop,h=this.doc.body.scrollWidth;if(window.r=f,f.moveToPoint){for(0===g&&(c=this.doc.createElement("span"),this.insertNode(c),g=c.offsetTop,c.parentNode.removeChild(c)),g+=1,d=-10;h>d;d+=2)try{f.moveToPoint(d,g);break}catch(i){}for(a=g,b=this.doc.selection.createRange(),e=h;e>=0;e--)try{b.moveToPoint(e,a);break}catch(j){}f.setEndPoint("EndToEnd",b),f.select()}},getText:function(){var a=this.getSelection();return a?a.toString():""},getNodes:function(a,b){var c=this.getRange();return c?c.getNodes(Array.isArray(a)?a:[a],b):[]},getOwnNodes:function(a,b,c){for(var d=this.getOwnRanges(),e=[],f=0,g=d.length;g>f;f++)d[f]&&(c&&d[f].splitBoundaries(),e=e.concat(d[f].getNodes(Array.isArray(a)?a:[a],b)));return e},fixRangeOverflow:function(a){if(this.contain&&this.contain.firstChild&&a){var b=a.compareNode(this.contain);if(2!==b)1===b&&a.setStartBefore(this.contain.firstChild),0===b&&a.setEndAfter(this.contain.lastChild),3===b&&(a.setStartBefore(this.contain.firstChild),a.setEndAfter(this.contain.lastChild));else if(this._detectInlineRangeProblems(a)){var c=a.endContainer.previousElementSibling;c&&a.setEnd(c,this._endOffsetForNode(c))}}},_endOffsetForNode:function(a){var b=document.createRange();return b.selectNodeContents(a),b.endOffset},_detectInlineRangeProblems:function(a){var b=f.compareDocumentPosition(a.startContainer,a.endContainer);return 0==a.endOffset&&4&b},getRange:function(a){var b=this.getSelection(),c=b&&b.rangeCount&&b.getRangeAt(0);return a!==!0&&this.fixRangeOverflow(c),c},getOwnUneditables:function(){var b=f.query(this.contain,"."+this.unselectableClass),c=f.query(b,"."+this.unselectableClass);return a.lang.array(b).without(c)},getOwnRanges:function(){var a,b=[],c=this.getRange();if(c&&b.push(c),this.unselectableClass&&this.contain&&c){var d,e=this.getOwnUneditables();if(e.length>0)for(var f=0,g=e.length;g>f;f++){a=[];for(var h=0,i=b.length;i>h;h++){if(b[h])switch(b[h].compareNode(e[f])){case 2:break;case 3:d=b[h].cloneRange(),d.setEndBefore(e[f]),a.push(d),d=b[h].cloneRange(),d.setStartAfter(e[f]),a.push(d);break;default:a.push(b[h])}b=a}}}return b},getSelection:function(){return rangy.getSelection(this.win)},setSelection:function(a){var b=rangy.getSelection(this.win);return b.setSingleRange(a),b&&b.anchorNode&&b.focusNode?b:null},selectAll:function(){var b,c=this.createRange(),e=this.composer,f=this,g=d(this.composer.element),h=d(this.composer.element),i=function(){c.setStart(e.element,0),c.setEnd(e.element,e.element.childNodes.length),b=f.setSelection(c)},j=function(){return!b||b.nativeSelection&&b.nativeSelection.type&&("Caret"===b.nativeSelection.type||"None"===b.nativeSelection.type)};a.dom.removeInvisibleSpaces(this.composer.element),i(),this.composer.element.firstChild&&j()&&(this.composer.element.appendChild(g),i(),j()&&(g.parentNode.removeChild(g),this.composer.element.insertBefore(h,this.composer.element.firstChild),i(),j()&&(this.composer.element.appendChild(g),i())))},createRange:function(){return rangy.createRange(this.doc)},isCollapsed:function(){return this.getSelection().isCollapsed},getHtml:function(){return this.getSelection().toHtml()},getPlainText:function(){return this.getSelection().toString()},isEndToEndInNode:function(b){var c=this.getRange(),d=c.commonAncestorContainer,e=c.startContainer,f=c.endContainer;if(d.nodeType===a.TEXT_NODE&&(d=d.parentNode),e.nodeType===a.TEXT_NODE&&!/^\s*$/.test(e.data.substr(c.startOffset)))return!1;if(f.nodeType===a.TEXT_NODE&&!/^\s*$/.test(f.data.substr(c.endOffset)))return!1;for(;e&&e!==d;){if(e.nodeType!==a.TEXT_NODE&&!a.dom.contains(d,e))return!1;if(a.dom.domNode(e).prev({ignoreBlankTexts:!0}))return!1;e=e.parentNode}for(;f&&f!==d;){if(f.nodeType!==a.TEXT_NODE&&!a.dom.contains(d,f))return!1;if(a.dom.domNode(f).next({ignoreBlankTexts:!0}))return!1;f=f.parentNode}return a.lang.array(b).contains(d.nodeName)?d:!1},isInThisEditable:function(){var b=this.getSelection(),c=b.focusNode,d=b.anchorNode;return c&&1!==c.nodeType&&(c=c.parentNode),d&&1!==d.nodeType&&(d=d.parentNode),d&&c&&(a.dom.contains(this.composer.element,c)||this.composer.element===c)&&(a.dom.contains(this.composer.element,d)||this.composer.element===d)},deselect:function(){var a=this.getSelection();a&&a.removeAllRanges()}})}(wysihtml5),function(a,b){function c(a,b,c){if(!a.className)return!1;var d=a.className.match(c)||[];return d[d.length-1]===b}function d(a,b){if(!a.getAttribute||!a.getAttribute("style"))return!1;a.getAttribute("style").match(b);return a.getAttribute("style").match(b)?!0:!1}function e(a,b,c){a.getAttribute("style")?(h(a,c),a.getAttribute("style")&&!/^\s*$/.test(a.getAttribute("style"))?a.setAttribute("style",b+";"+a.getAttribute("style")):a.setAttribute("style",b)):a.setAttribute("style",b)}function f(a,b,c){a.className?(g(a,c),a.className+=" "+b):a.className=b}function g(a,b){a.className&&(a.className=a.className.replace(b,""))}function h(a,b){var c,d=[];if(a.getAttribute("style")){c=a.getAttribute("style").split(";");for(var e=c.length;e--;)c[e].match(b)||/^\s*$/.test(c[e])||d.push(c[e]);d.length?a.setAttribute("style",d.join(";")):a.removeAttribute("style")}}function i(a,b){var c=[],d=b.split(";"),e=a.getAttribute("style");if(e){e=e.replace(/\s/gi,"").toLowerCase(),c.push(new RegExp("(^|\\s|;)"+b.replace(/\s/gi,"").replace(/([\(\)])/gi,"\\$1").toLowerCase().replace(";",";?").replace(/rgb\\\((\d+),(\d+),(\d+)\\\)/gi,"\\s?rgb\\($1,\\s?$2,\\s?$3\\)"),"gi"));for(var f=d.length;f-->0;)/^\s*$/.test(d[f])||c.push(new RegExp("(^|\\s|;)"+d[f].replace(/\s/gi,"").replace(/([\(\)])/gi,"\\$1").toLowerCase().replace(";",";?").replace(/rgb\\\((\d+),(\d+),(\d+)\\\)/gi,"\\s?rgb\\($1,\\s?$2,\\s?$3\\)"),"gi"));for(var g=0,h=c.length;h>g;g++)if(e.match(c[g]))return c[g]}return!1}function j(c,d,e,f){return e?i(c,e):f?a.dom.hasClass(c,f):b.dom.arrayContains(d,c.tagName.toLowerCase())}function k(a,b,c,d){for(var e=a.length;e--;)if(!j(a[e],b,c,d))return!1;return a.length?!0:!1}function l(a,b,c){var d=i(a,b);return d?(h(a,d),"remove"):(e(a,b,c),"change")}function m(a,b){return a.className.replace(u," ")==b.className.replace(u," ")}function n(a){for(var b=a.parentNode;a.firstChild;)b.insertBefore(a.firstChild,a);b.removeChild(a)}function o(a,b){if(a.attributes.length!=b.attributes.length)return!1;for(var c,d,e,f=0,g=a.attributes.length;g>f;++f)if(c=a.attributes[f],e=c.name,"class"!=e){if(d=b.attributes.getNamedItem(e),c.specified!=d.specified)return!1;if(c.specified&&c.nodeValue!==d.nodeValue)return!1}return!0}function p(a,c){return b.dom.isCharacterDataNode(a)?0==c?!!a.previousSibling:c==a.length?!!a.nextSibling:!0:c>0&&c<a.childNodes.length}function q(a,c,d,e){var f;if(b.dom.isCharacterDataNode(c)&&(0==d?(d=b.dom.getNodeIndex(c),c=c.parentNode):d==c.length?(d=b.dom.getNodeIndex(c)+1,c=c.parentNode):f=b.dom.splitDataNode(c,d)),!(f||e&&c===e)){f=c.cloneNode(!1),f.id&&f.removeAttribute("id");for(var g;g=c.childNodes[d];)f.appendChild(g);b.dom.insertAfter(f,c)}return c==a?f:q(a,f.parentNode,b.dom.getNodeIndex(f),e)}function r(b){this.isElementMerge=b.nodeType==a.ELEMENT_NODE,this.firstTextNode=this.isElementMerge?b.lastChild:b,this.textNodes=[this.firstTextNode]}function s(a,b,c,d,e,f,g){this.tagNames=a||[t],this.cssClass=b||(b===!1?!1:""),this.similarClassRegExp=c,this.cssStyle=e||"",this.similarStyleRegExp=f,this.normalize=d,this.applyToAnyTagName=!1,this.container=g}var t="span",u=/\s+/g;r.prototype={doMerge:function(){for(var a,b,c,d=[],e=0,f=this.textNodes.length;f>e;++e)a=this.textNodes[e],b=a.parentNode,d[e]=a.data,e&&(b.removeChild(a),b.hasChildNodes()||b.parentNode.removeChild(b));return this.firstTextNode.data=c=d.join(""),c},getLength:function(){for(var a=this.textNodes.length,b=0;a--;)b+=this.textNodes[a].length;return b},toString:function(){for(var a=[],b=0,c=this.textNodes.length;c>b;++b)a[b]="'"+this.textNodes[b].data+"'";return"[Merge("+a.join(",")+")]"}},s.prototype={getAncestorWithClass:function(d){for(var e;d;){if(e=this.cssClass?c(d,this.cssClass,this.similarClassRegExp):""!==this.cssStyle?!1:!0,d.nodeType==a.ELEMENT_NODE&&"false"!=d.getAttribute("contenteditable")&&b.dom.arrayContains(this.tagNames,d.tagName.toLowerCase())&&e)return d;d=d.parentNode}return!1},getAncestorWithStyle:function(c){for(var e;c;){if(e=this.cssStyle?d(c,this.similarStyleRegExp):!1,c.nodeType==a.ELEMENT_NODE&&"false"!=c.getAttribute("contenteditable")&&b.dom.arrayContains(this.tagNames,c.tagName.toLowerCase())&&e)return c;c=c.parentNode}return!1},getMatchingAncestor:function(a){var b=this.getAncestorWithClass(a),c=!1;return b?this.cssStyle&&(c="class"):(b=this.getAncestorWithStyle(a),b&&(c="style")),{element:b,type:c}},postApply:function(a,b){for(var c,d,e,f=a[0],g=a[a.length-1],h=[],i=f,j=g,k=0,l=g.length,m=0,n=a.length;n>m;++m)d=a[m],e=null,d&&d.parentNode&&(e=this.getAdjacentMergeableTextNode(d.parentNode,!1)),e?(c||(c=new r(e),h.push(c)),c.textNodes.push(d),d===f&&(i=c.firstTextNode,k=i.length),d===g&&(j=c.firstTextNode,l=c.getLength())):c=null;if(g&&g.parentNode){var o=this.getAdjacentMergeableTextNode(g.parentNode,!0);o&&(c||(c=new r(g),h.push(c)),c.textNodes.push(o))}if(h.length){for(m=0,n=h.length;n>m;++m)h[m].doMerge();b.setStart(i,k),b.setEnd(j,l);
}},getAdjacentMergeableTextNode:function(b,c){var d,e=b.nodeType==a.TEXT_NODE,f=e?b.parentNode:b,g=c?"nextSibling":"previousSibling";if(e){if(d=b[g],d&&d.nodeType==a.TEXT_NODE)return d}else if(d=f[g],d&&this.areElementsMergeable(b,d))return d[c?"firstChild":"lastChild"];return null},areElementsMergeable:function(a,c){return b.dom.arrayContains(this.tagNames,(a.tagName||"").toLowerCase())&&b.dom.arrayContains(this.tagNames,(c.tagName||"").toLowerCase())&&m(a,c)&&o(a,c)},createContainer:function(a){var b=a.createElement(this.tagNames[0]);return this.cssClass&&(b.className=this.cssClass),this.cssStyle&&b.setAttribute("style",this.cssStyle),b},applyToTextNode:function(a){var c=a.parentNode;if(1==c.childNodes.length&&b.dom.arrayContains(this.tagNames,c.tagName.toLowerCase()))this.cssClass&&f(c,this.cssClass,this.similarClassRegExp),this.cssStyle&&e(c,this.cssStyle,this.similarStyleRegExp);else{var d=this.createContainer(b.dom.getDocument(a));a.parentNode.insertBefore(d,a),d.appendChild(a)}},isRemovable:function(c){return b.dom.arrayContains(this.tagNames,c.tagName.toLowerCase())&&""===a.lang.string(c.className).trim()&&(!c.getAttribute("style")||""===a.lang.string(c.getAttribute("style")).trim())},undoToTextNode:function(a,b,c,d){var e=c?!1:!0,f=c||d,h=!1;if(!b.containsNode(f)){var i=b.cloneRange();i.selectNode(f),i.isPointInRange(b.endContainer,b.endOffset)&&p(b.endContainer,b.endOffset)&&(q(f,b.endContainer,b.endOffset,this.container),b.setEndAfter(f)),i.isPointInRange(b.startContainer,b.startOffset)&&p(b.startContainer,b.startOffset)&&(f=q(f,b.startContainer,b.startOffset,this.container))}!e&&this.similarClassRegExp&&g(f,this.similarClassRegExp),e&&this.similarStyleRegExp&&(h="change"===l(f,this.cssStyle,this.similarStyleRegExp)),this.isRemovable(f)&&!h&&n(f)},applyToRange:function(b){for(var c,d=b.length;d--;){if(c=b[d].getNodes([a.TEXT_NODE]),!c.length)try{var e=this.createContainer(b[d].endContainer.ownerDocument);return b[d].surroundContents(e),void this.selectNode(b[d],e)}catch(f){}if(b[d].splitBoundaries(),c=b[d].getNodes([a.TEXT_NODE]),c.length){for(var g,h=0,i=c.length;i>h;++h)g=c[h],this.getMatchingAncestor(g).element||this.applyToTextNode(g);b[d].setStart(c[0],0),g=c[c.length-1],b[d].setEnd(g,g.length),this.normalize&&this.postApply(c,b[d])}}},undoToRange:function(b){for(var c,d,e,f=b.length;f--;){if(c=b[f].getNodes([a.TEXT_NODE]),c.length)b[f].splitBoundaries(),c=b[f].getNodes([a.TEXT_NODE]);else{var g=b[f].endContainer.ownerDocument,h=g.createTextNode(a.INVISIBLE_SPACE);b[f].insertNode(h),b[f].selectNode(h),c=[h]}for(var i=0,j=c.length;j>i;++i)b[f].isValid()&&(d=c[i],e=this.getMatchingAncestor(d),"style"===e.type?this.undoToTextNode(d,b[f],!1,e.element):e.element&&this.undoToTextNode(d,b[f],e.element));1==j?this.selectNode(b[f],c[0]):(b[f].setStart(c[0],0),d=c[c.length-1],b[f].setEnd(d,d.length),this.normalize&&this.postApply(c,b[f]))}},selectNode:function(b,c){var d=c.nodeType===a.ELEMENT_NODE,e="canHaveHTML"in c?c.canHaveHTML:!0,f=d?c.innerHTML:c.data,g=""===f||f===a.INVISIBLE_SPACE;if(g&&d&&e)try{c.innerHTML=a.INVISIBLE_SPACE}catch(h){}b.selectNodeContents(c),g&&d?b.collapse(!1):g&&(b.setStartAfter(c),b.setEndAfter(c))},getTextSelectedByRange:function(a,b){var c=b.cloneRange();c.selectNodeContents(a);var d=c.intersection(b),e=d?d.toString():"";return c.detach(),e},isAppliedToRange:function(b){for(var c,d,e=[],f="full",g=b.length;g--;){if(d=b[g].getNodes([a.TEXT_NODE]),!d.length)return c=this.getMatchingAncestor(b[g].startContainer).element,c?{elements:[c],coverage:f}:!1;for(var h,i=0,j=d.length;j>i;++i)h=this.getTextSelectedByRange(d[i],b[g]),c=this.getMatchingAncestor(d[i]).element,c&&""!=h?(e.push(c),1===a.dom.getTextNodes(c,!0).length?f="full":"full"===f&&(f="inline")):c||(f="partial")}return e.length?{elements:e,coverage:f}:!1},toggleRange:function(a){var b,c=this.isAppliedToRange(a);c?"full"===c.coverage?this.undoToRange(a):"inline"===c.coverage?(b=k(c.elements,this.tagNames,this.cssStyle,this.cssClass),this.undoToRange(a),b||this.applyToRange(a)):(k(c.elements,this.tagNames,this.cssStyle,this.cssClass)||this.undoToRange(a),this.applyToRange(a)):this.applyToRange(a)}},a.selection.HTMLApplier=s}(wysihtml5,rangy),wysihtml5.Commands=Base.extend({constructor:function(a){this.editor=a,this.composer=a.composer,this.doc=this.composer.doc},support:function(a){return wysihtml5.browser.supportsCommand(this.doc,a)},exec:function(a,b){var c=wysihtml5.commands[a],d=wysihtml5.lang.array(arguments).get(),e=c&&c.exec,f=null;if(this.composer.hasPlaceholderSet()&&!wysihtml5.lang.array(["styleWithCSS","enableObjectResizing","enableInlineTableEditing"]).contains(a)&&(this.composer.element.innerHTML="",this.composer.selection.selectNode(this.composer.element)),this.editor.fire("beforecommand:composer"),e)d.unshift(this.composer),f=e.apply(c,d);else try{f=this.doc.execCommand(a,!1,b)}catch(g){}return this.editor.fire("aftercommand:composer"),f},remove:function(a,b){var c=wysihtml5.commands[a],d=wysihtml5.lang.array(arguments).get(),e=c&&c.remove;return e?(d.unshift(this.composer),e.apply(c,d)):void 0},state:function(a,b){var c=wysihtml5.commands[a],d=wysihtml5.lang.array(arguments).get(),e=c&&c.state;if(e)return d.unshift(this.composer),e.apply(c,d);try{return this.doc.queryCommandState(a)}catch(f){return!1}},stateValue:function(a){var b=wysihtml5.commands[a],c=wysihtml5.lang.array(arguments).get(),d=b&&b.stateValue;return d?(c.unshift(this.composer),d.apply(b,c)):!1}}),function(a){var b={nodeName:"B",toggle:!0};a.commands.bold={exec:function(c,d){a.commands.formatInline.exec(c,d,b)},state:function(c,d){return a.commands.formatInline.state(c,d,b)}}}(wysihtml5),function(a){function b(b){return a.lang.object({}).merge(c).merge({attribute:b}).get()}var c={nodeName:"A",toggle:!1};a.commands.createLink={exec:function(c,d,e){var f=b(e);if(c.selection.isCollapsed()&&!this.state(c,d)){var g=c.doc.createTextNode(f.attribute.href);c.selection.insertNode(g),c.selection.selectNode(g)}a.commands.formatInline.exec(c,d,f)},state:function(b,d){return a.commands.formatInline.state(b,d,c)}}}(wysihtml5),function(a){var b={nodeName:"A"};a.commands.removeLink={exec:function(c,d){a.commands.formatInline.remove(c,d,b)},state:function(c,d){return a.commands.formatInline.state(c,d,b)}}}(wysihtml5),function(a){var b=/wysiwyg-font-size-[0-9a-z\-]+/g;a.commands.fontSize={exec:function(c,d,e){a.commands.formatInline.exec(c,d,{className:"wysiwyg-font-size-"+e,classRegExp:b,toggle:!0})},state:function(b,c,d){return a.commands.formatInline.state(b,c,{className:"wysiwyg-font-size-"+d})}}}(wysihtml5),function(a){a.commands.fontSizeStyle={exec:function(b,c,d){d=d.size||d,/^\s*$/.test(d)||a.commands.formatInline.exec(b,c,{styleProperty:"fontSize",styleValue:d,toggle:!1})},state:function(b,c,d){return a.commands.formatInline.state(b,c,{styleProperty:"fontSize",styleValue:d||void 0})},remove:function(b,c){return a.commands.formatInline.remove(b,c,{styleProperty:"fontSize"})},stateValue:function(b,c){var d,e=this.state(b,c);return e&&a.lang.object(e).isArray()&&(e=e[0]),e&&(d=e.getAttribute("style"))?a.quirks.styleParser.parseFontSize(d):!1}}}(wysihtml5),function(a){var b=/wysiwyg-color-[0-9a-z]+/g;a.commands.foreColor={exec:function(c,d,e){a.commands.formatInline.exec(c,d,{className:"wysiwyg-color-"+e,classRegExp:b,toggle:!0})},state:function(b,c,d){return a.commands.formatInline.state(b,c,{className:"wysiwyg-color-"+d})}}}(wysihtml5),function(a){a.commands.foreColorStyle={exec:function(b,c,d){var e,f;d&&(e=a.quirks.styleParser.parseColor("color:"+(d.color||d),"color"),e&&(f=(1===e[3]?"rgb("+[e[0],e[1],e[2]].join(", "):"rgba("+e.join(", "))+")",a.commands.formatInline.exec(b,c,{styleProperty:"color",styleValue:f})))},state:function(b,c,d){var e,f=d?a.quirks.styleParser.parseColor("color:"+(d.color||d),"color"):null;return f&&(e=(1===f[3]?"rgb("+[f[0],f[1],f[2]].join(", "):"rgba("+f.join(", "))+")"),a.commands.formatInline.state(b,c,{styleProperty:"color",styleValue:e})},remove:function(b,c){return a.commands.formatInline.remove(b,c,{styleProperty:"color"})},stateValue:function(b,c,d){var e,f=this.state(b,c),g=!1;return f&&a.lang.object(f).isArray()&&(f=f[0]),f&&(e=f.getAttribute("style"))?(g=a.quirks.styleParser.parseColor(e,"color"),a.quirks.styleParser.unparseColor(g,d)):!1}}}(wysihtml5),function(a){a.commands.bgColorStyle={exec:function(b,c,d){var e,f=a.quirks.styleParser.parseColor("background-color:"+(d.color||d),"background-color");f&&(e=(1===f[3]?"rgb("+[f[0],f[1],f[2]].join(", "):"rgba("+f.join(", "))+")",a.commands.formatInline.exec(b,c,{styleProperty:"backgroundColor",styleValue:e}))},state:function(b,c,d){var e,f=d?a.quirks.styleParser.parseColor("background-color:"+(d.color||d),"background-color"):null;return f&&(e=(1===f[3]?"rgb("+[f[0],f[1],f[2]].join(", "):"rgba("+f.join(", "))+")"),a.commands.formatInline.state(b,c,{styleProperty:"backgroundColor",styleValue:e})},remove:function(b,c){return a.commands.formatInline.remove(b,c,{styleProperty:"backgroundColor"})},stateValue:function(b,c,d){var e,f=this.state(b,c),g=!1;return f&&a.lang.object(f).isArray()&&(f=f[0]),f&&(e=f.getAttribute("style"))?(g=a.quirks.styleParser.parseColor(e,"background-color"),a.quirks.styleParser.unparseColor(g,d)):!1}}}(wysihtml5),function(a){function b(a){return{nodeName:a.nodeName||null,className:a.classRegExp?null:a.className||null,classRegExp:a.classRegExp||null,styleProperty:a.styleProperty||null}}function c(b){for(var c=b.element,d=c.querySelectorAll(o),e=c.querySelectorAll(b.config.classNames.uneditableContainer),f=a.lang.array(d).without(e),g=f.length;g--;)""===f[g].innerHTML.replace(/[\uFEFF]/g,"")&&f[g].parentNode.removeChild(f[g])}function d(a){return a.config.useLineBreaks?"DIV":"P"}function e(a,b,c){for(var d=a,e=null;d&&b&&d!==b;)1===d.nodeType&&d.matches(c?o:n)&&(e=d),d=d.parentNode;return e}function f(a,b){for(var c,d,e,f=a,g=null;f&&b&&f!==b;)1===f.nodeType&&f.matches(p)&&(d=f,null===g?(g=f.cloneNode(!1),c=g):(e=f.cloneNode(!1),e.appendChild(g),g=e)),f=f.parentNode;return{parent:d,outerNode:g,innerNode:c}}function g(b,c,e){return b||(b=e.doc.createElement(c.nodeName||d(e)),b.appendChild(e.doc.createTextNode(a.INVISIBLE_SPACE))),c.nodeName&&b.nodeName!==c.nodeName&&(b=m.renameElement(b,c.nodeName)),c.classRegExp&&(b.className=b.className.replace(c.classRegExp,"")),c.className&&b.classList.add(c.className),c.styleProperty&&"undefined"!=typeof c.styleValue&&(b.style[a.browser.fixStyleKey(c.styleProperty)]=c.styleValue),b}function h(b,c,e){var f;c.styleProperty&&(b.style[a.browser.fixStyleKey(c.styleProperty)]=""),c.className&&b.classList.remove(c.className),c.classRegExp&&(b.className=b.className.replace(c.classRegExp,"")),null!==b.getAttribute("class")&&""===b.getAttribute("class").trim()&&b.removeAttribute("class"),c.nodeName&&b.nodeName===c.nodeName&&(f=b.getAttribute("style"),f&&""!==f.trim()?b=m.renameElement(b,d(e)):m.unwrap(b)),null!==b.getAttribute("style")&&""===b.getAttribute("style").trim()&&b.removeAttribute("style")}function i(b){for(var c=b.querySelectorAll(o)||[],d=c.length;d--;)c[d].nextSibling&&1===c[d].nextSibling.nodeType&&"BR"===c[d].nextSibling.nodeName||""!==(c[d].innerHTML||c[d].nodeValue||"").trim()&&c[d].parentNode.insertBefore(c[d].ownerDocument.createElement("BR"),c[d].nextSibling),a.dom.unwrap(c[d])}function j(a,b){var c;return a.startContainer&&1===a.startContainer.nodeType&&a.startContainer===a.endContainer?void(a.startContainer.firstChild===a.startContainer.lastChild&&1===a.endOffset&&a.startContainer!==b.element&&(a.setStartBefore(a.startContainer),a.setEndAfter(a.endContainer))):a.startContainer&&1===a.startContainer.nodeType&&3===a.endContainer.nodeType?void(a.startContainer.firstChild===a.endContainer&&1===a.endOffset&&a.startContainer!==b.element&&a.setEndAfter(a.startContainer)):a.endContainer&&1===a.endContainer.nodeType&&3===a.startContainer.nodeType?void(a.endContainer.firstChild===a.startContainer&&1===a.endOffset&&a.endContainer!==b.element&&a.setStartBefore(a.endContainer)):a.startContainer&&3===a.startContainer.nodeType&&a.startContainer===a.endContainer&&a.startContainer.parentNode?void(a.startContainer.parentNode.firstChild===a.startContainer&&a.endOffset==a.endContainer.length&&0===a.startOffset&&(c=a.startContainer.parentNode,c!==b.element&&(a.setStartBefore(c),a.setEndAfter(c)))):void 0}function k(c,h,k,l){var m=h?a.lang.object(h).clone(!0):null;m&&(m.nodeName=m.nodeName||k||d(l)),j(c,l);var p,q,r,s=c.cloneRange(),t=s.startContainer,u=s.extractContents(),v=l.doc.createDocumentFragment(),w=m?b(m):null,x=w?a.dom.getParentElement(t,w,null,l.element):null,y=!m||"BLOCKQUOTE"===k&&m.nodeName&&"BLOCKQUOTE"===m.nodeName,z=x||e(t,l.element,y);if(h&&h.nodeName&&"BLOCKQUOTE"===h.nodeName){var A=g(null,h,l);A.appendChild(u),v.appendChild(A),q=[A]}else{if(u.firstChild)for(;u.firstChild;)if(1==u.firstChild.nodeType&&u.firstChild.matches(o))if(h)g(u.firstChild,h,l),u.firstChild.matches(n)&&i(u.firstChild),v.appendChild(u.firstChild);else{i(u.firstChild),r=a.dom.unwrap(u.firstChild);for(var B=0,C=r.length;C>B;B++)v.appendChild(r[B]);v.childNodes.length>0&&v.appendChild(l.doc.createElement("BR"))}else if(h){for(p=g(null,m,l);u.firstChild&&(1!==u.firstChild.nodeType||!u.firstChild.matches(o));)1==u.firstChild.nodeType&&p.matches(n)&&i(u.firstChild),p.appendChild(u.firstChild);v.appendChild(p)}else 1==u.firstChild.nodeType&&i(u.firstChild),v.appendChild(u.firstChild);else v.appendChild(g(null,h,l));q=a.lang.array(v.childNodes).get()}if(z)l.selection.splitElementAtCaret(z,v);else{var D=f(t,l.element);if(D.outerNode&&D.innerNode&&D.parent){if(1===v.childNodes.length){for(;v.firstChild.firstChild;)D.innerNode.appendChild(v.firstChild.firstChild);v.firstChild.appendChild(D.outerNode)}l.selection.splitElementAtCaret(D.parent,v)}else s.insertNode(v)}return q}function l(b,c){var d=a.dom.getParentElement(b,{query:o},null,c.element);return d?d.nodeName:null}var m=a.dom,n="h1, h2, h3, h4, h5, h6, p, pre",o="h1, h2, h3, h4, h5, h6, p, pre, div, blockquote",p="b, big, i, small, tt, abbr, acronym, cite, code, dfn, em, kbd, strong, samp, var, a, bdo, br, q, span, sub, sup, button, label, textarea, input, select, u";a.commands.formatBlock={exec:function(b,d,e){var f,g,i,j,m,o=[];if("string"==typeof e&&(e={nodeName:e.toUpperCase()}),e&&e.toggle&&(m=this.state(b,d,e))){j=rangy.saveSelection(b.win);for(var p=0,q=m.length;q>p;p++)h(m[p],e,b)}if(!m){b.selection.isCollapsed()&&(i=a.dom.getParentElement(b.selection.getOwnRanges()[0].startContainer,{query:n+", "+(e&&e.nodeName?e.nodeName.toLowerCase():"div")},null,b.element),i?(j=rangy.saveSelection(b.win),g=b.selection.createRange(),g.selectNode(i),b.selection.setSelection(g)):b.isEmpty()||(j=rangy.saveSelection(b.win),b.selection.selectLine())),f=b.selection.getOwnRanges();for(var r=f.length;r--;)o=o.concat(k(f[r],e,l(f[r].startContainer,b),b))}c(b);for(var s=o.length;s--;)o[s].parentNode||o.splice(s,1);if(j)a.dom.removeInvisibleSpaces(b.element),rangy.restoreSelection(j);else{a.dom.removeInvisibleSpaces(b.element),g=b.selection.createRange(),g.setStart(o[0],0);var t=o[o.length-1],u=1===t.nodeType&&t.childNodes?0|t.childNodes.length:t.length||0;g.setEnd(t,u),g.select()}},state:function(b,c,d){"string"==typeof d&&(d={query:d});for(var e,f=b.selection.filterElements(function(b){return a.dom.domNode(b).test(d||{query:o})}.bind(this)),g=b.selection.getSelectedOwnNodes(),h=0,i=g.length;i>h;h++)e=m.getParentElement(g[h],d||{query:o},null,b.element),e&&-1===f.indexOf(e)&&f.push(e);return 0===f.length?!1:f}}}(wysihtml5),function(a){a.commands.formatCode={exec:function(b,c,d){var e,f,g,h=this.state(b)[0];h?b.selection.executeAndRestore(function(){e=h.querySelector("code"),a.dom.replaceWithChildNodes(h),e&&a.dom.replaceWithChildNodes(e)}):(f=b.selection.getRange(),g=f.extractContents(),h=b.doc.createElement("pre"),e=b.doc.createElement("code"),d&&(e.className=d),h.appendChild(e),e.appendChild(g),f.insertNode(h),b.selection.selectNode(h))},state:function(b){var c,d=b.selection.getSelectedNode();return d&&d.nodeName&&"PRE"==d.nodeName&&d.firstChild&&d.firstChild.nodeName&&"CODE"==d.firstChild.nodeName?[d]:(c=a.dom.getParentElement(d,{query:"pre code"}),c?[c.parentNode]:!1)}}}(wysihtml5),function(a){function b(a){return/^\s*$/.test(a.className)}function c(a){return!a.getAttribute("style")||/^\s*$/.test(a.getAttribute("style"))}function d(b){var c=a.dom.getAttributes(b);return a.lang.object(c).isEmpty()}function e(b,c){var d,e,f,g;return 1!==b.nodeType||1!==c.nodeType?!1:b.nodeName!==c.nodeName?!1:(d=b.className.trim().replace(/\s+/g," ").split(" "),e=c.className.trim().replace(/\s+/g," ").split(" "),a.lang.array(d).without(e).length>0?!1:(f=a.dom.getAttributes(b),g=a.dom.getAttributes(c),f.length===g.length&&a.lang.object(a.lang.object(f).difference(g)).isEmpty()?!0:!1))}function f(b,c){var d=c&&c.nodeName||F,e=b.ownerDocument.createElement(d);if(c.classRegExp&&(e.className=e.className.replace(c.classRegExp,"")),c.className&&e.classList.add(c.className),c.styleProperty&&"undefined"!=typeof c.styleValue&&(e.style[a.browser.fixStyleKey(c.styleProperty)]=c.styleValue),c.attribute)if("object"==typeof c.attribute)for(var f in c.attribute)c.attribute.hasOwnProperty(f)&&e.setAttribute(f,c.attribute[f]);else"undefined"!=typeof c.attributeValue&&e.setAttribute(c.attribute,c.attributeValue);return e}function g(a,b){for(var c in a)if(a.hasOwnProperty(c)&&(void 0===typeof b[c]||b[c]!==a[c]))return!1;return!0}function h(b,c,d){var e,f=a.dom.getAttributes(b),h=g(c,f);a.lang.object(f).difference(c);if(h&&d!==!1)for(e in c)c.hasOwnProperty(e)&&b.removeAttribute(e);else for(e in c)c.hasOwnProperty(e)&&b.setAttribute(e,c[e])}function i(e,f){var g,i,j;f.className&&(f.toggle!==!1&&e.classList.contains(f.className)?e.classList.remove(f.className):e.classList.add(f.className),b(e)&&e.removeAttribute("class")),f.styleProperty&&(f.toggle!==!1&&e.style[a.browser.fixStyleKey(f.styleProperty)].trim().replace(/, /g,",")===f.styleValue?e.style[a.browser.fixStyleKey(f.styleProperty)]="":e.style[a.browser.fixStyleKey(f.styleProperty)]=f.styleValue),c(e)&&e.removeAttribute("style"),f.attribute&&("object"==typeof f.attribute?g=f.attribute:(g={},g[f.attribute]=f.attributeValue||""),h(e,g,f.toggle)),i=f.nodeName?H[f.nodeName.toLowerCase()]||f.nodeName.toLowerCase():null,j=i?a.dom.domNode(e).test({query:i}):!1,(!f.nodeName||f.nodeName===F||j)&&(f.toggle!==!1&&j||!f.nodeName&&e.nodeName===F)&&b(e)&&c(e)&&d(e)&&a.dom.unwrap(e)}function j(b,c){var d=[];return b.isCollapsed()||(d=d.concat(b.getOwnNodes([3],function(b){return!a.dom.domNode(b).is.emptyTextNode()},c))),d}function k(a,b,c,d){var e=a,f=d?b:l(b);do{if(1===e.nodeType&&m(e,f))return e;e=e.parentNode}while(e&&e!==c);return null}function l(a){return{nodeName:a.nodeName||null,className:a.classRegExp?null:a.className||null,classRegExp:a.classRegExp||null,styleProperty:a.styleProperty||null}}function m(b,c){var d;if(c.nodeName){var e=H[c.nodeName.toLowerCase()]||c.nodeName.toLowerCase();return a.dom.domNode(b).test({query:e})}return d=a.lang.object(c).clone(),d.query=G,a.dom.domNode(b).test(d)}function n(b,c){var d=document.documentElement||document.body,e=d.scrollTop,f=d.scrollLeft;rangy.getSelection(b.win);rangy.getSelection(b.win).removeAllRanges();try{rangy.getSelection(b.win).addRange(c)}catch(g){}b.doc.activeElement&&a.dom.contains(b.element,b.doc.activeElement)||(b.element.focus(),d.scrollTop=e,d.scrollLeft=f,rangy.getSelection(b.win).addRange(c))}function o(a,b){var c=rangy.createRange(b.doc),d=a[a.length-1];a[0]&&d&&(c.setStart(a[0],0),c.setEnd(d,d.length),n(b,c))}function p(a,b,c,d){var e=rangy.createRange(a.doc);b&&(e.setStart(b,c),e.setEnd(b,"undefined"!=typeof d?d:c),n(a,e))}function q(a,b,c){var d,e,f,g=j(a.selection),h=[],i=!1;if(a.selection.isInThisEditable()){if(0===g.length&&a.selection.isCollapsed()){if(f=a.selection.getSelection().anchorNode,!f)return{nodes:[],partial:!1};3===f.nodeType&&(g=[f])}g.length||(e=a.selection.getOwnRanges()[0],e&&(g=[e.endContainer]));for(var l=0,m=g.length;m>l;l++)d=k(g[l],b,a.element,c),d?h.push(d):i=!0}return{nodes:h,partial:i}}function r(a){var b,c,d,e;return a&&(b=a.anchorNode,c=a.anchorOffset,b&&3===b.nodeType&&c>0&&c<b.data.length)?(d=b.data[c-1],e=b.data[c],/\w/.test(d)&&/\w/.test(e)):!1}function s(b){var c,d,e,f,g,h,i=[];if(b&&(c=b.anchorNode,d=g=h=b.anchorOffset,e=c.ownerDocument,f=rangy.createRange(e),c&&3===c.nodeType)){for(;g>0&&/\w/.test(c.data[g-1]);)g--;for(;h<c.data.length&&/\w/.test(c.data[h]);)h++;return f.setStartAndEnd(c,g,h),f.splitBoundaries(),i=f.getNodes([3],function(b){return!a.dom.domNode(b).is.emptyTextNode()}),{wordOffset:d-g,range:f,textNode:i[0]}}return!1}function t(a,b){for(;b.firstChild;)a.appendChild(b.firstChild);b.parentNode.removeChild(b)}function u(a){for(var b=a.length;b--;)a[b]&&a[b].parentNode&&(a[b].nextSibling&&e(a[b],a[b].nextSibling)&&t(a[b],a[b].nextSibling),a[b].previousSibling&&e(a[b],a[b].previousSibling)&&t(a[b].previousSibling,a[b]))}function v(a,b,c){b.length>0&&o(b,a),u(q(a,c).nodes),b.length>0&&o(b,a)}function w(a,b,c,d){p(a,b,c),u(q(a,d).nodes),p(a,b,c)}function x(a,b){var c=f(a,b);a.parentNode.insertBefore(c,a),c.appendChild(a)}function y(b,c,d){var e,f=c.element,g=k(b,d,f);g&&(e=g.cloneNode(!1),a.dom.domNode(b).escapeParent(g,e),i(e,d))}function z(b,c,d){var e=c.element,f=k(b,d,e);f&&a.dom.domNode(b).escapeParent(f)}function A(a,b,c){var d=f(a.endContainer,c);a.surroundContents(d),b.selection.selectNode(d)}function B(b,c,d,e){var f,g,h,j,l=q(b,e,!0),m=b.selection.getSelection();if(c.length){if(l.partial||e.toggle===!1)for(j=c.length;j--;)k(c[j],e,b.element)&&y(c[j],b,e),k(c[j],e,b.element)||x(c[j],e);else for(j=c.length;j--;)y(c[j],b,e);v(b,c,e)}else if(e.toggle!==!1)if(r(m))f=s(m),g=f.textNode,y(f.textNode,b,e),w(b,f.textNode,f.wordOffset,e);else{g=b.doc.createTextNode(a.INVISIBLE_SPACE),h=d.nodes[0].cloneNode(!1),h.appendChild(g),b.selection.splitElementAtCaret(d.nodes[0],h),i(h,e),v(b,[g],e);var n=b.selection.getSelection();if(n.anchorNode&&n.focusNode)try{n.collapseToEnd()}catch(o){}}else for(j=d.nodes.length;j--;)i(d.nodes[j],e)}function C(b,c,d,e){var f,g,h,i=b.selection.getSelection();if(c.length){for(h=c.length;h--;)z(c[h],b,e);v(b,c,e)}else{for(f=i.anchorNode,g=i.anchorOffset,h=d.nodes.length;h--;)a.dom.unwrap(d.nodes[h]);w(b,f,g,e)}}function D(a,b,c){var d,e,f=a.selection.getSelection();if(b.length){for(e=b.length;e--;)x(b[e],c);v(a,b,c)}else if(r(f))d=s(f),x(d.textNode,c),w(a,d.textNode,d.wordOffset,c);else{var g=a.selection.getOwnRanges()[0];g&&A(g,a,c)}}function E(a){return a="string"==typeof a?{nodeName:a}:a,a.nodeName&&(a.nodeName=a.nodeName.toUpperCase()),a}var F="SPAN",G="b, big, i, small, tt, abbr, acronym, cite, code, dfn, em, kbd, strong, samp, var, a, bdo, br, q, span, sub, sup, button, label, textarea, input, select, u",H={b:"b, strong",strong:"b, strong",em:"em, i",i:"em, i"};a.commands.formatInline={exec:function(a,b,c){c=E(c),a.element.normalize();var d=j(a.selection,!0),e=q(a,c);e.nodes.length>0?B(a,d,e,c):D(a,d,c),a.element.normalize()},remove:function(a,b,c){c=E(c),a.element.normalize();var d=j(a.selection,!0),e=q(a,c);e.nodes.length>0&&C(a,d,e,c),a.element.normalize()},state:function(a,b,c){c=E(c);var d=q(a,c,!0).nodes;return 0===d.length?!1:d}}}(wysihtml5),function(a){var b={nodeName:"BLOCKQUOTE",toggle:!0};a.commands.insertBlockQuote={exec:function(c,d){return a.commands.formatBlock.exec(c,"formatBlock",b)},state:function(c,d){return a.commands.formatBlock.state(c,"formatBlock",b)}}}(wysihtml5),function(a){a.commands.insertHTML={exec:function(a,b,c){a.selection.insertHTML(c)},state:function(){return!1}}}(wysihtml5),function(a){var b="IMG";a.commands.insertImage={exec:function(c,d,e){e="object"==typeof e?e:{src:e};var f,g,h=c.doc,i=this.state(c);if(i&&!e.src)return c.selection.setBefore(i),g=i.parentNode,g.removeChild(i),a.dom.removeEmptyTextNodes(g),"A"!==g.nodeName||g.firstChild||(c.selection.setAfter(g),g.parentNode.removeChild(g)),void a.quirks.redraw(c.element);if(i)for(var j in e)e.hasOwnProperty(j)&&i.setAttribute("className"===j?"class":j,e[j]);else{i=h.createElement(b);for(var k in e)i.setAttribute("className"===k?"class":k,e[k]);c.selection.insertNode(i),a.browser.hasProblemsSettingCaretAfterImg()?(f=h.createTextNode(a.INVISIBLE_SPACE),c.selection.insertNode(f),c.selection.setAfter(f)):c.selection.setAfter(i)}},state:function(c){var d,e,f,g=c.doc;return a.dom.hasElementWithTagName(g,b)&&(d=c.selection.getSelectedNode())?d.nodeName===b?d:d.nodeType!==a.ELEMENT_NODE?!1:(e=c.selection.getText(),(e=a.lang.string(e).trim())?!1:(f=c.selection.getNodes(a.ELEMENT_NODE,function(a){return"IMG"===a.nodeName}),1!==f.length?!1:f[0])):!1}}}(wysihtml5),function(a){var b="<br>"+(a.browser.needsSpaceAfterLineBreak()?" ":"");a.commands.insertLineBreak={exec:function(a,c){a.selection.insertHTML(b)},state:function(){return!1}}}(wysihtml5),function(a){a.commands.insertOrderedList={exec:function(b,c){a.commands.insertList.exec(b,c,"OL")},state:function(b,c){return a.commands.insertList.state(b,c,"OL")}}}(wysihtml5),function(a){a.commands.insertUnorderedList={exec:function(b,c){a.commands.insertList.exec(b,c,"UL")},state:function(b,c){return a.commands.insertList.state(b,c,"UL")}}}(wysihtml5),wysihtml5.commands.insertList=function(a){var b=function(a,b){if(a&&a.nodeName){"string"==typeof b&&(b=[b]);for(var c=b.length;c--;)if(a.nodeName===b[c])return!0}return!1},c=function(c,d,e){var f={el:null,other:!1};if(c){var g=a.dom.getParentElement(c,{query:"li"},!1,e.element),h="UL"===d?"OL":"UL";b(c,d)?f.el=c:b(c,h)?f={el:c,other:!0}:g&&(b(g.parentNode,d)?f.el=g.parentNode:b(g.parentNode,h)&&(f={el:g.parentNode,other:!0}))}return f.el&&!e.element.contains(f.el)&&(f.el=null),f},d=function(b,c,d){var e,g,h="UL"===c?"OL":"UL";d.selection.executeAndRestoreRangy(function(){if(e=f(h,d),e.length)for(var i=e.length;i--;)a.dom.renameElement(e[i],c.toLowerCase());else{g=f(["OL","UL"],d);for(var j=g.length;j--;)a.dom.resolveList(g[j],d.config.useLineBreaks);a.dom.resolveList(b,d.config.useLineBreaks)}})},e=function(b,c,d){var e="UL"===c?"OL":"UL";d.selection.executeAndRestoreRangy(function(){for(var g=[b].concat(f(e,d)),h=g.length;h--;)a.dom.renameElement(g[h],c.toLowerCase())})},f=function(a,c){for(var d=c.selection.getOwnRanges(),e=[],f=d.length;f--;)e=e.concat(d[f].getNodes([1],function(c){return b(c,a)}));return e},g=function(b,c){var d;c.selection.isCollapsed()||(d=rangy.saveSelection(c.win));var e,f,g="_wysihtml5-temp-"+(new Date).getTime(),h=c.selection.deblockAndSurround({nodeName:"div",className:g});h.innerHTML=h.innerHTML.replace(a.INVISIBLE_SPACE_REG_EXP,""),h&&(e=/^(\s|(<br>))+$/i.test(h.innerHTML),f=a.dom.convertToList(h,b.toLowerCase(),c.parent.config.classNames.uneditableContainer),d&&rangy.restoreSelection(d),e&&c.selection.selectNode(f.querySelector("li"),!0))};return{exec:function(a,b,f){var h=a.doc,i="OL"===f?"insertOrderedList":"insertUnorderedList",j=a.selection.getSelectedNode(),k=c(j,f,a);k.el?k.other?e(k.el,f,a):d(k.el,f,a):a.commands.support(i)?h.execCommand(i,!1,null):g(f,a)},state:function(a,b,d){var e=a.selection.getSelectedNode(),f=c(e,d,a);return f.el&&!f.other?f.el:!1}}}(wysihtml5),function(a){var b={nodeName:"I",toggle:!0};a.commands.italic={exec:function(c,d){a.commands.formatInline.exec(c,d,b)},state:function(c,d){return a.commands.formatInline.state(c,d,b)}}}(wysihtml5),function(a){var b={className:"wysiwyg-text-align-center",classRegExp:/wysiwyg-text-align-[0-9a-z]+/g,toggle:!0};a.commands.justifyCenter={exec:function(c,d){return a.commands.formatBlock.exec(c,"formatBlock",b)},state:function(c,d){return a.commands.formatBlock.state(c,"formatBlock",b)}}}(wysihtml5),function(a){var b={className:"wysiwyg-text-align-left",classRegExp:/wysiwyg-text-align-[0-9a-z]+/g,toggle:!0};a.commands.justifyLeft={exec:function(c,d){return a.commands.formatBlock.exec(c,"formatBlock",b)},state:function(c,d){return a.commands.formatBlock.state(c,"formatBlock",b)}}}(wysihtml5),function(a){var b={className:"wysiwyg-text-align-right",classRegExp:/wysiwyg-text-align-[0-9a-z]+/g,toggle:!0};a.commands.justifyRight={exec:function(c,d){return a.commands.formatBlock.exec(c,"formatBlock",b)},state:function(c,d){return a.commands.formatBlock.state(c,"formatBlock",b)}}}(wysihtml5),function(a){var b={className:"wysiwyg-text-align-justify",classRegExp:/wysiwyg-text-align-[0-9a-z]+/g,toggle:!0};a.commands.justifyFull={exec:function(c,d){return a.commands.formatBlock.exec(c,"formatBlock",b)},state:function(c,d){return a.commands.formatBlock.state(c,"formatBlock",b)}}}(wysihtml5),function(a){var b={styleProperty:"textAlign",styleValue:"right",toggle:!0};a.commands.alignRightStyle={exec:function(c,d){return a.commands.formatBlock.exec(c,"formatBlock",b)},state:function(c,d){return a.commands.formatBlock.state(c,"formatBlock",b)}}}(wysihtml5),function(a){var b={styleProperty:"textAlign",styleValue:"left",toggle:!0};a.commands.alignLeftStyle={exec:function(c,d){return a.commands.formatBlock.exec(c,"formatBlock",b)},state:function(c,d){return a.commands.formatBlock.state(c,"formatBlock",b)}}}(wysihtml5),function(a){var b={styleProperty:"textAlign",styleValue:"center",toggle:!0};a.commands.alignCenterStyle={exec:function(c,d){return a.commands.formatBlock.exec(c,"formatBlock",b)},state:function(c,d){return a.commands.formatBlock.state(c,"formatBlock",b)}}}(wysihtml5),function(a){var b={styleProperty:"textAlign",styleValue:"justify",toggle:!0};a.commands.alignJustifyStyle={exec:function(c,d){return a.commands.formatBlock.exec(c,"formatBlock",b)},state:function(c,d){return a.commands.formatBlock.state(c,"formatBlock",b)}}}(wysihtml5),function(a){a.commands.redo={exec:function(a){return a.undoManager.redo()},state:function(a){return!1}}}(wysihtml5),function(a){var b={nodeName:"U",toggle:!0};a.commands.underline={exec:function(c,d){a.commands.formatInline.exec(c,d,b)},state:function(c,d){return a.commands.formatInline.state(c,d,b)}}}(wysihtml5),function(a){a.commands.undo={exec:function(a){return a.undoManager.undo()},state:function(a){return!1}}}(wysihtml5),function(a){a.commands.createTable={exec:function(a,b,c){var d,e,f;if(c&&c.cols&&c.rows&&parseInt(c.cols,10)>0&&parseInt(c.rows,10)>0){for(f=c.tableStyle?'<table style="'+c.tableStyle+'">':"<table>",f+="<tbody>",e=0;e<c.rows;e++){for(f+="<tr>",d=0;d<c.cols;d++)f+="<td><br></td>";f+="</tr>"}f+="</tbody></table>",a.commands.exec("insertHTML",f)}},state:function(a,b){return!1}}}(wysihtml5),function(a){a.commands.mergeTableCells={exec:function(b,c){b.tableSelection&&b.tableSelection.start&&b.tableSelection.end&&(this.state(b,c)?a.dom.table.unmergeCell(b.tableSelection.start):a.dom.table.mergeCellsBetween(b.tableSelection.start,b.tableSelection.end))},state:function(b,c){if(b.tableSelection){var d=b.tableSelection.start,e=b.tableSelection.end;if(d&&e&&d==e&&(a.dom.getAttribute(d,"colspan")&&parseInt(a.dom.getAttribute(d,"colspan"),10)>1||a.dom.getAttribute(d,"rowspan")&&parseInt(a.dom.getAttribute(d,"rowspan"),10)>1))return[d]}return!1}}}(wysihtml5),function(a){a.commands.addTableCells={exec:function(b,c,d){if(b.tableSelection&&b.tableSelection.start&&b.tableSelection.end){var e=a.dom.table.orderSelectionEnds(b.tableSelection.start,b.tableSelection.end);"before"==d||"above"==d?a.dom.table.addCells(e.start,d):("after"==d||"below"==d)&&a.dom.table.addCells(e.end,d),setTimeout(function(){b.tableSelection.select(e.start,e.end)},0)}},state:function(a,b){return!1}}}(wysihtml5),function(a){a.commands.deleteTableCells={exec:function(b,c,d){if(b.tableSelection&&b.tableSelection.start&&b.tableSelection.end){var e,f=a.dom.table.orderSelectionEnds(b.tableSelection.start,b.tableSelection.end),g=a.dom.table.indexOf(f.start),h=b.tableSelection.table;a.dom.table.removeCells(f.start,d),setTimeout(function(){e=a.dom.table.findCell(h,g),e||("row"==d&&(e=a.dom.table.findCell(h,{row:g.row-1,col:g.col})),"column"==d&&(e=a.dom.table.findCell(h,{row:g.row,col:g.col-1}))),e&&b.tableSelection.select(e,e)},0)}},state:function(a,b){return!1}}}(wysihtml5),
function(a){a.commands.indentList={exec:function(a,b,c){var d=a.selection.getSelectionParentsByTag("LI");return d?this.tryToPushLiLevel(d,a.selection):!1},state:function(a,b){return!1},tryToPushLiLevel:function(b,c){var d,e,f,g,h,i=!1;return c.executeAndRestoreRangy(function(){for(var c=b.length;c--;)g=b[c],d="OL"===g.parentNode.nodeName?"OL":"UL",e=g.ownerDocument.createElement(d),f=a.dom.domNode(g).prev({nodeTypes:[a.ELEMENT_NODE]}),h=f?f.querySelector("ul, ol"):null,f&&(h?h.appendChild(g):(e.appendChild(g),f.appendChild(e)),i=!0)}),i}}}(wysihtml5),function(a){a.commands.outdentList={exec:function(a,b,c){var d=a.selection.getSelectionParentsByTag("LI");return d?this.tryToPullLiLevel(d,a):!1},state:function(a,b){return!1},tryToPullLiLevel:function(b,c){var d,e,f,g,h,i=!1,j=this;return c.selection.executeAndRestoreRangy(function(){for(var k=b.length;k--;)if(g=b[k],g.parentNode&&(d=g.parentNode,"OL"===d.tagName||"UL"===d.tagName)){if(i=!0,e=a.dom.getParentElement(d.parentNode,{query:"ol, ul"},!1,c.element),f=a.dom.getParentElement(d.parentNode,{query:"li"},!1,c.element),e&&f)g.nextSibling&&(h=j.getAfterList(d,g),g.appendChild(h)),e.insertBefore(g,f.nextSibling);else{g.nextSibling&&(h=j.getAfterList(d,g),g.appendChild(h));for(var l=g.childNodes.length;l--;)d.parentNode.insertBefore(g.childNodes[l],d.nextSibling);d.parentNode.insertBefore(document.createElement("br"),d.nextSibling),g.parentNode.removeChild(g)}0===d.childNodes.length&&d.parentNode.removeChild(d)}}),i},getAfterList:function(a,b){for(var c=a.nodeName,d=document.createElement(c);b.nextSibling;)d.appendChild(b.nextSibling);return d}}}(wysihtml5),function(a){var b={nodeName:"SUB",toggle:!0};a.commands.subscript={exec:function(c,d){a.commands.formatInline.exec(c,d,b)},state:function(c,d){return a.commands.formatInline.state(c,d,b)}}}(wysihtml5),function(a){var b={nodeName:"SUP",toggle:!0};a.commands.superscript={exec:function(c,d){a.commands.formatInline.exec(c,d,b)},state:function(c,d){return a.commands.formatInline.state(c,d,b)}}}(wysihtml5),function(a){var b=90,c=89,d=8,e=46,f=25,g="data-wysihtml5-selection-node",h="data-wysihtml5-selection-offset",i=('<span id="_wysihtml5-undo" class="_wysihtml5-temp">'+a.INVISIBLE_SPACE+"</span>",'<span id="_wysihtml5-redo" class="_wysihtml5-temp">'+a.INVISIBLE_SPACE+"</span>",a.dom);a.UndoManager=a.lang.Dispatcher.extend({constructor:function(a){this.editor=a,this.composer=a.composer,this.element=this.composer.element,this.position=0,this.historyStr=[],this.historyDom=[],this.transact(),this._observe()},_observe:function(){var a,f=this;this.composer.sandbox.getDocument();i.observe(this.element,"keydown",function(a){if(!a.altKey&&(a.ctrlKey||a.metaKey)){var d=a.keyCode,e=d===b&&!a.shiftKey,g=d===b&&a.shiftKey||d===c;e?(f.undo(),a.preventDefault()):g&&(f.redo(),a.preventDefault())}}),i.observe(this.element,"keydown",function(b){var c=b.keyCode;c!==a&&(a=c,(c===d||c===e)&&f.transact())}),this.editor.on("newword:composer",function(){f.transact()}).on("beforecommand:composer",function(){f.transact()})},transact:function(){var b,c,d,e,i,j=this.historyStr[this.position-1],k=this.composer.getValue(!1,!1),l=this.element.offsetWidth>0&&this.element.offsetHeight>0;if(k!==j){var m=this.historyStr.length=this.historyDom.length=this.position;m>f&&(this.historyStr.shift(),this.historyDom.shift(),this.position--),this.position++,l&&(b=this.composer.selection.getRange(),c=b&&b.startContainer?b.startContainer:this.element,d=b&&b.startOffset?b.startOffset:0,c.nodeType===a.ELEMENT_NODE?e=c:(e=c.parentNode,i=this.getChildNodeIndex(e,c)),e.setAttribute(h,d),"undefined"!=typeof i&&e.setAttribute(g,i));var n=this.element.cloneNode(!!k);this.historyDom.push(n),this.historyStr.push(k),e&&(e.removeAttribute(h),e.removeAttribute(g))}},undo:function(){this.transact(),this.undoPossible()&&(this.set(this.historyDom[--this.position-1]),this.editor.fire("undo:composer"))},redo:function(){this.redoPossible()&&(this.set(this.historyDom[++this.position-1]),this.editor.fire("redo:composer"))},undoPossible:function(){return this.position>1},redoPossible:function(){return this.position<this.historyStr.length},set:function(a){this.element.innerHTML="";for(var b=0,c=a.childNodes,d=a.childNodes.length;d>b;b++)this.element.appendChild(c[b].cloneNode(!0));var e,f,i;a.hasAttribute(h)?(e=a.getAttribute(h),i=a.getAttribute(g),f=this.element):(f=this.element.querySelector("["+h+"]")||this.element,e=f.getAttribute(h),i=f.getAttribute(g),f.removeAttribute(h),f.removeAttribute(g)),null!==i&&(f=this.getChildNodeByIndex(f,+i)),this.composer.selection.set(f,e)},getChildNodeIndex:function(a,b){for(var c=0,d=a.childNodes,e=d.length;e>c;c++)if(d[c]===b)return c},getChildNodeByIndex:function(a,b){return a.childNodes[b]}})}(wysihtml5),wysihtml5.views.View=Base.extend({constructor:function(a,b,c){this.parent=a,this.element=b,this.config=c,this.config.noTextarea||this._observeViewChange()},_observeViewChange:function(){var a=this;this.parent.on("beforeload",function(){a.parent.on("change_view",function(b){b===a.name?(a.parent.currentView=a,a.show(),setTimeout(function(){a.focus()},0)):a.hide()})})},focus:function(){if(!this.element||!this.element.ownerDocument||this.element.ownerDocument.querySelector(":focus")!==this.element)try{this.element&&this.element.focus()}catch(a){}},hide:function(){this.element.style.display="none"},show:function(){this.element.style.display=""},disable:function(){this.element.setAttribute("disabled","disabled")},enable:function(){this.element.removeAttribute("disabled")}}),function(a){var b=a.dom,c=a.browser;a.views.Composer=a.views.View.extend({name:"composer",constructor:function(a,b,c){this.base(a,b,c),this.config.noTextarea?this.editableArea=b:this.textarea=this.parent.textarea,this.config.contentEditableMode?this._initContentEditableArea():this._initSandbox()},clear:function(){this.element.innerHTML=c.displaysCaretInEmptyContentEditableCorrectly()?"":"<br>"},getValue:function(b,c){var d=this.isEmpty()?"":a.quirks.getCorrectInnerHTML(this.element);return b!==!1&&(d=this.parent.parse(d,c===!1?!1:!0)),d},setValue:function(a,b){b!==!1&&(a=this.parent.parse(a));try{this.element.innerHTML=a}catch(c){this.element.innerText=a}},cleanUp:function(a){var b;this.selection&&(b=rangy.saveSelection(this.win)),this.parent.parse(this.element,void 0,a),b&&rangy.restoreSelection(b)},show:function(){this.editableArea.style.display=this._displayStyle||"",this.config.noTextarea||this.textarea.element.disabled||(this.disable(),this.enable())},hide:function(){this._displayStyle=b.getStyle("display").from(this.editableArea),"none"===this._displayStyle&&(this._displayStyle=null),this.editableArea.style.display="none"},disable:function(){this.parent.fire("disable:composer"),this.element.removeAttribute("contentEditable")},enable:function(){this.parent.fire("enable:composer"),this.element.setAttribute("contentEditable","true")},focus:function(b){a.browser.doesAsyncFocus()&&this.hasPlaceholderSet()&&this.clear(),this.base();var c=this.element.lastChild;b&&c&&this.selection&&("BR"===c.nodeName?this.selection.setBefore(this.element.lastChild):this.selection.setAfter(this.element.lastChild))},getScrollPos:function(){if(this.doc&&this.win){var a={};return"undefined"!=typeof this.win.pageYOffset?a.y=this.win.pageYOffset:a.y=(this.doc.documentElement||this.doc.body.parentNode||this.doc.body).scrollTop,"undefined"!=typeof this.win.pageXOffset?a.x=this.win.pageXOffset:a.x=(this.doc.documentElement||this.doc.body.parentNode||this.doc.body).scrollLeft,a}},setScrollPos:function(a){a&&"undefined"!=typeof a.x&&"undefined"!=typeof a.y&&this.win.scrollTo(a.x,a.y)},getTextContent:function(){return b.getTextContent(this.element)},hasPlaceholderSet:function(){return this.getTextContent()==(this.config.noTextarea?this.editableArea.getAttribute("data-placeholder"):this.textarea.element.getAttribute("placeholder"))&&this.placeholderSet},isEmpty:function(){var a=this.element.innerHTML.toLowerCase();return/^(\s|<br>|<\/br>|<p>|<\/p>)*$/i.test(a)||""===a||"<br>"===a||"<p></p>"===a||"<p><br></p>"===a||this.hasPlaceholderSet()},_initContentEditableArea:function(){var a=this;this.config.noTextarea?this.sandbox=new b.ContentEditableArea(function(){a._create()},{className:this.config.classNames.sandbox},this.editableArea):(this.sandbox=new b.ContentEditableArea(function(){a._create()},{className:this.config.classNames.sandbox}),this.editableArea=this.sandbox.getContentEditable(),b.insert(this.editableArea).after(this.textarea.element),this._createWysiwygFormField())},_initSandbox:function(){var a=this;this.sandbox=new b.Sandbox(function(){a._create()},{stylesheets:this.config.stylesheets,className:this.config.classNames.sandbox}),this.editableArea=this.sandbox.getIframe();var c=this.textarea.element;b.insert(this.editableArea).after(c),this._createWysiwygFormField()},_createWysiwygFormField:function(){if(this.textarea.element.form){var a=document.createElement("input");a.type="hidden",a.name="_wysihtml5_mode",a.value=1,b.insert(a).after(this.textarea.element)}},_create:function(){var d=this;this.doc=this.sandbox.getDocument(),this.win=this.sandbox.getWindow(),this.element=this.config.contentEditableMode?this.sandbox.getContentEditable():this.doc.body,this.config.noTextarea?this.cleanUp():(this.textarea=this.parent.textarea,this.element.innerHTML=this.textarea.getValue(!0,!1)),this.selection=new a.Selection(this.parent,this.element,this.config.classNames.uneditableContainer),this.commands=new a.Commands(this.parent),this.config.noTextarea||b.copyAttributes(["className","spellcheck","title","lang","dir","accessKey"]).from(this.textarea.element).to(this.element),b.addClass(this.element,this.config.classNames.composer),this.config.style&&!this.config.contentEditableMode&&this.style(),this.observe();var e=this.config.name;e&&(b.addClass(this.element,e),this.config.contentEditableMode||b.addClass(this.editableArea,e)),this.enable(),!this.config.noTextarea&&this.textarea.element.disabled&&this.disable();var f="string"==typeof this.config.placeholder?this.config.placeholder:this.config.noTextarea?this.editableArea.getAttribute("data-placeholder"):this.textarea.element.getAttribute("placeholder");f&&b.simulatePlaceholder(this.parent,this,f,this.config.classNames.placeholder),this.commands.exec("styleWithCSS",!1),this._initAutoLinking(),this._initObjectResizing(),this._initUndoManager(),this._initLineBreaking(),this.config.noTextarea||!this.textarea.element.hasAttribute("autofocus")&&document.querySelector(":focus")!=this.textarea.element||c.isIos()||setTimeout(function(){d.focus(!0)},100),c.clearsContentEditableCorrectly()||a.quirks.ensureProperClearing(this),this.initSync&&this.config.sync&&this.initSync(),this.config.noTextarea||this.textarea.hide(),this.parent.fire("beforeload").fire("load")},_initAutoLinking:function(){var d=this,e=c.canDisableAutoLinking(),f=c.doesAutoLinkingInContentEditable();if(e){var g=this.element.innerHTML;this.commands.exec("AutoUrlDetect",!1,!1),this.element.innerHTML=g}if(this.config.autoLink){(!f||f&&e)&&(this.parent.on("newword:composer",function(){if(b.getTextContent(d.element).match(b.autoLink.URL_REG_EXP)){for(var c=d.selection.getSelectedNode(),e=d.element.querySelectorAll("."+d.config.classNames.uneditableContainer),f=!1,g=e.length;g--;)a.dom.contains(e[g],c)&&(f=!0);f||b.autoLink(c,[d.config.classNames.uneditableContainer])}}),b.observe(this.element,"blur",function(){b.autoLink(d.element,[d.config.classNames.uneditableContainer])}));var h=this.sandbox.getDocument().getElementsByTagName("a"),i=b.autoLink.URL_REG_EXP,j=function(c){var d=a.lang.string(b.getTextContent(c)).trim();return"www."===d.substr(0,4)&&(d="http://"+d),d};b.observe(this.element,"keydown",function(a){if(h.length){var c,e=d.selection.getSelectedNode(a.target.ownerDocument),f=b.getParentElement(e,{query:"a"},4);f&&(c=j(f),setTimeout(function(){var a=j(f);a!==c&&a.match(i)&&f.setAttribute("href",a)},0))}})}},_initObjectResizing:function(){if(this.commands.exec("enableObjectResizing",!0),c.supportsEvent("resizeend")){var d=["width","height"],e=d.length,f=this.element;b.observe(f,"resizeend",function(b){var c,g=b.target||b.srcElement,h=g.style,i=0;if("IMG"===g.nodeName){for(;e>i;i++)c=d[i],h[c]&&(g.setAttribute(c,parseInt(h[c],10)),h[c]="");a.quirks.redraw(f)}})}},_initUndoManager:function(){this.undoManager=new a.UndoManager(this.parent)},_initLineBreaking:function(){function d(a){var c=b.getParentElement(a,{query:"p, div"},2);c&&b.contains(e.element,c)&&e.selection.executeAndRestore(function(){e.config.useLineBreaks?b.replaceWithChildNodes(c):"P"!==c.nodeName&&b.renameElement(c,"p")})}var e=this,f="li, p, h1, h2, h3, h4, h5, h6",g="ul, ol, menu";this.config.useLineBreaks||b.observe(this.element,["focus","keydown"],function(){if(e.isEmpty()){var a=e.doc.createElement("P");e.element.innerHTML="",e.element.appendChild(a),c.displaysCaretInEmptyContentEditableCorrectly()?e.selection.selectNode(a,!0):(a.innerHTML="<br>",e.selection.setBefore(a.firstChild))}}),b.observe(this.element,"keydown",function(c){var h=c.keyCode;if(!c.shiftKey&&(h===a.ENTER_KEY||h===a.BACKSPACE_KEY)){var i=b.getParentElement(e.selection.getSelectedNode(),{query:f},4);return i?void setTimeout(function(){var c,f=e.selection.getSelectedNode();if("LI"===i.nodeName){if(!f)return;c=b.getParentElement(f,{query:g},2),c||d(f)}h===a.ENTER_KEY&&i.nodeName.match(/^H[1-6]$/)&&d(f)},0):void(e.config.useLineBreaks&&h===a.ENTER_KEY&&!a.browser.insertsLineBreaksOnReturn()&&(c.preventDefault(),e.commands.exec("insertLineBreak")))}})}})}(wysihtml5),function(a){var b=a.dom,c=document,d=window,e=c.createElement("div"),f=["background-color","color","cursor","font-family","font-size","font-style","font-variant","font-weight","line-height","letter-spacing","text-align","text-decoration","text-indent","text-rendering","word-break","word-wrap","word-spacing"],g=["background-color","border-collapse","border-bottom-color","border-bottom-style","border-bottom-width","border-left-color","border-left-style","border-left-width","border-right-color","border-right-style","border-right-width","border-top-color","border-top-style","border-top-width","clear","display","float","margin-bottom","margin-left","margin-right","margin-top","outline-color","outline-offset","outline-width","outline-style","padding-left","padding-right","padding-top","padding-bottom","position","top","left","right","bottom","z-index","vertical-align","text-align","-webkit-box-sizing","-moz-box-sizing","-ms-box-sizing","box-sizing","-webkit-box-shadow","-moz-box-shadow","-ms-box-shadow","box-shadow","-webkit-border-top-right-radius","-moz-border-radius-topright","border-top-right-radius","-webkit-border-bottom-right-radius","-moz-border-radius-bottomright","border-bottom-right-radius","-webkit-border-bottom-left-radius","-moz-border-radius-bottomleft","border-bottom-left-radius","-webkit-border-top-left-radius","-moz-border-radius-topleft","border-top-left-radius","width","height"],h=["html                 { height: 100%; }","body                 { height: 100%; padding: 1px 0 0 0; margin: -1px 0 0 0; }","body > p:first-child { margin-top: 0; }","._wysihtml5-temp     { display: none; }",a.browser.isGecko?"body.placeholder { color: graytext !important; }":"body.placeholder { color: #a9a9a9 !important; }","img:-moz-broken      { -moz-force-broken-image-icon: 1; height: 24px; width: 24px; }"],i=function(a){if(a.setActive)try{a.setActive()}catch(e){}else{var f=a.style,g=c.documentElement.scrollTop||c.body.scrollTop,h=c.documentElement.scrollLeft||c.body.scrollLeft,i={position:f.position,top:f.top,left:f.left,WebkitUserSelect:f.WebkitUserSelect};b.setStyles({position:"absolute",top:"-99999px",left:"-99999px",WebkitUserSelect:"none"}).on(a),a.focus(),b.setStyles(i).on(a),d.scrollTo&&d.scrollTo(h,g)}};a.views.Composer.prototype.style=function(){var d,j=this,k=c.querySelector(":focus"),l=this.textarea.element,m=l.hasAttribute("placeholder"),n=m&&l.getAttribute("placeholder"),o=l.style.display,p=l.disabled;this.focusStylesHost=e.cloneNode(!1),this.blurStylesHost=e.cloneNode(!1),this.disabledStylesHost=e.cloneNode(!1),m&&l.removeAttribute("placeholder"),l===k&&l.blur(),l.disabled=!1,l.style.display=d="none",(l.getAttribute("rows")&&"auto"===b.getStyle("height").from(l)||l.getAttribute("cols")&&"auto"===b.getStyle("width").from(l))&&(l.style.display=d=o),b.copyStyles(g).from(l).to(this.editableArea).andTo(this.blurStylesHost),b.copyStyles(f).from(l).to(this.element).andTo(this.blurStylesHost),b.insertCSS(h).into(this.element.ownerDocument),l.disabled=!0,b.copyStyles(g).from(l).to(this.disabledStylesHost),b.copyStyles(f).from(l).to(this.disabledStylesHost),l.disabled=p,l.style.display=o,i(l),l.style.display=d,b.copyStyles(g).from(l).to(this.focusStylesHost),b.copyStyles(f).from(l).to(this.focusStylesHost),l.style.display=o,b.copyStyles(["display"]).from(l).to(this.editableArea);var q=a.lang.array(g).without(["display"]);return k?k.focus():l.blur(),m&&l.setAttribute("placeholder",n),this.parent.on("focus:composer",function(){b.copyStyles(q).from(j.focusStylesHost).to(j.editableArea),b.copyStyles(f).from(j.focusStylesHost).to(j.element)}),this.parent.on("blur:composer",function(){b.copyStyles(q).from(j.blurStylesHost).to(j.editableArea),b.copyStyles(f).from(j.blurStylesHost).to(j.element)}),this.parent.observe("disable:composer",function(){b.copyStyles(q).from(j.disabledStylesHost).to(j.editableArea),b.copyStyles(f).from(j.disabledStylesHost).to(j.element)}),this.parent.observe("enable:composer",function(){b.copyStyles(q).from(j.blurStylesHost).to(j.editableArea),b.copyStyles(f).from(j.blurStylesHost).to(j.element)}),this}}(wysihtml5),function(a){var b=a.dom,c=a.browser,d={66:"bold",73:"italic",85:"underline"},e=function(a,b,c){for(var d=0,e=b.length;e>d;d++)a.addEventListener(b[d],c,!1)},f=function(a,b,c){for(var d=0,e=b.length;e>d;d++)a.removeEventListener(b[d],c,!1)},g=function(b,c){if(b.selection.caretIsLastInSelection()){var d=b.selection.getSelection(),e=d.anchorNode;if(e&&1===e.nodeType&&(a.dom.getParentElement(e,{query:"td, th"},!1,b.element)||c)){var f=e.childNodes[d.anchorOffset];if(f&&1===f.nodeType&"BR"===f.nodeName)return f.parentNode.removeChild(f),!0}}return!1},h=function(a){var b=a.selection.getBeforeSelection(!0);if(b&&("element"===b.type||"leafnode"===b.type)&&1===b.node.nodeType&&b.node.classList.contains(a.config.classNames.uneditableContainer)){if(g(a,!0))return!0;try{var c=new CustomEvent("wysihtml5:uneditable:delete");b.node.dispatchEvent(c)}catch(d){}return b.node.parentNode.removeChild(b.node),!0}return!1},i=function(b){var c=b.selection,d=c.getPreviousNode();if(c.caretIsFirstInSelection()&&d&&1===d.nodeType&&/block/.test(b.win.getComputedStyle(d).display)){if(/^\s*$/.test(d.textContent||d.innerText))return d.parentNode.removeChild(d),!0;if(d.lastChild){var e=d.lastChild,f=c.getSelectedNode(),g=a.dom.domNode(d).commonAncestor(f,b.element);if(curNode=g?a.dom.getParentElement(f,{query:"h1, h2, h3, h4, h5, h6, p, pre, div, blockquote"},!1,g):null,curNode){for(;curNode.firstChild;)d.appendChild(curNode.firstChild);return c.setAfter(e),!0}if(3===f.nodeType)return d.appendChild(f),c.setAfter(e),!0}}return!1},j=function(a,b){var c=b.selection;b.element;if(c.isCollapsed()){if(i(b))return void a.preventDefault();if(g(b))return void a.preventDefault();if(h(b))return void a.preventDefault()}else c.containsUneditable()&&(a.preventDefault(),c.deleteContents())},k=function(a,b,c){if(a.selection.isCollapsed()){if(a.selection.caretIsInTheBeginnig("li"))if(c){if(a.commands.exec("outdentList"))return}else if(a.commands.exec("indentList"))return}else a.selection.deleteContents();a.commands.exec("insertHTML","&emsp;")},l=function(a){this.domNodeRemovedInterval&&clearInterval(domNodeRemovedInterval),this.parent.fire("destroy:composer")},m=function(a){this.parent.fire("beforeinteraction",a).fire("beforeinteraction:composer",a),setTimeout(function(){this.parent.fire("interaction",a).fire("interaction:composer",a)}.bind(this),0)},n=function(a){this.parent.fire("focus",a).fire("focus:composer",a),setTimeout(function(){this.focusState=this.getValue(!1,!1)}.bind(this),0)},o=function(a){if(this.focusState!==this.getValue(!1,!1)){var b=a;"function"==typeof Object.create&&(b=Object.create(a,{type:{value:"change"}})),this.parent.fire("change",b).fire("change:composer",b)}this.parent.fire("blur",a).fire("blur:composer",a)},p=function(a){this.parent.fire(a.type,a).fire(a.type+":composer",a),"paste"===a.type&&setTimeout(function(){this.parent.fire("newword:composer")}.bind(this),0)},q=function(b){this.config.copyedFromMarking&&(a.browser.supportsModernPaste()&&(b.clipboardData.setData("text/html",this.config.copyedFromMarking+this.selection.getHtml()),b.clipboardData.setData("text/plain",this.selection.getPlainText()),b.preventDefault()),this.parent.fire(b.type,b).fire(b.type+":composer",b))},r=function(b){var c=b.keyCode;(c===a.SPACE_KEY||c===a.ENTER_KEY)&&this.parent.fire("newword:composer")},s=function(b){if(!c.canSelectImagesInContentEditable()){var d=b.target,e=this.element.querySelectorAll("img"),f=this.element.querySelectorAll("."+this.config.classNames.uneditableContainer+" img"),g=a.lang.array(e).without(f);"IMG"===d.nodeName&&a.lang.array(g).contains(d)&&this.selection.selectNode(d)}},t=function(a){var b,c={IMG:"Image: ",A:"Link: "},d=a.target,e=d.nodeName;("A"===e||"IMG"===e)&&(d.hasAttribute("title")||(b=c[e]+(d.getAttribute("href")||d.getAttribute("src")),d.setAttribute("title",b)))},u=function(b){if(this.config.classNames.uneditableContainer){var c=a.dom.getParentElement(b.target,{query:"."+this.config.classNames.uneditableContainer},!1,this.element);c&&this.selection.setAfter(c)}},v=function(a){c.canSelectImagesInContentEditable()||setTimeout(function(){this.selection.getSelection().removeAllRanges()}.bind(this),0)},w=function(b){var c,e,f=b.keyCode,g=d[f];return!b.ctrlKey&&!b.metaKey||b.altKey||65!==f?((b.ctrlKey||b.metaKey)&&!b.altKey&&g&&(this.commands.exec(g),b.preventDefault()),f===a.BACKSPACE_KEY&&j(b,this),(f===a.BACKSPACE_KEY||f===a.DELETE_KEY)&&(c=this.selection.getSelectedNode(!0),c&&"IMG"===c.nodeName&&(b.preventDefault(),e=c.parentNode,e.removeChild(c),"A"!==e.nodeName||e.firstChild||e.parentNode.removeChild(e),setTimeout(function(){a.quirks.redraw(this.element)}.bind(this),0))),void(this.config.handleTabKey&&f===a.TAB_KEY&&(b.preventDefault(),k(this,this.element,b.shiftKey)))):(this.selection.selectAll(),void b.preventDefault())},x=function(){var b=function(){window.removeEventListener("load",b),this.doc.execCommand("enableObjectResizing",!1,"false"),this.doc.execCommand("enableInlineTableEditing",!1,"false")}.bind(this),c=function(){b.call(this),f(this.sandbox.getIframe(),["focus","mouseup","mouseover"],c)}.bind(this);this.doc.execCommand&&a.browser.supportsCommand(this.doc,"enableObjectResizing")&&a.browser.supportsCommand(this.doc,"enableInlineTableEditing")&&(this.sandbox.getIframe?e(this.sandbox.getIframe(),["focus","mouseup","mouseover"],c):window.addEventListener("load",b)),this.tableSelection=a.quirks.tableCellsSelection(this.element,this.parent)};a.views.Composer.prototype.observe=function(){var a=this.sandbox.getIframe?this.sandbox.getIframe():this.sandbox.getContentEditable(),d=(this.element,c.supportsEventsInIframeCorrectly()||this.sandbox.getContentEditable?this.element:this.sandbox.getWindow());this.focusState=this.getValue(!1,!1),a.addEventListener(["DOMNodeRemoved"],l.bind(this),!1),c.supportsMutationEvents()||(this.domNodeRemovedInterval=setInterval(function(){b.contains(document.documentElement,a)||l.call(this)},250)),this.config.handleTables&&x.call(this),e(d,["drop","paste","mouseup","focus","keyup"],m.bind(this)),d.addEventListener("focus",n.bind(this),!1),d.addEventListener("blur",o.bind(this),!1),e(this.element,["drop","paste","beforepaste"],p.bind(this),!1),this.element.addEventListener("copy",q.bind(this),!1),this.element.addEventListener("mousedown",s.bind(this),!1),this.element.addEventListener("mouseover",t.bind(this),!1),this.element.addEventListener("click",u.bind(this),!1),this.element.addEventListener("drop",v.bind(this),!1),this.element.addEventListener("keyup",r.bind(this),!1),this.element.addEventListener("keydown",w.bind(this),!1),this.element.addEventListener("dragenter",function(){this.parent.fire("unset_placeholder")}.bind(this),!1)}}(wysihtml5),function(a){var b=400;a.views.Synchronizer=Base.extend({constructor:function(a,b,c){this.editor=a,this.textarea=b,this.composer=c,this._observe()},fromComposerToTextarea:function(b){this.textarea.setValue(a.lang.string(this.composer.getValue(!1,!1)).trim(),b)},fromTextareaToComposer:function(a){var b=this.textarea.getValue(!1,!1);b?this.composer.setValue(b,a):(this.composer.clear(),this.editor.fire("set_placeholder"))},sync:function(a){"textarea"===this.editor.currentView.name?this.fromTextareaToComposer(a):this.fromComposerToTextarea(a)},_observe:function(){var c,d=this,e=this.textarea.element.form,f=function(){c=setInterval(function(){d.fromComposerToTextarea()},b)},g=function(){clearInterval(c),c=null};f(),e&&(a.dom.observe(e,"submit",function(){d.sync(!0)}),a.dom.observe(e,"reset",function(){setTimeout(function(){d.fromTextareaToComposer()},0)})),this.editor.on("change_view",function(a){"composer"!==a||c?"textarea"===a&&(d.fromComposerToTextarea(!0),g()):(d.fromTextareaToComposer(!0),f())}),this.editor.on("destroy:composer",g)}})}(wysihtml5),function(a){a.views.SourceView=Base.extend({constructor:function(a,b){this.editor=a,this.composer=b,this._observe()},switchToTextarea:function(a){var b=this.composer.win.getComputedStyle(this.composer.element),c=parseFloat(b.width),d=Math.max(parseFloat(b.height),100);this.textarea||(this.textarea=this.composer.doc.createElement("textarea"),this.textarea.className="wysihtml5-source-view"),this.textarea.style.width=c+"px",this.textarea.style.height=d+"px",this.textarea.value=this.editor.getValue(a,!0),this.composer.element.parentNode.insertBefore(this.textarea,this.composer.element),this.editor.currentView="source",this.composer.element.style.display="none"},switchToComposer:function(a){var b=this.textarea.value;b?this.composer.setValue(b,a):(this.composer.clear(),this.editor.fire("set_placeholder")),this.textarea.parentNode.removeChild(this.textarea),this.editor.currentView=this.composer,this.composer.element.style.display=""},_observe:function(){this.editor.on("change_view",function(a){"composer"===a?this.switchToComposer(!0):"textarea"===a&&this.switchToTextarea(!0)}.bind(this))}})}(wysihtml5),wysihtml5.views.Textarea=wysihtml5.views.View.extend({name:"textarea",constructor:function(a,b,c){this.base(a,b,c),this._observe()},clear:function(){this.element.value=""},getValue:function(a){var b=this.isEmpty()?"":this.element.value;return a!==!1&&(b=this.parent.parse(b)),b},setValue:function(a,b){b!==!1&&(a=this.parent.parse(a)),this.element.value=a},cleanUp:function(a){var b=this.parent.parse(this.element.value,void 0,a);this.element.value=b},hasPlaceholderSet:function(){var a=wysihtml5.browser.supportsPlaceholderAttributeOn(this.element),b=this.element.getAttribute("placeholder")||null,c=this.element.value,d=!c;return a&&d||c===b},isEmpty:function(){return!wysihtml5.lang.string(this.element.value).trim()||this.hasPlaceholderSet()},_observe:function(){var a=this.element,b=this.parent,c={focusin:"focus",focusout:"blur"},d=wysihtml5.browser.supportsEvent("focusin")?["focusin","focusout","change"]:["focus","blur","change"];b.on("beforeload",function(){wysihtml5.dom.observe(a,d,function(a){var d=c[a.type]||a.type;b.fire(d).fire(d+":textarea")}),wysihtml5.dom.observe(a,["paste","drop"],function(){setTimeout(function(){b.fire("paste").fire("paste:textarea")},0)})})}}),function(a){var b,c={name:b,style:!0,toolbar:b,showToolbarAfterInit:!0,showToolbarDialogsOnSelection:!0,autoLink:!0,handleTables:!0,handleTabKey:!0,parserRules:{tags:{br:{},span:{},div:{},p:{},b:{},i:{},u:{}},classes:{}},pasteParserRulesets:null,parser:a.dom.parse,useLineBreaks:!0,stylesheets:[],placeholderText:b,supportTouchDevices:!0,cleanUp:!0,contentEditableMode:!1,classNames:{composer:"wysihtml5-editor",body:"wysihtml5-supported",sandbox:"wysihtml5-sandbox",placeholder:"wysihtml5-placeholder",uneditableContainer:"wysihtml5-uneditable-container"},copyedFromMarking:'<meta name="copied-from" content="wysihtml5">'};a.Editor=a.lang.Dispatcher.extend({constructor:function(b,d){if(this.editableElement="string"==typeof b?document.getElementById(b):b,this.config=a.lang.object({}).merge(c).merge(d).get(),this._isCompatible=a.browser.supported(),d&&d.classNames&&a.lang.object(this.config.classNames).merge(d.classNames),"textarea"!=this.editableElement.nodeName.toLowerCase()&&(this.config.contentEditableMode=!0,this.config.noTextarea=!0),this.config.noTextarea||(this.textarea=new a.views.Textarea(this,this.editableElement,this.config),this.currentView=this.textarea),!this._isCompatible||!this.config.supportTouchDevices&&a.browser.isTouchDevice()){var e=this;return void setTimeout(function(){e.fire("beforeload").fire("load")},0)}a.dom.addClass(document.body,this.config.classNames.body),this.composer=new a.views.Composer(this,this.editableElement,this.config),this.currentView=this.composer,"function"==typeof this.config.parser&&this._initParser(),this.on("beforeload",this.handleBeforeLoad)},handleBeforeLoad:function(){this.config.noTextarea?this.sourceView=new a.views.SourceView(this,this.composer):this.synchronizer=new a.views.Synchronizer(this,this.textarea,this.composer),this.config.toolbar&&(this.toolbar=new a.toolbar.Toolbar(this,this.config.toolbar,this.config.showToolbarAfterInit))},isCompatible:function(){return this._isCompatible},clear:function(){return this.currentView.clear(),this},getValue:function(a,b){return this.currentView.getValue(a,b)},setValue:function(a,b){return this.fire("unset_placeholder"),a?(this.currentView.setValue(a,b),this):this.clear()},cleanUp:function(a){this.currentView.cleanUp(a)},focus:function(a){return this.currentView.focus(a),this},disable:function(){return this.currentView.disable(),this},enable:function(){return this.currentView.enable(),this},isEmpty:function(){return this.currentView.isEmpty()},hasPlaceholderSet:function(){return this.currentView.hasPlaceholderSet()},destroy:function(){this.composer&&this.composer.sandbox&&this.composer.sandbox.destroy(),this.toolbar&&this.toolbar.destroy(),this.off()},parse:function(b,c,d){var e=this.config.contentEditableMode?document:this.composer?this.composer.sandbox.getDocument():null,f=this.config.parser(b,{rules:d||this.config.parserRules,cleanUp:this.config.cleanUp,context:e,uneditableClass:this.config.classNames.uneditableContainer,clearInternals:c});return"object"==typeof b&&a.quirks.redraw(b),f},_initParser:function(){var b;a.browser.supportsModernPaste()?this.on("paste:composer",function(c){c.preventDefault(),b=a.dom.getPastedHtml(c),b&&this._cleanAndPaste(b)}.bind(this)):this.on("beforepaste:composer",function(b){b.preventDefault();var c=this.composer.getScrollPos();a.dom.getPastedHtmlWithDiv(this.composer,function(a){a&&this._cleanAndPaste(a),this.composer.setScrollPos(c)}.bind(this))}.bind(this))},_cleanAndPaste:function(b){var c=a.quirks.cleanPastedHTML(b,{referenceNode:this.composer.element,rules:this.config.pasteParserRulesets||[{set:this.config.parserRules}],uneditableClass:this.config.classNames.uneditableContainer});this.composer.selection.deleteContents(),this.composer.selection.insertHTML(c)}})}(wysihtml5),function(a){var b=a.dom,c="wysihtml5-command-dialog-opened",d="input, select, textarea",e="[data-wysihtml5-dialog-field]",f="data-wysihtml5-dialog-field";a.toolbar.Dialog=a.lang.Dispatcher.extend({constructor:function(a,b){this.link=a,this.container=b},_observe:function(){if(!this._observed){var d=this,e=function(a){var b=d._serialize();d.fire("save",b),d.hide(),a.preventDefault(),a.stopPropagation()};b.observe(d.link,"click",function(){b.hasClass(d.link,c)&&setTimeout(function(){d.hide()},0)}),b.observe(this.container,"keydown",function(b){
var c=b.keyCode;c===a.ENTER_KEY&&e(b),c===a.ESCAPE_KEY&&d.cancel()}),b.delegate(this.container,"[data-wysihtml5-dialog-action=save]","click",e),b.delegate(this.container,"[data-wysihtml5-dialog-action=cancel]","click",function(a){d.cancel(),a.preventDefault(),a.stopPropagation()}),this._observed=!0}},_serialize:function(){for(var a={},b=this.container.querySelectorAll(e),c=b.length,d=0;c>d;d++)a[b[d].getAttribute(f)]=b[d].value;return a},_interpolate:function(a){for(var b,c,d,g=document.querySelector(":focus"),h=this.container.querySelectorAll(e),i=h.length,j=0;i>j;j++)b=h[j],b!==g&&(a&&"hidden"===b.type||(c=b.getAttribute(f),d=this.elementToChange&&"boolean"!=typeof this.elementToChange?this.elementToChange.getAttribute(c)||"":b.defaultValue,b.value=d))},update:function(a){this.elementToChange=a?a:this.elementToChange,this._interpolate()},show:function(a){var e=this.container.querySelector(d);if(this._observe(),this.update(a),b.addClass(this.link,c),this.container.style.display="",this.isOpen=!0,this.fire("show"),e&&!a)try{e.focus()}catch(f){}},_hide:function(a){this.elementToChange=null,b.removeClass(this.link,c),this.container.style.display="none",this.isOpen=!1},hide:function(){this._hide(),this.fire("hide")},cancel:function(){this._hide(),this.fire("cancel")}})}(wysihtml5),function(a){var b=a.dom,c={position:"relative"},d={left:0,margin:0,opacity:0,overflow:"hidden",padding:0,position:"absolute",top:0,zIndex:1},e={cursor:"inherit",fontSize:"50px",height:"50px",marginTop:"-25px",outline:0,padding:0,position:"absolute",right:"-4px",top:"50%"},f={"x-webkit-speech":"",speech:""};a.toolbar.Speech=function(g,h){var i=document.createElement("input");if(!a.browser.supportsSpeechApiOn(i))return void(h.style.display="none");var j=g.editor.textarea.element.getAttribute("lang");j&&(f.lang=j);var k=document.createElement("div");a.lang.object(d).merge({width:h.offsetWidth+"px",height:h.offsetHeight+"px"}),b.insert(i).into(k),b.insert(k).into(h),b.setStyles(e).on(i),b.setAttributes(f).on(i),b.setStyles(d).on(k),b.setStyles(c).on(h);var l="onwebkitspeechchange"in i?"webkitspeechchange":"speechchange";b.observe(i,l,function(){g.execCommand("insertText",i.value),i.value=""}),b.observe(i,"click",function(a){b.hasClass(h,"wysihtml5-command-disabled")&&a.preventDefault(),a.stopPropagation()})}}(wysihtml5),function(a){function b(b,c){var d=b.commands.state(c.name,c.value);return!c.dialog.multiselect&&a.lang.object(d).isArray()&&(d=1===d.length?d[0]:!0),d}var c="wysihtml5-command-disabled",d="wysihtml5-commands-disabled",e="wysihtml5-command-active",f="wysihtml5-action-active",g=a.dom;a.toolbar.Toolbar=Base.extend({constructor:function(b,g,h){this.editor=b,this.container="string"==typeof g?document.getElementById(g):g,this.composer=b.composer,this._getLinks("command"),this._getLinks("action"),this._observe(),h&&this.show(),null!=b.config.classNameCommandDisabled&&(c=b.config.classNameCommandDisabled),null!=b.config.classNameCommandsDisabled&&(d=b.config.classNameCommandsDisabled),null!=b.config.classNameCommandActive&&(e=b.config.classNameCommandActive),null!=b.config.classNameActionActive&&(f=b.config.classNameActionActive);for(var i=this.container.querySelectorAll("[data-wysihtml5-command=insertSpeech]"),j=i.length,k=0;j>k;k++)new a.toolbar.Speech(this,i[k])},_getLinks:function(b){for(var c,d,e,f,g,h,i=this[b+"Links"]=a.lang.array(this.container.querySelectorAll("[data-wysihtml5-"+b+"]")).get(),j=i.length,k=0,l=this[b+"Mapping"]={};j>k;k++)c=i[k],e=c.getAttribute("data-wysihtml5-"+b),f=c.getAttribute("data-wysihtml5-"+b+"-value"),h=c.getAttribute("data-wysihtml5-"+b+"-blank-value"),d=this.container.querySelector("[data-wysihtml5-"+b+"-group='"+e+"']"),g=this._getDialog(c,e),l[e+":"+f]={link:c,group:d,name:e,value:f,tracksBlankValue:h,dialog:g,state:!1}},_getDialog:function(b,c){var d,e,f=this,g=this.container.querySelector("[data-wysihtml5-dialog='"+c+"']");return g&&(d=a.toolbar["Dialog_"+c]?new a.toolbar["Dialog_"+c](b,g):new a.toolbar.Dialog(b,g),d.on("show",function(){e=f.composer.selection.getBookmark(),f.editor.fire("show:dialog",{command:c,dialogContainer:g,commandLink:b})}),d.on("save",function(a){e&&f.composer.selection.setBookmark(e),f._execCommand(c,a),f.editor.fire("save:dialog",{command:c,dialogContainer:g,commandLink:b}),f._hideAllDialogs(),f._preventInstantFocus(),e=void 0}),d.on("cancel",function(){e&&f.composer.selection.setBookmark(e),f.editor.fire("cancel:dialog",{command:c,dialogContainer:g,commandLink:b}),e=void 0,f._preventInstantFocus()}),d.on("hide",function(){f.editor.fire("hide:dialog",{command:c,dialogContainer:g,commandLink:b}),e=void 0})),d},execCommand:function(a,b){this.commandsDisabled||this._execCommand(a,b)},_execCommand:function(a,b){this.editor.focus(!1),this.composer.commands.exec(a,b),this._updateLinkStates()},execAction:function(a){var b=this.editor;"change_view"===a&&(b.currentView===b.textarea||"source"===b.currentView?b.fire("change_view","composer"):b.fire("change_view","textarea")),"showSource"==a&&b.fire("showSource")},_observe:function(){for(var c=this,e=this.editor,f=this.container,h=this.commandLinks.concat(this.actionLinks),i=h.length,j=0;i>j;j++)"A"===h[j].nodeName?g.setAttributes({href:"javascript:;",unselectable:"on"}).on(h[j]):g.setAttributes({unselectable:"on"}).on(h[j]);g.delegate(f,"[data-wysihtml5-command], [data-wysihtml5-action]","mousedown",function(a){a.preventDefault()}),g.delegate(f,"[data-wysihtml5-command]","click",function(a){var d,e=this,f=e.getAttribute("data-wysihtml5-command"),g=e.getAttribute("data-wysihtml5-command-value"),h=c.commandMapping[f+":"+g];g||!h.dialog?c.execCommand(f,g):(d=b(c.composer,h),h.dialog.show(d)),a.preventDefault()}),g.delegate(f,"[data-wysihtml5-action]","click",function(a){var b=this.getAttribute("data-wysihtml5-action");c.execAction(b),a.preventDefault()}),e.on("interaction:composer",function(a){c.preventFocus||c._updateLinkStates()}),this._ownerDocumentClick=function(b){a.dom.contains(c.container,b.target)||a.dom.contains(c.composer.element,b.target)||(c._updateLinkStates(),c._preventInstantFocus())},this.container.ownerDocument.addEventListener("click",this._ownerDocumentClick,!1),this.editor.on("destroy:composer",this.destroy.bind(this)),this.editor.config.handleTables&&(e.on("tableselect:composer",function(){c.container.querySelectorAll('[data-wysihtml5-hiddentools="table"]')[0].style.display=""}),e.on("tableunselect:composer",function(){c.container.querySelectorAll('[data-wysihtml5-hiddentools="table"]')[0].style.display="none"})),e.on("change_view",function(a){setTimeout(function(){c.commandsDisabled="composer"!==a,c._updateLinkStates(),c.commandsDisabled?g.addClass(f,d):g.removeClass(f,d)},0)})},destroy:function(){this.container.ownerDocument.removeEventListener("click",this._ownerDocumentClick,!1)},_hideAllDialogs:function(){var a=this.commandMapping;for(var b in a)a[b].dialog&&a[b].dialog.hide()},_preventInstantFocus:function(){this.preventFocus=!0,setTimeout(function(){this.preventFocus=!1}.bind(this),0)},_updateLinkStates:function(){var a,d,h,i,j,k=this.commandMapping,l=this.composer,m=this.actionMapping;for(a in k)i=k[a],this.commandsDisabled?(d=!1,g.removeClass(i.link,e),i.group&&g.removeClass(i.group,e),i.dialog&&i.dialog.hide()):(d=this.composer.commands.state(i.name,i.value),g.removeClass(i.link,c),i.group&&g.removeClass(i.group,c)),(i.state!==d||i.tracksBlankValue)&&(i.state=d,d?i.tracksBlankValue?g.removeClass(i.link,e):(g.addClass(i.link,e),i.group&&g.addClass(i.group,e),!i.dialog||"undefined"!=typeof i.value&&null!==i.value||(d&&"object"==typeof d?(d=b(l,i),i.state=d,j=i.dialog.container.dataset?i.dialog.container.dataset.showdialogonselection:!1,l.config.showToolbarDialogsOnSelection||j?i.dialog.show(d):i.dialog.update(d)):i.dialog.hide())):i.tracksBlankValue?g.addClass(i.link,e):(g.removeClass(i.link,e),i.group&&g.removeClass(i.group,e),i.dialog&&!i.value&&i.dialog.hide()));for(a in m)h=m[a],"change_view"===h.name&&(h.state=this.editor.currentView===this.editor.textarea||"source"===this.editor.currentView,h.state?g.addClass(h.link,f):g.removeClass(h.link,f))},show:function(){this.container.style.display=""},hide:function(){this.container.style.display="none"}})}(wysihtml5),function(a){a.toolbar.Dialog_createTable=a.toolbar.Dialog.extend({show:function(a){this.base(a)}})}(wysihtml5),function(a){var b="[data-wysihtml5-dialog-field]",c="data-wysihtml5-dialog-field";a.toolbar.Dialog_foreColorStyle=a.toolbar.Dialog.extend({multiselect:!0,_serialize:function(){for(var a={},d=this.container.querySelectorAll(b),e=d.length,f=0;e>f;f++)a[d[f].getAttribute(c)]=d[f].value;return a},_interpolate:function(d){for(var e,f,g=a.quirks.styleParser,h=document.querySelector(":focus"),i=this.container.querySelectorAll(b),j=i.length,k=0,l=this.elementToChange?a.lang.object(this.elementToChange).isArray()?this.elementToChange[0]:this.elementToChange:null,m=l?l.getAttribute("style"):null,n=m?g.parseColor(m,"color"):null;j>k;k++)e=i[k],e!==h&&(d&&"hidden"===e.type||"color"===e.getAttribute(c)&&(f=(e.dataset.colormode||"rgb").toLowerCase(),f="hex"===f?"hash":f,n?e.value=g.unparseColor(n,f):e.value=g.unparseColor([0,0,0],f)))}})}(wysihtml5),function(a){a.dom;a.toolbar.Dialog_fontSizeStyle=a.toolbar.Dialog.extend({multiselect:!0,_serialize:function(){return{size:this.container.querySelector('[data-wysihtml5-dialog-field="size"]').value}},_interpolate:function(b){var c=document.querySelector(":focus"),d=this.container.querySelector("[data-wysihtml5-dialog-field='size']"),e=this.elementToChange?a.lang.object(this.elementToChange).isArray()?this.elementToChange[0]:this.elementToChange:null,f=e?e.getAttribute("style"):null,g=f?a.quirks.styleParser.parseFontSize(f):null;d&&d!==c&&g&&!/^\s*$/.test(g)&&(d.value=g)}})}(wysihtml5);
/**
 * Full HTML5 compatibility rule set
 * These rules define which tags and CSS classes are supported and which tags should be specially treated.
 *
 * Examples based on this rule set:
 *
 *    <a href="http://foobar.com">foo</a>
 *    ... becomes ...
 *    <a href="http://foobar.com" target="_blank" rel="nofollow">foo</a>
 *
 *    <img align="left" src="http://foobar.com/image.png">
 *    ... becomes ...
 *    <img class="wysiwyg-float-left" src="http://foobar.com/image.png" alt="">
 *
 *    <div>foo<script>alert(document.cookie)</script></div>
 *    ... becomes ...
 *    <div>foo</div>
 *
 *    <marquee>foo</marquee>
 *    ... becomes ...
 *    <span>foo</span>
 *
 *    foo <br clear="both"> bar
 *    ... becomes ...
 *    foo <br class="wysiwyg-clear-both"> bar
 *
 *    <div>hello <iframe src="http://google.com"></iframe></div>
 *    ... becomes ...
 *    <div>hello </div>
 *
 *    <center>hello</center>
 *    ... becomes ...
 *    <div class="wysiwyg-text-align-center">hello</div>
 */

var wysihtml5ParserRules = {
    /**
     * CSS Class white-list
     * Following CSS classes won't be removed when parsed by the wysihtml5 HTML parser
     */

    // All defined values pass ()
    //"id": "any",
    // Passes all attributes beginnig with data-
    //"data-*": "any",



    // Allows something like "/foobar.jpg", "http://google.com" for "href" attribute
    //"href":  "src",

    // Strips unwanted characters. If the attribute is not set, then it gets set
    //"alt": "alt",

    // Only contains numeric (integer) characters (no float values or units)
    "colspan": "numbers",

    // For with/height attributes where floating point numbres and percentages are allowed
    //"width": "dimension",
    //"classes": "any",
    tags: {
        // 'component-post-image': {
        //   check_attributes: {
        //     'data-post-image-id': 'numbers'
        //   }
        // }
        // strong: {},
        // b:      {},
        // i:      {},
        // em:     {},
        // br:     {},
         p:      {},
        // div:    {},
        // span:   {},
        // ul:     {},
        // ol:     {},
        // li:     {},
        // h1: {},
        // h2: {},
        h3: {}
        // img: {
        //     check_attributes: {
        //         src: 'src'
        //     }
        // },
        // ul: {},
        // li: {},
        // button: {},
        // a: {
        //     check_attributes: {
        //         href:   "src" // important to avoid XSS
        //     }
        // }
    }

    // "classes": {
    //     "wysiwyg-clear-both": 1,
    //     "wysiwyg-clear-left": 1,
    //     "wysiwyg-clear-right": 1,
    //     "wysiwyg-color-aqua": 1,
    //     "wysiwyg-color-black": 1,
    //     "wysiwyg-color-blue": 1,
    //     "wysiwyg-color-fuchsia": 1,
    //     "wysiwyg-color-gray": 1,
    //     "wysiwyg-color-green": 1,
    //     "wysiwyg-color-lime": 1,
    //     "wysiwyg-color-maroon": 1,
    //     "wysiwyg-color-navy": 1,
    //     "wysiwyg-color-olive": 1,
    //     "wysiwyg-color-purple": 1,
    //     "wysiwyg-color-red": 1,
    //     "wysiwyg-color-silver": 1,
    //     "wysiwyg-color-teal": 1,
    //     "wysiwyg-color-white": 1,
    //     "wysiwyg-color-yellow": 1,
    //     "wysiwyg-float-left": 1,
    //     "wysiwyg-float-right": 1,
    //     "wysiwyg-font-size-large": 1,
    //     "wysiwyg-font-size-larger": 1,
    //     "wysiwyg-font-size-medium": 1,
    //     "wysiwyg-font-size-small": 1,
    //     "wysiwyg-font-size-smaller": 1,
    //     "wysiwyg-font-size-x-large": 1,
    //     "wysiwyg-font-size-x-small": 1,
    //     "wysiwyg-font-size-xx-large": 1,
    //     "wysiwyg-font-size-xx-small": 1,
    //     "wysiwyg-text-align-center": 1,
    //     "wysiwyg-text-align-justify": 1,
    //     "wysiwyg-text-align-left": 1,
    //     "wysiwyg-text-align-right": 1
    // },
    // /**
    //  * Tag list
    //  *
    //  * The following options are available:
    //  *
    //  *    - add_class:        converts and deletes the given HTML4 attribute (align, clear, ...) via the given method to a css class
    //  *                        The following methods are implemented in wysihtml5.dom.parse:
    //  *                          - align_text:  converts align attribute values (right/left/center/justify) to their corresponding css class "wysiwyg-text-align-*")
    //  *                            <p align="center">foo</p> ... becomes ... <p> class="wysiwyg-text-align-center">foo</p>
    //  *                          - clear_br:    converts clear attribute values left/right/all/both to their corresponding css class "wysiwyg-clear-*"
    //  *                            <br clear="all"> ... becomes ... <br class="wysiwyg-clear-both">
    //  *                          - align_img:    converts align attribute values (right/left) on <img> to their corresponding css class "wysiwyg-float-*"
    //  *
    //  *    - remove:             removes the element and its content
    //  *
    //  *    - rename_tag:         renames the element to the given tag
    //  *
    //  *    - set_class:          adds the given class to the element (note: make sure that the class is in the "classes" white list above)
    //  *
    //  *    - set_attributes:     sets/overrides the given attributes
    //  *
    //  *    - check_attributes:   checks the given HTML attribute via the given method
    //  *                            - url:            allows only valid urls (starting with http:// or https://)
    //  *                            - src:            allows something like "/foobar.jpg", "http://google.com", ...
    //  *                            - href:           allows something like "mailto:bert@foo.com", "http://google.com", "/foobar.jpg"
    //  *                            - alt:            strips unwanted characters. if the attribute is not set, then it gets set (to ensure valid and compatible HTML)
    //  *                            - numbers:  ensures that the attribute only contains numeric characters
    //  */
    // "tags": {
    //     "tr": {
    //         "add_class": {
    //             "align": "align_text"
    //         }
    //     },
    //     "strike": {
    //         "remove": 1
    //     },
    //     "form": {
    //         "rename_tag": "div"
    //     },
    //     "rt": {
    //         "rename_tag": "span"
    //     },
    //     "code": {},
    //     "acronym": {
    //         "rename_tag": "span"
    //     },
    //     "br": {
    //         "add_class": {
    //             "clear": "clear_br"
    //         }
    //     },
    //     "details": {
    //         "rename_tag": "div"
    //     },
    //     "h4": {
    //         "add_class": {
    //             "align": "align_text"
    //         }
    //     },
    //     "em": {},
    //     "title": {
    //         "remove": 1
    //     },
    //     "multicol": {
    //         "rename_tag": "div"
    //     },
    //     "figure": {
    //         "rename_tag": "div"
    //     },
    //     "xmp": {
    //         "rename_tag": "span"
    //     },
    //     "small": {
    //         "rename_tag": "span",
    //         "set_class": "wysiwyg-font-size-smaller"
    //     },
    //     "area": {
    //         "remove": 1
    //     },
    //     "time": {
    //         "rename_tag": "span"
    //     },
    //     "dir": {
    //         "rename_tag": "ul"
    //     },
    //     "bdi": {
    //         "rename_tag": "span"
    //     },
    //     "command": {
    //         "remove": 1
    //     },
    //     "ul": {},
    //     "progress": {
    //         "rename_tag": "span"
    //     },
    //     "dfn": {
    //         "rename_tag": "span"
    //     },
    //     "iframe": {
    //         "remove": 1
    //     },
    //     "figcaption": {
    //         "rename_tag": "div"
    //     },
    //     "a": {
    //         "check_attributes": {
    //             "href": "url" // if you compiled master manually then change this from 'url' to 'href'
    //         },
    //         "set_attributes": {
    //             "rel": "nofollow",
    //             "target": "_blank"
    //         }
    //     },
    //     "img": {
    //         "check_attributes": {
    //             "width": "numbers",
    //             "alt": "alt",
    //             "src": "src",
    //             "height": "numbers"
    //         },
    //         "add_class": {
    //             "align": "align_img"
    //         }
    //     },
    //     "rb": {
    //         "rename_tag": "span"
    //     },
    //     "footer": {
    //         "rename_tag": "div"
    //     },
    //     "noframes": {
    //         "remove": 1
    //     },
    //     "abbr": {
    //         "rename_tag": "span"
    //     },
    //     "u": {},
    //     "bgsound": {
    //         "remove": 1
    //     },
    //     "sup": {
    //         "rename_tag": "span"
    //     },
    //     "address": {
    //         "rename_tag": "div"
    //     },
    //     "basefont": {
    //         "remove": 1
    //     },
    //     "nav": {
    //         "rename_tag": "div"
    //     },
    //     "h1": {
    //         "add_class": {
    //             "align": "align_text"
    //         }
    //     },
    //     "head": {
    //         "remove": 1
    //     },
    //     "tbody": {
    //         "add_class": {
    //             "align": "align_text"
    //         }
    //     },
    //     "dd": {
    //         "rename_tag": "div"
    //     },
    //     "s": {
    //         "rename_tag": "span"
    //     },
    //     "li": {},
    //     "td": {
    //         "check_attributes": {
    //             "rowspan": "numbers",
    //             "colspan": "numbers"
    //         },
    //         "add_class": {
    //             "align": "align_text"
    //         }
    //     },
    //     "object": {
    //         "remove": 1
    //     },
    //     "div": {
    //         "add_class": {
    //             "align": "align_text"
    //         }
    //     },
    //     "option": {
    //         "rename_tag": "span"
    //     },
    //     "select": {
    //         "rename_tag": "span"
    //     },
    //     "i": {},
    //     "track": {
    //         "remove": 1
    //     },
    //     "wbr": {
    //         "remove": 1
    //     },
    //     "fieldset": {
    //         "rename_tag": "div"
    //     },
    //     "big": {
    //         "rename_tag": "span",
    //         "set_class": "wysiwyg-font-size-larger"
    //     },
    //     "button": {
    //         "rename_tag": "span"
    //     },
    //     "noscript": {
    //         "remove": 1
    //     },
    //     "svg": {
    //         "remove": 1
    //     },
    //     "input": {
    //         "remove": 1
    //     },
    //     "table": {},
    //     "keygen": {
    //         "remove": 1
    //     },
    //     "h5": {
    //         "add_class": {
    //             "align": "align_text"
    //         }
    //     },
    //     "meta": {
    //         "remove": 1
    //     },
    //     "map": {
    //         "rename_tag": "div"
    //     },
    //     "isindex": {
    //         "remove": 1
    //     },
    //     "mark": {
    //         "rename_tag": "span"
    //     },
    //     "caption": {
    //         "add_class": {
    //             "align": "align_text"
    //         }
    //     },
    //     "tfoot": {
    //         "add_class": {
    //             "align": "align_text"
    //         }
    //     },
    //     "base": {
    //         "remove": 1
    //     },
    //     "video": {
    //         "remove": 1
    //     },
    //     "strong": {},
    //     "canvas": {
    //         "remove": 1
    //     },
    //     "output": {
    //         "rename_tag": "span"
    //     },
    //     "marquee": {
    //         "rename_tag": "span"
    //     },
    //     "b": {},
    //     "q": {
    //         "check_attributes": {
    //             "cite": "url"
    //         }
    //     },
    //     "applet": {
    //         "remove": 1
    //     },
    //     "span": {},
    //     "rp": {
    //         "rename_tag": "span"
    //     },
    //     "spacer": {
    //         "remove": 1
    //     },
    //     "source": {
    //         "remove": 1
    //     },
    //     "aside": {
    //         "rename_tag": "div"
    //     },
    //     "frame": {
    //         "remove": 1
    //     },
    //     "section": {
    //         "rename_tag": "div"
    //     },
    //     "body": {
    //         "rename_tag": "div"
    //     },
    //     "ol": {},
    //     "nobr": {
    //         "rename_tag": "span"
    //     },
    //     "html": {
    //         "rename_tag": "div"
    //     },
    //     "summary": {
    //         "rename_tag": "span"
    //     },
    //     "var": {
    //         "rename_tag": "span"
    //     },
    //     "del": {
    //         "remove": 1
    //     },
    //     "blockquote": {
    //         "check_attributes": {
    //             "cite": "url"
    //         }
    //     },
    //     "style": {
    //         "remove": 1
    //     },
    //     "device": {
    //         "remove": 1
    //     },
    //     "meter": {
    //         "rename_tag": "span"
    //     },
    //     "h3": {
    //         "add_class": {
    //             "align": "align_text"
    //         }
    //     },
    //     "textarea": {
    //         "rename_tag": "span"
    //     },
    //     "embed": {
    //         "remove": 1
    //     },
    //     "hgroup": {
    //         "rename_tag": "div"
    //     },
    //     "font": {
    //         "rename_tag": "span",
    //         "add_class": {
    //             "size": "size_font"
    //         }
    //     },
    //     "tt": {
    //         "rename_tag": "span"
    //     },
    //     "noembed": {
    //         "remove": 1
    //     },
    //     "thead": {
    //         "add_class": {
    //             "align": "align_text"
    //         }
    //     },
    //     "blink": {
    //         "rename_tag": "span"
    //     },
    //     "plaintext": {
    //         "rename_tag": "span"
    //     },
    //     "xml": {
    //         "remove": 1
    //     },
    //     "h6": {
    //         "add_class": {
    //             "align": "align_text"
    //         }
    //     },
    //     "param": {
    //         "remove": 1
    //     },
    //     "th": {
    //         "check_attributes": {
    //             "rowspan": "numbers",
    //             "colspan": "numbers"
    //         },
    //         "add_class": {
    //             "align": "align_text"
    //         }
    //     },
    //     "legend": {
    //         "rename_tag": "span"
    //     },
    //     "hr": {},
    //     "label": {
    //         "rename_tag": "span"
    //     },
    //     "dl": {
    //         "rename_tag": "div"
    //     },
    //     "kbd": {
    //         "rename_tag": "span"
    //     },
    //     "listing": {
    //         "rename_tag": "div"
    //     },
    //     "dt": {
    //         "rename_tag": "span"
    //     },
    //     "nextid": {
    //         "remove": 1
    //     },
    //     "pre": {},
    //     "center": {
    //         "rename_tag": "div",
    //         "set_class": "wysiwyg-text-align-center"
    //     },
    //     "audio": {
    //         "remove": 1
    //     },
    //     "datalist": {
    //         "rename_tag": "span"
    //     },
    //     "samp": {
    //         "rename_tag": "span"
    //     },
    //     "col": {
    //         "remove": 1
    //     },
    //     "article": {
    //         "rename_tag": "div"
    //     },
    //     "cite": {},
    //     "link": {
    //         "remove": 1
    //     },
    //     "script": {
    //         "remove": 1
    //     },
    //     "bdo": {
    //         "rename_tag": "span"
    //     },
    //     "menu": {
    //         "rename_tag": "ul"
    //     },
    //     "colgroup": {
    //         "remove": 1
    //     },
    //     "ruby": {
    //         "rename_tag": "span"
    //     },
    //     "h2": {
    //         "add_class": {
    //             "align": "align_text"
    //         }
    //     },
    //     "ins": {
    //         "rename_tag": "span"
    //     },
    //     "p": {
    //         "add_class": {
    //             "align": "align_text"
    //         }
    //     },
    //     "sub": {
    //         "rename_tag": "span"
    //     },
    //     "comment": {
    //         "remove": 1
    //     },
    //     "frameset": {
    //         "remove": 1
    //     },
    //     "optgroup": {
    //         "rename_tag": "span"
    //     },
    //     "header": {
    //         "rename_tag": "div"
    //     }
    // }
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["vendor/core_monkey_patches/nil"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$p']);
  return (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

    Opal.defn(self, '$try', TMP_1 = function($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return nil;
    }, TMP_1.$$arity = -1);

    Opal.defn(self, '$try!', TMP_2 = function($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return nil;
    }, TMP_2.$$arity = -1);

    Opal.defn(self, '$blank?', TMP_3 = function() {
      var self = this;

      return true;
    }, TMP_3.$$arity = 0);

    return (Opal.defn(self, '$rb', TMP_4 = function ːrb() {
      var self = this;

      return self.$p("warning rb called for nil");
    }, TMP_4.$$arity = 0), nil) && 'rb';
  })($scope.base, null)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["vendor/core_monkey_patches/object"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$empty?', '$respond_to?', '$first', '$try!', '$to_proc', '$==', '$arity', '$instance_eval', '$public_send']);
  return (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

    Opal.defn(self, '$try', TMP_1 = function($a_rest) {
      var $b, $c, self = this, a, $iter = TMP_1.$$p, b = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      a = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        a[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_1.$$p = null;
      if ((($b = ((($c = a['$empty?']()) !== false && $c !== nil && $c != null) ? $c : self['$respond_to?'](a.$first()))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        return ($b = ($c = self)['$try!'], $b.$$p = b.$to_proc(), $b).apply($c, Opal.to_a(a))
        } else {
        return nil
      };
    }, TMP_1.$$arity = -1);

    return (Opal.defn(self, '$try!', TMP_2 = function($a_rest) {
      var $b, $c, $d, self = this, a, $iter = TMP_2.$$p, b = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      a = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        a[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_2.$$p = null;
      if ((($b = ($c = a['$empty?'](), $c !== false && $c !== nil && $c != null ?(b !== nil) : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        if (b.$arity()['$=='](0)) {
          return ($b = ($c = self).$instance_eval, $b.$$p = b.$to_proc(), $b).call($c)
          } else {
          return Opal.yield1(b, self);
        }
        } else {
        return ($b = ($d = self).$public_send, $b.$$p = b.$to_proc(), $b).apply($d, Opal.to_a(a))
      };
    }, TMP_2.$$arity = -1), nil) && 'try!';
  })($scope.base, null)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["vendor/core_monkey_patches/opal_jquery_http"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$delete', '$update', '$to_n', '$==', '$!=', '$upcase', '$succeed', '$fail', '$[]', '$call', '$promise']);
  return (function($base, $super) {
    function $HTTP(){};
    var self = $HTTP = $klass($base, $super, 'HTTP', $HTTP);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    def.settings = def.payload = def.method = def.url = def.handler = nil;
    return (Opal.defn(self, '$send', TMP_1 = function ːsend(method, url, options, block) {
      var $a, self = this, settings = nil, payload = nil;

      self.method = method;
      self.url = url;
      self.payload = options.$delete("payload");
      self.handler = block;
      self.settings.$update(options);
      $a = [self.settings.$to_n(), self.payload], settings = $a[0], payload = $a[1], $a;
      
      if ((($a = self.method['$==']("get")) ? self.payload['$!='](nil) : self.method['$==']("get"))) {
        payload = self.payload.$to_n();
        settings.data = $.param(payload);
      }
      else if (typeof(payload) === 'string') {
        settings.data = payload;
      }
      else if (payload != nil) {
        settings.data = payload.$to_json();
        settings.contentType = 'application/json';
      }
      settings.url  = self.url;
      settings.type = self.method.$upcase();
      settings.success = function(data, status, xhr) {
        return self.$succeed(data, status, xhr);
      };
      settings.error = function(xhr, status, error) {
        return self.$fail(xhr, status, error);
      };

      settings.xhr = function(){
        // get the native XmlHttpRequest object
        var xhr = $.ajaxSettings.xhr() ;

        //Added functinality for adding on progress handler if option[:on_progress] : Proc | Object responding to call
        //can be used for e.g. file uploading progress
        (function() {if ((($a = options['$[]']("on_progress")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        xhr.upload.onprogress = function(evt){
              options['$[]']("on_progress").$call(evt)
              //console.log('progress', evt.loaded/evt.total*100)
            };;
        } else {
        return nil
      }; return nil; })()

        // return the customized object
        return xhr ;
    }

      $.ajax(settings);
    ;
      if ((($a = self.handler) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self
        } else {
        return self.$promise()
      };
    }, TMP_1.$$arity = 4), nil) && 'send'
  })($scope.base, null)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["vendor/core_monkey_patches/string"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$downcase', '$tr', '$gsub', '$join', '$collect', '$to_proc', '$split', '$inject', '$const_get', '$==']);
  return (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4, TMP_5;

    Opal.defn(self, '$to_snake_case', TMP_1 = function ːto_snake_case() {
      var self = this;

      return self.$gsub(/::/, "/").$gsub(/([A-Z]+)([A-Z][a-z])/, "\\1_\\2").$gsub(/([a-z\d])([A-Z])/, "\\1_\\2").$tr("-", "_").$downcase();
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$to_camel_case', TMP_2 = function ːto_camel_case() {
      var $a, $b, self = this;

      return ($a = ($b = self.$split("_")).$collect, $a.$$p = "capitalize".$to_proc(), $a).call($b).$join();
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$constantize', TMP_4 = function ːconstantize() {
      var $a, $b, TMP_3, self = this;

      return ($a = ($b = self.$split("::")).$inject, $a.$$p = (TMP_3 = function(o, c){var self = TMP_3.$$s || this;
if (o == null) o = nil;if (c == null) c = nil;
      return o.$const_get(c)}, TMP_3.$$s = self, TMP_3.$$arity = 2, TMP_3), $a).call($b, $scope.get('Object'));
    }, TMP_4.$$arity = 0);

    return (Opal.defn(self, '$blank?', TMP_5 = function() {
      var $a, self = this;

      return ((($a = self['$==']("")) !== false && $a !== nil && $a != null) ? $a : self['$=='](" "));
    }, TMP_5.$$arity = 0), nil) && 'blank?';
  })($scope.base, null)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["vendor/model/model"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $hash = Opal.hash, $range = Opal.range;

  Opal.add_stubs(['$include', '$attr_accessor', '$new', '$map', '$parse', '$each', '$each_with_index', '$to_proc', '$<<', '$sort!', '$[]', '$+', '$empty?', '$delete_if', '$==', '$insert', '$[]=', '$model_registry', '$name', '$associations', '$attributes', '$is_a?', '$parses_by_root', '$to_camel_case', '$parse_collection', '$p', '$parse_raw', '$capitalize', '$define_singleton_method', '$promise', '$downcase', '$define_method', '$length', '$to_s', '$-', '$-@', '$transfer_attributes_to_form_data', '$append', '$attribute_change_tracking_hash', '$delete', '$!', '$!=', '$parse_attributes', '$init', '$class', '$to_snake_case', '$pure_attributes', '$data', '$merge!', '$req_options=', '$ok?', '$response', '$update_attributes', '$json', '$validate', '$resolve', '$after_route_show', '$Native', '$reset_errors', '$has_file=', '$include?', '$has_errors?', '$respond_to?', '$send', '$prepare_http_url_for', '$keys', '$has_file', '$serialize_attributes_as_form_data', '$send_request', '$split', '$map!', '$find_index', '$unshift', '$join', '$defaults_before_request', '$__send__', '$defaults_on_response', '$yield_response', '$default_response', '$reject']);
  (function($base, $super) {
    function $ModelCollection(){};
    var self = $ModelCollection = $klass($base, $super, 'ModelCollection', $ModelCollection);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3, TMP_5, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_15, TMP_16;

    def.data = nil;
    self.$include($scope.get('Enumerable'));

    self.$attr_accessor("data");

    Opal.defs(self, '$parse', TMP_1 = function ːparse(value, model) {
      var self = this;

      return self.$new(value, model);
    }, TMP_1.$$arity = 2);

    Opal.defn(self, '$initialize', TMP_3 = function ːinitialize(value, model) {
      var $a, $b, TMP_2, self = this;

      if (value == null) {
        value = $hash2([], {});
      }
      if (model == null) {
        model = nil;
      }
      self.data = [];
      return self.data = ($a = ($b = value).$map, $a.$$p = (TMP_2 = function(val){var self = TMP_2.$$s || this;
if (val == null) val = nil;
      return model.$parse(val)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b);
    }, TMP_3.$$arity = -1);

    Opal.defn(self, '$each', TMP_5 = function ːeach() {
      var $a, $b, TMP_4, self = this, $iter = TMP_5.$$p, $yield = $iter || nil;

      TMP_5.$$p = null;
      return ($a = ($b = self.data).$each, $a.$$p = (TMP_4 = function(val){var self = TMP_4.$$s || this;
if (val == null) val = nil;
      return Opal.yield1($yield, val);}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($b);
    }, TMP_5.$$arity = 0);

    Opal.defn(self, '$map', TMP_7 = function ːmap() {
      var $a, $b, TMP_6, self = this, $iter = TMP_7.$$p, $yield = $iter || nil;

      TMP_7.$$p = null;
      return ($a = ($b = self.data).$map, $a.$$p = (TMP_6 = function(val){var self = TMP_6.$$s || this;
if (val == null) val = nil;
      return Opal.yield1($yield, val);}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($b);
    }, TMP_7.$$arity = 0);

    Opal.defn(self, '$each_with_index', TMP_8 = function ːeach_with_index() {
      var $a, $b, self = this, $iter = TMP_8.$$p, block = $iter || nil;

      TMP_8.$$p = null;
      return ($a = ($b = self.data).$each_with_index, $a.$$p = block.$to_proc(), $a).call($b);
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$<<', TMP_9 = function(val) {
      var self = this;

      return self.data['$<<'](val);
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$sort!', TMP_10 = function() {
      var $a, $b, self = this, $iter = TMP_10.$$p, block = $iter || nil;

      TMP_10.$$p = null;
      return ($a = ($b = self.data)['$sort!'], $a.$$p = block.$to_proc(), $a).call($b);
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$[]', TMP_11 = function(value) {
      var self = this;

      return self.data['$[]'](value);
    }, TMP_11.$$arity = 1);

    Opal.defn(self, '$+', TMP_12 = function(value) {
      var self = this;

      $rb_plus(self.data, value);
      return self;
    }, TMP_12.$$arity = 1);

    Opal.defn(self, '$empty?', TMP_13 = function() {
      var self = this;

      return self.data['$empty?']();
    }, TMP_13.$$arity = 0);

    Opal.defn(self, '$remove', TMP_15 = function ːremove(obj) {
      var $a, $b, TMP_14, self = this;

      self.data = ($a = ($b = self.data).$delete_if, $a.$$p = (TMP_14 = function(val){var self = TMP_14.$$s || this;
if (val == null) val = nil;
      return val['$=='](obj)}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($b);
      return self;
    }, TMP_15.$$arity = 1);

    return (Opal.defn(self, '$insert', TMP_16 = function ːinsert($a_rest) {
      var $b, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return ($b = self.data).$insert.apply($b, Opal.to_a(args));
    }, TMP_16.$$arity = -1), nil) && 'insert';
  })($scope.base, null);
  (function($base, $super) {
    function $Model(){};
    var self = $Model = $klass($base, $super, 'Model', $Model);

    var def = self.$$proto, $scope = self.$$scope, TMP_46, TMP_47, TMP_48, TMP_49, TMP_50, TMP_51, TMP_52, TMP_53, TMP_54, TMP_55, TMP_56, TMP_58, TMP_61, TMP_62, TMP_63, TMP_64, TMP_65, TMP_66, TMP_67, TMP_68, TMP_69, TMP_70, TMP_71, TMP_72, TMP_73, TMP_74, TMP_75, TMP_76, TMP_77, TMP_80, TMP_83, TMP_84;

    def.dirty = def.prev_dirty = def.attributes = def.errors = def.file = nil;
    (function(self) {
      var $scope = self.$$scope, def = self.$$proto, TMP_17, TMP_18, TMP_19, TMP_21, TMP_23, TMP_25, TMP_32, TMP_33, TMP_36, TMP_41, TMP_44, TMP_45;

      Opal.defn(self, '$associations', TMP_17 = function ːassociations() {
        var $a, self = this;
        if (self.associations == null) self.associations = nil;

        return ((($a = self.associations) !== false && $a !== nil && $a != null) ? $a : self.associations = $hash2([], {}));
      }, TMP_17.$$arity = 0);
      Opal.defn(self, '$model_registry', TMP_18 = function ːmodel_registry() {
        var $a, self = this;
        if (self.model_registry == null) self.model_registry = nil;

        return ((($a = self.model_registry) !== false && $a !== nil && $a != null) ? $a : self.model_registry = $hash2([], {}));
      }, TMP_18.$$arity = 0);
      Opal.defn(self, '$register', TMP_19 = function ːregister() {
        var self = this;

        return $scope.get('Model').$model_registry()['$[]='](self.$name(), self);
      }, TMP_19.$$arity = 0);
      Opal.defn(self, '$has_many', TMP_21 = function ːhas_many(base_assosiation_name, options) {
        var $a, $b, TMP_20, self = this, serialize_as_root = nil, polymorphic_type = nil;

        serialize_as_root = (function() {if ((($a = options['$[]']("serialize_as_root")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return true
          } else {
          return false
        }; return nil; })();
        polymorphic_type = (function() {if ((($a = options['$[]']("polymorphic_type")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return options['$[]']("polymorphic_type")
          } else {
          return false
        }; return nil; })();
        self.$associations()['$[]='](base_assosiation_name, $hash2(["class_name", "type", "base_name", "serialize_as_root", "polymorphic_type"], {"class_name": options['$[]']("class_name"), "type": [], "base_name": base_assosiation_name, "serialize_as_root": serialize_as_root, "polymorphic_type": polymorphic_type}));
        if ((($a = options['$[]']("aliases")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          ($a = ($b = options['$[]']("aliases")).$each, $a.$$p = (TMP_20 = function(association_name){var self = TMP_20.$$s || this;
if (association_name == null) association_name = nil;
          return self.$associations()['$[]='](association_name, $hash2(["class_name", "type", "base_name", "serialize_as_root"], {"class_name": options['$[]']("class_name"), "type": [], "base_name": base_assosiation_name, "serialize_as_root": serialize_as_root}))}, TMP_20.$$s = self, TMP_20.$$arity = 1, TMP_20), $a).call($b)};
        return self.$attributes(base_assosiation_name);
      }, TMP_21.$$arity = 2);
      Opal.defn(self, '$has_one', TMP_23 = function ːhas_one(base_assosiation_name, options) {
        var $a, $b, TMP_22, self = this, polymorphic_type = nil;

        polymorphic_type = (function() {if ((($a = options['$[]']("polymorphic_type")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return options['$[]']("polymorphic_type")
          } else {
          return false
        }; return nil; })();
        self.$associations()['$[]='](base_assosiation_name, $hash2(["class_name", "type", "base_name", "polymorphic_type"], {"class_name": options['$[]']("class_name"), "type": $hash2([], {}), "base_name": base_assosiation_name, "polymorphic_type": polymorphic_type}));
        if ((($a = options['$[]']("aliases")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          ($a = ($b = options['$[]']("aliases")).$each, $a.$$p = (TMP_22 = function(association_name){var self = TMP_22.$$s || this;
if (association_name == null) association_name = nil;
          return self.$associations()['$[]='](association_name, $hash2(["class_name", "type", "base_name", "polymorphic_type"], {"class_name": options['$[]']("class_name"), "type": $hash2([], {}), "base_name": base_assosiation_name, "polymorphic_type": polymorphic_type}))}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22), $a).call($b)};
        return self.$attributes(base_assosiation_name);
      }, TMP_23.$$arity = 2);
      Opal.defn(self, '$parse', TMP_25 = function ːparse(data) {try {

        var $a, $b, TMP_24, self = this;

        if ((($a = data['$is_a?']($scope.get('Hash'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = self.$parses_by_root()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = data).$each, $a.$$p = (TMP_24 = function(_key, _data){var self = TMP_24.$$s || this;
if (_key == null) _key = nil;if (_data == null) _data = nil;
            Opal.ret($scope.get('Model').$model_registry()['$[]'](_key.$to_camel_case()).$new(_data))}, TMP_24.$$s = self, TMP_24.$$arity = 2, TMP_24), $a).call($b)
            } else {
            return self.$new(data)
          }
        } else if ((($a = data['$is_a?']($scope.get('Array'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.$parse_collection(data)
          } else {
          return nil
        };
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, TMP_25.$$arity = 1);
      Opal.defs(self, '$parse_raw', TMP_32 = function ːparse_raw(data, owner_map, on_slave, assign_slave_to, _parse_model) {
        var $a, $b, TMP_26, self = this, parsed_models = nil;

        if (owner_map == null) {
          owner_map = false;
        }
        if (on_slave == null) {
          on_slave = false;
        }
        if (assign_slave_to == null) {
          assign_slave_to = false;
        }
        if (_parse_model == null) {
          _parse_model = false;
        }
        parsed_models = nil;
        ($a = ($b = data).$each, $a.$$p = (TMP_26 = function(model_name, model_data){var self = TMP_26.$$s || this, $c, $d, TMP_27, $e, TMP_30, parsing_model = nil, fields = nil, associations = nil;
if (model_name == null) model_name = nil;if (model_data == null) model_data = nil;
        self.$p(model_name);
          parsing_model = (function() {if (_parse_model !== false && _parse_model !== nil && _parse_model != null) {
            return _parse_model
            } else {
            return $scope.get('Model').$model_registry()['$[]'](model_name)
          }; return nil; })();
          fields = model_data['$[]']("fs");
          parsed_models = ($c = ($d = model_data['$[]']("vs")).$map, $c.$$p = (TMP_27 = function(values){var self = TMP_27.$$s || this, $e, $f, TMP_28, $g, attrs = nil, model_instance = nil;
if (values == null) values = nil;
          attrs = $hash2([], {});
            ($e = ($f = values).$each, $e.$$p = (TMP_28 = function(value_set){var self = TMP_28.$$s || this, $g, $h, TMP_29;
if (value_set == null) value_set = nil;
            return ($g = ($h = fields).$each_with_index, $g.$$p = (TMP_29 = function(name, index){var self = TMP_29.$$s || this;
if (name == null) name = nil;if (index == null) index = nil;
              return attrs['$[]='](name, value_set['$[]'](index))}, TMP_29.$$s = self, TMP_29.$$arity = 2, TMP_29), $g).call($h)}, TMP_28.$$s = self, TMP_28.$$arity = 1, TMP_28), $e).call($f);
            model_instance = parsing_model.$new(attrs);
            if ((($e = (($g = owner_map !== false && owner_map !== nil && owner_map != null) ? owner_map['$[]'](model_instance.$attributes()['$[]'](on_slave)) : owner_map)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
              owner_map['$[]'](model_instance.$attributes()['$[]'](on_slave)).$attributes()['$[]='](assign_slave_to, model_instance)};
            return model_instance;}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27), $c).call($d);
          if ((($c = associations = model_data['$[]']("as")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return ($c = ($e = associations).$each, $c.$$p = (TMP_30 = function(k, v){var self = TMP_30.$$s || this, $f, $g, TMP_31, on_owner = nil, relation_map = nil;
if (k == null) k = nil;if (v == null) v = nil;
            on_owner = v['$[]']("lk")['$[]'](0);
              on_slave = v['$[]']("lk")['$[]'](1);
              relation_map = $hash2([], {});
              ($f = ($g = parsed_models).$each, $f.$$p = (TMP_31 = function(owner_model){var self = TMP_31.$$s || this;
if (owner_model == null) owner_model = nil;
              return relation_map['$[]='](owner_model.$attributes()['$[]'](on_owner), owner_model)}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31), $f).call($g);
              return self.$parse_raw($hash(k, v), relation_map, on_slave, k);}, TMP_30.$$s = self, TMP_30.$$arity = 2, TMP_30), $c).call($e)
            } else {
            return nil;
          };}, TMP_26.$$s = self, TMP_26.$$arity = 2, TMP_26), $a).call($b);
        return parsed_models;
      }, TMP_32.$$arity = -2);
      Opal.defn(self, '$parse_collection', TMP_33 = function ːparse_collection(data) {
        var self = this;

        return $scope.get('ModelCollection').$parse(data, self);
      }, TMP_33.$$arity = 1);
      Opal.defn(self, '$route', TMP_36 = function ːroute(name, method_and_url, options) {
        var $a, $b, TMP_34, $c, TMP_35, self = this;

        if (name['$[]'](0)['$=='](name.$capitalize()['$[]'](0))) {
          return ($a = ($b = self).$define_singleton_method, $a.$$p = (TMP_34 = function(req_options){var self = TMP_34.$$s || this;

            if (req_options == null) {
              req_options = $hash2([], {});
            }
          return $scope.get('RequestHandler').$new(self, name, method_and_url, options, req_options).$promise()}, TMP_34.$$s = self, TMP_34.$$arity = -1, TMP_34), $a).call($b, name.$downcase())
          } else {
          return ($a = ($c = self).$define_method, $a.$$p = (TMP_35 = function(req_options){var self = TMP_35.$$s || this;

            if (req_options == null) {
              req_options = $hash2([], {});
            }
          return $scope.get('RequestHandler').$new(self, name, method_and_url, options, req_options).$promise()}, TMP_35.$$s = self, TMP_35.$$arity = -1, TMP_35), $a).call($c, name)
        };
      }, TMP_36.$$arity = 3);
      Opal.defn(self, '$attributes', TMP_41 = function ːattributes($a_rest) {
        var $b, $c, TMP_37, self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return ($b = ($c = args).$each, $b.$$p = (TMP_37 = function(arg){var self = TMP_37.$$s || this, $a, $d, TMP_38, $e, TMP_39, $f, TMP_40, ass = nil;
if (arg == null) arg = nil;
        if ((($a = ($d = (ass = self.$associations()['$[]'](arg)), $d !== false && $d !== nil && $d != null ?ass['$[]']("type")['$==']([]) : $d)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            ($a = ($d = self).$define_method, $a.$$p = (TMP_38 = function(){var self = TMP_38.$$s || this, $e, $f, $g;
              if (self.attributes == null) self.attributes = nil;

            return ($e = arg, $f = self.attributes, ((($g = $f['$[]']($e)) !== false && $g !== nil && $g != null) ? $g : $f['$[]=']($e, $scope.get('ModelCollection').$new())))}, TMP_38.$$s = self, TMP_38.$$arity = 0, TMP_38), $a).call($d, arg)
            } else {
            ($a = ($e = self).$define_method, $a.$$p = (TMP_39 = function(){var self = TMP_39.$$s || this;
              if (self.attributes == null) self.attributes = nil;

            return self.attributes['$[]'](arg)}, TMP_39.$$s = self, TMP_39.$$arity = 0, TMP_39), $a).call($e, arg)
          };
          return ($a = ($f = self).$define_method, $a.$$p = (TMP_40 = function(val){var self = TMP_40.$$s || this;
            if (self.attributes == null) self.attributes = nil;
if (val == null) val = nil;
          return self.attributes['$[]='](arg, val)}, TMP_40.$$s = self, TMP_40.$$arity = 1, TMP_40), $a).call($f, "" + (arg) + "=");}, TMP_37.$$s = self, TMP_37.$$arity = 1, TMP_37), $b).call($c);
      }, TMP_41.$$arity = -1);
      Opal.defn(self, '$transfer_attributes_to_form_data', TMP_44 = function ːtransfer_attributes_to_form_data(val, form_data, track) {
        var $a, $b, TMP_42, $c, TMP_43, self = this;

        if (track == null) {
          track = nil;
        }
        if ((($a = val['$is_a?']($scope.get('Array'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          ($a = ($b = val).$each_with_index, $a.$$p = (TMP_42 = function(v, i){var self = TMP_42.$$s || this, last_length = nil, substringed = nil;
if (v == null) v = nil;if (i == null) i = nil;
          if (i['$=='](0)) {
              track = $rb_plus(track, "[" + (i) + "]")
              } else {
              last_length = ($rb_plus(($rb_minus(i, 1)).$to_s().$length(), 3));
              substringed = track['$[]']($range(0, last_length['$-@'](), false));
              track = $rb_plus(substringed, "[" + (i) + "]");
            };
            return self.$transfer_attributes_to_form_data(v, form_data, track);}, TMP_42.$$s = self, TMP_42.$$arity = 2, TMP_42), $a).call($b)
        } else if ((($a = val['$is_a?']($scope.get('Hash'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          ($a = ($c = val).$each, $a.$$p = (TMP_43 = function(k, v){var self = TMP_43.$$s || this, $d, _track = nil;
if (k == null) k = nil;if (v == null) v = nil;
          if ((($d = (track['$=='](nil))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              _track = k.$to_s()
              } else {
              _track = "" + (track) + "[" + (k) + "]"
            };
            return self.$transfer_attributes_to_form_data(v, form_data, _track);}, TMP_43.$$s = self, TMP_43.$$arity = 2, TMP_43), $a).call($c)
          } else {
          form_data.$append(track, val)
        };
        return form_data;
      }, TMP_44.$$arity = -3);
      return (Opal.defn(self, '$parses_by_root', TMP_45 = function ːparses_by_root() {
        var self = this;

        return false;
      }, TMP_45.$$arity = 0), nil) && 'parses_by_root';
    })(Opal.get_singleton_class(self));

    Opal.defn(self, '$attribute_change_tracking_hash', TMP_46 = function ːattribute_change_tracking_hash() {
      var $a, $b, $c, self = this;

      return ($a = "_changed_attributes_", $b = self.$attributes(), ((($c = $b['$[]']($a)) !== false && $c !== nil && $c != null) ? $c : $b['$[]=']($a, $hash2([], {}))));
    }, TMP_46.$$arity = 0);

    Opal.defn(self, '$record_change_for_attribute', TMP_47 = function ːrecord_change_for_attribute(attr_name) {
      var self = this;

      return self.$attribute_change_tracking_hash()['$[]='](attr_name, true);
    }, TMP_47.$$arity = 1);

    Opal.defn(self, '$clear_change_record_for_attribute', TMP_48 = function ːclear_change_record_for_attribute(attr_name) {
      var self = this;

      return self.$attribute_change_tracking_hash().$delete(attr_name);
    }, TMP_48.$$arity = 1);

    Opal.defn(self, '$attribute_was_changed?', TMP_49 = function(attr_name) {
      var self = this;

      return self.$attribute_change_tracking_hash()['$[]'](attr_name)['$!']()['$!']();
    }, TMP_49.$$arity = 1);

    Opal.defn(self, '$dirty', TMP_50 = function ːdirty() {
      var self = this;

      return self.dirty;
    }, TMP_50.$$arity = 0);

    Opal.defn(self, '$dirty?', TMP_51 = function() {
      var self = this;

      return self.dirty['$!='](self.prev_dirty);
    }, TMP_51.$$arity = 0);

    Opal.defn(self, '$make_dirty', TMP_52 = function ːmake_dirty() {
      var self = this;

      self.prev_dirty = self.dirty;
      return self.dirty = $rb_plus(self.dirty, 1);
    }, TMP_52.$$arity = 0);

    Opal.defn(self, '$attributes', TMP_53 = function ːattributes() {
      var self = this;

      return self.attributes;
    }, TMP_53.$$arity = 0);

    Opal.defn(self, '$attributes=', TMP_54 = function(new_attributes) {
      var self = this;

      return self.attributes = new_attributes;
    }, TMP_54.$$arity = 1);

    self.$attr_accessor("arbitrary");

    Opal.defn(self, '$initialize', TMP_55 = function ːinitialize(attributes) {
      var self = this;

      if (attributes == null) {
        attributes = $hash2([], {});
      }
      self.dirty = 0;
      self.attributes = $hash2([], {});
      self.arbitrary = $hash2([], {});
      self.errors = $hash2([], {});
      self.$parse_attributes(attributes);
      return self.$init(attributes);
    }, TMP_55.$$arity = -1);

    Opal.defn(self, '$init', TMP_56 = function ːinit(attributes) {
      var self = this;

      return nil;
    }, TMP_56.$$arity = 1);

    Opal.defn(self, '$parse_attributes', TMP_58 = function ːparse_attributes(attributes) {
      var $a, $b, TMP_57, self = this;

      return ($a = ($b = attributes).$each, $a.$$p = (TMP_57 = function(key, value){var self = TMP_57.$$s || this, $c, $d, $e, association_config = nil, polymorphic_type_holding_property = nil, stringified_class_name = nil;
        if (self.attributes == null) self.attributes = nil;
if (key == null) key = nil;if (value == null) value = nil;
      if ((($c = ($d = (association_config = self.$class().$associations()['$[]'](key)), $d !== false && $d !== nil && $d != null ?(((($e = value['$is_a?']($scope.get('Model'))) !== false && $e !== nil && $e != null) ? $e : value['$is_a?']($scope.get('ModelCollection'))))['$!']() : $d)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          if ((($c = polymorphic_type_holding_property = association_config['$[]']("polymorphic_type")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            if ((($c = stringified_class_name = attributes['$[]'](polymorphic_type_holding_property)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return self.attributes['$[]='](association_config['$[]']("base_name"), $scope.get('Model').$model_registry()['$[]'](stringified_class_name).$parse(value))
              } else {
              return self.attributes['$[]='](association_config['$[]']("base_name"), value)
            }
            } else {
            return self.attributes['$[]='](association_config['$[]']("base_name"), $scope.get('Model').$model_registry()['$[]'](association_config['$[]']("class_name")).$parse(value))
          }
          } else {
          return self.attributes['$[]='](key, value)
        }}, TMP_57.$$s = self, TMP_57.$$arity = 2, TMP_57), $a).call($b);
    }, TMP_58.$$arity = 1);

    Opal.defn(self, '$pure_attributes', TMP_61 = function ːpure_attributes(root) {
      var $a, $b, TMP_59, self = this, value_to_return = nil, accumulator = nil;

      if (root == null) {
        root = true;
      }
      value_to_return = $hash2([], {});
      self.attributes.$delete("errors");
      if (root !== false && root !== nil && root != null) {
        value_to_return['$[]='](self.$class().$name().$to_snake_case(), $hash2([], {}));
        accumulator = value_to_return['$[]'](self.$class().$name().$to_snake_case());
        } else {
        accumulator = value_to_return
      };
      ($a = ($b = self.attributes).$each, $a.$$p = (TMP_59 = function(key, value){var self = TMP_59.$$s || this, $c, $d, TMP_60, serialize_as_root = nil, ass = nil;
if (key == null) key = nil;if (value == null) value = nil;
      serialize_as_root = (function() {if ((($c = (($d = (ass = self.$class().$associations()['$[]'](key)), $d !== false && $d !== nil && $d != null ?ass['$[]']("serialize_as_root") : $d))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          return true
          } else {
          return false
        }; return nil; })();
        if ((($c = value['$is_a?']($scope.get('Model'))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          return accumulator['$[]='](key, value.$pure_attributes(serialize_as_root))
        } else if ((($c = value['$is_a?']($scope.get('ModelCollection'))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          return accumulator['$[]='](key, ($c = ($d = value.$data()).$map, $c.$$p = (TMP_60 = function(model){var self = TMP_60.$$s || this;
if (model == null) model = nil;
          return model.$pure_attributes(serialize_as_root)}, TMP_60.$$s = self, TMP_60.$$arity = 1, TMP_60), $c).call($d))
          } else {
          return accumulator['$[]='](key, value)
        };}, TMP_59.$$s = self, TMP_59.$$arity = 2, TMP_59), $a).call($b);
      return value_to_return;
    }, TMP_61.$$arity = -1);

    Opal.defn(self, '$update_attributes', TMP_62 = function ːupdate_attributes(data) {
      var self = this, _data = nil;

      _data = self.$class().$new(data).$attributes();
      return self.attributes['$merge!'](_data);
    }, TMP_62.$$arity = 1);

    Opal.defn(self, '$before_route_create', TMP_63 = function ːbefore_route_create(r) {
      var $a, $b, self = this;

      return (($a = [$hash2(["payload"], {"payload": self.$pure_attributes()})]), $b = r, $b['$req_options='].apply($b, $a), $a[$a.length-1]);
    }, TMP_63.$$arity = 1);

    Opal.defn(self, '$after_route_create', TMP_64 = function ːafter_route_create(r) {
      var $a, self = this;

      if ((($a = r.$response()['$ok?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$update_attributes(r.$response().$json());
        self.$validate();
        return r.$promise().$resolve(self);
        } else {
        return nil
      };
    }, TMP_64.$$arity = 1);

    Opal.defs(self, '$after_route_index', TMP_65 = function ːafter_route_index(r) {
      var $a, self = this;

      if ((($a = r.$response()['$ok?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return r.$promise().$resolve(self.$parse(r.$response().$json()))
        } else {
        return nil
      };
    }, TMP_65.$$arity = 1);

    Opal.defn(self, '$after_route_destroy', TMP_66 = function ːafter_route_destroy(r) {
      var $a, self = this, to_return = nil;

      if ((($a = r.$response()['$ok?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        to_return = self.$class().$parse(r.$response().$json());
        to_return.$validate();
        return r.$promise().$resolve(to_return);
        } else {
        return nil
      };
    }, TMP_66.$$arity = 1);

    Opal.defs(self, '$after_route_show', TMP_67 = function ːafter_route_show(r) {
      var $a, self = this;

      if ((($a = r.$response()['$ok?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return r.$promise().$resolve(self.$parse(r.$response().$json()))
        } else {
        return nil
      };
    }, TMP_67.$$arity = 1);

    Opal.defs(self, '$after_route_edit', TMP_68 = function ːafter_route_edit(r) {
      var self = this;

      return self.$after_route_show(r);
    }, TMP_68.$$arity = 1);

    Opal.defn(self, '$before_route_update', TMP_69 = function ːbefore_route_update(r) {
      var $a, $b, self = this;

      return (($a = [$hash2(["payload"], {"payload": self.$pure_attributes()})]), $b = r, $b['$req_options='].apply($b, $a), $a[$a.length-1]);
    }, TMP_69.$$arity = 1);

    Opal.defn(self, '$after_route_update', TMP_70 = function ːafter_route_update(r) {
      var $a, self = this;

      if ((($a = r.$response()['$ok?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$update_attributes(r.$response().$json());
        self.$validate();
        return r.$promise().$resolve(self);
        } else {
        return nil
      };
    }, TMP_70.$$arity = 1);

    Opal.defn(self, '$errors', TMP_71 = function ːerrors() {
      var self = this;

      return self.errors;
    }, TMP_71.$$arity = 0);

    Opal.defn(self, '$errors=', TMP_72 = function(val) {
      var self = this;

      return self.errors = val;
    }, TMP_72.$$arity = 1);

    Opal.defn(self, '$has_file', TMP_73 = function ːhas_file() {
      var $a, self = this;

      return ((($a = self.file) !== false && $a !== nil && $a != null) ? $a : self.file = false);
    }, TMP_73.$$arity = 0);

    Opal.defn(self, '$has_file=', TMP_74 = function(value) {
      var self = this;

      return self.file = value;
    }, TMP_74.$$arity = 1);

    Opal.defs(self, '$has_file', TMP_75 = function ːhas_file() {
      var self = this;

      return false;
    }, TMP_75.$$arity = 0);

    Opal.defn(self, '$serialize_attributes_as_form_data', TMP_76 = function ːserialize_attributes_as_form_data() {
      var self = this, form_data = nil;

      form_data = self.$Native(new FormData());
      return self.$class().$transfer_attributes_to_form_data(self.$pure_attributes(true), form_data);
    }, TMP_76.$$arity = 0);

    Opal.defn(self, '$has_errors?', TMP_77 = function() {
      var self = this;

      return self.errors['$empty?']()['$!']();
    }, TMP_77.$$arity = 0);

    Opal.defn(self, '$reset_errors', TMP_80 = function ːreset_errors() {
      var $a, $b, TMP_78, self = this;

      ($a = ($b = self.$attributes()).$each, $a.$$p = (TMP_78 = function(k, v){var self = TMP_78.$$s || this, $c, $d, TMP_79;
if (k == null) k = nil;if (v == null) v = nil;
      if ((($c = v['$is_a?']($scope.get('Model'))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          v.$reset_errors()};
        if ((($c = v['$is_a?']($scope.get('ModelCollection'))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          return ($c = ($d = v).$each, $c.$$p = (TMP_79 = function(c){var self = TMP_79.$$s || this;
if (c == null) c = nil;
          return c.$reset_errors()}, TMP_79.$$s = self, TMP_79.$$arity = 1, TMP_79), $c).call($d)
          } else {
          return nil
        };}, TMP_78.$$s = self, TMP_78.$$arity = 2, TMP_78), $a).call($b);
      return self.errors = $hash2([], {});
    }, TMP_80.$$arity = 0);

    Opal.defn(self, '$validate', TMP_83 = function ːvalidate(options) {
      var $a, $b, TMP_81, self = this;

      if (options == null) {
        options = $hash2(["only"], {"only": false});
      }
      self.$reset_errors();
      (($a = [false]), $b = self, $b['$has_file='].apply($b, $a), $a[$a.length-1]);
      return ($a = ($b = self.attributes).$each, $a.$$p = (TMP_81 = function(k, v){var self = TMP_81.$$s || this, $c, $d, TMP_82, $e, $f;
        if (self.errors == null) self.errors = nil;
if (k == null) k = nil;if (v == null) v = nil;
      if ((($c = options['$[]']("only")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          if ((($c = options['$[]']("only")['$include?'](k)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            } else {
            return nil;
          }};
        if ((($c = v['$is_a?']($scope.get('ModelCollection'))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          return ($c = ($d = v).$each, $c.$$p = (TMP_82 = function(m){var self = TMP_82.$$s || this, $e;
            if (self.errors == null) self.errors = nil;
if (m == null) m = nil;
          m.$validate();
            if ((($e = m['$has_errors?']()) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
              return self.errors['$[]=']("nested_errors", true)
              } else {
              return nil
            };}, TMP_82.$$s = self, TMP_82.$$arity = 1, TMP_82), $c).call($d)
        } else if ((($c = v['$is_a?']($scope.get('Model'))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          v.$validate();
          if ((($c = v['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return self.errors['$[]=']("nested_errors", true)
            } else {
            return nil
          };
          } else {
          if ((($c = self['$respond_to?']("validate_" + (k))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            self.$send("validate_" + (k))};
          self.errors['$merge!'](($c = "errors", $e = self.$attributes(), ((($f = $e['$[]']($c)) !== false && $f !== nil && $f != null) ? $f : $e['$[]=']($c, $hash2([], {})))));
          return self.$attributes()['$[]=']("errors", $hash2([], {}));
        };}, TMP_81.$$s = self, TMP_81.$$arity = 2, TMP_81), $a).call($b);
    }, TMP_83.$$arity = -1);

    return (Opal.defn(self, '$add_error', TMP_84 = function ːadd_error(attr_name, error) {
      var $a, $b, $c, self = this;

      return (($a = attr_name, $b = self.errors, ((($c = $b['$[]']($a)) !== false && $c !== nil && $c != null) ? $c : $b['$[]=']($a, []))))['$<<'](error);
    }, TMP_84.$$arity = 2), nil) && 'add_error';
  })($scope.base, null);
  return (function($base, $super) {
    function $RequestHandler(){};
    var self = $RequestHandler = $klass($base, $super, 'RequestHandler', $RequestHandler);

    var def = self.$$proto, $scope = self.$$scope, TMP_85, TMP_87, TMP_89, TMP_90, TMP_91;

    def.caller = def.name = def.skip_before_handler = def.req_options = def.extra_params = def.http_method = def.url = def.promise = def.response = nil;
    self.$attr_accessor("caller", "promise", "name", "response", "req_options");

    Opal.defn(self, '$initialize', TMP_85 = function ːinitialize(caller, name, method_and_url, options, req_options) {
      var $a, $b, $c, self = this, name_space = nil;

      if (req_options == null) {
        req_options = $hash2([], {});
      }
      self.caller = caller;
      self.name = name;
      self.options = options;
      self.wilds = ((($a = req_options['$[]']("wilds")) !== false && $a !== nil && $a != null) ? $a : $hash2([], {}));
      self.component = req_options['$[]']("component");
      self.should_yield_response = req_options['$[]']("yield_response");
      self.skip_before_handler = req_options['$[]']("skip_before_handler");
      name_space = ((($a = req_options['$[]']("namespace")) !== false && $a !== nil && $a != null) ? $a : false);
      self.url = self.$prepare_http_url_for(method_and_url, name_space);
      self.http_method = method_and_url.$keys()['$[]'](0);
      if ((($a = ($b = self.caller['$respond_to?']("before_route_" + (self.name.$downcase())), $b !== false && $b !== nil && $b != null ?self.skip_before_handler['$!']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.caller.$send("before_route_" + (self.name.$downcase()), self)};
      ((($a = self.req_options) !== false && $a !== nil && $a != null) ? $a : self.req_options = $hash2([], {}));
      self.extra_params = $hash2([], {});
      if ((($a = req_options['$[]']("extra_params")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.extra_params = req_options['$[]']("extra_params");
        self.req_options['$merge!'](self.extra_params);};
      if ((($a = req_options['$[]']("data")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.req_options = req_options
      } else if ((($a = req_options['$[]']("payload")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.req_options = req_options
      } else if ((($a = ((($b = self.caller.$has_file()) !== false && $b !== nil && $b != null) ? $b : req_options['$[]']("serialize_as_form"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.skip_before_handler = true;
        self.caller.$update_attributes(self.extra_params);
        self.req_options['$[]=']("data", self.caller.$serialize_attributes_as_form_data());
        if ((($a = self.req_options['$[]']("payload")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.req_options.$delete("payload")};
        self.req_options['$[]=']("processData", false);
        self.req_options['$[]=']("contentType", false);
        } else {
        (($a = "payload", $b = self.req_options, ((($c = $b['$[]']($a)) !== false && $c !== nil && $c != null) ? $c : $b['$[]=']($a, $hash2([], {})))))['$merge!'](self.extra_params)
      };
      return self.$send_request();
    }, TMP_85.$$arity = -5);

    Opal.defn(self, '$prepare_http_url_for', TMP_87 = function ːprepare_http_url_for(method_and_url, name_space) {
      var $a, $b, TMP_86, self = this, url = nil;

      url = method_and_url['$[]'](method_and_url.$keys()['$[]'](0)).$split("/");
      ($a = ($b = url)['$map!'], $a.$$p = (TMP_86 = function(part){var self = TMP_86.$$s || this, $c, $d;
        if (self.wilds == null) self.wilds = nil;
        if (self.options == null) self.options = nil;
        if (self.caller == null) self.caller = nil;
if (part == null) part = nil;
      if (part['$[]'](0)['$=='](":")) {
          if ((($c = self.wilds['$[]'](part['$[]']($range(1, -1, false)))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return self.wilds['$[]'](part['$[]']($range(1, -1, false)))
          } else if ((($c = ((function() {if ((($d = self.options['$[]']("defaults")['$is_a?']($scope.get('Array'))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            return self.options['$[]']("defaults").$find_index(part['$[]']($range(1, -1, false)))
            } else {
            return nil
          }; return nil; })())) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return self.caller.$send(part['$[]']($range(1, -1, false)))
            } else {
            return nil
          }
          } else {
          return part
        }}, TMP_86.$$s = self, TMP_86.$$arity = 1, TMP_86), $a).call($b);
      if (name_space !== false && name_space !== nil && name_space != null) {
        url.$unshift(name_space)};
      url.$unshift("api");
      return "/" + (url.$join("/"));
    }, TMP_87.$$arity = 2);

    Opal.defn(self, '$send_request', TMP_89 = function ːsend_request() {
      var $a, $b, TMP_88, self = this;

      self.promise = $scope.get('Promise').$new();
      self.$defaults_before_request();
      ($a = ($b = $scope.get('HTTP')).$__send__, $a.$$p = (TMP_88 = function(response){var self = TMP_88.$$s || this, $c;
        if (self.should_yield_response == null) self.should_yield_response = nil;
        if (self.caller == null) self.caller = nil;
        if (self.name == null) self.name = nil;
if (response == null) response = nil;
      self.response = response;
        self.$defaults_on_response();
        if ((($c = self.should_yield_response) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          return self.$yield_response()
        } else if ((($c = self.caller['$respond_to?']("after_route_" + (self.name.$downcase()))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          return self.caller.$send("after_route_" + (self.name.$downcase()), self)
          } else {
          return self.$default_response()
        };}, TMP_88.$$s = self, TMP_88.$$arity = 1, TMP_88), $a).call($b, self.http_method, self.url, self.req_options);
      return self.promise;
    }, TMP_89.$$arity = 0);

    Opal.defn(self, '$yield_response', TMP_90 = function ːyield_response() {
      var $a, self = this;

      if ((($a = self.response['$ok?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.promise.$resolve(self.response)
        } else {
        return self.promise.$reject(self.response)
      };
    }, TMP_90.$$arity = 0);

    return (Opal.defn(self, '$default_response', TMP_91 = function ːdefault_response(response, promise) {
      var $a, self = this;

      if ((($a = self.response['$ok?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.promise.$resolve(self.response.$json())
        } else {
        return self.promise.$reject(self.response.$json())
      };
    }, TMP_91.$$arity = 2), nil) && 'default_response';
  })($scope.base, null);
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["vendor/react_wrapper/react_wrapper"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$join', '$split', '$name', '$[]', '$native_name', '$create_class', '$init', '$validate_props', '$get_initial_state', '$component_will_unmount', '$component_will_update', '$should_component_update', '$component_will_receive_props', '$Native', '$component_did_update', '$to_n', '$default_props', '$new', '$to_s', '$state', '$n_prop', '$__set_state__', '$each', '$is_a?', '$empty?', '$call', '$p', '$class']);
  return (function($base, $super) {
    function $RW(){};
    var self = $RW = $klass($base, $super, 'RW', $RW);

    var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_39, TMP_40, TMP_41, TMP_43, TMP_44, TMP_45, TMP_46;

    def["native"] = def.rw_state = nil;
    (function(self) {
      var $scope = self.$$scope, def = self.$$proto, TMP_1;

      return (Opal.defn(self, '$native_name', TMP_1 = function ːnative_name() {
        var $a, self = this;
        if (self.native_name == null) self.native_name = nil;

        return ((($a = self.native_name) !== false && $a !== nil && $a != null) ? $a : self.native_name = self.$name().$split("::").$join("_"));
      }, TMP_1.$$arity = 0), nil) && 'native_name'
    })(Opal.get_singleton_class(self));

    Opal.defn(self, '$unique_name', TMP_2 = function ːunique_name() {
      var self = this;

      return (("") + (self))['$[]']($range(1, -1, false));
    }, TMP_2.$$arity = 0);

    Opal.defs(self, '$expose', TMP_3 = function ːexpose() {
      var self = this;

      return window[self.$native_name()] = self.$create_class();
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$initialize', TMP_4 = function ːinitialize(native$) {
      var self = this;

      self["native"] = native$;
      self.$init();
      return self.$validate_props();
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$validate_props', TMP_5 = function ːvalidate_props() {
      var self = this;

      return nil;
    }, TMP_5.$$arity = 0);

    Opal.defn(self, '$init', TMP_6 = function ːinit() {
      var self = this;

      return nil;
    }, TMP_6.$$arity = 0);

    Opal.defs(self, '$default_props', TMP_7 = function ːdefault_props() {
      var self = this;

      return nil;
    }, TMP_7.$$arity = 0);

    Opal.defn(self, '$__get_initial_state__', TMP_8 = function ː__get_initial_state__() {
      var $a, self = this, hash = nil;

      var result = {};
      if ((($a = hash = self.$get_initial_state()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        
        
        var result = {},
        keys = hash.$$keys,
        smap = hash.$$smap,
          key, value;

        for (var i = 0, length = keys.length; i < length; i++) {
          key = keys[i];

          //if (key.$$is_string) {
            value = smap[key];
          //} else {
          //  key = key.key;
          //  value = key.value;
          //}

          result[key] = value;
        }
        
      ;};
      return result;
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$get_initial_state', TMP_9 = function ːget_initial_state() {
      var self = this;

      return nil;
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$component_will_mount', TMP_10 = function ːcomponent_will_mount() {
      var self = this;

      return nil;
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$component_did_mount', TMP_11 = function ːcomponent_did_mount() {
      var self = this;

      return nil;
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$__component_will_unmount__', TMP_12 = function ː__component_will_unmount__() {
      var self = this;

      return self.$component_will_unmount();
    }, TMP_12.$$arity = 0);

    Opal.defn(self, '$component_will_unmount', TMP_13 = function ːcomponent_will_unmount() {
      var self = this;

      return nil;
    }, TMP_13.$$arity = 0);

    Opal.defn(self, '$__component_will_update__', TMP_14 = function ː__component_will_update__(next_props, next_state) {
      var self = this;

      return self.$component_will_update(next_props, next_state);
    }, TMP_14.$$arity = 2);

    Opal.defn(self, '$component_will_update', TMP_15 = function ːcomponent_will_update(next_props, next_state) {
      var self = this;

      return nil;
    }, TMP_15.$$arity = 2);

    Opal.defn(self, '$__should_component_update__', TMP_16 = function ː__should_component_update__(next_props, next_state) {
      var self = this;

      return self.$should_component_update(next_props, next_state);
    }, TMP_16.$$arity = 2);

    Opal.defn(self, '$should_component_update', TMP_17 = function ːshould_component_update(next_props, next_state) {
      var self = this;

      return true;
    }, TMP_17.$$arity = 2);

    Opal.defn(self, '$__component_will_receive_props__', TMP_18 = function ː__component_will_receive_props__(next_props) {
      var self = this;

      return self.$component_will_receive_props(self.$Native(next_props));
    }, TMP_18.$$arity = 1);

    Opal.defn(self, '$component_will_receive_props', TMP_19 = function ːcomponent_will_receive_props(next_props) {
      var self = this;

      return nil;
    }, TMP_19.$$arity = 1);

    Opal.defn(self, '$__component_did_update__', TMP_20 = function ː__component_did_update__(prev_props, prev_state) {
      var self = this;

      return self.$component_did_update(self.$Native(prev_props), self.$Native(prev_state));
    }, TMP_20.$$arity = 2);

    Opal.defn(self, '$component_did_update', TMP_21 = function ːcomponent_did_update(prev_props, prev_state) {
      var self = this;

      return nil;
    }, TMP_21.$$arity = 2);

    Opal.defs(self, '$create_class', TMP_22 = function ːcreate_class() {
      var self = this;

      return (
        React.createClass({
          getDefaultProps: function(){
            return self.$default_props().$to_n();
          },
          getInitialState: function(){
            this.rb = self.$new(this)
            return this.rb.$__get_initial_state__();
          },
          componentWillMount: function() {
            return this.rb.$component_will_mount();
          },
          componentDidMount: function() {
            return this.rb.$component_did_mount();
          },
          componentWillReceiveProps: function(next_props) {
            return this.rb.$__component_will_receive_props__(next_props);
          },
          shouldComponentUpdate: function(next_props, next_state) {
            return this.rb.$__should_component_update__(next_props, next_state);
          },
          componentWillUpdate: function(next_props, next_state) {
            return this.rb.$__component_will_update__(next_props, next_state);
          },
          componentDidUpdate: function(prev_props, prev_state) {
            return this.rb.$__component_did_update__(prev_props, prev_state);
          },
          componentWillUnmount: function() {
            return this.rb.$__component_will_unmount__();
          },
          displayName: self.$to_s(),
          render: function() {
            return this.rb.$render();
          }
        })
    );
    }, TMP_22.$$arity = 0);

    Opal.defn(self, '$render', TMP_23 = function ːrender() {
      var self = this;

      return nil;
    }, TMP_23.$$arity = 0);

    Opal.defn(self, '$props', TMP_24 = function ːprops() {
      var self = this;

      return self.$Native(self["native"].props);
    }, TMP_24.$$arity = 0);

    Opal.defn(self, '$n_prop', TMP_25 = function ːn_prop(accessor) {
      var self = this;

      return self["native"].props[accessor];
    }, TMP_25.$$arity = 1);

    Opal.defn(self, '$n_props', TMP_26 = function ːn_props() {
      var self = this;

      return self["native"].props();
    }, TMP_26.$$arity = 0);

    Opal.defn(self, '$props_to_h', TMP_27 = function ːprops_to_h(prop) {
      var self = this;

      return $scope.get('Hash').$new(self["native"].$to_n().props[prop]);
    }, TMP_27.$$arity = 1);

    Opal.defn(self, '$state', TMP_28 = function ːstate() {
      var self = this;

      return self.$Native(self["native"].state);
    }, TMP_28.$$arity = 0);

    Opal.defn(self, '$n_state', TMP_29 = function ːn_state(key) {
      var self = this;

      return self["native"].state[key];
    }, TMP_29.$$arity = 1);

    Opal.defn(self, '$rw_state', TMP_30 = function ːrw_state() {
      var $a, self = this;

      return ((($a = self.rw_state) !== false && $a !== nil && $a != null) ? $a : self.rw_state = $scope.get('RW_state').$new(self["native"].state));
    }, TMP_30.$$arity = 0);

    Opal.defn(self, '$state_to_h', TMP_31 = function ːstate_to_h() {
      var self = this;

      return $scope.get('Hash').$new(self.$state().$to_n());
    }, TMP_31.$$arity = 0);

    Opal.defn(self, '$ref', TMP_32 = function ːref(ref) {
      var self = this;

      return self.$Native(self["native"].refs[ref]);
    }, TMP_32.$$arity = 1);

    Opal.defn(self, '$n_ref', TMP_33 = function ːn_ref(ref) {
      var self = this;

      return self["native"].refs[ref];
    }, TMP_33.$$arity = 1);

    Opal.defn(self, '$n_refs', TMP_34 = function ːn_refs() {
      var self = this;

      return self["native"].refs;
    }, TMP_34.$$arity = 0);

    Opal.defn(self, '$n_refs_each', TMP_35 = function ːn_refs_each() {
      var self = this, $iter = TMP_35.$$p, block = $iter || nil;

      TMP_35.$$p = null;
      
        Object.keys(self["native"].refs).forEach(function(key) {

          Opal.yieldX(block, [key, self["native"].refs[key]]);
        
        });
      ;
    }, TMP_35.$$arity = 0);

    Opal.defn(self, '$refs', TMP_36 = function ːrefs() {
      var self = this;

      return $scope.get('Hash').$new(self["native"].refs);
    }, TMP_36.$$arity = 0);

    Opal.defn(self, '$children', TMP_37 = function ːchildren() {
      var self = this;

      return self.$n_prop("children");
    }, TMP_37.$$arity = 0);

    Opal.defn(self, '$set_state', TMP_39 = function ːset_state(val) {
      var $a, $b, TMP_38, self = this;

      self.$__set_state__(val);
      var x = {};
      ($a = ($b = val).$each, $a.$$p = (TMP_38 = function(k, v){var self = TMP_38.$$s || this;
if (k == null) k = nil;if (v == null) v = nil;
      return x[k] = v;}, TMP_38.$$s = self, TMP_38.$$arity = 2, TMP_38), $a).call($b);
      return self["native"].setState(x);
    }, TMP_39.$$arity = 1);

    Opal.defn(self, '$n_set_state', TMP_40 = function ːn_set_state(val) {
      var self = this;

      return self["native"].setState(val);
    }, TMP_40.$$arity = 1);

    Opal.defn(self, '$__set_state__', TMP_41 = function ː__set_state__(val) {
      var self = this;

      return nil;
    }, TMP_41.$$arity = 1);

    Opal.defn(self, '$t', TMP_43 = function ːt(_klass, _props, $a_rest) {
      var $b, $c, TMP_42, self = this, args, params = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 2;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 2; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 2] = arguments[$arg_idx];
      }
      if ((($b = _klass['$is_a?']($scope.get('String'))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
      } else if ((($b = _klass['$is_a?']($scope.get('Proc'))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        } else {
        _klass = window[_klass.$native_name()]
      };
      var x = {};
      ($b = ($c = _props).$each, $b.$$p = (TMP_42 = function(k, v){var self = TMP_42.$$s || this;
if (k == null) k = nil;if (v == null) v = nil;
      return x[k] = v;}, TMP_42.$$s = self, TMP_42.$$arity = 2, TMP_42), $b).call($c);
      if ((($b = args['$empty?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        params = [_klass, x]
        } else {
        params = [_klass, x, args]
      };
      return (
      React.createElement.apply(null, params)
    );
    }, TMP_43.$$arity = -3);

    Opal.defn(self, '$force_update', TMP_44 = function ːforce_update() {
      var self = this;

      return self["native"].forceUpdate();
    }, TMP_44.$$arity = 0);

    Opal.defn(self, '$event', TMP_45 = function ːevent(proc) {
      var self = this;

      return $scope.get('ProcEvent').$new(proc);
    }, TMP_45.$$arity = 1);

    Opal.defn(self, '$emit', TMP_46 = function ːemit(prop_name, $a_rest) {
      var $b, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ((($b = self.$n_prop(prop_name)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        return ($b = self.$n_prop(prop_name)).$call.apply($b, Opal.to_a(args))
        } else {
        return self.$p("WARNING " + (self.$class().$name()) + " emiting " + (prop_name) + " but no prop " + (prop_name) + " : Event was passed")
      };
    }, TMP_46.$$arity = -2);

    (function($base, $super) {
      function $ProcEvent(){};
      var self = $ProcEvent = $klass($base, $super, 'ProcEvent', $ProcEvent);

      var def = self.$$proto, $scope = self.$$scope, TMP_47, TMP_48;

      def.proc = nil;
      Opal.defn(self, '$initialize', TMP_47 = function ːinitialize(proc) {
        var self = this;

        return self.proc = proc;
      }, TMP_47.$$arity = 1);

      return (Opal.defn(self, '$call', TMP_48 = function ːcall($a_rest) {
        var $b, self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return ($b = self.proc).$call.apply($b, Opal.to_a(args));
      }, TMP_48.$$arity = -1), nil) && 'call';
    })($scope.base, null);

    return (function($base, $super) {
      function $RW_state(){};
      var self = $RW_state = $klass($base, $super, 'RW_state', $RW_state);

      var def = self.$$proto, $scope = self.$$scope, TMP_49, TMP_50, TMP_51;

      def.state = nil;
      Opal.defn(self, '$initialize', TMP_49 = function ːinitialize(state) {
        var self = this;

        return self.state = state;
      }, TMP_49.$$arity = 1);

      Opal.defn(self, '$[]', TMP_50 = function(val) {
        var self = this;

        return self.state[val];
      }, TMP_50.$$arity = 1);

      return (Opal.defn(self, '$[]=', TMP_51 = function(i, v) {
        var self = this;

        return self.state[i]=v;
      }, TMP_51.$$arity = 2), nil) && '[]=';
    })($scope.base, null);
  })($scope.base, null)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["vendor/native_wrappers/moment"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$empty?', '$Native']);
  return (function($base, $super) {
    function $Moment(){};
    var self = $Moment = $klass($base, $super, 'Moment', $Moment);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    return (Opal.defs(self, '$new', TMP_1 = function($a_rest) {
      var $b, self = this, opt;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      opt = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        opt[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ((($b = opt['$empty?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        return self["native"] = self.$Native(moment())
        } else {
        return self["native"] = self.$Native(moment.apply(null, opt))
      };
    }, TMP_1.$$arity = -1), nil) && 'new'
  })($scope.base, null)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["vendor/native_wrappers/waypoint"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$to_n']);
  return (function($base, $super) {
    function $Waypoint(){};
    var self = $Waypoint = $klass($base, $super, 'Waypoint', $Waypoint);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

    def.wayp = nil;
    Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(opt) {
      var self = this;

      return self.wayp = new Waypoint(opt.$to_n());
    }, TMP_1.$$arity = 1);

    return (Opal.defn(self, '$destroy', TMP_2 = function ːdestroy() {
      var self = this;

      return self.wayp.destroy();
    }, TMP_2.$$arity = 0), nil) && 'destroy';
  })($scope.base, null)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["plugins/flash_message"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$new', '$t', '$add_message', '$rb', '$ref', '$instance']);
  return (function($base) {
    var $Plugins, self = $Plugins = $module($base, 'Plugins');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $FlashMessage, self = $FlashMessage = $module($base, 'FlashMessage');

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      Opal.defn(self, '$create_flash', TMP_1 = function ːcreate_flash(message) {
        var self = this, msg = nil;

        msg = (((($scope.get('Shared')).$$scope.get('Flash'))).$$scope.get('Message')).$new(self.$t("div", $hash2([], {}), message));
        return (((($scope.get('Components')).$$scope.get('App'))).$$scope.get('Main')).$instance().$ref("flash").$rb().$add_message(msg);
      }, TMP_1.$$arity = 1)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["plugins/formable"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$+', '$[]=', '$[]', '$t', '$each', '$include?', '$collect', '$rb', '$refs', '$n_state', '$==', '$validate', '$errors', '$map', '$has_errors?', '$respond_to?', '$clear_inputs']);
  return (function($base) {
    var $Plugins, self = $Plugins = $module($base, 'Plugins');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Formable, self = $Formable = $module($base, 'Formable');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_6, TMP_8, TMP_10, TMP_12;

      Opal.defn(self, '$initialize', TMP_1 = function ːinitialize() {
        var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

        TMP_1.$$p = null;
        $zuper = [];
        
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        self.inputs_counter = -1;
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
      }, TMP_1.$$arity = 0);

      Opal.defn(self, '$__component_will_update__', TMP_2 = function ː__component_will_update__() {
        var $a, $b, self = this, $iter = TMP_2.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

        TMP_2.$$p = null;
        $zuper = [];
        
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        self.inputs_counter = -1;
        return ($a = ($b = self, Opal.find_super_dispatcher(self, '__component_will_update__', TMP_2, false)), $a.$$p = $iter, $a).apply($b, $zuper);
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$input', TMP_3 = function ːinput(elem, model, attr, options, $a_rest) {
        var $b, self = this, _children;
        if (self.inputs_counter == null) self.inputs_counter = nil;

        if (options == null) {
          options = $hash2([], {});
        }
        var $args_len = arguments.length, $rest_len = $args_len - 4;
        if ($rest_len < 0) { $rest_len = 0; }
        _children = new Array($rest_len);
        for (var $arg_idx = 4; $arg_idx < $args_len; $arg_idx++) {
          _children[$arg_idx - 4] = arguments[$arg_idx];
        }
        self.inputs_counter = $rb_plus(self.inputs_counter, 1);
        options['$[]=']("model", model);
        options['$[]=']("attr", attr);
        if ((($b = options['$[]']("namespace")) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          options['$[]=']("ref", "_input_" + (options['$[]']("namespace")) + "_" + (model) + "_" + (attr) + "_" + (self.inputs_counter))
          } else {
          options['$[]=']("ref", "_input_" + (model) + "_" + (attr) + "_" + (self.inputs_counter))
        };
        options['$[]=']("keyed", self.inputs_counter);
        return ($b = self).$t.apply($b, [elem, options].concat(Opal.to_a(_children)));
      }, TMP_3.$$arity = -4);

      Opal.defn(self, '$collect_inputs', TMP_6 = function ːcollect_inputs(options) {
        var $a, $b, TMP_4, $c, TMP_5, $d, $e, self = this, f_m = nil, model = nil;

        if (options == null) {
          options = $hash2([], {});
        }
        if ((($a = options['$[]']("namespace")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          ($a = ($b = self.$refs()).$each, $a.$$p = (TMP_4 = function(k, v){var self = TMP_4.$$s || this, $c;
if (k == null) k = nil;if (v == null) v = nil;
          if ((($c = k['$include?']("_input_" + (options['$[]']("namespace")))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return v.$rb().$collect()
              } else {
              return nil
            }}, TMP_4.$$s = self, TMP_4.$$arity = 2, TMP_4), $a).call($b)
          } else {
          ($a = ($c = self.$refs()).$each, $a.$$p = (TMP_5 = function(k, v){var self = TMP_5.$$s || this, $d;
if (k == null) k = nil;if (v == null) v = nil;
          if ((($d = k['$include?']("_input")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              return v.$rb().$collect()
              } else {
              return nil
            }}, TMP_5.$$s = self, TMP_5.$$arity = 2, TMP_5), $a).call($c)
        };
        ($a = "validate_only", $d = options, ((($e = $d['$[]']($a)) !== false && $e !== nil && $e != null) ? $e : $d['$[]=']($a, false)));
        f_m = (function() {if ((($a = options['$[]']("form_model")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return options['$[]']("form_model")
          } else {
          return "form_model"
        }; return nil; })();
        if ((($a = self.$n_state(f_m)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = (options['$[]']("validate")['$=='](false))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$n_state(f_m).$validate($hash2(["only"], {"only": options['$[]']("validate_only")}))
          };
          self.$n_state(f_m);};
        model = options['$[]']("model");
        if (model !== false && model !== nil && model != null) {
          if ((($a = (options['$[]']("validate")['$=='](false))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return model.$validate($hash2(["only"], {"only": options['$[]']("validate_only")}))
          }
          } else {
          return nil
        };
      }, TMP_6.$$arity = -1);

      Opal.defn(self, '$display_all_errors_for', TMP_8 = function ːdisplay_all_errors_for(model) {
        var $a, $b, TMP_7, self = this;

        if ((($a = model.$errors()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.$t("div", $hash2(["className"], {"className": "general_errors"}), ($a = ($b = model.$errors()).$map, $a.$$p = (TMP_7 = function(k, v){var self = TMP_7.$$s || this;
if (k == null) k = nil;if (v == null) v = nil;
          return self.$t("p", $hash2([], {}), "" + (v))}, TMP_7.$$s = self, TMP_7.$$arity = 2, TMP_7), $a).call($b))
          } else {
          return nil
        };
      }, TMP_8.$$arity = 1);

      Opal.defn(self, '$display_general_errors_for', TMP_10 = function ːdisplay_general_errors_for(model) {
        var $a, $b, TMP_9, self = this;

        if ((($a = ($b = model['$has_errors?'](), $b !== false && $b !== nil && $b != null ?model.$errors()['$[]']("general") : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.$t("div", $hash2(["className"], {"className": "general_errors"}), ($a = ($b = model.$errors()['$[]']("general")).$map, $a.$$p = (TMP_9 = function(v){var self = TMP_9.$$s || this;
if (v == null) v = nil;
          return self.$t("p", $hash2([], {}), "" + (v))}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $a).call($b))
          } else {
          return nil
        };
      }, TMP_10.$$arity = 1);

      Opal.defn(self, '$clear_inputs', TMP_12 = function ːclear_inputs(name_space) {
        var $a, $b, TMP_11, self = this;

        if (name_space == null) {
          name_space = "";
        }
        return ($a = ($b = self.$refs()).$each, $a.$$p = (TMP_11 = function(k, v){var self = TMP_11.$$s || this, $c;
if (k == null) k = nil;if (v == null) v = nil;
        if ((($c = k['$include?']("_input_" + (name_space))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            if ((($c = v.$rb()['$respond_to?']("clear_inputs")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return v.$rb().$clear_inputs()
              } else {
              return nil
            }
            } else {
            return nil
          }}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11), $a).call($b);
      }, TMP_12.$$arity = -1);
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["plugins/infinite_scrollable"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$[]', '$attributes', '$data', '$new', '$pop', '$pagination=', '$state', '$current_page', '$pagination', '$==', '$!', '$destroy_infinite_scroll_beacon', '$+', '$t', '$ref', '$destroy', '$lambda', '$handle_infinite_croll_beacon_reach']);
  return (function($base) {
    var $Plugins, self = $Plugins = $module($base, 'Plugins');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $InfiniteScrollable, self = $InfiniteScrollable = $module($base, 'InfiniteScrollable');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_5, TMP_6, TMP_7;

      Opal.defn(self, '$extract_pagination', TMP_1 = function ːextract_pagination(collection) {
        var $a, $b, self = this, x = nil;

        if ((($a = (x = collection.$data()['$[]'](-1).$attributes()['$[]']("pagination"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          x = $scope.get('Pagination').$new(collection.$data().$pop().$attributes()['$[]']("pagination"));
          return (($a = [x]), $b = self.$state(), $b['$pagination='].apply($b, $a), $a[$a.length-1]);
          } else {
          return nil
        };
      }, TMP_1.$$arity = 1);

      Opal.defn(self, '$pagination_current_page', TMP_2 = function ːpagination_current_page() {
        var self = this;

        return self.$state().$pagination().$current_page();
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$next_page_infinite_scroll_beacon', TMP_3 = function ːnext_page_infinite_scroll_beacon(last_index) {
        var $a, $b, $c, self = this;
        if (self.last_index == null) self.last_index = nil;
        if (self.beacon_count == null) self.beacon_count = nil;
        if (self.last_beacon == null) self.last_beacon = nil;

        if ((($a = (((($b = ((($c = (self.last_index['$=='](last_index))) !== false && $c !== nil && $c != null) ? $c : last_index === undefined)) !== false && $b !== nil && $b != null) ? $b : last_index['$!']()))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil};
        self.last_index = last_index;
        self.$destroy_infinite_scroll_beacon();
        ((($a = self.beacon_count) !== false && $a !== nil && $a != null) ? $a : self.beacon_count = 0);
        self.beacon_count = $rb_plus(self.beacon_count, 1);
        self.beacon_count;
        self.last_beacon = "infinite_scroll_beacon" + (self.beacon_count);
        return self.$t("div", $hash2(["ref"], {"ref": self.last_beacon}));
      }, TMP_3.$$arity = 1);

      Opal.defn(self, '$listen_to_infinite_scroll_beacon', TMP_5 = function ːlisten_to_infinite_scroll_beacon() {
        var $a, $b, TMP_4, self = this;
        if (self.beacon_waypoint == null) self.beacon_waypoint = nil;
        if (self.beacon_element == null) self.beacon_element = nil;

        self.beacon_element = self.$ref("last_beacon");
        if ((($a = self.beacon_waypoint) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.beacon_waypoint.$destroy()};
        if ((($a = self.beacon_element) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.beacon_waypoint = $scope.get('Waypoint').$new($hash2(["element", "handler", "offset"], {"element": self.beacon_element, "handler": ($a = ($b = self).$lambda, $a.$$p = (TMP_4 = function(direction){var self = TMP_4.$$s || this;
if (direction == null) direction = nil;
          return self.$handle_infinite_croll_beacon_reach()}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($b), "offset": "110%"}))
          } else {
          return nil
        };
      }, TMP_5.$$arity = 0);

      Opal.defn(self, '$destroy_infinite_scroll_beacon', TMP_6 = function ːdestroy_infinite_scroll_beacon() {
        var $a, self = this;
        if (self.beacon_waypoint == null) self.beacon_waypoint = nil;

        if ((($a = self.beacon_waypoint) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.beacon_waypoint.$destroy()
          } else {
          return nil
        };
      }, TMP_6.$$arity = 0);

      Opal.defn(self, '$handle_infinite_croll_beacon_reach', TMP_7 = function ːhandle_infinite_croll_beacon_reach() {
        var self = this;

        return nil;
      }, TMP_7.$$arity = 0);
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["plugins/modal"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$[]=', '$t', '$rb', '$ref', '$open', '$modal_instance', '$close']);
  return (function($base) {
    var $Plugins, self = $Plugins = $module($base, 'Plugins');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Modal, self = $Modal = $module($base, 'Modal');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

      Opal.defn(self, '$modal', TMP_1 = function ːmodal(options, passed_children) {
        var self = this;

        if (options == null) {
          options = $hash2([], {});
        }
        if (passed_children == null) {
          passed_children = null;
        }
        options['$[]=']("ref", "modal");
        return self.$t((((($scope.get('Components')).$$scope.get('Shared'))).$$scope.get('Modal')), options, passed_children);
      }, TMP_1.$$arity = -1);

      Opal.defn(self, '$modal_instance', TMP_2 = function ːmodal_instance() {
        var self = this;

        return self.$ref("modal").$rb();
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$modal_open', TMP_3 = function ːmodal_open(head_content, content, on_close) {
        var self = this;

        if (head_content == null) {
          head_content = false;
        }
        if (content == null) {
          content = false;
        }
        if (on_close == null) {
          on_close = false;
        }
        return self.$modal_instance().$open(head_content, content, on_close);
      }, TMP_3.$$arity = -1);

      Opal.defn(self, '$modal_close', TMP_4 = function ːmodal_close(preserve) {
        var self = this;

        if (preserve == null) {
          preserve = false;
        }
        return self.$modal_instance().$close(preserve);
      }, TMP_4.$$arity = -1);
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["plugins/paginatable"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$is_a?', '$[]', '$data', '$==', '$attributes', '$pop', '$pagination=', '$state', '$!', '$non_url_pagination', '$new', '$to_n', '$query', '$location', '$props', '$[]=', '$current_per_page', '$createHref', '$history', '$pathname', '$pagination_per_page', '$pagination', '$current_page', '$t', '$link_to', '$href_for_page', '$-', '$lambda', '$pagination_switch_page', '$times', '$+', '$<<', '$total_pages', '$per_page_select', '$raise', '$class']);
  return (function($base) {
    var $Plugins, self = $Plugins = $module($base, 'Plugins');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Paginatable, self = $Paginatable = $module($base, 'Paginatable');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_9, TMP_10, TMP_11;

      Opal.defn(self, '$extract_pagination', TMP_1 = function ːextract_pagination(collection) {
        var $a, $b, self = this, x = nil;

        if ((($a = x = ($b = collection.$data()['$[]'](-1)['$is_a?']($scope.get('Model')), $b !== false && $b !== nil && $b != null ?x.$attributes()['$[]']("pagination")['$=='](true) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          x = collection.$data().$pop();
          return (($a = [x]), $b = self.$state(), $b['$pagination='].apply($b, $a), $a[$a.length-1]);
          } else {
          return nil
        };
      }, TMP_1.$$arity = 1);

      Opal.defn(self, '$href_for_page', TMP_2 = function ːhref_for_page(page) {
        var $a, self = this, href = nil;

        if ((($a = self.$state().$non_url_pagination()['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          href = $scope.get('Hash').$new(self.$props().$location().$query().$to_n());
          href['$[]=']("page", page);
          href['$[]=']("per_page", self.$current_per_page());
          return href = self.$props().$history().$createHref(self.$props().$location().$pathname(), href);
          } else {
          return href = "#"
        };
      }, TMP_2.$$arity = 1);

      Opal.defn(self, '$current_per_page', TMP_3 = function ːcurrent_per_page() {
        var self = this;

        return self.$state().$pagination_per_page();
      }, TMP_3.$$arity = 0);

      Opal.defn(self, '$will_paginate', TMP_9 = function ːwill_paginate() {
        var $a, $b, $c, $d, TMP_4, $e, TMP_5, $f, TMP_7, $g, TMP_8, self = this, cur_p = nil, p_n = nil, x = nil, to_return = nil;

        if ((($a = self.$state().$pagination()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          cur_p = self.$state().$pagination().$current_page()};
        return ($a = self).$t.apply($a, ["div", $hash2(["className"], {"className": "pagination_main"})].concat(Opal.to_a((function() {if ((($b = p_n = self.$state().$pagination()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return self.$t("nav", $hash2([], {}), ($b = self).$t.apply($b, ["ul", $hash2(["className", "style"], {"className": "pagination", "style": $hash2(["cursor"], {"cursor": "pointer"}).$to_n()}), self.$t("li", $hash2(["className", "style"], {"className": x = "" + ((function() {if (p_n.$current_page()['$=='](1)) {
            return "disabled"
            } else {
            return ""
          }; return nil; })()), "style": $hash2(["cursor"], {"cursor": "pointer"}).$to_n()}), (function() {if (x['$==']("disabled")) {
            return nil
            } else {
            return self.$link_to("<<", self.$href_for_page($rb_minus(cur_p, 1)), $hash2([], {}), $hash2(["onClick"], {"onClick": ($c = ($d = self).$lambda, $c.$$p = (TMP_4 = function(e){var self = TMP_4.$$s || this;
if (e == null) e = nil;
            return self.$pagination_switch_page(($rb_minus(cur_p, 1)), e)}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $c).call($d)}))
          }; return nil; })())].concat(Opal.to_a((to_return = [], ($c = ($e = p_n.$total_pages()).$times, $c.$$p = (TMP_5 = function(page){var self = TMP_5.$$s || this, $f, $g, TMP_6, to_add = nil;
if (page == null) page = nil;
          page = $rb_plus(page, 1);
            if (page['$=='](p_n.$current_page())) {
              to_add = self.$t("li", $hash2(["className"], {"className": "active"}), self.$t("span", $hash2([], {}), "" + (page)))
              } else {
              to_add = self.$t("li", $hash2([], {}), self.$link_to(page, self.$href_for_page(page), $hash2([], {}), $hash2(["onClick"], {"onClick": ($f = ($g = self).$lambda, $f.$$p = (TMP_6 = function(e){var self = TMP_6.$$s || this;
if (e == null) e = nil;
              return self.$pagination_switch_page(page, e)}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $f).call($g)})))
            };
            return to_return['$<<'](to_add);}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $c).call($e), to_return))).concat(self.$t("li", $hash2(["className", "style"], {"className": x = "" + ((function() {if (p_n.$current_page()['$=='](p_n.$total_pages())) {
            return "disabled"
            } else {
            return ""
          }; return nil; })()), "style": $hash2(["cursor"], {"cursor": "pointer"})}), (function() {if (x['$==']("disabled")) {
            return nil
            } else {
            return self.$link_to(">>", self.$href_for_page($rb_plus(cur_p, 1)), $hash2([], {}), $hash2(["onClick"], {"onClick": ($c = ($f = self).$lambda, $c.$$p = (TMP_7 = function(e){var self = TMP_7.$$s || this;
if (e == null) e = nil;
            return self.$pagination_switch_page(($rb_plus(cur_p, 1)), e)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $c).call($f)}))
          }; return nil; })()), self.$t("li", $hash2([], {}), self.$t("span", $hash2([], {}), "per page", self.$t("select", $hash2(["ref", "onChange", "value"], {"ref": "pagination_select", "onChange": ($c = ($g = self).$lambda, $c.$$p = (TMP_8 = function(e){var self = TMP_8.$$s || this;
if (e == null) e = nil;
          return self.$per_page_select(e.target.value)}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $c).call($g), "value": "" + (self.$current_per_page())}), self.$t("option", $hash2(["value"], {"value": "1"}), "1"), self.$t("option", $hash2(["value"], {"value": "25"}), "25"), self.$t("option", $hash2(["value"], {"value": "50"}), "50"), self.$t("option", $hash2(["value"], {"value": "100"}), "100"), self.$t("option", $hash2(["value"], {"value": "200"}), "200")))))))
          } else {
          return nil
        }; return nil; })())));
      }, TMP_9.$$arity = 0);

      Opal.defn(self, '$pagination_switch_page', TMP_10 = function ːpagination_switch_page(page, event) {
        var self = this;

        return self.$raise("" + (self) + " must implement #pagination_switch_page(page, per_page) refer to " + (self.$class()) + " for info");
      }, TMP_10.$$arity = 2);

      Opal.defn(self, '$on_per_page_select', TMP_11 = function ːon_per_page_select(p_p) {
        var self = this;

        return self.$raise("" + (self) + " must implement #on_per_page_select(per_page) refer to " + (self.$class()) + " for info");
      }, TMP_11.$$arity = 1);
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["plugins/phantom_yielder"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$increment_yielders_count', '$phantom_instance', '$one_component_ready']);
  return (function($base) {
    var $Plugins, self = $Plugins = $module($base, 'Plugins');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PhantomYielder, self = $PhantomYielder = $module($base, 'PhantomYielder');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

      Opal.defn(self, '$yields_phantom_ready', TMP_1 = function ːyields_phantom_ready() {
        var self = this;

        return (((($scope.get('Components')).$$scope.get('App'))).$$scope.get('Router')).$phantom_instance().$increment_yielders_count();
      }, TMP_1.$$arity = 0);

      Opal.defn(self, '$component_phantom_ready', TMP_2 = function ːcomponent_phantom_ready() {
        var self = this;

        return (((($scope.get('Components')).$$scope.get('App'))).$$scope.get('Router')).$phantom_instance().$one_component_ready();
      }, TMP_2.$$arity = 0);
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["plugins/progress_bar"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$t', '$ref', '$rb']);
  return (function($base) {
    var $Plugins, self = $Plugins = $module($base, 'Plugins');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $ProgressBar, self = $ProgressBar = $module($base, 'ProgressBar');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

      Opal.defn(self, '$has_progress_bar', TMP_1 = function ːhas_progress_bar() {
        var self = this;
        if (self.has_progress_bar == null) self.has_progress_bar = nil;

        return self.has_progress_bar;
      }, TMP_1.$$arity = 0);

      Opal.defn(self, '$progress_bar', TMP_2 = function ːprogress_bar() {
        var self = this;

        self.has_progress_bar = true;
        return self.$t((($scope.get('Shared')).$$scope.get('ProgressBar')), $hash2(["ref"], {"ref": "progress_bar"}));
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$progress_bar_instance', TMP_3 = function ːprogress_bar_instance() {
        var $a, self = this;

        if ((($a = self.$ref("progress_bar")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.$ref("progress_bar").$rb()
          } else {
          return nil
        };
      }, TMP_3.$$arity = 0);
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["plugins/pub_sub_bus"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$new', '$[]=', '$<<', '$[]', '$include?', '$each', '$send', '$raise', '$call', '$delete']);
  return (function($base) {
    var $Plugins, self = $Plugins = $module($base, 'Plugins');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PubSubBus, self = $PubSubBus = $module($base, 'PubSubBus');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_4, TMP_7, TMP_8, TMP_11;

      Opal.defn(self, '$when', TMP_1 = function ːwhen(channel) {
        var $a, $b, $c, TMP_2, self = this, $iter = TMP_1.$$p, block = $iter || nil;
        if (self.block_channels == null) self.block_channels = nil;

        TMP_1.$$p = null;
        ((($a = self.block_channels) !== false && $a !== nil && $a != null) ? $a : self.block_channels = ($b = ($c = $scope.get('Hash')).$new, $b.$$p = (TMP_2 = function(k, v){var self = TMP_2.$$s || this;
if (k == null) k = nil;if (v == null) v = nil;
        return k['$[]='](v, [])}, TMP_2.$$s = self, TMP_2.$$arity = 2, TMP_2), $b).call($c));
        return self.block_channels['$[]'](channel)['$<<'](block);
      }, TMP_1.$$arity = 1);

      Opal.defn(self, '$subscribe', TMP_4 = function ːsubscribe(channel, obj) {
        var $a, $b, $c, TMP_3, self = this;
        if (self.pub_sub_list == null) self.pub_sub_list = nil;

        ((($a = self.pub_sub_list) !== false && $a !== nil && $a != null) ? $a : self.pub_sub_list = ($b = ($c = $scope.get('Hash')).$new, $b.$$p = (TMP_3 = function(h, k){var self = TMP_3.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
        return h['$[]='](k, [])}, TMP_3.$$s = self, TMP_3.$$arity = 2, TMP_3), $b).call($c));
        if ((($a = self.pub_sub_list['$[]'](channel)['$include?'](obj)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          return self.pub_sub_list['$[]'](channel)['$<<'](obj)
        };
      }, TMP_4.$$arity = 2);

      Opal.defn(self, '$publish', TMP_7 = function ːpublish(channel, $a_rest) {
        var $b, $c, TMP_5, $d, TMP_6, self = this, args;
        if (self.pub_sub_list == null) self.pub_sub_list = nil;
        if (self.block_channels == null) self.block_channels = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ((($b = self.pub_sub_list) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          ($b = ($c = self.pub_sub_list['$[]'](channel)).$each, $b.$$p = (TMP_5 = function(obj){var self = TMP_5.$$s || this, $a, e = nil;
if (obj == null) obj = nil;
          try {
              return ($a = obj).$send.apply($a, [channel].concat(Opal.to_a(args)))
            } catch ($err) {
              if (Opal.rescue($err, [$scope.get('NoMethodError')])) {e = $err;
                try {
                  return self.$raise("" + (self) + " tried to publish to " + (channel) + " but " + (obj) + " doesn't implement it: " + (e))
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $b).call($c)};
        if ((($b = self.block_channels) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return ($b = ($d = self.block_channels['$[]'](channel)).$each, $b.$$p = (TMP_6 = function(block){var self = TMP_6.$$s || this, $a;
if (block == null) block = nil;
          return ($a = block).$call.apply($a, Opal.to_a(args))}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $b).call($d)
          } else {
          return nil
        };
      }, TMP_7.$$arity = -2);

      Opal.defn(self, '$unsubscribe', TMP_8 = function ːunsubscribe(channel, obj) {
        var self = this, x = nil;
        if (self.pub_sub_list == null) self.pub_sub_list = nil;

        x = self.pub_sub_list['$[]'](channel).$delete(obj);
        if (x !== false && x !== nil && x != null) {
          return nil
          } else {
          return self.$raise("" + (obj) + " tried to " + (self) + ".unsub_from " + (channel) + " which is not in list")
        };
      }, TMP_8.$$arity = 2);

      Opal.defn(self, '$unsubscribe_all', TMP_11 = function ːunsubscribe_all(channel) {
        var $a, $b, TMP_9, $c, TMP_10, self = this;
        if (self.pub_sub_list == null) self.pub_sub_list = nil;

        if (channel == null) {
          channel = false;
        }
        if (channel !== false && channel !== nil && channel != null) {
          return self.pub_sub_list['$[]='](channel, [])
          } else {
          self.pub_sub_list = ($a = ($b = $scope.get('Hash')).$new, $a.$$p = (TMP_9 = function(h, k){var self = TMP_9.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
          return h['$[]='](k, [])}, TMP_9.$$s = self, TMP_9.$$arity = 2, TMP_9), $a).call($b);
          return self.block_channels = ($a = ($c = $scope.get('Hash')).$new, $a.$$p = (TMP_10 = function(k, v){var self = TMP_10.$$s || this;
if (k == null) k = nil;if (v == null) v = nil;
          return k['$[]='](v, [])}, TMP_10.$$s = self, TMP_10.$$arity = 2, TMP_10), $a).call($c);
        };
      }, TMP_11.$$arity = -1);
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["plugins/react_router"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$t', '$to_n', '$[]']);
  return (function($base) {
    var $Plugins, self = $Plugins = $module($base, 'Plugins');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $ReactRouter, self = $ReactRouter = $module($base, 'ReactRouter');

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      Opal.defn(self, '$link_to', TMP_1 = function ːlink_to(body, link, options) {
        var self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

        if (options == null) {
          options = $hash2([], {});
        }
        TMP_1.$$p = null;
        if (($yield !== nil)) {
          body = Opal.yieldX($yield, [])};
        return self.$t(ReactRouter.Link, $hash2(["to", "query", "className"], {"to": link, "query": options.$to_n(), "className": options['$[]']("className")}), body);
      }, TMP_1.$$arity = -3)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["plugins/request_handler"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $gvars = Opal.gvars;

  Opal.add_stubs(['$authorize!', '$progress_bar_instance', '$off', '$==', '$status_code', '$pushState', '$has_progress_bar', '$on', '$replaceState']);
  return (function($base) {
    var $Plugins, self = $Plugins = $module($base, 'Plugins');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $RequestHandler, self = $RequestHandler = $module($base, 'RequestHandler');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

      Opal.defn(self, '$defaults_on_response', TMP_1 = function ːdefaults_on_response() {
        var $a, $b, self = this;
        if (self.component == null) self.component = nil;
        if (self.response == null) self.response = nil;
        if ($gvars.HISTORY == null) $gvars.HISTORY = nil;

        self['$authorize!']();
        if ((($a = ($b = self.component, $b !== false && $b !== nil && $b != null ?self.component.$progress_bar_instance() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.component.$progress_bar_instance().$off()};
        if (self.response.$status_code()['$=='](404)) {
          return $gvars.HISTORY.$pushState(nil, "/error404")
        } else if (self.response.$status_code()['$=='](500)) {
          return $gvars.HISTORY.$pushState(nil, "/er505?status_code=500")
        } else if (self.response.$status_code()['$=='](400)) {
          return $gvars.HISTORY.$pushState(nil, "/er505?status_code=400")
          } else {
          return nil
        };
      }, TMP_1.$$arity = 0);

      Opal.defn(self, '$defaults_before_request', TMP_2 = function ːdefaults_before_request() {
        var $a, $b, self = this;
        if (self.component == null) self.component = nil;

        if ((($a = ($b = self.component, $b !== false && $b !== nil && $b != null ?self.component.$progress_bar_instance() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ((function() {if ((($a = self.component.$has_progress_bar()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.component.$progress_bar_instance().$on()
            } else {
            return nil
          }; return nil; })())
          } else {
          return nil
        };
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$authorize!', TMP_3 = function() {
        var self = this;
        if (self.response == null) self.response = nil;
        if ($gvars.HISTORY == null) $gvars.HISTORY = nil;

        if (self.response.$status_code()['$=='](403)) {
          return $gvars.HISTORY.$replaceState(nil, "/forbidden")
          } else {
          return nil
        };
      }, TMP_3.$$arity = 0);
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["plugins/rw_global_extensions"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$[]', '$errors', '$t', '$map', '$create_load_icon', '$instance', '$destroy_load_icon']);
  return (function($base) {
    var $Plugins, self = $Plugins = $module($base, 'Plugins');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $RWGlobalExtensions, self = $RWGlobalExtensions = $module($base, 'RWGlobalExtensions');

      var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4;

      Opal.defn(self, '$general_errors_for', TMP_2 = function ːgeneral_errors_for(model) {
        var $a, $b, TMP_1, self = this;

        if ((($a = (($b = model !== false && model !== nil && model != null) ? model.$errors()['$[]']("general") : model)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.$t("div", $hash2(["className"], {"className": "invalid"}), ($a = ($b = model.$errors()['$[]']("general")).$map, $a.$$p = (TMP_1 = function(error){var self = TMP_1.$$s || this;
if (error == null) error = nil;
          return self.$t("p", $hash2([], {}), error)}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b))
          } else {
          return nil
        };
      }, TMP_2.$$arity = 1);

      Opal.defn(self, '$start_spinning_icon', TMP_3 = function ːstart_spinning_icon() {
        var self = this;

        return (((($scope.get('Components')).$$scope.get('Shared'))).$$scope.get('LoadIconPool')).$instance().$create_load_icon(self);
      }, TMP_3.$$arity = 0);

      Opal.defn(self, '$stop_spinning_icon', TMP_4 = function ːstop_spinning_icon() {
        var self = this;

        return (((($scope.get('Components')).$$scope.get('Shared'))).$$scope.get('LoadIconPool')).$instance().$destroy_load_icon(self);
      }, TMP_4.$$arity = 0);
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["plugins/update_on_set_state_only"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base) {
    var $Plugins, self = $Plugins = $module($base, 'Plugins');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $UpdateOnSetStateOnly, self = $UpdateOnSetStateOnly = $module($base, 'UpdateOnSetStateOnly');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

      Opal.defn(self, '$__component_did_mount__', TMP_1 = function ː__component_did_mount__($a_rest) {
        var $b, $c, self = this, args, $iter = TMP_1.$$p, $yield = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        TMP_1.$$p = null;
        ($b = ($c = self, Opal.find_super_dispatcher(self, '__component_did_mount__', TMP_1, false)), $b.$$p = null, $b).apply($c, Opal.to_a(args));
        return self.should_update = false;
      }, TMP_1.$$arity = -1);

      Opal.defn(self, '$__set_state__', TMP_2 = function ː__set_state__(val) {
        var $a, $b, self = this, $iter = TMP_2.$$p, $yield = $iter || nil;

        TMP_2.$$p = null;
        self.should_update = true;
        return ($a = ($b = self, Opal.find_super_dispatcher(self, '__set_state__', TMP_2, false)), $a.$$p = null, $a).call($b, val);
      }, TMP_2.$$arity = 1);

      Opal.defn(self, '$__component_did_update__', TMP_3 = function ː__component_did_update__($a_rest) {
        var $b, $c, self = this, args, $iter = TMP_3.$$p, $yield = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        TMP_3.$$p = null;
        ($b = ($c = self, Opal.find_super_dispatcher(self, '__component_did_update__', TMP_3, false)), $b.$$p = null, $b).apply($c, Opal.to_a(args));
        return self.should_update = false;
      }, TMP_3.$$arity = -1);

      Opal.defn(self, '$__should_component_update__', TMP_4 = function ː__should_component_update__($a_rest) {
        var self = this, args;
        if (self.should_update == null) self.should_update = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return self.should_update;
      }, TMP_4.$$arity = -1);
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/user"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$attributes', '$has_one', '$has_many', '$route', '$s_avatar', '$avatar=', '$parse', '$user_credential', '$name', '$[]', '$before_route_update', '$json', '$response', '$[]=', '$errors', '$resolve', '$promise', '$empty?', '$subscribing_user_subscriptions', '$first', '$new', '$try', '$then', '$update_karma', '$-', '$after_route_update', '$user_roles', '$map', '$data', '$include?']);
  return (function($base, $super) {
    function $User(){};
    var self = $User = $klass($base, $super, 'User', $User);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_14;

    def.attributes = nil;
    self.$register();

    self.$attributes("id", "registered", "avatar", "s_avatar", "name");

    self.$has_one("user_credential", $hash2(["class_name", "aliases"], {"class_name": "UserCredential", "aliases": ["uc_s_name"]}));

    self.$has_one("user_karma", $hash2(["class_name"], {"class_name": "UserKarma"}));

    self.$has_one("user_denormalized_stat", $hash2(["class_name"], {"class_name": "UserDenormalizedStat"}));

    self.$has_many("subscribing_user_subscriptions", $hash2(["class_name"], {"class_name": "UserSubscription"}));

    self.$has_many("discussion_message_karma_transactions", $hash2(["class_name"], {"class_name": "DiscussionMessageKarmaTransaction"}));

    self.$has_many("post_karma_transactions", $hash2(["class_name"], {"class_name": "PostKarmaTransactions"}));

    self.$has_many("user_roles", $hash2(["class_name"], {"class_name": "UserRole"}));

    self.$has_one("usub_with_current_user", $hash2(["class_name"], {"class_name": "UserSubscription"}));

    self.$has_many("notifications", $hash2(["class_name"], {"class_name": "Notification"}));

    self.$route("create", $hash2(["post"], {"post": "users"}));

    self.$route("login_via_pwd", $hash2(["post"], {"post": "sessions/login_via_pwd"}));

    self.$route("send_login_link", $hash2(["post"], {"post": "sessions/send_login_link"}));

    self.$route("General_info", $hash2(["get"], {"get": "users/general_info/:id"}));

    self.$route("ping_current_user", $hash2(["get"], {"get": "users/ping_current_user"}));

    self.$route("update_avatar", $hash2(["post"], {"post": "users/:id/avatars"}), $hash2(["defaults"], {"defaults": ["id"]}));

    Opal.defn(self, '$init', TMP_1 = function ːinit(attributes) {
      var $a, $b, self = this;

      if ((($a = self.$s_avatar()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (($a = [$scope.get('JSON').$parse(self.$s_avatar())]), $b = self, $b['$avatar='].apply($b, $a), $a[$a.length-1])
        } else {
        return nil
      };
    }, TMP_1.$$arity = 1);

    Opal.defn(self, '$name', TMP_2 = function ːname() {
      var $a, self = this;

      if ((($a = self.$user_credential()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$user_credential().$name()
        } else {
        return self.attributes['$[]']("name")
      };
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$before_route_update_avatar', TMP_3 = function ːbefore_route_update_avatar(r) {
      var self = this;

      return self.$before_route_update(r);
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$after_route_update_avatar', TMP_4 = function ːafter_route_update_avatar(r) {
      var $a, $b, self = this, s_avatar = nil, errors = nil;

      s_avatar = r.$response().$json();
      if ((($a = errors = s_avatar['$[]']("erorrs")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$errors()['$[]=']("avatar", errors)
        } else {
        (($a = [s_avatar]), $b = self, $b['$avatar='].apply($b, $a), $a[$a.length-1])
      };
      return r.$promise().$resolve(self);
    }, TMP_4.$$arity = 1);

    Opal.defs(self, '$after_route_general_info', TMP_5 = function ːafter_route_general_info(r) {
      var self = this, json = nil, result = nil;

      json = r.$response().$json();
      result = $hash2([], {});
      result['$[]=']("user", $scope.get('User').$parse(json['$[]']("user")));
      result['$[]=']("latest_user_posts", $scope.get('Post').$parse(json['$[]']("latest_user_posts")));
      result['$[]=']("top_post", $scope.get('Post').$parse(json['$[]']("top_post")));
      result['$[]=']("top_discussion_message", $scope.get('DiscussionMessage').$parse(json['$[]']("top_discussion_message")));
      result['$[]=']("latest_discussion_messages", $scope.get('DiscussionMessage').$parse(json['$[]']("latest_discussion_messages")));
      result['$[]=']("total_likes", json['$[]']("total_likes"));
      result['$[]=']("total_dislikes", json['$[]']("total_dislikes"));
      result['$[]=']("total_posts", json['$[]']("total_posts"));
      return r.$promise().$resolve(result);
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$first_subscribing_user_subscription_or_nil', TMP_6 = function ːfirst_subscribing_user_subscription_or_nil() {
      var $a, self = this, _ = nil;

      if ((($a = (_ = self.$subscribing_user_subscriptions()['$empty?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil
        } else {
        return _.$first()
      };
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$after_route_ping_current_user', TMP_8 = function ːafter_route_ping_current_user(r) {
      var $a, $b, TMP_7, self = this, promise = nil, previous_karma = nil;

      promise = $scope.get('Promise').$new();
      previous_karma = self.$try("user_karma").$try("count");
      return ($a = ($b = self.$after_route_update(r)).$then, $a.$$p = (TMP_7 = function(user){var self = TMP_7.$$s || this, $c, $d, new_karma = nil;
if (user == null) user = nil;
      new_karma = user.$try("user_karma").$try("count");
        if ((($c = (($d = new_karma !== false && new_karma !== nil && new_karma != null) ? previous_karma : new_karma)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          $scope.get('CurrentUser').$update_karma($rb_minus(new_karma, previous_karma))};
        return promise.$resolve(user);}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b);
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$before_route_login_via_pwd', TMP_9 = function ːbefore_route_login_via_pwd(r) {
      var self = this;

      return self.$before_route_update(r);
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$after_route_login_via_pwd', TMP_10 = function ːafter_route_login_via_pwd(r) {
      var self = this;

      return self.$after_route_update(r);
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$before_route_send_login_link', TMP_11 = function ːbefore_route_send_login_link(r) {
      var self = this;

      return self.$before_route_update(r);
    }, TMP_11.$$arity = 1);

    Opal.defn(self, '$after_route_send_login_link', TMP_12 = function ːafter_route_send_login_link(r) {
      var self = this;

      return self.$after_route_update(r);
    }, TMP_12.$$arity = 1);

    return (Opal.defn(self, '$has_role?', TMP_14 = function(role_name) {
      var $a, $b, TMP_13, self = this, roles = nil;

      if ((($a = self.$user_roles()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        roles = ($a = ($b = self.$user_roles().$data()).$map, $a.$$p = (TMP_13 = function(role){var self = TMP_13.$$s || this;
if (role == null) role = nil;
        return role.$name()}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13), $a).call($b);
        return roles['$include?'](role_name);
        } else {
        return nil
      };
    }, TMP_14.$$arity = 1), nil) && 'has_role?';
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/current_user"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$register', '$route', '$extend', '$new', '$attr_accessor', '$publish', '$ping_current_user', '$instance', '$logged_in=', '$then', '$get_app_instance', '$force_update', '$ok?', '$response', '$set_user_and_login_status', '$resolve', '$promise', '$reject', '$==', '$include?', '$map', '$to_proc', '$user_roles', '$each', '$!=', '$read', '$notifications', '$+']);
  self.$require("models/user");
  return (function($base, $super) {
    function $CurrentUser(){};
    var self = $CurrentUser = $klass($base, $super, 'CurrentUser', $CurrentUser);

    var def = self.$$proto, $scope = self.$$scope, $a, TMP_1, TMP_2, TMP_4, TMP_5, TMP_6, TMP_7, TMP_9, TMP_11;
    if (self.instance == null) self.instance = nil;

    self.$register();

    self.$route("Logout", $hash2(["delete"], {"delete": "sessions/logout"}));

    self.$extend((($scope.get('Plugins')).$$scope.get('PubSubBus')));

    ((($a = self.instance) !== false && $a !== nil && $a != null) ? $a : self.instance = $scope.get('User').$new());

    self.logged_in = false;

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      self.$attr_accessor("instance");
      return self.$attr_accessor("logged_in");
    })(Opal.get_singleton_class(self));

    Opal.defs(self, '$logged_in=', TMP_1 = function(val) {
      var self = this;
      if (self.user_instance == null) self.user_instance = nil;

      self.logged_in = val;
      if (val !== false && val !== nil && val != null) {
        return self.$publish("user_logged_in", self.user_instance)
        } else {
        return self.$publish("user_logged_out", self.user_instance)
      };
    }, TMP_1.$$arity = 1);

    Opal.defs(self, '$ping_current_user', TMP_2 = function ːping_current_user(args) {
      var self = this;

      if (args == null) {
        args = $hash2([], {});
      }
      return self.$instance().$ping_current_user(args);
    }, TMP_2.$$arity = -1);

    Opal.defs(self, '$set_user_and_login_status', TMP_4 = function ːset_user_and_login_status(user, login_value) {
      var $a, $b, TMP_3, self = this, app_instance = nil;

      self.instance = user;
      (($a = [login_value]), $b = self, $b['$logged_in='].apply($b, $a), $a[$a.length-1]);
      ($a = ($b = self.$ping_current_user()).$then, $a.$$p = (TMP_3 = function(user){var self = TMP_3.$$s || this;
if (user == null) user = nil;
      self.instance = user;
        return self.$publish("user_logged_in", user);}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b);
      if ((($a = app_instance = (((($scope.get('Components')).$$scope.get('App'))).$$scope.get('Router')).$get_app_instance()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return app_instance.$force_update()
        } else {
        return nil
      };
    }, TMP_4.$$arity = 2);

    Opal.defs(self, '$after_route_logout', TMP_5 = function ːafter_route_logout(r) {
      var $a, self = this;
      if (self.user_instance == null) self.user_instance = nil;

      if ((($a = r.$response()['$ok?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$set_user_and_login_status($scope.get('User').$new(), false);
        return r.$promise().$resolve(self.user_instance);
        } else {
        return r.$promise().$reject($hash2(["status"], {"status": "error"}))
      };
    }, TMP_5.$$arity = 1);

    Opal.defs(self, '$update_karma', TMP_6 = function ːupdate_karma(amount) {
      var self = this;

      if (amount !== false && amount !== nil && amount != null) {
        } else {
        return nil
      };
      if (amount['$=='](0)) {
        return nil};
      return self.$publish("karma_changed", amount);
    }, TMP_6.$$arity = 1);

    Opal.defs(self, '$instance_has_role?', TMP_7 = function(role_name) {
      var $a, $b, self = this;
      if (self.instance == null) self.instance = nil;

      return ($a = ($b = self.instance.$user_roles()).$map, $a.$$p = "name".$to_proc(), $a).call($b)['$include?'](role_name);
    }, TMP_7.$$arity = 1);

    Opal.defs(self, '$has_unread_notifications', TMP_9 = function ːhas_unread_notifications() {
      var $a, $b, TMP_8, self = this, to_return = nil;
      if (self.instance == null) self.instance = nil;

      to_return = (function(){var $brk = Opal.new_brk(); try {return ($a = ($b = self.instance.$notifications()).$each, $a.$$p = (TMP_8 = function(notification){var self = TMP_8.$$s || this, $c;
if (notification == null) notification = nil;
      if ((($c = notification.$read()['$!='](nil)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          
          Opal.brk(true, $brk)};
        return false;}, TMP_8.$$s = self, TMP_8.$$brk = $brk, TMP_8.$$arity = 1, TMP_8), $a).call($b)
      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      return to_return;
    }, TMP_9.$$arity = 0);

    return (Opal.defs(self, '$unread_notifications_count', TMP_11 = function ːunread_notifications_count() {
      var $a, $b, TMP_10, self = this, count = nil;
      if (self.instance == null) self.instance = nil;

      count = 0;
      ($a = ($b = self.instance.$notifications()).$each, $a.$$p = (TMP_10 = function(notification){var self = TMP_10.$$s || this;
if (notification == null) notification = nil;
      if (notification.$read()['$=='](nil)) {
          return count = $rb_plus(count, 1)
          } else {
          return nil
        }}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10), $a).call($b);
      if (count['$=='](0)) {
        return nil
        } else {
        return count
      };
    }, TMP_11.$$arity = 0), nil) && 'unread_notifications_count';
  })($scope.base, $scope.get('Model'));
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/day_karma_event"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$register', '$attributes', '$has_one']);
  return (function($base, $super) {
    function $DayKarmaEvent(){};
    var self = $DayKarmaEvent = $klass($base, $super, 'DayKarmaEvent', $DayKarmaEvent);

    var def = self.$$proto, $scope = self.$$scope;

    self.$register();

    self.$attributes("id", "day_karma_stat_id", "up_count", "down_count", "source_id", "source_type", "event_type", "user_id", "source_text", "created_at", "updated_at");

    self.$has_one("source", $hash2(["polymorphic_type"], {"polymorphic_type": "source_type"}));

    return Opal.cdecl($scope, 'EVENT_TYPES', $hash(1, "someone voted your post", 2, "someone canceled like to your post", 3, "someone canceled dislike to your post", 4, "post vote", 5, "fresh post vote", 6, "cancelled post vote", 7, "created a post", 8, "someone voted your comment", 9, "someone cancelled like on your comment", 10, "someone cancelled dislike on your comment", 11, "comment vote", 12, "comment vote canceled"));
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/day_karma_stat"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$attributes', '$has_many', '$route']);
  return (function($base, $super) {
    function $DayKarmaStat(){};
    var self = $DayKarmaStat = $klass($base, $super, 'DayKarmaStat', $DayKarmaStat);

    var def = self.$$proto, $scope = self.$$scope;

    self.$register();

    self.$attributes("id", "user_id", "up_count", "down_count", "created_at", "updated_at");

    self.$has_many("day_karma_events", $hash2(["class_name"], {"class_name": "DayKarmaEvent"}));

    return self.$route("Index", $hash2(["get"], {"get": "day_karma_stats"}));
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/discussion"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$attributes', '$has_many', '$route']);
  return (function($base, $super) {
    function $Discussion(){};
    var self = $Discussion = $klass($base, $super, 'Discussion', $Discussion);

    var def = self.$$proto, $scope = self.$$scope;

    self.$register();

    self.$attributes("id", "discussable_type", "discussable_id", "messages_count");

    self.$has_many("discussion_messages", $hash2(["class_name"], {"class_name": "DiscussionMessage"}));

    return self.$route("Show", $hash2(["get"], {"get": "discussions/:discussable_id"}));
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/discussion_message"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$attributes', '$has_many', '$has_one', '$route']);
  return (function($base, $super) {
    function $DiscussionMessage(){};
    var self = $DiscussionMessage = $klass($base, $super, 'DiscussionMessage', $DiscussionMessage);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    self.$register();

    self.$attributes("id", "discussion_id", "user_id", "content", "discussion_message_id");

    self.$has_many("children_messages", $hash2(["class_name"], {"class_name": "DiscussionMessage"}));

    self.$has_one("user", $hash2(["class_name"], {"class_name": "User"}));

    self.$has_one("discussion_message_karma", $hash2(["class_name"], {"class_name": "DiscussionMessageKarma"}));

    self.$route("create", $hash2(["post"], {"post": "discussion_messages"}));

    return (Opal.defs(self, '$wysi_textarea_parse_rules', TMP_1 = function ːwysi_textarea_parse_rules() {
      var self = this;

      return ( 
      {
        colspan: "numbers",
        tags: {
          p: {},
          h3: {},
          img: {
            check_attributes: {
              "data-*": "any",
              src: "src"
            }
          }
        }
      }
    );
    }, TMP_1.$$arity = 0), nil) && 'wysi_textarea_parse_rules';
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/discussion_message_karma"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$attributes', '$has_one', '$has_many', '$discussion_message_karma_transaction_for_cu', '$discussion_message_karma_transaction_for_cu=', '$new', '$id', '$instance']);
  return (function($base, $super) {
    function $DiscussionMessageKarma(){};
    var self = $DiscussionMessageKarma = $klass($base, $super, 'DiscussionMessageKarma', $DiscussionMessageKarma);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    self.$register();

    self.$attributes("id", "count", "discussion_message_id");

    self.$has_one("discussion_message", $hash2(["class_name"], {"class_name": "DiscussionMessage"}));

    self.$has_many("discussion_message_karma_transactions", $hash2(["class_name"], {"class_name": "DiscussionMessageKarmaTransaction"}));

    self.$has_one("discussion_message_karma_transaction_for_cu", $hash2(["class_name"], {"class_name": "DiscussionMessageKarmaTransaction"}));

    return (Opal.defn(self, '$discussion_message_karma_transaction_for_cu_or_new', TMP_1 = function ːdiscussion_message_karma_transaction_for_cu_or_new() {
      var $a, $b, self = this;

      if ((($a = self.$discussion_message_karma_transaction_for_cu()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$discussion_message_karma_transaction_for_cu()
        } else {
        (($a = [$scope.get('DiscussionMessageKarmaTransaction').$new($hash2(["discussion_message_karma_id", "user_id"], {"discussion_message_karma_id": self.$id(), "user_id": $scope.get('CurrentUser').$instance().$id()}))]), $b = self, $b['$discussion_message_karma_transaction_for_cu='].apply($b, $a), $a[$a.length-1]);
        return self.$discussion_message_karma_transaction_for_cu();
      };
    }, TMP_1.$$arity = 0), nil) && 'discussion_message_karma_transaction_for_cu_or_new';
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/discussion_message_karma_transaction"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$attr_accessor', '$attributes', '$has_one', '$route', '$after_route_index', '$previous_amount', '$amount', '$==', '$!=', '$*', '$<']);
  return (function($base, $super) {
    function $DiscussionMessageKarmaTransaction(){};
    var self = $DiscussionMessageKarmaTransaction = $klass($base, $super, 'DiscussionMessageKarmaTransaction', $DiscussionMessageKarmaTransaction);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

    self.$register();

    self.$attr_accessor("previous_amount");

    self.$attributes("id", "amount", "user_id", "discussion_message_karma_id", "cancel_type", "user_change_amount");

    self.$has_one("discussion_message_karma", $hash2(["class_name"], {"class_name": "DiscussionMessageKarma"}));

    self.$has_one("user", $hash2(["class_name"], {"class_name": "User"}));

    self.$route("create", $hash2(["post"], {"post": "discussion_message_karma_transactions"}));

    self.$route("Index_for_cu", $hash2(["get"], {"get": "discussion_message_karma_transactions/index_for_cu"}));

    Opal.defs(self, '$after_route_index_for_cu', TMP_1 = function ːafter_route_index_for_cu(r) {
      var self = this;

      return self.$after_route_index(r);
    }, TMP_1.$$arity = 1);

    return (Opal.defn(self, '$amount_change_factor', TMP_2 = function ːamount_change_factor() {
      var $a, $b, self = this;

      if ((($a = self.$previous_amount()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return self.$amount()
      };
      if (self.$amount()['$=='](self.$previous_amount())) {
        return 0
      } else if ((($a = ($b = (self.$amount()['$=='](0)), $b !== false && $b !== nil && $b != null ?(self.$previous_amount()['$!='](0)) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return $rb_times(self.$previous_amount(), -1)
      } else if ((($a = ($b = (($rb_lt(self.$amount(), 0))['$!='](($rb_lt(self.$previous_amount(), 0)))), $b !== false && $b !== nil && $b != null ?self.$previous_amount()['$!='](0) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return $rb_times(self.$amount(), 2)
        } else {
        return self.$amount()
      };
    }, TMP_2.$$arity = 0), nil) && 'amount_change_factor';
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/media_story"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$attributes', '$has_many', '$route']);
  return (function($base, $super) {
    function $MediaStory(){};
    var self = $MediaStory = $klass($base, $super, 'MediaStory', $MediaStory);

    var def = self.$$proto, $scope = self.$$scope;

    self.$register();

    self.$attributes("id", "title", "user_id");

    self.$has_many("media_story_nodes", $hash2(["class_name"], {"class_name": "MediaStoryNode"}));

    self.$route("create", $hash2(["post"], {"post": "media_stories"}));

    self.$route("Show", $hash2(["get"], {"get": "media_stories/:id"}));

    return self.$route("update", $hash2(["put"], {"put": "media_stories/:id"}), $hash2(["defaults"], {"defaults": ["id"]}));
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/media_story_node"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$attributes', '$has_one', '$route']);
  return (function($base, $super) {
    function $MediaStoryNode(){};
    var self = $MediaStoryNode = $klass($base, $super, 'MediaStoryNode', $MediaStoryNode);

    var def = self.$$proto, $scope = self.$$scope;

    self.$register();

    self.$attributes("id", "annotation", "media_type", "media_id", "media_story_id");

    self.$has_one("media", $hash2(["polymorphic_type"], {"polymorphic_type": "media_type"}));

    self.$route("create", $hash2(["post"], {"post": "media_stories/:media_story_id/media_story_nodes"}), $hash2(["defaults"], {"defaults": ["media_story_id"]}));

    self.$route("update", $hash2(["put"], {"put": "media_stories/:media_story_id/media_story_nodes/:id"}), $hash2(["defaults"], {"defaults": ["media_story_id", "id"]}));

    return self.$route("destroy", $hash2(["delete"], {"delete": "media_stories/:media_story_id/media_story_nodes/:id"}), $hash2(["defaults"], {"defaults": ["media_story_id", "id"]}));
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/notification"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$attributes', '$route', '$after_route_index', '$after_route_update']);
  return (function($base, $super) {
    function $Notification(){};
    var self = $Notification = $klass($base, $super, 'Notification', $Notification);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

    self.$register();

    self.$attributes("id", "content", "user_id", "read", "created_at");

    self.$route("Index", $hash2(["get"], {"get": "notifications"}));

    self.$route("set_read", $hash2(["get"], {"get": "notifications/set_read/:id"}), $hash2(["defaults"], {"defaults": ["id"]}));

    self.$route("Index_for_user", $hash2(["get"], {"get": "users/:user_id/notifications"}));

    Opal.defs(self, '$after_route_index_for_user', TMP_1 = function ːafter_route_index_for_user(r) {
      var self = this;

      return self.$after_route_index(r);
    }, TMP_1.$$arity = 1);

    return (Opal.defn(self, '$after_route_set_read', TMP_2 = function ːafter_route_set_read(r) {
      var self = this;

      return self.$after_route_update(r);
    }, TMP_2.$$arity = 1), nil) && 'after_route_set_read';
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/p_t_personality"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$attributes', '$has_one', '$has_many', '$route', '$before_route_update', '$after_route_update']);
  return (function($base, $super) {
    function $P_T_Personality(){};
    var self = $P_T_Personality = $klass($base, $super, 'P_T_Personality', $P_T_Personality);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

    self.$register();

    self.$attributes("id", "title", "post_test_id", "media_type", "media_id");

    self.$has_one("post_test", $hash2(["class_name"], {"class_name": "PostTest"}));

    self.$has_one("media", $hash2(["polymorphic_type"], {"polymorphic_type": "media_type"}));

    self.$has_many("personality_scales", $hash2(["class_name"], {"class_name": "PersonalityScale"}));

    self.$route("create", $hash2(["post"], {"post": "personality_tests/:post_test_id/p_t_personalities"}), $hash2(["defaults"], {"defaults": ["post_test_id"]}));

    self.$route("destroy", $hash2(["delete"], {"delete": "personality_tests/:post_test_id/p_t_personalities/:id"}), $hash2(["defaults"], {"defaults": ["post_test_id", "id"]}));

    self.$route("update", $hash2(["put"], {"put": "personality_tests/:post_test_id/p_t_personalities/:id"}), $hash2(["defaults"], {"defaults": ["post_test_id", "id"]}));

    self.$route("medias_update", $hash2(["post"], {"post": "p_t_personalities/:id/medias"}), $hash2(["defaults"], {"defaults": ["id"]}));

    Opal.defn(self, '$before_route_medias_update', TMP_1 = function ːbefore_route_medias_update(r) {
      var self = this;

      return self.$before_route_update(r);
    }, TMP_1.$$arity = 1);

    return (Opal.defn(self, '$after_route_medias_update', TMP_2 = function ːafter_route_medias_update(r) {
      var self = this;

      return self.$after_route_update(r);
    }, TMP_2.$$arity = 1), nil) && 'after_route_medias_update';
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/pagination"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$register', '$attributes']);
  return (function($base, $super) {
    function $Pagination(){};
    var self = $Pagination = $klass($base, $super, 'Pagination', $Pagination);

    var def = self.$$proto, $scope = self.$$scope;

    self.$register();

    return self.$attributes("current_page", "total_entries", "total_pages", "next_page", "previous_page", "offest");
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/personality_scale"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$attributes', '$attr_accessor', '$has_one', '$route']);
  return (function($base, $super) {
    function $PersonalityScale(){};
    var self = $PersonalityScale = $klass($base, $super, 'PersonalityScale', $PersonalityScale);

    var def = self.$$proto, $scope = self.$$scope;

    self.$register();

    self.$attributes("id", "post_test_id", "p_t_personality_id", "scale", "test_answer_variant_id");

    self.$attr_accessor("scale_changed");

    self.$has_one("test_answer_variant", $hash2(["class_name"], {"class_name": "TestAnswerVariant"}));

    self.$has_one("p_t_personality", $hash2(["class_name"], {"class_name": "P_T_Personality"}));

    return self.$route("update", $hash2(["put"], {"put": "test_answer_variants/:test_answer_variant_id/personality_scales/:id"}), $hash2(["defaults"], {"defaults": ["test_answer_variant_id", "id"]}));
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/post"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$attributes', '$has_one', '$has_many', '$route', '$[]', '$s_nodes=', '$parse', '$data', '$post_nodes', '$each', '$find', '$==', '$id', '$<<', '$s_nodes', '$data=', '$req_options=', '$title', '$json', '$response', '$validate', '$resolve', '$promise', '$after_route_index', '$pure_attributes', '$ok?', '$class', '$node', '$[]=', '$post_thumbs']);
  return (function($base, $super) {
    function $Post(){};
    var self = $Post = $klass($base, $super, 'Post', $Post);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_15;

    def.nodes_sorted = nil;
    self.$register();

    self.$attributes("id", "content", "nodes_order", "title", "s_nodes", "created_at", "udpated_at");

    self.$has_one("author", $hash2(["class_name", "aliases"], {"class_name": "User", "aliases": ["au_s_id"]}));

    self.$has_many("post_images", $hash2(["class_name"], {"class_name": "PostImage"}));

    self.$has_many("post_nodes", $hash2(["class_name", "aliases"], {"class_name": "PostNode", "aliases": ["post_nodes_with_root"]}));

    self.$has_many("post_thumbs", $hash2(["class_name"], {"class_name": "PostThumb"}));

    self.$has_one("post_karma", $hash2(["class_name"], {"class_name": "PostKarma"}));

    self.$has_many("post_tags", $hash2(["class_name"], {"class_name": "PostTag"}));

    self.$has_many("post_tag_links", $hash2(["class_name"], {"class_name": "PostTagLink"}));

    self.$has_one("post_type", $hash2(["class_name"], {"class_name": "PostType"}));

    self.$has_one("discussion", $hash2(["class_name"], {"class_name": "Discussion"}));

    self.$route("create", $hash2(["post"], {"post": "posts"}));

    self.$route("Edit", $hash2(["get"], {"get": "posts/:id/edit"}));

    self.$route("update", $hash2(["put"], {"put": "posts/:id"}), $hash2(["defaults"], {"defaults": ["id"]}));

    self.$route("Show", $hash2(["get"], {"get": "posts/:id"}));

    self.$route("Index", $hash2(["get"], {"get": "posts"}));

    self.$route("Index_for_user", $hash2(["get"], {"get": "users/posts/index/:id"}));

    self.$route("Index_for_user_show", $hash2(["get"], {"get": "users/show/post_index/:id"}));

    self.$route("set_published", $hash2(["put"], {"put": "posts/set_published/:id"}));

    self.$route("set_unpublished", $hash2(["put"], {"put": "posts/set_unpublished/:id"}));

    self.$route("perform_search", $hash2(["get"], {"get": "posts/search"}));

    self.$route("update_title", $hash2(["post"], {"post": "posts/:id/titles"}), $hash2(["defaults"], {"defaults": ["id"]}));

    Opal.defn(self, '$init', TMP_1 = function ːinit(attributes) {
      var $a, $b, self = this, x = nil;

      if ((($a = x = attributes['$[]']("s_nodes")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (($a = [$scope.get('PostNode').$parse($scope.get('JSON').$parse(x))]), $b = self, $b['$s_nodes='].apply($b, $a), $a[$a.length-1])
        } else {
        return nil
      };
    }, TMP_1.$$arity = 1);

    Opal.defn(self, '$sort_post_nodes_in_order_as_in_s_nodes', TMP_4 = function ːsort_post_nodes_in_order_as_in_s_nodes() {
      var $a, $b, TMP_2, $c, self = this, current_post_nodes_data = nil, sorted_post_nodes_data = nil;

      current_post_nodes_data = self.$post_nodes().$data();
      sorted_post_nodes_data = [];
      ($a = ($b = self.$s_nodes()).$each, $a.$$p = (TMP_2 = function(post_node){var self = TMP_2.$$s || this, $c, $d, TMP_3, node_to_push = nil;
if (post_node == null) post_node = nil;
      node_to_push = ($c = ($d = current_post_nodes_data).$find, $c.$$p = (TMP_3 = function(_post_node){var self = TMP_3.$$s || this;
if (_post_node == null) _post_node = nil;
        return _post_node.$id()['$=='](post_node.$id())}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $c).call($d);
        return sorted_post_nodes_data['$<<'](node_to_push);}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b);
      return (($a = [sorted_post_nodes_data]), $c = self.$post_nodes(), $c['$data='].apply($c, $a), $a[$a.length-1]);
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$before_route_update_title', TMP_5 = function ːbefore_route_update_title(r) {
      var $a, $b, self = this;

      return (($a = [$hash2(["payload"], {"payload": $hash2(["post"], {"post": $hash2(["title"], {"title": self.$title()})})})]), $b = r, $b['$req_options='].apply($b, $a), $a[$a.length-1]);
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$after_route_update_title', TMP_6 = function ːafter_route_update_title(r) {
      var self = this, attrs = nil, returned_post = nil;

      attrs = r.$response().$json();
      returned_post = $scope.get('Post').$parse(attrs);
      returned_post.$validate();
      return r.$promise().$resolve(returned_post);
    }, TMP_6.$$arity = 1);

    Opal.defs(self, '$after_route_index_for_user', TMP_7 = function ːafter_route_index_for_user(r) {
      var self = this;

      return self.$after_route_index(r);
    }, TMP_7.$$arity = 1);

    Opal.defs(self, '$after_route_index_for_user_show', TMP_8 = function ːafter_route_index_for_user_show(r) {
      var self = this;

      return self.$after_route_index(r);
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$before_route_perform_search', TMP_9 = function ːbefore_route_perform_search(r) {
      var $a, $b, self = this;

      return (($a = [$hash2(["payload"], {"payload": self.$pure_attributes()})]), $b = r, $b['$req_options='].apply($b, $a), $a[$a.length-1]);
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$after_route_perform_search', TMP_10 = function ːafter_route_perform_search(r) {
      var $a, self = this;

      if ((($a = r.$response()['$ok?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return r.$promise().$resolve(self.$class().$parse(r.$response().$json()))
        } else {
        return nil
      };
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$after_route_update', TMP_11 = function ːafter_route_update(r) {
      var $a, self = this, to_yield = nil;

      if ((($a = r.$response()['$ok?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        to_yield = self.$class().$parse(r.$response().$json());
        to_yield.$validate();
        return r.$promise().$resolve(to_yield);
        } else {
        return nil
      };
    }, TMP_11.$$arity = 1);

    Opal.defn(self, '$nodes_sorted?', TMP_12 = function() {
      var self = this;

      return self.nodes_sorted;
    }, TMP_12.$$arity = 0);

    return (Opal.defn(self, '$set_whats_changed', TMP_15 = function ːset_whats_changed() {
      var $a, $b, TMP_13, $c, TMP_14, self = this;

      ($a = ($b = self.$post_nodes()).$each, $a.$$p = (TMP_13 = function(post_node){var self = TMP_13.$$s || this, $c;
if (post_node == null) post_node = nil;
      if ((($c = post_node.$node().$attributes()['$[]']("_changed")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          post_node.$attributes()['$[]=']("_changed", true)};
        if ((($c = post_node.$node().$attributes()['$[]']("_should_destroy")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          return post_node.$attributes()['$[]=']("_should_destroy", true)
          } else {
          return nil
        };}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13), $a).call($b);
      return ($a = ($c = self.$post_thumbs()).$each, $a.$$p = (TMP_14 = function(post_thumb){var self = TMP_14.$$s || this, $d;
if (post_thumb == null) post_thumb = nil;
      if ((($d = post_thumb.$node().$attributes()['$[]']("_changed")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          post_thumb.$attributes()['$[]=']("_changed", true)};
        if ((($d = post_thumb.$node().$attributes()['$[]']("_should_destroy")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return post_thumb.$attributes()['$[]=']("_should_destroy", true)
          } else {
          return nil
        };}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($c);
    }, TMP_15.$$arity = 0), nil) && 'set_whats_changed';
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/post_gif"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$attributes', '$route', '$base_url', '$gsub', '$[]', '$ok?', '$response', '$resolve', '$promise', '$parse', '$class', '$json', '$has_file=', '$map', '$new', '$subtitles', '$subtitles=', '$serialize_subtitles!']);
  return (function($base, $super) {
    function $PostGif(){};
    var self = $PostGif = $klass($base, $super, 'PostGif', $PostGif);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_6, TMP_7;

    self.$register();

    self.$attributes("id", "file", "post_gif_url", "dimensions", "post_node_id", "subtitles", "base_url");

    self.$route("create", $hash2(["post"], {"post": "post_gifs"}));

    self.$route("add_subtitles", $hash2(["post"], {"post": "post_gifs/add_subtitles"}));

    Opal.defn(self, '$before_route_add_subtitles', TMP_1 = function ːbefore_route_add_subtitles(r) {
      var self = this;

      return nil;
    }, TMP_1.$$arity = 1);

    Opal.defn(self, '$post_gif_url', TMP_2 = function ːpost_gif_url() {
      var $a, self = this;

      if ((($a = self.$base_url()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$base_url().$gsub("/original/", "/post_gif/").$gsub(".gif", ".ogg")
        } else {
        return self.$attributes()['$[]']("post_gif_url")
      };
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$after_route_add_subtitles', TMP_3 = function ːafter_route_add_subtitles(r) {
      var $a, self = this;

      if ((($a = r.$response()['$ok?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return r.$promise().$resolve(self.$class().$parse(r.$response().$json()))
        } else {
        return nil
      };
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$validate_file', TMP_4 = function ːvalidate_file() {
      var $a, $b, self = this;

      return (($a = [true]), $b = self, $b['$has_file='].apply($b, $a), $a[$a.length-1]);
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$serialize_subtitles!', TMP_6 = function() {
      var $a, $b, TMP_5, $c, self = this, parsed_subtitles = nil, e = nil;

      try {
        parsed_subtitles = ($a = ($b = $scope.get('JSON').$parse(self.$subtitles())).$map, $a.$$p = (TMP_5 = function(subtitle){var self = TMP_5.$$s || this;
if (subtitle == null) subtitle = nil;
        return $scope.get('Subtitle').$new(subtitle)}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($b);
        return (($a = [parsed_subtitles]), $c = self, $c['$subtitles='].apply($c, $a), $a[$a.length-1]);
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
          try {
            return (($a = [nil]), $c = self, $c['$subtitles='].apply($c, $a), $a[$a.length-1])
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
    }, TMP_6.$$arity = 0);

    return (Opal.defn(self, '$init', TMP_7 = function ːinit() {
      var $a, self = this;

      if ((($a = self.$subtitles()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self['$serialize_subtitles!']()
        } else {
        return nil
      };
    }, TMP_7.$$arity = 0), nil) && 'init';
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/post_image"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$attributes', '$route', '$json', '$response', '$resolve', '$promise', '$!', '$file_url', '$p', '$name', '$class', '$gsub', '$base_url', '$[]', '$ok?', '$update_attributes', '$validate', '$has_errors?', '$delete', '$before_route_update', '$after_route_update', '$after_route_destroy', '$has_file=']);
  return (function($base, $super) {
    function $PostImage(){};
    var self = $PostImage = $klass($base, $super, 'PostImage', $PostImage);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22;

    self.$register();

    self.$attributes("id", "post_size_url", "file", "dimensions", "post_node_id", "base_url", "file_url", "source_name", "source_link", "alt_text");

    self.$route("create", $hash2(["post"], {"post": "post_images"}));

    self.$route("update_thumbnail", $hash2(["put"], {"put": "post_tests/:post_test_id/thumbnails/:id"}));

    self.$route("update_test_question_as_content", $hash2(["put"], {"put": "test_questions/:test_question_id/content_images/:id"}), $hash2(["defaults"], {"defaults": ["id"]}));

    self.$route("update_test_question_as_on_answered_content", $hash2(["put"], {"put": "test_questions/:test_question_id/on_answered_m_content_images/:id"}), $hash2(["defaults"], {"defaults": ["id"]}));

    self.$route("update_test_answer_variant_as_content", $hash2(["put"], {"put": "test_answer_variants/:test_answer_variant_id/content_images/:id"}), $hash2(["defaults"], {"defaults": ["id"]}));

    self.$route("update_post_test_gradation_as_content", $hash2(["put"], {"put": "post_test_gradations/:post_test_gradation_id/content_images/:id"}), $hash2(["defaults"], {"defaults": ["id"]}));

    self.$route("update_post_vote_poll_as_content", $hash2(["put"], {"put": "post_vote_polls/:post_vote_poll_id/content_images/:id"}), $hash2(["defaults"], {"defaults": ["id"]}));

    self.$route("update_vote_poll_option_as_content", $hash2(["put"], {"put": "vote_poll_options/:vote_poll_option_id/content_images/:id"}), $hash2(["defaults"], {"defaults": ["id"]}));

    self.$route("remove_from_test_question", $hash2(["delete"], {"delete": "test_questions/:test_question_id/content_images/:id"}), $hash2(["defaults"], {"defaults": ["id"]}));

    self.$route("remove_from_test_question_as_on_answered_m_content", $hash2(["delete"], {"delete": "test_questions/:test_question_id/on_answered_m_content_images/:id"}), $hash2(["defaults"], {"defaults": ["id"]}));

    self.$route("remove_from_test_answer_variant", $hash2(["delete"], {"delete": "test_answer_variants/:test_answer_variant_id/content_images/:id"}), $hash2(["defaults"], {"defaults": ["id"]}));

    self.$route("remove_from_post_test_gradation", $hash2(["delete"], {"delete": "post_test_gradations/:post_test_gradation_id/content_images/:id"}), $hash2(["defaults"], {"defaults": ["id"]}));

    self.$route("remove_from_post_vote_poll", $hash2(["delete"], {"delete": "post_vote_polls/:post_vote_poll_id/content_images/:id"}), $hash2(["defaults"], {"defaults": ["id"]}));

    self.$route("remove_from_vote_poll_option", $hash2(["delete"], {"delete": "vote_poll_options/:vote_poll_option_id/content_images/:id"}), $hash2(["defaults"], {"defaults": ["id"]}));

    self.$route("Create_from_url", $hash2(["get"], {"get": "post_images/create_from_url"}));

    self.$route("destroy", $hash2(["delete"], {"delete": "post_images/:id"}), $hash2(["defaults"], {"defaults": ["id"]}));

    Opal.defs(self, '$after_route_create_from_url', TMP_1 = function ːafter_route_create_from_url(r) {
      var self = this, json = nil;

      json = r.$response().$json();
      return r.$promise().$resolve(json);
    }, TMP_1.$$arity = 1);

    Opal.defn(self, '$post_size_url', TMP_2 = function ːpost_size_url() {
      var $a, self = this, url = nil;

      if ((($a = self.$file_url()['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$p("warning! " + (self) + (self.$class().$name()) + " does not have file_url attribute")};
      url = self.$file_url();
      if (url !== false && url !== nil && url != null) {
        return url.$gsub("/original/", "/post_size/")
      } else if ((($a = self.$base_url()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$base_url().$gsub("/original/", "/post_size/")
        } else {
        return self.$attributes()['$[]']("post_size_url")
      };
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$after_route_create', TMP_3 = function ːafter_route_create(r) {
      var $a, self = this, json_response = nil;

      if ((($a = r.$response()['$ok?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        json_response = r.$response().$json();
        self.$update_attributes(json_response);
        self.$validate();
        if ((($a = self['$has_errors?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$attributes().$delete("file")
        };
        return r.$promise().$resolve(self);
        } else {
        return nil
      };
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$before_route_update_thumbnail', TMP_4 = function ːbefore_route_update_thumbnail(r) {
      var self = this;

      return self.$before_route_update(r);
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$after_route_update_thumbnail', TMP_5 = function ːafter_route_update_thumbnail(r) {
      var self = this;

      return self.$after_route_update(r);
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$before_route_update_test_question_as_content', TMP_6 = function ːbefore_route_update_test_question_as_content(r) {
      var self = this;

      return self.$before_route_update(r);
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$after_route_update_test_question_as_content', TMP_7 = function ːafter_route_update_test_question_as_content(r) {
      var self = this;

      return self.$after_route_update(r);
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$before_route_update_test_question_as_on_answered_content', TMP_8 = function ːbefore_route_update_test_question_as_on_answered_content(r) {
      var self = this;

      return self.$before_route_update(r);
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$after_route_update_test_question_as_on_answered_content', TMP_9 = function ːafter_route_update_test_question_as_on_answered_content(r) {
      var self = this;

      return self.$after_route_update(r);
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$before_route_update_test_answer_variant_as_content', TMP_10 = function ːbefore_route_update_test_answer_variant_as_content(r) {
      var self = this;

      return self.$before_route_update(r);
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$after_route_update_test_answer_variant_as_content', TMP_11 = function ːafter_route_update_test_answer_variant_as_content(r) {
      var self = this;

      return self.$after_route_update(r);
    }, TMP_11.$$arity = 1);

    Opal.defn(self, '$before_route_update_post_test_gradation_as_content', TMP_12 = function ːbefore_route_update_post_test_gradation_as_content(r) {
      var self = this;

      return self.$before_route_update(r);
    }, TMP_12.$$arity = 1);

    Opal.defn(self, '$after_route_update_post_test_gradation_as_content', TMP_13 = function ːafter_route_update_post_test_gradation_as_content(r) {
      var self = this;

      return self.$after_route_update(r);
    }, TMP_13.$$arity = 1);

    Opal.defn(self, '$after_route_update_post_vote_poll_as_content', TMP_14 = function ːafter_route_update_post_vote_poll_as_content(r) {
      var self = this;

      return self.$after_route_update(r);
    }, TMP_14.$$arity = 1);

    Opal.defn(self, '$after_route_update_vote_poll_option_as_content', TMP_15 = function ːafter_route_update_vote_poll_option_as_content(r) {
      var self = this;

      return self.$after_route_update(r);
    }, TMP_15.$$arity = 1);

    Opal.defn(self, '$after_route_remove_from_test_question', TMP_16 = function ːafter_route_remove_from_test_question(r) {
      var self = this;

      return self.$after_route_destroy(r);
    }, TMP_16.$$arity = 1);

    Opal.defn(self, '$after_route_remove_from_test_question_as_on_answered_m_content', TMP_17 = function ːafter_route_remove_from_test_question_as_on_answered_m_content(r) {
      var self = this;

      return self.$after_route_destroy(r);
    }, TMP_17.$$arity = 1);

    Opal.defn(self, '$after_route_remove_from_test_answer_variant', TMP_18 = function ːafter_route_remove_from_test_answer_variant(r) {
      var self = this;

      return self.$after_route_destroy(r);
    }, TMP_18.$$arity = 1);

    Opal.defn(self, '$after_route_remove_from_post_test_gradation', TMP_19 = function ːafter_route_remove_from_post_test_gradation(r) {
      var self = this;

      return self.$after_route_destroy(r);
    }, TMP_19.$$arity = 1);

    Opal.defn(self, '$after_route_remove_from_post_vote_poll', TMP_20 = function ːafter_route_remove_from_post_vote_poll(r) {
      var self = this;

      return self.$after_route_destroy(r);
    }, TMP_20.$$arity = 1);

    Opal.defn(self, '$after_route_remove_from_vote_poll_option', TMP_21 = function ːafter_route_remove_from_vote_poll_option(r) {
      var self = this;

      return self.$after_route_destroy(r);
    }, TMP_21.$$arity = 1);

    return (Opal.defn(self, '$validate_file', TMP_22 = function ːvalidate_file() {
      var $a, $b, self = this;

      return (($a = [true]), $b = self, $b['$has_file='].apply($b, $a), $a[$a.length-1]);
    }, TMP_22.$$arity = 0), nil) && 'validate_file';
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/post_karma"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$attributes', '$has_one', '$has_many', '$route', '$before_route_update', '$current_user_post_karma_transaction', '$current_user_post_karma_transaction=', '$new', '$id', '$instance', '$after_route_update']);
  return (function($base, $super) {
    function $PostKarma(){};
    var self = $PostKarma = $klass($base, $super, 'PostKarma', $PostKarma);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

    self.$register();

    self.$attributes("id", "count", "post_id");

    self.$has_one("post", $hash2(["class_name"], {"class_name": "Post"}));

    self.$has_one("current_user_post_karma_transaction", $hash2(["class_name", "aliases"], {"class_name": "PostKarmaTransaction", "aliases": ["pkt_cu"]}));

    self.$has_many("post_karma_transactions", $hash2(["class_name"], {"class_name": "PostKarmaTransaction"}));

    self.$route("update_count", $hash2(["post"], {"post": "post_karma/update_count"}));

    Opal.defn(self, '$before_route_update_count', TMP_1 = function ːbefore_route_update_count(r) {
      var self = this;

      return self.$before_route_update(r);
    }, TMP_1.$$arity = 1);

    Opal.defn(self, '$current_user_pkt_or_new', TMP_2 = function ːcurrent_user_pkt_or_new() {
      var $a, $b, self = this;

      if ((($a = self.$current_user_post_karma_transaction()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$current_user_post_karma_transaction()
        } else {
        (($a = [$scope.get('PostKarmaTransaction').$new($hash2(["post_karma_id", "user_id"], {"post_karma_id": self.$id(), "user_id": $scope.get('CurrentUser').$instance().$id()}))]), $b = self, $b['$current_user_post_karma_transaction='].apply($b, $a), $a[$a.length-1]);
        return self.$current_user_post_karma_transaction();
      };
    }, TMP_2.$$arity = 0);

    return (Opal.defn(self, '$after_route_update_count', TMP_3 = function ːafter_route_update_count(r) {
      var self = this;

      return self.$after_route_update(r);
    }, TMP_3.$$arity = 1), nil) && 'after_route_update_count';
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/post_karma_transaction"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$attr_accessor', '$attributes', '$has_one', '$route', '$previous_amount', '$amount', '$==', '$!=', '$*', '$<']);
  return (function($base, $super) {
    function $PostKarmaTransaction(){};
    var self = $PostKarmaTransaction = $klass($base, $super, 'PostKarmaTransaction', $PostKarmaTransaction);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    self.$register();

    self.$attr_accessor("previous_amount");

    self.$attributes("id", "amount", "user_id", "post_karma_id", "cancel_type", "user_change_amount");

    self.$has_one("post_karma", $hash2(["class_name"], {"class_name": "PostKarma"}));

    self.$has_one("user", $hash2(["class_name"], {"class_name": "User"}));

    self.$route("create", $hash2(["post"], {"post": "post_karma_transactions"}));

    return (Opal.defn(self, '$amount_change_factor', TMP_1 = function ːamount_change_factor() {
      var $a, $b, self = this;

      if ((($a = self.$previous_amount()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return self.$amount()
      };
      if (self.$amount()['$=='](self.$previous_amount())) {
        return 0
      } else if ((($a = ($b = (self.$amount()['$=='](0)), $b !== false && $b !== nil && $b != null ?(self.$previous_amount()['$!='](0)) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return $rb_times(self.$previous_amount(), -1)
      } else if ((($a = ($b = (($rb_lt(self.$amount(), 0))['$!='](($rb_lt(self.$previous_amount(), 0)))), $b !== false && $b !== nil && $b != null ?self.$previous_amount()['$!='](0) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return $rb_times(self.$amount(), 2)
        } else {
        return self.$amount()
      };
    }, TMP_1.$$arity = 0), nil) && 'amount_change_factor';
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/post_node"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$has_one', '$attributes']);
  return (function($base, $super) {
    function $PostNode(){};
    var self = $PostNode = $klass($base, $super, 'PostNode', $PostNode);

    var def = self.$$proto, $scope = self.$$scope;

    self.$register();

    self.$has_one("node", $hash2(["polymorphic_type", "aliases"], {"polymorphic_type": "node_type", "aliases": ["node_json", "node_json_er"]}));

    self.$attributes("node_type");

    return self.$attributes("id");
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/post_tag"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$attributes', '$has_many']);
  return (function($base, $super) {
    function $PostTag(){};
    var self = $PostTag = $klass($base, $super, 'PostTag', $PostTag);

    var def = self.$$proto, $scope = self.$$scope;

    self.$register();

    self.$attributes("id", "name");

    self.$has_many("posts", $hash2(["class_name"], {"class_name": "Post"}));

    return self.$has_many("post_tag_links", $hash2(["class_name"], {"class_name": "PostTagLink"}));
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/post_tag_link"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$attributes', '$has_one']);
  return (function($base, $super) {
    function $PostTagLink(){};
    var self = $PostTagLink = $klass($base, $super, 'PostTagLink', $PostTagLink);

    var def = self.$$proto, $scope = self.$$scope;

    self.$register();

    self.$attributes("id", "post_id", "post_tag_id");

    self.$has_one("post", $hash2(["class_name"], {"class_name": "Post"}));

    return self.$has_one("post_tag", $hash2(["class_name"], {"class_name": "PostTag"}));
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/post_test"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$attributes', '$has_one', '$has_many', '$route', '$after_route_show', '$before_route_create', '$after_route_create', '$[]', '$s_questions=', '$parse', '$s_thumbnail=', '$s_gradations=']);
  return (function($base, $super) {
    function $PostTest(){};
    var self = $PostTest = $klass($base, $super, 'PostTest', $PostTest);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5;

    self.$register();

    self.$attributes("id", "s_questions", "s_thumbnail", "title", "s_gradations", "is_personality");

    self.$has_one("thumbnail", $hash2(["class_name"], {"class_name": "PostImage"}));

    self.$has_many("test_questions", $hash2(["class_name"], {"class_name": "TestQuestion"}));

    self.$has_one("user", $hash2(["class_name"], {"class_name": "User"}));

    self.$has_many("post_test_gradations", $hash2(["class_name"], {"class_name": "PostTestGradation"}));

    self.$has_many("p_t_personalities", $hash2(["class_name"], {"class_name": "P_T_Personality"}));

    self.$route("create", $hash2(["post"], {"post": "post_tests"}));

    self.$route("Show", $hash2(["get"], {"get": "post_tests/:id"}));

    self.$route("Personality_test_show", $hash2(["get"], {"get": "personality_tests/:id"}));

    self.$route("update", $hash2(["put"], {"put": "post_tests/:id"}), $hash2(["defaults"], {"defaults": ["id"]}));

    self.$route("create_personality", $hash2(["post"], {"post": "personality_tests"}));

    self.$route("Personality_test_edit", $hash2(["get"], {"get": "personality_tests/:id/edit"}));

    self.$route("destroy", $hash2(["delete"], {"delete": "post_tests/:id"}), $hash2(["defaults"], {"defaults": ["id"]}));

    Opal.defs(self, '$after_route_personality_test_show', TMP_1 = function ːafter_route_personality_test_show(r) {
      var self = this;

      return self.$after_route_show(r);
    }, TMP_1.$$arity = 1);

    Opal.defn(self, '$before_route_create_personality', TMP_2 = function ːbefore_route_create_personality(r) {
      var self = this;

      return self.$before_route_create(r);
    }, TMP_2.$$arity = 1);

    Opal.defn(self, '$after_route_create_personality', TMP_3 = function ːafter_route_create_personality(r) {
      var self = this;

      return self.$after_route_create(r);
    }, TMP_3.$$arity = 1);

    Opal.defs(self, '$after_route_personality_test_edit', TMP_4 = function ːafter_route_personality_test_edit(r) {
      var self = this;

      return self.$after_route_show(r);
    }, TMP_4.$$arity = 1);

    return (Opal.defn(self, '$init', TMP_5 = function ːinit(attributes) {
      var $a, $b, self = this, x = nil;

      if ((($a = x = attributes['$[]']("s_questions")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        (($a = [$scope.get('TestQuestion').$parse($scope.get('JSON').$parse(x))]), $b = self, $b['$s_questions='].apply($b, $a), $a[$a.length-1])};
      if ((($a = x = attributes['$[]']("s_thumbnail")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        (($a = [$scope.get('PostImage').$parse($scope.get('JSON').$parse(x))]), $b = self, $b['$s_thumbnail='].apply($b, $a), $a[$a.length-1])};
      if ((($a = x = attributes['$[]']("s_gradations")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (($a = [$scope.get('PostTestGradation').$parse($scope.get('JSON').$parse(x))]), $b = self, $b['$s_gradations='].apply($b, $a), $a[$a.length-1])
        } else {
        return nil
      };
    }, TMP_5.$$arity = 1), nil) && 'init';
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/post_test_gradation"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$attributes', '$has_one', '$route']);
  return (function($base, $super) {
    function $PostTestGradation(){};
    var self = $PostTestGradation = $klass($base, $super, 'PostTestGradation', $PostTestGradation);

    var def = self.$$proto, $scope = self.$$scope;

    self.$register();

    self.$attributes("id", "from", "to", "message", "content_type", "post_test_id", "content_id", "content_type");

    self.$has_one("post_test", $hash2(["class_name"], {"class_name": "PostTest"}));

    self.$has_one("content", $hash2(["polymorphic_type", "aliases"], {"polymorphic_type": "content_type", "aliases": ["s_content_json"]}));

    self.$route("create", $hash2(["post"], {"post": "post_tests/:post_test_id/post_test_gradations"}));

    self.$route("update", $hash2(["put"], {"put": "post_tests/:post_test_id/post_test_gradations/:id"}), $hash2(["defaults"], {"defaults": ["id", "post_test_id"]}));

    return self.$route("destroy", $hash2(["delete"], {"delete": "post_test_gradations/:id"}), $hash2(["defaults"], {"defaults": ["id"]}));
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/post_test_stat"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$attributes', '$has_one']);
  return (function($base, $super) {
    function $PostTestStat(){};
    var self = $PostTestStat = $klass($base, $super, 'PostTestStat', $PostTestStat);

    var def = self.$$proto, $scope = self.$$scope;

    self.$register();

    self.$attributes("from", "to", "count");

    return self.$has_one("post_test", $hash2(["class_name"], {"class_name": "PostTest"}));
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/post_text"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$attributes', '$route']);
  return (function($base, $super) {
    function $PostText(){};
    var self = $PostText = $klass($base, $super, 'PostText', $PostText);

    var def = self.$$proto, $scope = self.$$scope;

    self.$register();

    self.$attributes("id", "content", "post_node_id");

    self.$route("update", $hash2(["put"], {"put": "post_texts/:id"}), $hash2(["defaults"], {"defaults": ["id"]}));

    self.$route("destroy", $hash2(["delete"], {"delete": "post_texts/:id"}), $hash2(["defaults"], {"defaults": ["id"]}));

    return self.$route("create", $hash2(["post"], {"post": "post_texts"}));
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/post_thumb"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$has_one', '$attributes']);
  return (function($base, $super) {
    function $PostThumb(){};
    var self = $PostThumb = $klass($base, $super, 'PostThumb', $PostThumb);

    var def = self.$$proto, $scope = self.$$scope;

    self.$register();

    self.$has_one("node", $hash2(["polymorphic_type", "aliases"], {"polymorphic_type": "node_type", "aliases": ["node_json", "node_json_er"]}));

    return self.$attributes("id");
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/post_type"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$attributes', '$has_one']);
  return (function($base, $super) {
    function $PostType(){};
    var self = $PostType = $klass($base, $super, 'PostType', $PostType);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    self.$register();

    self.$attributes("id", "name", "alt_name");

    self.$has_one("post", $hash2(["class_name"], {"class_name": "Post"}));

    self.$has_one("post_type_link", $hash2(["class_name"], {"class_name": "PostTypeLink"}));

    return (Opal.defs(self, '$url_for_feed', TMP_1 = function ːurl_for_feed() {
      var self = this;

      return "/api/post_types/feed";
    }, TMP_1.$$arity = 0), nil) && 'url_for_feed';
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/post_vote_poll"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$attributes', '$has_many', '$has_one', '$route', '$each', '$[]=', '$id', '$vote_poll_options', '$parse', '$json', '$response', '$count=', '$count', '$[]', '$arbitrary', '$resolve', '$promise', '$s_options=', '$sort', '$<=>', '$data']);
  return (function($base, $super) {
    function $PostVotePoll(){};
    var self = $PostVotePoll = $klass($base, $super, 'PostVotePoll', $PostVotePoll);

    var def = self.$$proto, $scope = self.$$scope, TMP_3, TMP_4, TMP_6;

    self.$register();

    self.$attributes("id", "vote_poll_options", "s_options", "question", "loaded", "m_content_id", "m_content_type");

    self.$has_many("vote_poll_options", $hash2(["class_name"], {"class_name": "VotePollOption"}));

    self.$has_one("m_content", $hash2(["polymorphic_type"], {"polymorphic_type": "m_content_type"}));

    self.$route("create", $hash2(["post"], {"post": "post_vote_polls"}));

    self.$route("load_counts", $hash2(["get"], {"get": "post_vote_polls/counts/:id"}), $hash2(["defaults"], {"defaults": ["id"]}));

    self.$route("Show", $hash2(["get"], {"get": "post_vote_polls/:id"}), $hash2(["defaults"], {"defaults": ["id"]}));

    self.$route("update", $hash2(["put"], {"put": "post_vote_polls/:id"}), $hash2(["defaults"], {"defaults": ["id"]}));

    self.$route("destroy", $hash2(["delete"], {"delete": "post_vote_polls/:id"}), $hash2(["defaults"], {"defaults": ["id"]}));

    Opal.defn(self, '$after_route_load_counts', TMP_3 = function ːafter_route_load_counts(r) {
      var $a, $b, TMP_1, $c, TMP_2, self = this, ids_map = nil, options = nil;

      ids_map = $hash2([], {});
      ($a = ($b = self.$vote_poll_options()).$each, $a.$$p = (TMP_1 = function(vote_option){var self = TMP_1.$$s || this;
if (vote_option == null) vote_option = nil;
      return ids_map['$[]='](vote_option.$id(), vote_option)}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);
      options = $scope.get('VotePollOption').$parse(r.$response().$json());
      ($a = ($c = options).$each, $a.$$p = (TMP_2 = function(new_option){var self = TMP_2.$$s || this, $d, $e;
if (new_option == null) new_option = nil;
      return (($d = [new_option.$count()]), $e = ids_map['$[]'](new_option.$id()), $e['$count='].apply($e, $d), $d[$d.length-1])}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($c);
      self.$arbitrary()['$[]=']("loaded", true);
      return r.$promise().$resolve(self);
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$init', TMP_4 = function ːinit(attributes) {
      var $a, $b, self = this, x = nil;

      if ((($a = x = attributes['$[]']("s_options")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (($a = [$scope.get('VotePollOption').$parse($scope.get('JSON').$parse(x))]), $b = self, $b['$s_options='].apply($b, $a), $a[$a.length-1])
        } else {
        return nil
      };
    }, TMP_4.$$arity = 1);

    return (Opal.defn(self, '$get_max_count_option', TMP_6 = function ːget_max_count_option() {
      var $a, $b, TMP_5, self = this, sorted_by_count = nil, maximal = nil;

      sorted_by_count = ($a = ($b = self.$vote_poll_options().$data()).$sort, $a.$$p = (TMP_5 = function(a, b){var self = TMP_5.$$s || this;
if (a == null) a = nil;if (b == null) b = nil;
      return a.$count()['$<=>'](b.$count())}, TMP_5.$$s = self, TMP_5.$$arity = 2, TMP_5), $a).call($b);
      maximal = sorted_by_count['$[]'](-1);
      if (maximal !== false && maximal !== nil && maximal != null) {
        return maximal.$count()
        } else {
        return 0
      };
    }, TMP_6.$$arity = 0), nil) && 'get_max_count_option';
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/subtitile"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$attributes', '$[]', '$>', '$from', '$<<', '$map_bserach', '$to_proc', '$<', '$new', '$to_json']);
  return (function($base, $super) {
    function $Subtitle(){};
    var self = $Subtitle = $klass($base, $super, 'Subtitle', $Subtitle);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

    self.$register();

    self.$attributes("from", "to", "style", "content", "is_rendered");

    Opal.defs(self, '$map_bserach', TMP_1 = function ːmap_bserach(array, from_time_start, min, max, result_array, direction) {
      var $a, $b, $c, $d, $e, self = this, $iter = TMP_1.$$p, block = $iter || nil, mid_index = nil, value_at_mid_index = nil;

      TMP_1.$$p = null;
      if ((($a = min > max) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return result_array};
      mid_index = Math.floor((max + min) / 2);
      value_at_mid_index = array['$[]'](mid_index);
      if ((($a = $rb_gt(value_at_mid_index.$from(), from_time_start)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        direction = false;
        if ((($a = Opal.yield1(block, value_at_mid_index)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result_array['$<<'](value_at_mid_index)};
        return ($a = ($b = self).$map_bserach, $a.$$p = block.$to_proc(), $a).call($b, array, from_time_start, min, mid_index - 1, result_array, direction);
      } else if ((($a = $rb_lt(value_at_mid_index.$from(), from_time_start)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        direction = true;
        if ((($a = Opal.yield1(block, value_at_mid_index)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result_array['$<<'](value_at_mid_index)};
        return ($a = ($c = self).$map_bserach, $a.$$p = block.$to_proc(), $a).call($c, array, from_time_start, mid_index + 1, max, result_array, direction);
      } else if ((($a = Opal.yield1(block, value_at_mid_index)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        result_array['$<<'](value_at_mid_index);
        if (direction !== false && direction !== nil && direction != null) {
          return ($a = ($d = self).$map_bserach, $a.$$p = block.$to_proc(), $a).call($d, array, from_time_start, min, mid_index - 1, result_array, direction)
          } else {
          return ($a = ($e = self).$map_bserach, $a.$$p = block.$to_proc(), $a).call($e, array, from_time_start, mid_index + 1, max, result_array, direction)
        };
        } else {
        return result_array
      };
    }, TMP_1.$$arity = 6);

    Opal.defs(self, '$create_for_new', TMP_2 = function ːcreate_for_new() {
      var self = this;

      return self.$new($hash2(["from", "to"], {"from": 0, "to": 0}));
    }, TMP_2.$$arity = 0);

    return (Opal.defn(self, '$to_json', TMP_3 = function ːto_json() {
      var self = this;

      return self.$attributes().$to_json();
    }, TMP_3.$$arity = 0), nil) && 'to_json';
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/test_answer_variant"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$attributes', '$has_one', '$has_many', '$route', '$before_route_create', '$after_route_create', '$after_route_update', '$attr_accessor']);
  return (function($base, $super) {
    function $TestAnswerVariant(){};
    var self = $TestAnswerVariant = $klass($base, $super, 'TestAnswerVariant', $TestAnswerVariant);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

    self.$register();

    self.$attributes("id", "text", "answer_type", "content_type", "s_content", "correct", "on_select_message", "test_question_id");

    self.$has_one("test_question", $hash2(["class_name"], {"class_name": "TestQuestion"}));

    self.$has_one("content", $hash2(["polymorphic_type", "aliases"], {"polymorphic_type": "content_type", "aliases": ["s_content_json"]}));

    self.$has_many("personality_scales", $hash2(["class_name"], {"class_name": "PersonalityScale"}));

    self.$route("create", $hash2(["post"], {"post": "test_questions/:test_question_id/test_answer_variants"}));

    self.$route("update", $hash2(["put"], {"put": "test_questions/:test_question_id/test_answer_variants/:id"}), $hash2(["defaults"], {"defaults": ["test_question_id", "id"]}));

    self.$route("destroy", $hash2(["delete"], {"delete": "test_answer_variants/:id"}), $hash2(["defaults"], {"defaults": ["id"]}));

    self.$route("personality_test_create", $hash2(["post"], {"post": "personality_tests/test_answer_variants"}));

    self.$route("personality_test_destroy", $hash2(["delete"], {"delete": "personality_tests/test_answer_variants/:id"}), $hash2(["defaults"], {"defaults": ["id"]}));

    Opal.defn(self, '$before_route_personality_test_create', TMP_1 = function ːbefore_route_personality_test_create(r) {
      var self = this;

      return self.$before_route_create(r);
    }, TMP_1.$$arity = 1);

    Opal.defn(self, '$after_route_personality_test_create', TMP_2 = function ːafter_route_personality_test_create(r) {
      var self = this;

      return self.$after_route_create(r);
    }, TMP_2.$$arity = 1);

    Opal.defn(self, '$after_route_personality_test_destroy', TMP_3 = function ːafter_route_personality_test_destroy(r) {
      var self = this;

      return self.$after_route_update(r);
    }, TMP_3.$$arity = 1);

    return self.$attr_accessor("is_selected");
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/test_question"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$attributes', '$has_one', '$has_many', '$route', '$before_route_create', '$after_route_create', '$after_route_update', '$attr_accessor']);
  return (function($base, $super) {
    function $TestQuestion(){};
    var self = $TestQuestion = $klass($base, $super, 'TestQuestion', $TestQuestion);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

    self.$register();

    self.$attributes("id", "content_type", "s_content", "question_type", "s_test_answer_variants", "text", "on_answered_msg", "content_id", "on_answered_m_content_id", "on_answered_m_content_type", "post_test_id");

    self.$has_one("post_test", $hash2(["class_name"], {"class_name": "PostTest"}));

    self.$has_many("test_answer_variants", $hash2(["class_name"], {"class_name": "TestAnswerVariant"}));

    self.$has_one("content", $hash2(["polymorphic_type", "aliases"], {"polymorphic_type": "content_type", "aliases": ["s_content_json"]}));

    self.$has_one("on_answered_m_content", $hash2(["polymorphic_type", "aliases"], {"polymorphic_type": "on_answered_m_content_type", "aliases": ["s_on_answered_m_content_json"]}));

    self.$has_one("s_on_answered_m_content", $hash2(["polymorphic_type"], {"polymorphic_type": "on_answered_m_content_type"}));

    self.$route("create", $hash2(["post"], {"post": "post_tests/:post_test_id/test_questions"}));

    self.$route("update", $hash2(["put"], {"put": "post_tests/:post_test_id/test_questions/:id"}), $hash2(["defaults"], {"defaults": ["post_test_id", "id"]}));

    self.$route("destroy", $hash2(["delete"], {"delete": "test_questions/:id"}), $hash2(["defaults"], {"defaults": ["id"]}));

    self.$route("personality_test_create", $hash2(["post"], {"post": "personality_tests/:personality_test_id/test_questions"}));

    self.$route("personality_test_destroy", $hash2(["delete"], {"delete": "personality_tests/:personality_test_id/test_questions/:id"}), $hash2(["defaults"], {"defaults": ["id"]}));

    Opal.defn(self, '$before_route_personality_test_create', TMP_1 = function ːbefore_route_personality_test_create(r) {
      var self = this;

      return self.$before_route_create(r);
    }, TMP_1.$$arity = 1);

    Opal.defn(self, '$after_route_personality_test_create', TMP_2 = function ːafter_route_personality_test_create(r) {
      var self = this;

      return self.$after_route_create(r);
    }, TMP_2.$$arity = 1);

    Opal.defn(self, '$before_route_personality_test_destroy', TMP_3 = function ːbefore_route_personality_test_destroy(r) {
      var self = this;

      return nil;
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$after_route_personality_test_destroy', TMP_4 = function ːafter_route_personality_test_destroy(r) {
      var self = this;

      return self.$after_route_update(r);
    }, TMP_4.$$arity = 1);

    return self.$attr_accessor("answered_correct");
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/user_credential"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$register', '$attributes']);
  return (function($base, $super) {
    function $UserCredential(){};
    var self = $UserCredential = $klass($base, $super, 'UserCredential', $UserCredential);

    var def = self.$$proto, $scope = self.$$scope;

    self.$register();

    return self.$attributes("id", "user_id", "email", "name");
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/user_denormalized_stat"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$register', '$attributes']);
  return (function($base, $super) {
    function $UserDenormalizedStat(){};
    var self = $UserDenormalizedStat = $klass($base, $super, 'UserDenormalizedStat', $UserDenormalizedStat);

    var def = self.$$proto, $scope = self.$$scope;

    self.$register();

    return self.$attributes("id", "subscribers_count", "comments_count", "karma_count", "posts_count", "subscriptions_count");
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/user_karma"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$attributes', '$has_one']);
  return (function($base, $super) {
    function $UserKarma(){};
    var self = $UserKarma = $klass($base, $super, 'UserKarma', $UserKarma);

    var def = self.$$proto, $scope = self.$$scope;

    self.$register();

    self.$attributes("id", "count");

    return self.$has_one("user", $hash2(["class_name"], {"class_name": "User"}));
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/user_notifications_manager"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$attr_accessor', '$new', '$p', '$instance=', '$class', '$fetch_notifications', '$stop', '$start', '$then', '$!', '$empty?', '$map', '$to_proc', '$each', '$include?', '$id', '$<<', '$data', '$publish', '$index', '$remove', '$notifications', '$set_read']);
  return (function($base, $super) {
    function $UserNotificationsManager(){};
    var self = $UserNotificationsManager = $klass($base, $super, 'UserNotificationsManager', $UserNotificationsManager);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_4, TMP_5, TMP_6, TMP_9, TMP_10;

    def.interval = def.notifications = nil;
    self.$include((($scope.get('Plugins')).$$scope.get('PubSubBus')));

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      return self.$attr_accessor("instance")
    })(Opal.get_singleton_class(self));

    Opal.defs(self, '$instance', TMP_1 = function ːinstance() {
      var $a, self = this;
      if (self.instance == null) self.instance = nil;

      return ((($a = self.instance) !== false && $a !== nil && $a != null) ? $a : self.$new());
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$initialize', TMP_4 = function ːinitialize() {
      var $a, $b, TMP_2, self = this;

      self.$p("initializing notif poller");
      (($a = [self]), $b = self.$class(), $b['$instance='].apply($b, $a), $a[$a.length-1]);
      self.notifications = $scope.get('ModelCollection').$new();
      self.interval = ($a = ($b = (($scope.get('Services')).$$scope.get('Interval'))).$new, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $c, $d, TMP_3;
        if (self.interval == null) self.interval = nil;

      self.$fetch_notifications();
        self.interval.$stop();
        self.interval = ($c = ($d = (($scope.get('Services')).$$scope.get('Interval'))).$new, $c.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

        return self.$fetch_notifications()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $c).call($d, 30000);
        return self.interval.$start();}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($b, 5000);
      return self.interval.$start();
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$notifications', TMP_5 = function ːnotifications() {
      var self = this;

      return self.notifications;
    }, TMP_5.$$arity = 0);

    Opal.defn(self, '$stop_polling', TMP_6 = function ːstop_polling() {
      var self = this;

      return self.interval.$stop();
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$fetch_notifications', TMP_9 = function ːfetch_notifications() {
      var $a, $b, TMP_7, self = this;

      return ($a = ($b = $scope.get('Notification').$index()).$then, $a.$$p = (TMP_7 = function(_notifications){var self = TMP_7.$$s || this, $c, $d, $e, TMP_8, current_ids = nil;
        if (self.notifications == null) self.notifications = nil;
if (_notifications == null) _notifications = nil;
      if ((($c = _notifications['$empty?']()['$!']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          current_ids = ($c = ($d = self.notifications).$map, $c.$$p = "id".$to_proc(), $c).call($d);
          ($c = ($e = _notifications).$each, $c.$$p = (TMP_8 = function(_notification){var self = TMP_8.$$s || this, $f;
            if (self.notifications == null) self.notifications = nil;
if (_notification == null) _notification = nil;
          if ((($f = current_ids['$include?'](_notification.$id())['$!']()) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
              return self.notifications.$data()['$<<'](_notification)
              } else {
              return nil
            }}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $c).call($e);
          return self.$publish("when_notifications_updated");
          } else {
          return nil
        }}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b);
    }, TMP_9.$$arity = 0);

    return (Opal.defn(self, '$remove_notification_and_set_it_read', TMP_10 = function ːremove_notification_and_set_it_read(notification) {
      var self = this;

      self.$notifications().$remove(notification);
      notification.$set_read();
      return self.$publish("when_notifications_updated");
    }, TMP_10.$$arity = 1), nil) && 'remove_notification_and_set_it_read';
  })($scope.base, null)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/user_role"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$register', '$attributes']);
  return (function($base, $super) {
    function $UserRole(){};
    var self = $UserRole = $klass($base, $super, 'UserRole', $UserRole);

    var def = self.$$proto, $scope = self.$$scope;

    self.$register();

    self.$attributes("id", "name");

    Opal.cdecl($scope, 'ADMIN', "admin");

    Opal.cdecl($scope, 'GUEST', "guest");

    Opal.cdecl($scope, 'NO_NAME', "no_name");

    Opal.cdecl($scope, 'STAFF', "staff");

    Opal.cdecl($scope, 'NO_EMAIL', "no_email");

    Opal.cdecl($scope, 'EMAIL_PROVIDED', "email_provided");

    Opal.cdecl($scope, 'NAME_PROVIDED', "name_provided");

    return Opal.cdecl($scope, 'NO_EMAIL_OR_PASSWORD', "no_e_or_p");
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/user_subscription"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$attributes', '$has_one', '$route', '$ok?', '$response', '$resolve', '$promise', '$parse', '$json']);
  return (function($base, $super) {
    function $UserSubscription(){};
    var self = $UserSubscription = $klass($base, $super, 'UserSubscription', $UserSubscription);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    self.$register();

    self.$attributes("id", "user_id", "to_user_id");

    self.$has_one("to_user", $hash2(["class_name"], {"class_name": "User"}));

    self.$route("create", $hash2(["post"], {"post": "user_subscriptions"}));

    self.$route("destroy", $hash2(["delete"], {"delete": "user_subscriptions/:id"}), $hash2(["defaults"], {"defaults": ["id"]}));

    self.$route("Index_for_user", $hash2(["get"], {"get": "user_subscriptions/index_for_user/:id"}));

    return (Opal.defs(self, '$after_route_index_for_user', TMP_1 = function ːafter_route_index_for_user(r) {
      var $a, self = this;

      if ((($a = r.$response()['$ok?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return r.$promise().$resolve($scope.get('User').$parse(r.$response().$json()))
        } else {
        return nil
      };
    }, TMP_1.$$arity = 1), nil) && 'after_route_index_for_user';
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/video_embed"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$attributes', '$route']);
  return (function($base, $super) {
    function $VideoEmbed(){};
    var self = $VideoEmbed = $klass($base, $super, 'VideoEmbed', $VideoEmbed);

    var def = self.$$proto, $scope = self.$$scope;

    self.$register();

    self.$attributes("id", "link", "provider");

    self.$route("create", $hash2(["post"], {"post": "video_embeds"}));

    return self.$route("destroy", $hash2(["delete"], {"delete": "video_embeds/:id"}), $hash2(["defaults"], {"defaults": ["id"]}));
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/vote_poll_option"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$attributes', '$has_many', '$has_one', '$route']);
  return (function($base, $super) {
    function $VotePollOption(){};
    var self = $VotePollOption = $klass($base, $super, 'VotePollOption', $VotePollOption);

    var def = self.$$proto, $scope = self.$$scope;

    self.$register();

    self.$attributes("id", "vote_poll_transactions", "post_vote_poll_id", "content", "count", "m_content_id", "m_content_type");

    self.$has_many("vote_poll_transactions", $hash2(["class_name"], {"class_name": "VotePolltransaction"}));

    self.$has_one("m_content", $hash2(["polymorphic_type"], {"polymorphic_type": "m_content_type"}));

    self.$route("create", $hash2(["post"], {"post": "post_vote_polls/:post_vote_poll_id/vote_poll_options"}), $hash2(["defaults"], {"defaults": ["post_vote_poll_id"]}));

    self.$route("update", $hash2(["put"], {"put": "post_vote_polls/:post_vote_poll_id/vote_poll_options/:id"}), $hash2(["defaults"], {"defaults": ["post_vote_poll_id", "id"]}));

    return self.$route("destroy", $hash2(["delete"], {"delete": "post_vote_polls/:post_vote_poll_id/vote_poll_options/:id"}), $hash2(["defaults"], {"defaults": ["post_vote_poll_id", "id"]}));
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["models/vote_poll_transaction"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$attributes', '$route']);
  return (function($base, $super) {
    function $VotePollTransaction(){};
    var self = $VotePollTransaction = $klass($base, $super, 'VotePollTransaction', $VotePollTransaction);

    var def = self.$$proto, $scope = self.$$scope;

    self.$register();

    self.$attributes("id", "post_vote_poll_id", "vote_poll_option_id", "type", "user_id");

    return self.$route("create", $hash2(["post"], {"post": "vote_poll_transactions"}));
  })($scope.base, $scope.get('Model'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["services/interval"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$call']);
  return (function($base) {
    var $Services, self = $Services = $module($base, 'Services');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Interval(){};
      var self = $Interval = $klass($base, $super, 'Interval', $Interval);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

      def.proc = def.rate = def.interval = nil;
      Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(rate) {
        var self = this, $iter = TMP_1.$$p, block = $iter || nil;

        TMP_1.$$p = null;
        self.proc = block;
        self.rate = rate;
        return self.running = false;
      }, TMP_1.$$arity = 1);

      Opal.defn(self, '$start', TMP_2 = function ːstart() {
        var self = this;

        self.running = true;
        return self.interval = 
        setInterval(function(){ self.proc.$call() }, self.rate)
      ;
      }, TMP_2.$$arity = 0);

      return (Opal.defn(self, '$stop', TMP_3 = function ːstop() {
        var self = this;

        
        clearInterval(self.interval)
      ;
        return self.running = false;
      }, TMP_3.$$arity = 0), nil) && 'stop';
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["services/js_helpers"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base) {
    var $Services, self = $Services = $module($base, 'Services');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $JsHelpers(){};
      var self = $JsHelpers = $klass($base, $super, 'JsHelpers', $JsHelpers);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

      Opal.defs(self, '$is_element_in_viewport?', TMP_1 = function(el) {
        var self = this;

        
        var rect = el.getBoundingClientRect();

        return (
          rect.top >= 0 &&
          rect.left >= 0 &&
          rect.bottom <= $(window).height() &&
          rect.right <= $(window).width()
        )
      
      }, TMP_1.$$arity = 1);

      Opal.defs(self, '$is_element_out_of_viewport?', TMP_2 = function(el) {
        var self = this;

        
        var rect = el.getBoundingClientRect();

        return (
            (rect.top < 0 &&
             rect.bottom < 0) || (
             rect.top > $(window).height() &&
             rect.bottom > $(window).height()
             )
        )
      
      }, TMP_2.$$arity = 1);

      Opal.defs(self, '$translate_youtube_link_to_embed', TMP_3 = function ːtranslate_youtube_link_to_embed(link) {try {

        var self = this;

        
        var regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
        var match = link.match(regExp);
        var res = ''
        if (match && match[2].length == 11) {
            res = match[2];
        } else {
            res = 'error';
        }

      if (res == 'error') {
        Opal.ret("error")
      } else {
        Opal.ret("//www.youtube.com/embed/" + (res))
      }

      ;
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, TMP_3.$$arity = 1);

      return (Opal.defs(self, '$data_url_to_blob', TMP_4 = function ːdata_url_to_blob(data_url) {try {

        var self = this;

        
      var arr = data_url.split(','), mime = arr[0].match(/:(.*?);/)[1],
      bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);
      while(n--){
          u8arr[n] = bstr.charCodeAt(n);
      }
      Opal.ret(new Blob([u8arr], {type:mime}))
      ;
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, TMP_4.$$arity = 1), nil) && 'data_url_to_blob';
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["services/karma_manager"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super) {
    function $KarmaManager(){};
    var self = $KarmaManager = $klass($base, $super, 'KarmaManager', $KarmaManager);

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'FOR_COMMENT_CREATION', 50);

    Opal.cdecl($scope, 'WHEN_SUBSCRIBED_TO_USER', 100);

    Opal.cdecl($scope, 'WHEN_UNSUBSCRIBED_FROM_USER', -100);

    Opal.cdecl($scope, 'WHEN_SUBSCRIBED_TO_THIS_USER', 500);

    Opal.cdecl($scope, 'WHEN_UNSUBSCRIBED_FROM_THIS_USER', -500);

    Opal.cdecl($scope, 'WHEN_LIKED_OR_DISLIKED_THIS_USERS_POST', 50);

    Opal.cdecl($scope, 'COMMENT_UP_OR_DOWN_VOTED', 10);

    return Opal.cdecl($scope, 'USERS_COMMENT_UP_OR_DOWN_VOTED', 20);
  })($scope.base, null)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["services/modal_manager"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$new', '$+', '$-', '$==']);
  return (function($base, $super) {
    function $ModalManager(){};
    var self = $ModalManager = $klass($base, $super, 'ModalManager', $ModalManager);

    var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5;

    def.active_modals_counter = nil;
    (function(self) {
      var $scope = self.$$scope, def = self.$$proto, TMP_1;

      return (Opal.defn(self, '$instance', TMP_1 = function ːinstance() {
        var $a, self = this;
        if (self.instance == null) self.instance = nil;

        return ((($a = self.instance) !== false && $a !== nil && $a != null) ? $a : self.instance = self.$new());
      }, TMP_1.$$arity = 0), nil) && 'instance'
    })(Opal.get_singleton_class(self));

    Opal.defn(self, '$initialize', TMP_2 = function ːinitialize() {
      var self = this;

      return self.active_modals_counter = 10;
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$active_modals_counter', TMP_3 = function ːactive_modals_counter() {
      var self = this;

      return self.active_modals_counter;
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$increment_active_modals_counter', TMP_4 = function ːincrement_active_modals_counter() {
      var self = this;

      return self.active_modals_counter = $rb_plus(self.active_modals_counter, 1);
    }, TMP_4.$$arity = 0);

    return (Opal.defn(self, '$decrement_active_modals_counter', TMP_5 = function ːdecrement_active_modals_counter() {
      var self = this, new_counter_value = nil;

      new_counter_value = $rb_minus(self.active_modals_counter, 1);
      if (new_counter_value['$=='](10)) {
        return nil
        } else {
        return self.active_modals_counter = $rb_minus(self.active_modals_counter, 1)
      };
    }, TMP_5.$$arity = 0), nil) && 'decrement_active_modals_counter';
  })($scope.get('Services'), null)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["services/oauth_helper"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$call_on_auth_proc', '$lambda', '$raise', '$call']);
  
  window.callOauthProcSetBeforePopupOpen = function(){
    $scope.get('OauthHelper').$call_on_auth_proc()
  }
;
  return (function($base, $super) {
    function $OauthHelper(){};
    var self = $OauthHelper = $klass($base, $super, 'OauthHelper', $OauthHelper);

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5;

    Opal.cdecl($scope, 'DEFAULT_PROC', ($a = ($b = self).$lambda, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this;

    return self.$raise("" + (self) + ".name @@on_auth_proc was not set before opening provider window")}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b));

    (Opal.cvars['@@on_auth_proc'] = $scope.get('DEFAULT_PROC'));

    Opal.defs(self, '$set_proc_on_auth_popup_close', TMP_2 = function ːset_proc_on_auth_popup_close() {
      var self = this, $iter = TMP_2.$$p, block = $iter || nil;

      TMP_2.$$p = null;
      return (Opal.cvars['@@on_auth_proc'] = block);
    }, TMP_2.$$arity = 0);

    Opal.defs(self, '$call_on_auth_proc', TMP_3 = function ːcall_on_auth_proc() {
      var $a, self = this;

      return (($a = Opal.cvars['@@on_auth_proc']) == null ? nil : $a).$call();
    }, TMP_3.$$arity = 0);

    Opal.defs(self, '$flush', TMP_4 = function ːflush() {
      var self = this;

      return (Opal.cvars['@@on_auth_proc'] = $scope.get('DEFAULT_PROC'));
    }, TMP_4.$$arity = 0);

    return (Opal.defs(self, '$open_child_window', TMP_5 = function ːopen_child_window(path) {
      var self = this;

      
        var left = (screen.width / 2) - (screen.width / 2);
        var top = (screen.height / 2) - (screen.width / 2);
        var width = (screen.width / 2);
        var height = (screen.height / 2);

        return window.open(
          path, 
          'oauth', 
          "menubar=no,toolbar=no,status=no,width=" + (width) + ",height=" + (height) + ",left=" + (left) + ",top=" + (top)
        );
    ;
    }, TMP_5.$$arity = 1), nil) && 'open_child_window';
  })($scope.base, null);
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["services/phantom_yielder"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$new', '$+', '$-', '$==', '$inform_phantom_of_readyness', '$puts']);
  return (function($base) {
    var $Services, self = $Services = $module($base, 'Services');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $PhantomYielder(){};
      var self = $PhantomYielder = $klass($base, $super, 'PhantomYielder', $PhantomYielder);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6;

      def.not_ready_components_count = nil;
      Opal.defs(self, '$instance', TMP_1 = function ːinstance() {
        var $a, self = this;
        if (self.instance == null) self.instance = nil;

        return ((($a = self.instance) !== false && $a !== nil && $a != null) ? $a : self.instance = self.$new());
      }, TMP_1.$$arity = 0);

      Opal.defs(self, '$instance=', TMP_2 = function(val) {
        var self = this;

        return self.instance = val;
      }, TMP_2.$$arity = 1);

      Opal.defn(self, '$initialize', TMP_3 = function ːinitialize() {
        var self = this;

        return self.not_ready_components_count = 0;
      }, TMP_3.$$arity = 0);

      Opal.defn(self, '$component_in_progress', TMP_4 = function ːcomponent_in_progress() {
        var self = this;

        return self.not_ready_components_count = $rb_plus(self.not_ready_components_count, 1);
      }, TMP_4.$$arity = 0);

      Opal.defn(self, '$component_ready', TMP_5 = function ːcomponent_ready() {
        var self = this;

        self.not_ready_components_count = $rb_minus(self.not_ready_components_count, 1);
        if (self.not_ready_components_count['$=='](0)) {
          return self.$inform_phantom_of_readyness()
          } else {
          return nil
        };
      }, TMP_5.$$arity = 0);

      return (Opal.defn(self, '$inform_phantom_of_readyness', TMP_6 = function ːinform_phantom_of_readyness() {
        var self = this;

        
        if (typeof window.callPhantom === 'function') {
          window.callPhantom('components_ready');
        }
      
        return self.$puts("app phantom ready");
      }, TMP_6.$$arity = 0), nil) && 'inform_phantom_of_readyness';
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["services/props_from_server"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$parse']);
  return (function($base) {
    var $Services, self = $Services = $module($base, 'Services');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $PropsFromServer(){};
      var self = $PropsFromServer = $klass($base, $super, 'PropsFromServer', $PropsFromServer);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

      Opal.defs(self, '$set_props', TMP_1 = function ːset_props() {
        var self = this;

        return self.props = $scope.get('JSON').$parse(window.__PROPS_FROM_SERVER__);
      }, TMP_1.$$arity = 0);

      return (Opal.defs(self, '$props', TMP_2 = function ːprops() {
        var self = this;
        if (self.props == null) self.props = nil;

        return self.props;
      }, TMP_2.$$arity = 0), nil) && 'props';
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["services/time_helpers"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base) {
    var $Services, self = $Services = $module($base, 'Services');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $TimeHelpers(){};
      var self = $TimeHelpers = $klass($base, $super, 'TimeHelpers', $TimeHelpers);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      return (Opal.defs(self, '$time_ago', TMP_1 = function ːtime_ago(time_string) {
        var self = this;

        
          console.log(time_string)
          time = +new Date(time_string)

          var time_formats = [
              [60, 'seconds', 1], // 60
              [120, '1 minute ago', '1 minute from now'], // 60*2
              [3600, 'minutes', 60], // 60*60, 60
              [7200, '1 hour ago', '1 hour from now'], // 60*60*2
              [86400, 'hours', 3600], // 60*60*24, 60*60
              [172800, 'Yesterday', 'Tomorrow'], // 60*60*24*2
              [604800, 'days', 86400], // 60*60*24*7, 60*60*24
              [1209600, 'Last week', 'Next week'], // 60*60*24*7*4*2
              [2419200, 'weeks', 604800], // 60*60*24*7*4, 60*60*24*7
              [4838400, 'Last month', 'Next month'], // 60*60*24*7*4*2
              [29030400, 'months', 2419200], // 60*60*24*7*4*12, 60*60*24*7*4
              [58060800, 'Last year', 'Next year'], // 60*60*24*7*4*12*2
              [2903040000, 'years', 29030400] // 60*60*24*7*4*12*100, 60*60*24*7*4*12
          ];
          var seconds = (+new Date() - time) / 1000,
              token = 'ago', list_choice = 1;

          if (seconds == 0) {
              return 'Just now'
          }
          if (seconds < 0) {
              seconds = Math.abs(seconds);
              token = 'from now';
              list_choice = 2;
          }
          var i = 0, format;
          while (format = time_formats[i++])
              if (seconds < format[0]) {
                  if (typeof format[2] == 'string')
                      return format[list_choice];
                  else
                      return Math.floor(seconds / format[2]) + ' ' + format[1] + ' ' + token;
              }
              return time;
          
      ;
      }, TMP_1.$$arity = 1), nil) && 'time_ago'
    })($scope.base, null)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/shared/draggable"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$[]=', '$drag_model', '$t', '$get_style', '$lambda', '$start_dragging', '$n_prop', '$resize_elem', '$start_resizing', '$set_mouse_down_initial_coords', '$listen_for_mouse_move_on_resize', '$off_mouse_move_for_resize_event', '$off_mouse_up_for_resize_event', '$exceeds_boundaries_width_when_resize', '$[]', '$exceeds_boundaries_height_when_resize', '$redraw', '$is_a?', '$attributes', '$listen_for_mouse_move_on_drag', '$off_mouse_move_for_drag_event', '$off_mouse_up_for_drag_event', '$exceeds_boundaries_width', '$exceeds_boundaries_height', '$force_update', '$emit', '$n_ref']);
  return (function($base, $super) {
    function $Draggable(){};
    var self = $Draggable = $klass($base, $super, 'Draggable', $Draggable);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24;

    def.processing = def.mouse_down_initial_x = def.mouse_down_initial_y = def.drag_start_left = def.drag_start_top = nil;
    self.$expose();

    Opal.defn(self, '$init', TMP_1 = function ːinit() {
      var self = this;

      return self.$drag_model()['$[]=']("component", self);
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$render', TMP_4 = function ːrender() {
      var $a, $b, TMP_2, $c, TMP_3, self = this;

      return self.$t("div", $hash2(["className", "style", "ref", "onMouseDown"], {"className": "foo", "style": self.$get_style(), "ref": "drag", "onMouseDown": ($a = ($b = self).$lambda, $a.$$p = (TMP_2 = function(e){var self = TMP_2.$$s || this;
if (e == null) e = nil;
      return self.$start_dragging(e)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b)}), (function() {if ((($a = self.$n_prop("should_show_controlls_for_boundaries")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$t("i", $hash2(["onMouseDown", "className", "style"], {"onMouseDown": ($a = ($c = self).$lambda, $a.$$p = (TMP_3 = function(e){var self = TMP_3.$$s || this;
if (e == null) e = nil;
        return self.$resize_elem(e)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($c), "className": "icon-resize-full resize-field-button", "style": {cursor: 'se-resize', position: 'absolute', bottom: 0, right: 0, margin: 0, padding: 0, width: '1em', height: '1em', 'font-size': '0.8em', 'line-height': '0.8em'}}))
        } else {
        return nil
      }; return nil; })());
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$resize_elem', TMP_5 = function ːresize_elem(e) {
      var self = this;

      self.$start_resizing(e);
      return e.stopPropagation();
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$set_mouse_down_initial_coords', TMP_6 = function ːset_mouse_down_initial_coords(e) {
      var self = this;

      self.mouse_down_initial_x = e["pageX"];
      return self.mouse_down_initial_y = e["pageY"];
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$start_resizing', TMP_7 = function ːstart_resizing(e) {
      var self = this;

      self.$set_mouse_down_initial_coords(e);
      return self.$listen_for_mouse_move_on_resize(e);
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$listen_for_mouse_move_on_resize', TMP_8 = function ːlisten_for_mouse_move_on_resize() {
      var $a, self = this;

      
    $(document).on("mouseup.resize" + self, function(e){
      self.$off_mouse_move_for_resize_event();
      self.$off_mouse_up_for_resize_event();
    });
    $(document).on("mousemove.resize" + self, function(e){
      (function() {if ((($a = self.processing) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return;
        } else {
        return nil
      }; return nil; })()
      self.processing = true
      changeX = e.pageX - self.mouse_down_initial_x;
      changeY = e.pageY - self.mouse_down_initial_y ;

      self.$set_mouse_down_initial_coords(e)

      if ( !(self.$exceeds_boundaries_width_when_resize(changeX)) ) {
        self.$drag_model()['$[]=']("width", self.$drag_model()['$[]']("width") + changeX);

      };
      if ( !(self.$exceeds_boundaries_height_when_resize(changeY)) ) {
        self.$drag_model()['$[]=']("height", self.$drag_model()['$[]']("height") + changeY);

      };
      self.$redraw()
    })
    ;
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$exceeds_boundaries_width_when_resize', TMP_9 = function ːexceeds_boundaries_width_when_resize(change_x) {
      var self = this;

      
      if ( (self.$drag_model()['$[]']("width") + change_x + self.$drag_model()['$[]']("left")) > self.$drag_model()['$[]']("boundaries_width")) {
        return true
      } else {
        return false
      }
    ;
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$exceeds_boundaries_height_when_resize', TMP_10 = function ːexceeds_boundaries_height_when_resize(change_y) {
      var self = this;

      
      if ( (self.$drag_model()['$[]']("height") + change_y + self.$drag_model()['$[]']("top")) > self.$drag_model()['$[]']("boundaries_height")) {
        return true
      } else {
        return false
      }
    ;
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$get_style', TMP_11 = function ːget_style() {
      var self = this;

       var styles =  {
        position: 'absolute',
        height: self.$drag_model()['$[]']("height"),
        width: self.$drag_model()['$[]']("width"),
        top: self.$drag_model()['$[]']("top"),
        left: self.$drag_model()['$[]']("left"),
        padding: 0,
        margin: 0,
        'z-index': 999,
        cursor: 'pointer',
        cursor: 'pointer'
      };

      if (self.$n_prop("should_show_controlls_for_boundaries")) {
        styles['border'] = '1px solid grey';
      };

      return styles

    ;
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$drag_model', TMP_12 = function ːdrag_model() {
      var $a, self = this;

      if ((($a = self.$n_prop("model")['$is_a?']($scope.get('Model'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$n_prop("model").$attributes()
        } else {
        return self.$n_prop("model")
      };
    }, TMP_12.$$arity = 0);

    Opal.defn(self, '$start_dragging', TMP_13 = function ːstart_dragging(e) {
      var self = this;

      self.$set_mouse_down_initial_coords(e);
      self.drag_start_left = self.$drag_model()['$[]']("left");
      self.drag_start_top = self.$drag_model()['$[]']("top");
      return self.$listen_for_mouse_move_on_drag();
    }, TMP_13.$$arity = 1);

    Opal.defn(self, '$listen_for_mouse_move_on_drag', TMP_14 = function ːlisten_for_mouse_move_on_drag() {
      var self = this;

      
    $(document).on("mouseup.drag" + self, function(e){
      self.$off_mouse_move_for_drag_event();
      self.$off_mouse_up_for_drag_event();

    });
    $(document).on("mousemove.drag" + self, function(e){
      changeX = e.pageX - self.mouse_down_initial_x;
      changeY = e.pageY - self.mouse_down_initial_y ;

      if ( !(self.$exceeds_boundaries_width(changeX)) ) {
        self.$drag_model()['$[]=']("left", self.drag_start_left + changeX);
      };
      if ( !(self.$exceeds_boundaries_height(changeY)) ) {
        self.$drag_model()['$[]=']("top", self.drag_start_top + changeY);
      };
      self.$redraw()
    })
    ;
    }, TMP_14.$$arity = 0);

    Opal.defn(self, '$redraw', TMP_15 = function ːredraw() {
      var self = this;

      self.$force_update();
      self.$emit("boundaries_updated");
      return self.processing = false;
    }, TMP_15.$$arity = 0);

    Opal.defn(self, '$component_did_mount', TMP_16 = function ːcomponent_did_mount() {
      var self = this;

      return self.$redraw();
    }, TMP_16.$$arity = 0);

    Opal.defn(self, '$exceeds_boundaries_height', TMP_17 = function ːexceeds_boundaries_height(to_add_to_top) {
      var self = this;

      
      var testHeight = (self.drag_start_top + to_add_to_top)
      if ( (self.$drag_model()['$[]']("boundaries_height") > (testHeight + self.$drag_model()['$[]']("height"))) && testHeight > 0 ) {
        return false
      } else {
        return true
      }
    ;
    }, TMP_17.$$arity = 1);

    Opal.defn(self, '$exceeds_boundaries_width', TMP_18 = function ːexceeds_boundaries_width(to_add_to_left) {
      var self = this;

      
      var testWidth = self.drag_start_left + to_add_to_left
      if ( self.$drag_model()['$[]']("boundaries_width") > (testWidth + self.$drag_model()['$[]']("width")) && testWidth > 0 ) {
        return false
      } else {
        return true
      }
    ;
    }, TMP_18.$$arity = 1);

    Opal.defn(self, '$off_mouse_move_for_drag_event', TMP_19 = function ːoff_mouse_move_for_drag_event() {
      var self = this;

      
    $(document).off("mousemove.drag" + self)
    ;
    }, TMP_19.$$arity = 0);

    Opal.defn(self, '$off_mouse_up_for_drag_event', TMP_20 = function ːoff_mouse_up_for_drag_event() {
      var self = this;

      return $(document).off("mouseup.drag" + self);;
    }, TMP_20.$$arity = 0);

    Opal.defn(self, '$off_mouse_move_for_resize_event', TMP_21 = function ːoff_mouse_move_for_resize_event() {
      var self = this;

      return $(document).off("mousemove.resize" + self);
    }, TMP_21.$$arity = 0);

    Opal.defn(self, '$off_mouse_up_for_resize_event', TMP_22 = function ːoff_mouse_up_for_resize_event() {
      var self = this;

      return $(document).off("mouseup.resize" + self);
    }, TMP_22.$$arity = 0);

    Opal.defn(self, '$component_will_unmount', TMP_23 = function ːcomponent_will_unmount() {
      var self = this;

      self.$off_mouse_move_for_drag_event();
      return self.$off_mouse_up_for_drag_event();
    }, TMP_23.$$arity = 0);

    return (Opal.defn(self, '$component_did_mount', TMP_24 = function ːcomponent_did_mount() {
      var self = this;

      return self.drag_el = self.$n_ref("drag");
    }, TMP_24.$$arity = 0), nil) && 'component_did_mount';
  })($scope.base, $scope.get('RW'))
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/shared/dropdown"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$t', '$lambda', '$toggle', '$open', '$state', '$text_val', '$props', '$children', '$set_state', '$clear_opened', '$on_toggle']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Shared, self = $Shared = $module($base, 'Shared');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Dropdown(){};
        var self = $Dropdown = $klass($base, $super, 'Dropdown', $Dropdown);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_4, TMP_5, TMP_6;

        self.$expose();

        Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
          var self = this;

          return $hash2(["open"], {"open": false});
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$render', TMP_4 = function ːrender() {
          var $a, $b, TMP_2, $c, TMP_3, self = this;

          return self.$t("li", $hash2(["onMouseEnter", "onMouseLeave", "className"], {"onMouseEnter": ($a = ($b = self).$lambda, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

          return self.$toggle(true)}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($b), "onMouseLeave": ($a = ($c = self).$lambda, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

          return self.$toggle(false)}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($c), "className": "dropdown " + ((function() {if ((($a = self.$state().$open()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "open"
            } else {
            return ""
          }; return nil; })())}), self.$t("a", $hash2(["role", "aria-haspopup", "aria-expanded"], {"role": "button", "aria-haspopup": "true", "aria-expanded": "false"}), "" + (self.$props().$text_val()), self.$t("span", $hash2(["className"], {"className": "caret"}))), self.$children());
        }, TMP_4.$$arity = 0);

        Opal.defn(self, '$toggle', TMP_5 = function ːtoggle(bool) {
          var self = this;

          self.$set_state($hash2(["open"], {"open": bool}));
          return self.$clear_opened();
        }, TMP_5.$$arity = 1);

        return (Opal.defn(self, '$clear_opened', TMP_6 = function ːclear_opened() {
          var self = this;

          return self.$props().$on_toggle(self);
        }, TMP_6.$$arity = 0), nil) && 'clear_opened';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/shared/load_icon"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$n_state', '$[]=', '$t', '$set_state', '$delete', '$values', '$n_prop']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Shared, self = $Shared = $module($base, 'Shared');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $LoadIconPool(){};
        var self = $LoadIconPool = $klass($base, $super, 'LoadIconPool', $LoadIconPool);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8;

        def.last_x = def.last_y = nil;
        self.$expose();

        Opal.defs(self, '$instance', TMP_1 = function ːinstance() {
          var $a, self = this;

          return (($a = Opal.cvars['@@instance']) == null ? nil : $a);
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$init', TMP_2 = function ːinit() {
          var self = this;

          self.last_x = 0;
          return self.last_y = 0;
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$create_load_icon', TMP_3 = function ːcreate_load_icon(component) {
          var self = this, icons = nil;

          icons = self.$n_state("active_icons");
          icons['$[]='](component, self.$t((((($scope.get('Components')).$$scope.get('Shared'))).$$scope.get('LoadIcon')), $hash2(["x", "y"], {"x": self.last_x, "y": self.last_y})));
          return self.$set_state($hash2(["active_icons"], {"active_icons": icons}));
        }, TMP_3.$$arity = 1);

        Opal.defn(self, '$destroy_load_icon', TMP_4 = function ːdestroy_load_icon(component) {
          var self = this, icons = nil;

          icons = self.$n_state("active_icons");
          icons.$delete(component);
          return self.$set_state($hash2(["active_icons"], {"active_icons": icons}));
        }, TMP_4.$$arity = 1);

        Opal.defn(self, '$get_initial_state', TMP_5 = function ːget_initial_state() {
          var self = this;

          (Opal.cvars['@@instance'] = self);
          return $hash2(["active_icons"], {"active_icons": $hash2([], {})});
        }, TMP_5.$$arity = 0);

        Opal.defn(self, '$component_did_mount', TMP_6 = function ːcomponent_did_mount() {
          var self = this;

          
          $('#app').on(
            'click.loadIcon', 
            function(e){
              console.log("clicked")
              self.last_x = e.pageX
          self.last_y = e.pageY

            }
          )
        ;
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$component_will_unmount', TMP_7 = function ːcomponent_will_unmount() {
          var self = this;

          (Opal.cvars['@@instance'] = nil);
          return 
          $("#app").off("click.loadIcon")
        ;
        }, TMP_7.$$arity = 0);

        return (Opal.defn(self, '$render', TMP_8 = function ːrender() {
          var self = this;

          return self.$t("div", $hash2(["id"], {"id": "load-icon-pool"}), self.$n_state("active_icons").$values());
        }, TMP_8.$$arity = 0), nil) && 'render';
      })($scope.base, $scope.get('RW'));

      (function($base, $super) {
        function $LoadIcon(){};
        var self = $LoadIcon = $klass($base, $super, 'LoadIcon', $LoadIcon);

        var def = self.$$proto, $scope = self.$$scope, TMP_9;

        self.$expose();

        return (Opal.defn(self, '$render', TMP_9 = function ːrender() {
          var self = this;

          return self.$t("div", $hash2(["className", "style"], {"className": "load-icon", "style": {top: self.$n_prop("y"), left: self.$n_prop("x")}}));
        }, TMP_9.$$arity = 0), nil) && 'render';
      })($scope.base, $scope.get('RW'));
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/shared/modal"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $gvars = Opal.gvars;

  Opal.add_stubs(['$expose', '$include', '$active_modals_counter', '$instance', '$t', '$display', '$state', '$className', '$props', '$n_state', '$lambda', '$close', '$children', '$+', '$>', '$add_class', '$find', '$set_state', '$increment_active_modals_counter', '$-', '$n_prop', '$emit', '$<=', '$remove_class', '$call', '$top=', '$style']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Shared, self = $Shared = $module($base, 'Shared');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Modal(){};
        var self = $Modal = $klass($base, $super, 'Modal', $Modal);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8;

        def.head = def.body = def.opened = def.on_close = def.dragged_elem_X = def.dragged_elem = nil;
        self.$expose();

        (Opal.cvars['@@opened_count'] = 0);

        self.$include((($scope.get('Plugins')).$$scope.get('UpdateOnSetStateOnly')));

        Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
          var self = this;

          return $hash2(["display", "z_index_value"], {"display": "none", "z_index_value": (($scope.get('Services')).$$scope.get('ModalManager')).$instance().$active_modals_counter()});
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$init', TMP_2 = function ːinit() {
          var self = this;

          self.head = self.$t("p", $hash2([], {}));
          return self.body = self.$t("div", $hash2([], {}), "foo");
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$render', TMP_4 = function ːrender() {
          var $a, $b, TMP_3, self = this;
          if ($gvars.DISPLAY_SIZE == null) $gvars.DISPLAY_SIZE = nil;

          return self.$t("div", $hash2(["className", "style"], {"className": "modal", "style": {display: self.$state().$display()}}), self.$t("div", $hash2(["className", "role"], {"className": "modal-dialog " + ($gvars.DISPLAY_SIZE) + " " + (self.$props().$className()), "role": "document"}), self.$t("div", $hash2(["className", "ref"], {"className": "modal-content", "ref": "drag_wrap"}), self.$t("div", $hash2(["className"], {"className": "modal-header"}), self.$t("div", $hash2(["style", "className", "onClick"], {"style": {zIndex: self.$n_state("z_index_value")}, "className": "close", "onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

          return self.$close()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($b)}), "X"), self.head), self.$t("div", $hash2(["className"], {"className": "modal-body"}), self.body, self.$children()))));
        }, TMP_4.$$arity = 0);

        Opal.defn(self, '$open', TMP_5 = function ːopen(head_content, content, on_close) {
          var $a, $b, self = this;

          if (head_content == null) {
            head_content = false;
          }
          if (content == null) {
            content = false;
          }
          if (on_close == null) {
            on_close = false;
          }
          if (on_close !== false && on_close !== nil && on_close != null) {
            self.on_close = on_close};
          if ((($a = self.opened) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            (Opal.cvars['@@opened_count'] = $rb_plus((($a = Opal.cvars['@@opened_count']) == null ? nil : $a), 1))
          };
          self.opened = true;
          if (head_content !== false && head_content !== nil && head_content != null) {
            self.head = head_content};
          if (content !== false && content !== nil && content != null) {
            self.body = content};
          if ((($a = ($rb_gt((($b = Opal.cvars['@@opened_count']) == null ? nil : $b), 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            $scope.get('Element').$find("body").$add_class("modal-open")};
          return self.$set_state($hash2(["display", "z_index_value"], {"display": "block", "z_index_value": (($scope.get('Services')).$$scope.get('ModalManager')).$instance().$increment_active_modals_counter()}));
        }, TMP_5.$$arity = -1);

        Opal.defn(self, '$close', TMP_6 = function ːclose(preserve, from_unmount) {
          var $a, $b, self = this;

          if (preserve == null) {
            preserve = false;
          }
          if (from_unmount == null) {
            from_unmount = false;
          }
          if ((($a = self.opened) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            (Opal.cvars['@@opened_count'] = $rb_minus((($a = Opal.cvars['@@opened_count']) == null ? nil : $a), 1))};
          self.opened = false;
          if ((($a = self.$n_prop("on_close")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$emit("on_close")};
          if ((($a = self.$n_prop("on_user_intentional_close")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if (from_unmount !== false && from_unmount !== nil && from_unmount != null) {
              } else {
              self.$emit("on_user_intentional_close")
            }};
          if (preserve !== false && preserve !== nil && preserve != null) {
            } else {
            self.head = self.$t("p", $hash2([], {}))
          };
          if (preserve !== false && preserve !== nil && preserve != null) {
            } else {
            self.body = self.$t("div", $hash2([], {}))
          };
          if ((($a = ($rb_le((($b = Opal.cvars['@@opened_count']) == null ? nil : $b), 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            $scope.get('Element').$find("body").$remove_class("modal-open")};
          if (from_unmount !== false && from_unmount !== nil && from_unmount != null) {
            } else {
            self.$set_state($hash2(["display"], {"display": "none"}))
          };
          if ((($a = self.on_close) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.on_close.$call()
            } else {
            return nil
          };
        }, TMP_6.$$arity = -1);

        Opal.defn(self, '$drag', TMP_7 = function ːdrag(e) {
          var $a, $b, self = this;

          return (($a = ["" + ($rb_plus(self.dragged_elem_X, e.pageY)) + "px"]), $b = self.dragged_elem.$style(), $b['$top='].apply($b, $a), $a[$a.length-1]);
        }, TMP_7.$$arity = 1);

        return (Opal.defn(self, '$component_will_unmount', TMP_8 = function ːcomponent_will_unmount() {
          var self = this;

          return self.$close(false, true);
        }, TMP_8.$$arity = 0), nil) && 'component_will_unmount';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/shared/progress_bar"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$on', '$state', '$t', '$to_n', '$width', '$stop_interval', '$new', '$<', '$set_state', '$width=', '$+', '$start', '$stop']);
  return (function($base) {
    var $Shared, self = $Shared = $module($base, 'Shared');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $ProgressBar(){};
      var self = $ProgressBar = $klass($base, $super, 'ProgressBar', $ProgressBar);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_5, TMP_6, TMP_7;

      def.intervaller = nil;
      self.$expose();

      Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
        var self = this;

        return $hash2(["width", "on"], {"width": 10, "on": false});
      }, TMP_1.$$arity = 0);

      Opal.defn(self, '$render', TMP_2 = function ːrender() {
        var $a, self = this, display = nil;

        display = (function() {if ((($a = self.$state().$on()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ""
          } else {
          return "none"
        }; return nil; })();
        return self.$t("div", $hash2(["className", "style"], {"className": "progress thin_progress", "style": $hash2(["width"], {"width": "100%"}).$to_n()}), self.$t("div", $hash2(["className", "role", "style"], {"className": "progress-bar", "role": "progressbar", "style": $hash2(["width", "display"], {"width": "" + (self.$state().$width()) + "%", "display": display}).$to_n()})));
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$component_will_unmount', TMP_3 = function ːcomponent_will_unmount() {
        var $a, self = this;

        if ((($a = self.$state().$on()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$stop_interval()};
        return self.intervaller = nil;
      }, TMP_3.$$arity = 0);

      Opal.defn(self, '$on', TMP_5 = function ːon() {
        var $a, $b, TMP_4, self = this;

        if ((($a = self.$state().$on()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          self.intervaller = ($a = ($b = (($scope.get('Services')).$$scope.get('Interval'))).$new, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this, $c;

          if ((($c = $rb_lt(self.$state().$width(), 90)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return self.$set_state($hash2(["width"], {"width": (($c = self.$state(), $c['$width=']($rb_plus($c.$width(), 10))))}))
              } else {
              return nil
            }}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($b, 75);
          self.$set_state($hash2(["on", "width"], {"on": true, "width": 0}));
          return self.intervaller.$start();
        };
      }, TMP_5.$$arity = 0);

      Opal.defn(self, '$off', TMP_6 = function ːoff() {
        var self = this;

        self.$set_state($hash2(["width"], {"width": 100}));
        self.$stop_interval();
        
        setTimeout(function(){ self.$set_state($hash2(["on", "width"], {"on": false, "width": 0})) }, 200);
      ;
      }, TMP_6.$$arity = 0);

      return (Opal.defn(self, '$stop_interval', TMP_7 = function ːstop_interval() {
        var $a, self = this;

        if ((($a = self.intervaller) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.intervaller.$stop()
          } else {
          return nil
        };
      }, TMP_7.$$arity = 0), nil) && 'stop_interval';
    })($scope.base, $scope.get('RW'))
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/app/forbidden"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$t']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $App, self = $App = $module($base, 'App');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Forbidden(){};
        var self = $Forbidden = $klass($base, $super, 'Forbidden', $Forbidden);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        self.$expose();

        return (Opal.defn(self, '$render', TMP_1 = function ːrender() {
          var self = this;

          return self.$t("div", $hash2([], {}), self.$t("h1", $hash2([], {}), "forbidden 403"));
        }, TMP_1.$$arity = 0), nil) && 'render';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/app/index_route"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$t', '$params', '$props', '$location', '$history']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $App, self = $App = $module($base, 'App');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $IndexRoute(){};
        var self = $IndexRoute = $klass($base, $super, 'IndexRoute', $IndexRoute);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        self.$expose();

        return (Opal.defn(self, '$render', TMP_1 = function ːrender() {
          var self = this;

          return self.$t("div", $hash2(["className"], {"className": "row"}), self.$t("div", $hash2(["className"], {"className": "col-lg-12"}), self.$t((((($scope.get('Components')).$$scope.get('Posts'))).$$scope.get('Index')), $hash2(["params", "location", "history"], {"params": self.$props().$params(), "location": self.$props().$location(), "history": self.$props().$history()}))));
        }, TMP_1.$$arity = 0), nil) && 'render';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/app/main"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$t', '$children']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $App, self = $App = $module($base, 'App');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Main(){};
        var self = $Main = $klass($base, $super, 'Main', $Main);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        self.$expose();

        return (Opal.defn(self, '$render', TMP_1 = function ːrender() {
          var self = this;

          return self.$t("div", $hash2(["className"], {"className": "container-fluid"}), self.$t((((($scope.get('Components')).$$scope.get('Shared'))).$$scope.get('LoadIconPool')), $hash2([], {})), self.$t((((($scope.get('Components')).$$scope.get('Menues'))).$$scope.get('Top')), $hash2([], {})), self.$children());
        }, TMP_1.$$arity = 0), nil) && 'render';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/app/not_found"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$t', '$==', '$status_code', '$query', '$location', '$props', '$pathname']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $App, self = $App = $module($base, 'App');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $NotFound(){};
        var self = $NotFound = $klass($base, $super, 'NotFound', $NotFound);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        self.$expose();

        return (Opal.defn(self, '$render', TMP_1 = function ːrender() {
          var self = this;

          return self.$t("div", $hash2([], {}), (function() {if (self.$props().$location().$query().$status_code()['$==']("404")) {
            return self.$t("h1", $hash2([], {}), "Page not found 404")
          } else if (self.$props().$location().$query().$status_code()['$==']("500")) {
            return self.$t("h1", $hash2([], {}), "Internal server error 500")
          } else if (self.$props().$location().$query().$status_code()['$==']("400")) {
            return self.$t("h1", $hash2([], {}), "Bad request 400")
          } else if (self.$props().$location().$pathname()['$==']("/forbidden")) {
            return self.$t("h1", $hash2([], {}), "Unauthorized 503")
            } else {
            return self.$t("h1", $hash2([], {}), "page not found or error occured 404")
          }; return nil; })());
        }, TMP_1.$$arity = 0), nil) && 'render';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/app/router"] = function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$attr_accessor', '$width', '$find', '$<=', '$==', '$on', '$on_window_resize', '$lambda', '$set_display_size', '$set_app_instance', '$class', '$set_props', '$phantom_instance=', '$new', '$Native', '$check_and_set_current_user_if_logged_in', '$set_resize_listener', '$instance', '$[]', '$props', '$parse', '$set_user_and_login_status', '$t', '$create_class']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $App, self = $App = $module($base, 'App');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Router(){};
        var self = $Router = $klass($base, $super, 'Router', $Router);

        var def = self.$$proto, $scope = self.$$scope, TMP_7, TMP_8, TMP_9, TMP_10;

        self.$expose();

        (function(self) {
          var $scope = self.$$scope, def = self.$$proto, TMP_1, TMP_2, TMP_3, TMP_4, TMP_6;

          self.$attr_accessor("phantom_instance");
          Opal.defn(self, '$set_app_instance', TMP_1 = function ːset_app_instance(value) {
            var self = this;

            return self.app_instance = value;
          }, TMP_1.$$arity = 1);
          Opal.defn(self, '$get_app_instance', TMP_2 = function ːget_app_instance() {
            var self = this;
            if (self.app_instance == null) self.app_instance = nil;

            return self.app_instance;
          }, TMP_2.$$arity = 0);
          Opal.defn(self, '$set_display_size', TMP_3 = function ːset_display_size() {
            var $a, self = this, screen_width = nil, screen_type = nil;
            if ($gvars.DISPLAY_SIZE == null) $gvars.DISPLAY_SIZE = nil;

            screen_width = $scope.get('Element').$find(window).$width();
            screen_type = "g-lg";
            if ((($a = $rb_le(screen_width, 768)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              screen_type = "g-sm"};
            $gvars.DISPLAY_SIZE = screen_type;
            if ($gvars.DISPLAY_SIZE['$==']("g-sm")) {
              $gvars.IS_MOBILE = true
              } else {
              $gvars.IS_MOBILE = false
            };
            $gvars.CLIENT_WIDTH = window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth;
            return $gvars.CLIENT_HEIGHT = window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight;
          }, TMP_3.$$arity = 0);
          Opal.defn(self, '$set_resize_listener', TMP_4 = function ːset_resize_listener() {
            var self = this;

            return $scope.get('Element').$find(window).$on("resize", self.$on_window_resize());
          }, TMP_4.$$arity = 0);
          return (Opal.defn(self, '$on_window_resize', TMP_6 = function ːon_window_resize() {
            var $a, $b, TMP_5, self = this;

            return ($a = ($b = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

            return self.$set_display_size()}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($b);
          }, TMP_6.$$arity = 0), nil) && 'on_window_resize';
        })(Opal.get_singleton_class(self));

        Opal.defn(self, '$component_did_mount', TMP_7 = function ːcomponent_did_mount() {
          var self = this;

          return self.$class().$set_app_instance(self);
        }, TMP_7.$$arity = 0);

        Opal.defn(self, '$init', TMP_8 = function ːinit() {
          var $a, $b, self = this;

          (($scope.get('Services')).$$scope.get('PropsFromServer')).$set_props();
          (($a = [(($scope.get('Services')).$$scope.get('PhantomYielder')).$new()]), $b = self.$class(), $b['$phantom_instance='].apply($b, $a), $a[$a.length-1]);
          $gvars.HISTORY = self.$Native(ReactRouter.browserHistory);
          self.$check_and_set_current_user_if_logged_in();
          self.$class().$set_display_size();
          self.$class().$set_resize_listener();
          return $scope.get('UserNotificationsManager').$instance();
        }, TMP_8.$$arity = 0);

        Opal.defn(self, '$check_and_set_current_user_if_logged_in', TMP_9 = function ːcheck_and_set_current_user_if_logged_in() {
          var $a, self = this, x = nil, user = nil;

          if ((($a = x = (($scope.get('Services')).$$scope.get('PropsFromServer')).$props()['$[]']("current_user")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            user = $scope.get('User').$parse(x);
            return $scope.get('CurrentUser').$set_user_and_login_status(user, true);
            } else {
            return nil
          };
        }, TMP_9.$$arity = 0);

        return (Opal.defn(self, '$render', TMP_10 = function ːrender() {
          var self = this, m = nil;

          return self.$t(ReactRouter.Router, $hash2(["history"], {"history": ReactRouter.browserHistory}), self.$t(ReactRouter.Route, $hash2(["path", "component"], {"path": "/login_or_continue_as_guest", "component": (((($scope.get('Components')).$$scope.get('Users'))).$$scope.get('LoginOrContinueAsGuest')).$create_class()})), self.$t(ReactRouter.Route, $hash2(["path", "component"], {"path": "/", "component": (((($scope.get('Components')).$$scope.get('App'))).$$scope.get('Main')).$create_class()}), self.$t(ReactRouter.Route, $hash2(["path", "component"], {"path": "error404", "component": (((($scope.get('Components')).$$scope.get('App'))).$$scope.get('NotFound')).$create_class()})), self.$t(ReactRouter.IndexRoute, $hash2(["component"], {"component": m = (((($scope.get('Components')).$$scope.get('App'))).$$scope.get('IndexRoute')).$create_class()})), self.$t(ReactRouter.Route, $hash2(["path", "component"], {"path": "test", "component": $scope.get('Test').$create_class()})), self.$t(ReactRouter.Route, $hash2(["path", "component"], {"path": "signup", "component": (((($scope.get('Components')).$$scope.get('Users'))).$$scope.get('Create')).$create_class()})), self.$t(ReactRouter.Route, $hash2(["path", "component"], {"path": "login", "component": (((($scope.get('Components')).$$scope.get('Sessions'))).$$scope.get('Create')).$create_class()})), self.$t(ReactRouter.Route, $hash2(["path", "component"], {"path": "posts", "component": (((($scope.get('Components')).$$scope.get('Posts'))).$$scope.get('Main')).$create_class()}), self.$t(ReactRouter.Route, $hash2(["path", "component"], {"path": "index", "component": (((($scope.get('Components')).$$scope.get('Posts'))).$$scope.get('Index')).$create_class()}), self.$t(ReactRouter.Route, $hash2(["path", "component"], {"path": ":post_id", "component": (((($scope.get('Components')).$$scope.get('Posts'))).$$scope.get('ShowProxy')).$create_class()}))), self.$t(ReactRouter.Route, $hash2(["path", "component"], {"path": "new", "component": (((($scope.get('Components')).$$scope.get('Posts'))).$$scope.get('New')).$create_class()})), self.$t(ReactRouter.Route, $hash2(["path", "component"], {"path": ":post_id", "component": (((($scope.get('Components')).$$scope.get('Posts'))).$$scope.get('Show')).$create_class()}))), self.$t(ReactRouter.Route, $hash2(["path", "component"], {"path": "new_gif", "component": (((($scope.get('Components')).$$scope.get('PostGifs'))).$$scope.get('New')).$create_class()})), self.$t(ReactRouter.Route, $hash2(["path", "component"], {"path": "show_gif/:id", "component": (((($scope.get('Components')).$$scope.get('PostGifs'))).$$scope.get('Show')).$create_class()})), self.$t(ReactRouter.Route, $hash2(["path", "component"], {"path": "upload_image", "component": (((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('UploadAndPreview')).$create_class()})), self.$t(ReactRouter.Route, $hash2(["path", "component"], {"path": "test", "component": (((($scope.get('Components')).$$scope.get('App'))).$$scope.get('Test')).$create_class()})), self.$t(ReactRouter.Route, $hash2(["path", "component"], {"path": "staff", "component": (((($scope.get('Components')).$$scope.get('Staff'))).$$scope.get('Main')).$create_class()}), self.$t(ReactRouter.Route, $hash2(["path", "component"], {"path": "user_submitted/posts", "component": (((((((($scope.get('Components')).$$scope.get('Staff'))).$$scope.get('UserSubmitted'))).$$scope.get('Posts'))).$$scope.get('Main')).$create_class()}), self.$t(ReactRouter.Route, $hash2(["path", "component"], {"path": "index", "component": (((((((($scope.get('Components')).$$scope.get('Staff'))).$$scope.get('UserSubmitted'))).$$scope.get('Posts'))).$$scope.get('Index')).$create_class()}))), self.$t(ReactRouter.Route, $hash2(["path", "component"], {"path": "posts", "component": (((((($scope.get('Components')).$$scope.get('Staff'))).$$scope.get('Posts'))).$$scope.get('Main')).$create_class()}), self.$t(ReactRouter.Route, $hash2(["path", "component"], {"path": "new", "component": (((((($scope.get('Components')).$$scope.get('Staff'))).$$scope.get('Posts'))).$$scope.get('New')).$create_class()})))), self.$t(ReactRouter.Route, $hash2(["path", "component"], {"path": "dashboard/:user_id", "component": (((((($scope.get('Components')).$$scope.get('Dashboards'))).$$scope.get('Users'))).$$scope.get('Index')).$create_class()}), self.$t(ReactRouter.Route, $hash2(["path", "component"], {"path": "posts/new", "component": (((($scope.get('Components')).$$scope.get('Posts'))).$$scope.get('New')).$create_class()})), self.$t(ReactRouter.Route, $hash2(["path", "component"], {"path": "edit_account", "component": (((($scope.get('Components')).$$scope.get('Users'))).$$scope.get('Edit')).$create_class()})), self.$t(ReactRouter.Route, $hash2(["path", "component"], {"path": "posts/index", "component": (((((($scope.get('Components')).$$scope.get('Users'))).$$scope.get('Posts'))).$$scope.get('Index')).$create_class()}), self.$t(ReactRouter.Route, $hash2(["path", "component"], {"path": ":post_id", "component": (((($scope.get('Components')).$$scope.get('Posts'))).$$scope.get('ShowProxy')).$create_class()}))), self.$t(ReactRouter.Route, $hash2(["path", "component"], {"path": "notifications", "component": (((($scope.get('Components')).$$scope.get('UserNotifications'))).$$scope.get('Index')).$create_class()})), self.$t(ReactRouter.Route, $hash2(["path", "component"], {"path": "subscriptions", "component": (((((($scope.get('Components')).$$scope.get('Users'))).$$scope.get('UserSubscriptions'))).$$scope.get('Index')).$create_class()}))), self.$t(ReactRouter.Route, $hash2(["path", "component"], {"path": "users/:user_id", "component": (((((($scope.get('Components')).$$scope.get('Users'))).$$scope.get('Show'))).$$scope.get('Main')).$create_class()}), self.$t(ReactRouter.Route, $hash2(["path", "component"], {"path": "general_info", "component": (((((($scope.get('Components')).$$scope.get('Users'))).$$scope.get('Show'))).$$scope.get('GeneralInfo')).$create_class()})), self.$t(ReactRouter.Route, $hash2(["path", "component"], {"path": "posts", "component": (((((($scope.get('Components')).$$scope.get('Users'))).$$scope.get('Posts'))).$$scope.get('Index')).$create_class()}), self.$t(ReactRouter.Route, $hash2(["path", "component"], {"path": ":post_id", "component": (((($scope.get('Components')).$$scope.get('Posts'))).$$scope.get('ShowProxy')).$create_class()})))), self.$t(ReactRouter.Route, $hash2(["path", "component"], {"path": ":post_id", "component": m}))), self.$t(ReactRouter.Route, $hash2(["path", "component"], {"path": "*", "component": (((($scope.get('Components')).$$scope.get('App'))).$$scope.get('NotFound')).$create_class()})));
        }, TMP_10.$$arity = 0), nil) && 'render';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/app/sidebar"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$t']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $App, self = $App = $module($base, 'App');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Sidebar(){};
        var self = $Sidebar = $klass($base, $super, 'Sidebar', $Sidebar);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        self.$expose();

        return (Opal.defn(self, '$render', TMP_1 = function ːrender() {
          var self = this;

          return self.$t("div", $hash2([], {}), self.$t((((($scope.get('Components')).$$scope.get('UserNotifications'))).$$scope.get('Index')), $hash2([], {})));
        }, TMP_1.$$arity = 0), nil) && 'render';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/app/test"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$t', '$n_state', '$then', '$set_state', '$p', '$raise', '$personality_test_show']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $App, self = $App = $module($base, 'App');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Test(){};
        var self = $Test = $klass($base, $super, 'Test', $Test);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4;

        self.$expose();

        self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

        Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
          var self = this;

          return $hash2(["post_test"], {"post_test": false});
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$render', TMP_2 = function ːrender() {
          var $a, self = this;

          return self.$t("div", $hash2([], {}), (function() {if ((($a = self.$n_state("post_test")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t((((($scope.get('Components')).$$scope.get('PersonalityTests'))).$$scope.get('Show')), $hash2(["post_test"], {"post_test": self.$n_state("post_test")}))
            } else {
            return nil
          }; return nil; })());
        }, TMP_2.$$arity = 0);

        return (Opal.defn(self, '$component_did_mount', TMP_4 = function ːcomponent_did_mount() {
          var $a, $b, TMP_3, self = this;

          return ($a = ($b = $scope.get('PostTest').$personality_test_show($hash2(["wilds"], {"wilds": $hash2(["id"], {"id": 46})}))).$then, $a.$$p = (TMP_3 = function(post_test){var self = TMP_3.$$s || this, e = nil;
if (post_test == null) post_test = nil;
          try {
              return self.$set_state($hash2(["post_test"], {"post_test": post_test}))
            } catch ($err) {
              if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                try {
                  self.$p(e);
                  return self.$raise(e);
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b);
        }, TMP_4.$$arity = 0), nil) && 'component_did_mount';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/dashboards/users/index"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$!', '$instance_has_role?', '$t', '$link_to', '$id', '$instance', '$on_main', '$state', '$should_show_signup_box?', '$notifications', '$children', '$check_if_on_main', '$notifications=', '$new', '$then', '$force_update', '$ping_current_user', '$==', '$pathname', '$location', '$props', '$set_state', '$user_credentials_details']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Dashboards, self = $Dashboards = $module($base, 'Dashboards');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $Users, self = $Users = $module($base, 'Users');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Index(){};
          var self = $Index = $klass($base, $super, 'Index', $Index);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_5, TMP_6, TMP_7, TMP_8;

          self.$expose();

          Opal.cdecl($scope, 'SIGNUP_PROMOTION_MESSAGE', "Pssst, dude, wanna become registered? Name will be enough.");

          Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
            var self = this;

            return $hash2(["on_main"], {"on_main": false});
          }, TMP_1.$$arity = 0);

          Opal.defn(self, '$should_show_signup_box?', TMP_2 = function() {
            var $a, $b, self = this;

            if ((($a = ((($b = $scope.get('CurrentUser')['$instance_has_role?']("name_provided")['$!']()) !== false && $b !== nil && $b != null) ? $b : $scope.get('CurrentUser')['$instance_has_role?']("no_e_or_p"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return true
              } else {
              return false
            };
          }, TMP_2.$$arity = 0);

          Opal.defn(self, '$render', TMP_3 = function ːrender() {
            var $a, self = this;

            return self.$t("div", $hash2(["className"], {"className": "dashboards-index"}), self.$t("div", $hash2(["className"], {"className": "controlls"}), self.$t("ul", $hash2([], {}), self.$link_to(self.$t("li", $hash2([], {}), "create post"), "/dashboard/" + ($scope.get('CurrentUser').$instance().$id()) + "/posts/new"), self.$link_to(self.$t("li", $hash2([], {}), "my posts"), "/dashboard/" + ($scope.get('CurrentUser').$instance().$id()) + "/posts/index"), self.$link_to(self.$t("li", $hash2([], {}), "my account"), "/dashboard/" + ($scope.get('CurrentUser').$instance().$id()) + "/edit_account"), self.$link_to(self.$t("li", $hash2([], {}), "subscriptions"), "/dashboard/" + ($scope.get('CurrentUser').$instance().$id()) + "/subscriptions"))), self.$t("div", $hash2(["className"], {"className": "content"}), (function() {if ((($a = self.$state().$on_main()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("div", $hash2(["className"], {"className": "row"}), self.$t("div", $hash2(["className"], {"className": "col-lg-6"}), self.$t((((((($scope.get('Components')).$$scope.get('Users'))).$$scope.get('Show'))).$$scope.get('GeneralInfo')), $hash2(["user_id", "dashboard_mode"], {"user_id": $scope.get('CurrentUser').$instance().$id(), "dashboard_mode": true}))), self.$t("div", $hash2(["className"], {"className": "col-lg-6"}), self.$t((((($scope.get('Components')).$$scope.get('DayKarmaStats'))).$$scope.get('Index')), $hash2([], {})), (function() {if ((($a = self['$should_show_signup_box?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return self.$t((((($scope.get('Components')).$$scope.get('Users'))).$$scope.get('Create')), $hash2(["message"], {"message": $scope.get('SIGNUP_PROMOTION_MESSAGE')}))
                } else {
                return nil
              }; return nil; })(), self.$t((((($scope.get('Components')).$$scope.get('UserNotifications'))).$$scope.get('Index')), $hash2(["notification"], {"notification": $scope.get('CurrentUser').$instance().$notifications()}))))
              } else {
              return nil
            }; return nil; })(), self.$children()));
          }, TMP_3.$$arity = 0);

          Opal.defn(self, '$component_did_mount', TMP_5 = function ːcomponent_did_mount() {
            var $a, $b, TMP_4, self = this;

            self.$check_if_on_main();
            (($a = [$scope.get('ModelCollection').$new()]), $b = $scope.get('CurrentUser').$instance(), $b['$notifications='].apply($b, $a), $a[$a.length-1]);
            return ($a = ($b = $scope.get('CurrentUser').$ping_current_user()).$then, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

            return self.$force_update()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($b);
          }, TMP_5.$$arity = 0);

          Opal.defn(self, '$component_did_update', TMP_6 = function ːcomponent_did_update(np, ns) {
            var self = this;

            return self.$check_if_on_main();
          }, TMP_6.$$arity = 2);

          Opal.defn(self, '$check_if_on_main', TMP_7 = function ːcheck_if_on_main() {
            var $a, self = this;

            if (self.$props().$location().$pathname()['$==']("/dashboard/" + ($scope.get('CurrentUser').$instance().$id()))) {
              if ((($a = self.$state().$on_main()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return nil
                } else {
                return self.$set_state($hash2(["on_main"], {"on_main": true}))
              }
            } else if ((($a = self.$state().$on_main()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$set_state($hash2(["on_main"], {"on_main": false}))
              } else {
              return nil
            };
          }, TMP_7.$$arity = 0);

          return (Opal.defn(self, '$user_logged_in', TMP_8 = function ːuser_logged_in(user_instance) {
            var self = this;

            return self.$set_state(self.$user_credentials_details());
          }, TMP_8.$$arity = 1), nil) && 'user_logged_in';
        })($scope.base, $scope.get('RW'))
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/day_karma_stats/index"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$new', '$then', '$set_state', '$index', '$t', '$map', '$up_count', '$abs', '$down_count', '$created_at', '$render_count_shower_for_event', '$[]', '$event_type', '$link_to', '$to_n', '$source_text', '$build_link', '$data', '$day_karma_events', '$n_state', '$==', '$source_type', '$===', '$source_id', '$try']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DayKarmaStats, self = $DayKarmaStats = $module($base, 'DayKarmaStats');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Index(){};
        var self = $Index = $klass($base, $super, 'Index', $Index);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3, TMP_6, TMP_7, TMP_8;

        self.$expose();

        Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
          var self = this;

          return $hash2(["day_karma_stats"], {"day_karma_stats": $scope.get('ModelCollection').$new()});
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$component_did_mount', TMP_3 = function ːcomponent_did_mount() {
          var $a, $b, TMP_2, self = this;

          return ($a = ($b = $scope.get('DayKarmaStat').$index()).$then, $a.$$p = (TMP_2 = function(day_karma_stats){var self = TMP_2.$$s || this;
if (day_karma_stats == null) day_karma_stats = nil;
          return self.$set_state($hash2(["day_karma_stats"], {"day_karma_stats": day_karma_stats}))}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b);
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$render', TMP_6 = function ːrender() {
          var $a, $b, TMP_4, self = this;

          return self.$t("div", $hash2(["className"], {"className": "day-karma-stats-index"}), ($a = ($b = self.$n_state("day_karma_stats").$data()).$map, $a.$$p = (TMP_4 = function(day_karma_stat){var self = TMP_4.$$s || this, $c, $d, TMP_5;
if (day_karma_stat == null) day_karma_stat = nil;
          return self.$t("div", $hash2(["className"], {"className": "for-day"}), self.$t("div", $hash2(["className"], {"className": "header"}), self.$t("div", $hash2(["className"], {"className": "count-shower"}), self.$t("span", $hash2(["className"], {"className": "plus"}), "+" + (day_karma_stat.$up_count())), " / ", self.$t("span", $hash2(["className"], {"className": "minus"}), "-" + (day_karma_stat.$down_count().$abs()))), self.$t("span", $hash2(["className"], {"className": "date"}), (new Date(day_karma_stat.$created_at())).toLocaleDateString('us-US', {day: 'numeric', month: 'long', year: '2-digit'}))), self.$t("div", $hash2(["className"], {"className": "events-for-day"}), ($c = ($d = day_karma_stat.$day_karma_events().$data()).$map, $c.$$p = (TMP_5 = function(day_karma_event){var self = TMP_5.$$s || this;
if (day_karma_event == null) day_karma_event = nil;
            return self.$t("div", $hash2(["className"], {"className": "day-karma-event-show"}), self.$t("div", $hash2(["className"], {"className": "count-shower"}), self.$render_count_shower_for_event(day_karma_event)), self.$t("div", $hash2(["className"], {"className": "date"}), (new Date(day_karma_event.$created_at())).toLocaleDateString('us-US', {hour: '2-digit', minute: '2-digit'})), self.$t("div", $hash2(["className"], {"className": "event-disclaimer"}), (($scope.get('DayKarmaEvent')).$$scope.get('EVENT_TYPES'))['$[]'](day_karma_event.$event_type())), self.$t("div", $hash2(["className"], {"className": "content_disclaimer"}), self.$link_to(self.$t("p", $hash2(["dangerouslySetInnerHTML"], {"dangerouslySetInnerHTML": $hash2(["__html"], {"__html": day_karma_event.$source_text()}).$to_n()})), self.$build_link(day_karma_event))))}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $c).call($d)))}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($b));
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$render_count_shower_for_event', TMP_7 = function ːrender_count_shower_for_event(day_karma_event) {
          var self = this, only_plus = nil, only_minus = nil;

          only_plus = (function() {if (day_karma_event.$down_count()['$=='](0)) {
            return true
            } else {
            return false
          }; return nil; })();
          only_minus = (function() {if (day_karma_event.$up_count()['$=='](0)) {
            return true
            } else {
            return false
          }; return nil; })();
          if (only_plus !== false && only_plus !== nil && only_plus != null) {
            return self.$t("span", $hash2(["className"], {"className": "plus"}), "+" + (day_karma_event.$up_count()))
          } else if (only_minus !== false && only_minus !== nil && only_minus != null) {
            return self.$t("span", $hash2(["className"], {"className": "minus"}), "-" + (day_karma_event.$down_count().$abs()))
            } else {
            return [self.$t("span", $hash2(["className"], {"className": "plus"}), "+" + (day_karma_event.$up_count())), " / ", self.$t("span", $hash2(["className"], {"className": "minus"}), "-" + (day_karma_event.$down_count().$abs()))]
          };
        }, TMP_7.$$arity = 1);

        return (Opal.defn(self, '$build_link', TMP_8 = function ːbuild_link(day_karma_event) {
          var self = this, $case = nil;

          return (function() {$case = day_karma_event.$source_type();if ("Post"['$===']($case)) {return "/posts/" + (day_karma_event.$source_id())}else if ("DiscussionMessage"['$===']($case)) {return "/posts/" + (day_karma_event.$try("primary_source_id")) + "?comment=" + (day_karma_event.$source_id())}else { return nil }})();
        }, TMP_8.$$arity = 1), nil) && 'build_link';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/discussion_message_karma_transactions/new"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$!', '$is_a?', '$discussion_message_karma_transaction_for_cu', '$props', '$puts', '$name', '$class', '$discussion_message_karma_id', '$t', '$lambda', '$like', '$liked?', '$dislike', '$disliked?', '$n_prop', '$try', '$>', '$amount', '$<', '$previous_amount=', '$amount=', '$create', '$then', '$has_errors?', '$[]', '$errors', '$alert', '$previous_amount', '$update_karma', '$attributes', '$attributes=', '$emit', '$force_update', '$p']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DiscussionMessageKarmaTransactions, self = $DiscussionMessageKarmaTransactions = $module($base, 'DiscussionMessageKarmaTransactions');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $New(){};
        var self = $New = $klass($base, $super, 'New', $New);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_11;

        self.$expose();

        Opal.defn(self, '$validate_props', TMP_1 = function ːvalidate_props() {
          var $a, self = this;

          if ((($a = self.$props().$discussion_message_karma_transaction_for_cu()['$is_a?']($scope.get('DiscussionMessageKarmaTransaction'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$puts("" + (self) + " of " + (self.$class().$name()) + " required prop :discussion_message_karma_id of Integer was not passed,\n                instead got " + (self.$props().$discussion_message_karma_id()) + " of " + (self.$props().$discussion_message_karma_id().$class().$name()))
            } else {
            return nil
          };
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$get_initial_state', TMP_2 = function ːget_initial_state() {
          var self = this;

          return nil;
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$render', TMP_5 = function ːrender() {
          var $a, $b, TMP_3, $c, TMP_4, self = this;

          return self.$t("div", $hash2(["className"], {"className": "discussion-message-karma-transactions-new"}), self.$t("span", $hash2(["onClick", "className"], {"onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

          return self.$like()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($b), "className": self['$liked?']()}), self.$t("i", $hash2(["className"], {"className": "icon-thumbs-up-1"}))), self.$t("span", $hash2(["onClick", "className"], {"onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

          return self.$dislike()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($c), "className": self['$disliked?']()}), self.$t("i", $hash2(["className"], {"className": "icon-thumbs-down-1"}))));
        }, TMP_5.$$arity = 0);

        Opal.defn(self, '$liked?', TMP_6 = function() {
          var $a, $b, self = this, dmkt = nil;

          dmkt = self.$n_prop("discussion_message_karma_transaction_for_cu");
          if ((($a = ($b = dmkt.$try("amount"), $b !== false && $b !== nil && $b != null ?$rb_gt(dmkt.$amount(), 0) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "liked"
            } else {
            return nil
          };
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$disliked?', TMP_7 = function() {
          var $a, $b, self = this, dmkt = nil;

          dmkt = self.$n_prop("discussion_message_karma_transaction_for_cu");
          if ((($a = ($b = dmkt.$try("amount"), $b !== false && $b !== nil && $b != null ?$rb_lt(dmkt.$amount(), 0) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "disliked"
            } else {
            return nil
          };
        }, TMP_7.$$arity = 0);

        Opal.defn(self, '$like', TMP_8 = function ːlike() {
          var $a, $b, $c, self = this, dmkt = nil;

          dmkt = self.$n_prop("discussion_message_karma_transaction_for_cu");
          (($a = [((($c = dmkt.$amount()) !== false && $c !== nil && $c != null) ? $c : 0)]), $b = dmkt, $b['$previous_amount='].apply($b, $a), $a[$a.length-1]);
          (($a = [1]), $b = dmkt, $b['$amount='].apply($b, $a), $a[$a.length-1]);
          return self.$create();
        }, TMP_8.$$arity = 0);

        Opal.defn(self, '$dislike', TMP_9 = function ːdislike() {
          var $a, $b, $c, self = this, dmkt = nil;

          dmkt = self.$n_prop("discussion_message_karma_transaction_for_cu");
          (($a = [((($c = dmkt.$amount()) !== false && $c !== nil && $c != null) ? $c : 0)]), $b = dmkt, $b['$previous_amount='].apply($b, $a), $a[$a.length-1]);
          (($a = [-1]), $b = dmkt, $b['$amount='].apply($b, $a), $a[$a.length-1]);
          return self.$create();
        }, TMP_9.$$arity = 0);

        return (Opal.defn(self, '$create', TMP_11 = function ːcreate() {
          var $a, $b, TMP_10, self = this;

          return ($a = ($b = self.$n_prop("discussion_message_karma_transaction_for_cu").$create()).$then, $a.$$p = (TMP_10 = function(discussion_message_karma_transaction){var self = TMP_10.$$s || this, $c, $d, e = nil;
if (discussion_message_karma_transaction == null) discussion_message_karma_transaction = nil;
          try {
              if ((($c = discussion_message_karma_transaction['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                if ((($c = discussion_message_karma_transaction.$errors()['$[]']("general")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                  self.$alert(discussion_message_karma_transaction.$errors()['$[]']("general"));
                  return (($c = [discussion_message_karma_transaction.$previous_amount()]), $d = discussion_message_karma_transaction, $d['$amount='].apply($d, $c), $c[$c.length-1]);
                  } else {
                  return nil
                }
                } else {
                $scope.get('CurrentUser').$update_karma(discussion_message_karma_transaction.$attributes()['$[]']("user_change_amount"));
                (($c = [discussion_message_karma_transaction.$attributes()]), $d = self.$n_prop("discussion_message_karma_transaction_for_cu"), $d['$attributes='].apply($d, $c), $c[$c.length-1]);
                self.$emit("on_discussion_message_karma_transaction_created", discussion_message_karma_transaction);
                return self.$force_update();
              }
            } catch ($err) {
              if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                try {
                  return self.$p(e)
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10), $a).call($b);
        }, TMP_11.$$arity = 0), nil) && 'create';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/discussion_message_karmas/show"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$!', '$is_a?', '$discussion_message_karma', '$props', '$puts', '$name', '$class', '$t', '$discussion_message_karma_transaction_for_cu_or_new', '$n_prop', '$event', '$lambda', '$on_discussion_message_karma_transaction_created', '$count', '$state', '$count=', '$+', '$amount_change_factor', '$emit', '$force_update']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DiscussionMessageKarmas, self = $DiscussionMessageKarmas = $module($base, 'DiscussionMessageKarmas');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Show(){};
        var self = $Show = $klass($base, $super, 'Show', $Show);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4, TMP_5;

        self.$expose();

        Opal.defn(self, '$validate_props', TMP_1 = function ːvalidate_props() {
          var $a, self = this;

          if ((($a = self.$props().$discussion_message_karma()['$is_a?']($scope.get('DiscussionMessageKarma'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$puts("" + (self.$class().$name()) + " " + (self) + " requires prop discussion_message_karma of DiscussionMessageKarma,\n                instead got " + (self.$props().$discussion_message_karma()) + " of " + (self.$props().$discussion_message_karma().$class().$name()) + " ")
            } else {
            return nil
          };
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$get_initial_state', TMP_2 = function ːget_initial_state() {
          var self = this;

          return $hash2(["discussion_message_karma"], {"discussion_message_karma": self.$props().$discussion_message_karma()});
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$render', TMP_4 = function ːrender() {
          var $a, $b, TMP_3, self = this;

          return self.$t("div", $hash2(["className"], {"className": "karmaBlock"}), self.$t((((($scope.get('Components')).$$scope.get('DiscussionMessageKarmaTransactions'))).$$scope.get('New')), $hash2(["discussion_message_karma_transaction_for_cu", "discussion_message_karma", "on_discussion_message_karma_transaction_created"], {"discussion_message_karma_transaction_for_cu": self.$n_prop("discussion_message_karma").$discussion_message_karma_transaction_for_cu_or_new(), "discussion_message_karma": self.$n_prop("discussion_message_karma"), "on_discussion_message_karma_transaction_created": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_3 = function(dmkt){var self = TMP_3.$$s || this;
if (dmkt == null) dmkt = nil;
          return self.$on_discussion_message_karma_transaction_created(dmkt)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b))})), self.$t("span", $hash2(["className"], {"className": "count"}), "" + (self.$state().$discussion_message_karma().$count())));
        }, TMP_4.$$arity = 0);

        return (Opal.defn(self, '$on_discussion_message_karma_transaction_created', TMP_5 = function ːon_discussion_message_karma_transaction_created(dmkt) {
          var $a, self = this;

          ($a = self.$n_prop("discussion_message_karma"), $a['$count=']($rb_plus($a.$count(), dmkt.$amount_change_factor())));
          self.$emit("on_karma_changed", dmkt);
          return self.$force_update();
        }, TMP_5.$$arity = 1), nil) && 'on_discussion_message_karma_transaction_created';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/discussion_messages/new"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$!', '$discussion_id', '$props', '$==', '$to_s', '$puts', '$name', '$class', '$new', '$discussion_id=', '$reply_to', '$discussion_message_id=', '$t', '$modal', '$input', '$discussion_message', '$state', '$wysi_textarea_parse_rules', '$lambda', '$submit', '$emit', '$collect_inputs', '$then', '$has_errors?', '$[]', '$errors', '$modal_open', '$event', '$after_signup_ok', '$set_state', '$get_initial_state', '$clear_inputs', '$update_karma', '$holding_message', '$create', '$modal_close']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DiscussionMessages, self = $DiscussionMessages = $module($base, 'DiscussionMessages');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $New(){};
        var self = $New = $klass($base, $super, 'New', $New);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_5, TMP_8, TMP_9;

        self.$expose();

        self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

        Opal.defn(self, '$validate_props', TMP_1 = function ːvalidate_props() {
          var $a, $b, self = this;

          if ((($a = ((($b = self.$props().$discussion_id()['$!']()) !== false && $b !== nil && $b != null) ? $b : self.$props().$discussion_id().$to_s()['$=='](0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$puts("" + (self) + " of " + (self.$class().$name()) + " props.discussion_id should be numeric String\n                or Integer; instead got " + (self.$props().$discussion_id()) + " of " + (self.$props().$discussion_id().$class().$name()))
            } else {
            return nil
          };
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$get_initial_state', TMP_2 = function ːget_initial_state() {
          var $a, $b, self = this, new_message = nil;

          new_message = $scope.get('DiscussionMessage').$new();
          (($a = [self.$props().$discussion_id()]), $b = new_message, $b['$discussion_id='].apply($b, $a), $a[$a.length-1]);
          if ((($a = self.$props().$reply_to()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            (($a = [self.$props().$reply_to()]), $b = new_message, $b['$discussion_message_id='].apply($b, $a), $a[$a.length-1])};
          return $hash2(["discussion_message"], {"discussion_message": new_message});
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$render', TMP_5 = function ːrender() {
          var $a, $b, TMP_3, $c, TMP_4, self = this;

          return self.$t("div", $hash2([], {}), self.$modal(), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('WysiTextarea')), self.$state().$discussion_message(), "content", $hash2(["show_name", "reset_value", "parse_rules", "allow_media_insert"], {"show_name": "leave comment", "reset_value": true, "parse_rules": $scope.get('DiscussionMessage').$wysi_textarea_parse_rules(), "allow_media_insert": true})), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

          return self.$submit()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($b)}), "submit"), (function() {if ((($a = self.$props().$reply_to()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

            return self.$emit("on_cancel_reply")}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($c)}), "cancel")
            } else {
            return nil
          }; return nil; })());
        }, TMP_5.$$arity = 0);

        Opal.defn(self, '$submit', TMP_8 = function ːsubmit() {
          var $a, $b, TMP_6, self = this;

          self.$collect_inputs($hash2(["form_model"], {"form_model": "discussion_message"}));
          return ($a = ($b = self.$state().$discussion_message().$create($hash2(["namespace"], {"namespace": "posts"}))).$then, $a.$$p = (TMP_6 = function(discussion_message){var self = TMP_6.$$s || this, $c, $d, TMP_7;
if (discussion_message == null) discussion_message = nil;
          if ((($c = discussion_message['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              if (discussion_message.$errors()['$[]']("general")['$==']("no_name")) {
                return self.$modal_open(self.$t((((($scope.get('Components')).$$scope.get('Users'))).$$scope.get('Create')), $hash2(["message", "on_signup"], {"message": "to leave comment you should at least leave your nickname", "on_signup": self.$event(($c = ($d = self).$lambda, $c.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

                return self.$after_signup_ok()}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $c).call($d))})))
                } else {
                return self.$set_state($hash2(["discussion_message"], {"discussion_message": discussion_message}))
              }
              } else {
              self.$set_state(self.$get_initial_state());
              self.$clear_inputs();
              $scope.get('CurrentUser').$update_karma((((($scope.get('Services')).$$scope.get('KarmaManager'))).$$scope.get('FOR_COMMENT_CREATION')));
              return self.$emit("on_message_submitted", discussion_message, self.$props().$holding_message());
            }}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($b);
        }, TMP_8.$$arity = 0);

        return (Opal.defn(self, '$after_signup_ok', TMP_9 = function ːafter_signup_ok() {
          var self = this;

          self.$modal_close();
          return self.$submit();
        }, TMP_9.$$arity = 0), nil) && 'after_signup_ok';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/discussions/show"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$post_id', '$props', '$then', '$json', '$parse', '$[]', '$each', '$[]=', '$id', '$sort_by_parent_child', '$discussion_messages', '$set_state', '$fetch_discussion_messages_karma_transactions_for_cu', '$scroll_into_view_if_necessary', '$p', '$show', '$n_prop', '$map', '$discussion_message_karma', '$data', '$attributes=', '$attributes', '$discussion_message_karma_transaction_for_cu_or_new', '$discussion_message_karma_id', '$force_update', '$index_for_cu', '$!=', '$post_id=', '$get_initial_state', '$component_did_mount', '$t', '$progress_bar', '$discussion', '$state', '$!', '$current_reply', '$sorted_messages', '$event', '$lambda', '$on_message_submitted', '$render_children_for_message', '$to_n', '$n_state', '$user_id', '$instance', '$try', '$on_karma_changed', '$content', '$message_controlls', '$==', '$cancel_reply', '$empty?', '$children_messages', '$*', '$amount_change_factor', '$user_karma', '$count=', '$+', '$count', '$set_reply_to', '$new', '$discussion_message_id', '$<<']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Discussions, self = $Discussions = $module($base, 'Discussions');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Show(){};
        var self = $Show = $klass($base, $super, 'Show', $Show);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_4, TMP_5, TMP_9, TMP_10, TMP_12, TMP_17, TMP_19, TMP_21, TMP_22, TMP_23, TMP_26, TMP_27;

        self.$expose();

        Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
          var self = this;

          return $hash2(["discussion", "current_reply"], {"discussion": false, "current_reply": false});
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$component_did_mount', TMP_4 = function ːcomponent_did_mount() {
          var $a, $b, TMP_2, self = this, id_to_fecth = nil;

          id_to_fecth = self.$props().$post_id();
          return ($a = ($b = $scope.get('Discussion').$show($hash2(["wilds", "component", "namespace", "yield_response"], {"wilds": $hash2(["discussable_id"], {"discussable_id": id_to_fecth}), "component": self, "namespace": "posts", "yield_response": true}))).$then, $a.$$p = (TMP_2 = function(response){var self = TMP_2.$$s || this, $c, $d, TMP_3, jsoned_response = nil, discussion = nil, message_authors = nil, cached_authors = nil, sorted_messages = nil, e = nil;
if (response == null) response = nil;
          try {
              jsoned_response = response.$json();
              discussion = $scope.get('Discussion').$parse(jsoned_response['$[]']("discussion"));
              message_authors = $scope.get('User').$parse(jsoned_response['$[]']("message_authors"));
              cached_authors = $hash2([], {});
              ($c = ($d = message_authors).$each, $c.$$p = (TMP_3 = function(author){var self = TMP_3.$$s || this;
if (author == null) author = nil;
              return cached_authors['$[]='](author.$id(), author)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $c).call($d);
              sorted_messages = self.$sort_by_parent_child(discussion.$discussion_messages());
              self.$set_state($hash2(["discussion", "message_authors", "sorted_messages"], {"discussion": discussion, "message_authors": cached_authors, "sorted_messages": sorted_messages}));
              self.$fetch_discussion_messages_karma_transactions_for_cu(discussion.$discussion_messages());
              return self.$scroll_into_view_if_necessary();
            } catch ($err) {
              if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                try {
                  return self.$p(e)
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b);
        }, TMP_4.$$arity = 0);

        Opal.defn(self, '$scroll_into_view_if_necessary', TMP_5 = function ːscroll_into_view_if_necessary() {
          var $a, self = this;

          if ((($a = self.$n_prop("should_scroll_to_comments")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            
            var discussionsBlock = $('.discussions-block')[0];
            if (typeof(discussionsBlock != 'undefined')) {
              discussionsBlock.scrollIntoView();
            }
          
            } else {
            return nil
          };
        }, TMP_5.$$arity = 0);

        Opal.defn(self, '$fetch_discussion_messages_karma_transactions_for_cu', TMP_9 = function ːfetch_discussion_messages_karma_transactions_for_cu(discussion_messages) {
          var $a, $b, TMP_6, $c, TMP_7, self = this, map = nil, discussion_messages_ids = nil, e = nil;

          try {
            if (discussion_messages !== false && discussion_messages !== nil && discussion_messages != null) {
              map = $hash2([], {});
              discussion_messages_ids = ($a = ($b = discussion_messages.$data()).$map, $a.$$p = (TMP_6 = function(dm){var self = TMP_6.$$s || this;
if (dm == null) dm = nil;
              map['$[]='](dm.$discussion_message_karma().$id(), dm.$discussion_message_karma());
                return dm.$discussion_message_karma().$id();}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($b);
              return ($a = ($c = $scope.get('DiscussionMessageKarmaTransaction').$index_for_cu($hash2(["payload"], {"payload": $hash2(["ids"], {"ids": discussion_messages_ids})}))).$then, $a.$$p = (TMP_7 = function(dm_trs){var self = TMP_7.$$s || this, $d, $e, TMP_8;
if (dm_trs == null) dm_trs = nil;
              ($d = ($e = dm_trs.$data()).$each, $d.$$p = (TMP_8 = function(tr){var self = TMP_8.$$s || this, $f, $g;
if (tr == null) tr = nil;
                return (($f = [tr.$attributes()]), $g = map['$[]'](tr.$discussion_message_karma_id()).$discussion_message_karma_transaction_for_cu_or_new(), $g['$attributes='].apply($g, $f), $f[$f.length-1])}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $d).call($e);
                return self.$force_update();}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($c);
              } else {
              return nil
            }
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
              try {
                return self.$p(e)
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };
        }, TMP_9.$$arity = 1);

        Opal.defn(self, '$component_will_receive_props', TMP_10 = function ːcomponent_will_receive_props(np) {
          var $a, $b, self = this;

          if ((($a = np.$post_id()['$!='](self.$props().$post_id())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            (($a = [np.$post_id()]), $b = self.$props(), $b['$post_id='].apply($b, $a), $a[$a.length-1]);
            self.$set_state(self.$get_initial_state());
            return self.$component_did_mount();
            } else {
            return nil
          };
        }, TMP_10.$$arity = 1);

        Opal.defn(self, '$render', TMP_12 = function ːrender() {
          var $a, $b, TMP_11, self = this;

          return self.$t("div", $hash2(["className"], {"className": "discussions-show"}), self.$progress_bar(), (function() {if ((($a = self.$state().$discussion()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return [(function() {if ((($a = self.$state().$current_reply()['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t((((($scope.get('Components')).$$scope.get('DiscussionMessages'))).$$scope.get('New')), $hash2(["discussion_id", "holding_message", "on_message_submitted"], {"discussion_id": self.$state().$discussion().$id(), "holding_message": self.$state().$sorted_messages(), "on_message_submitted": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_11 = function(msg, holding_message){var self = TMP_11.$$s || this;
if (msg == null) msg = nil;if (holding_message == null) holding_message = nil;
              return self.$on_message_submitted(msg, holding_message)}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11), $a).call($b))}))
              } else {
              return nil
            }; return nil; })(), self.$render_children_for_message(self.$state().$sorted_messages(), 0)]
            } else {
            return nil
          }; return nil; })());
        }, TMP_12.$$arity = 0);

        Opal.defn(self, '$render_children_for_message', TMP_17 = function ːrender_children_for_message(message_collection, child_level) {
          var $a, $b, TMP_13, self = this;

          return ($a = ($b = message_collection.$children_messages()).$map, $a.$$p = (TMP_13 = function(message){var self = TMP_13.$$s || this, $c, $d, TMP_14, $e, TMP_15, $f, TMP_16, user = nil;
if (message == null) message = nil;
          return self.$t("div", $hash2(["className", "style"], {"className": "discussion-message", "style": $hash2(["margin-left"], {"margin-left": "" + (child_level) + "rem"}).$to_n()}), self.$t("div", $hash2(["className"], {"className": "head"}), self.$t("div", $hash2([], {}), (function() {if ((($c = user = self.$n_state("message_authors")['$[]'](message.$user_id())) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return self.$t((((((($scope.get('Components')).$$scope.get('Users'))).$$scope.get('Partials'))).$$scope.get('AuthorLabel')), $hash2(["user", "show_only_name"], {"user": user, "show_only_name": true}))
              } else {
              return self.$t((((((($scope.get('Components')).$$scope.get('Users'))).$$scope.get('Partials'))).$$scope.get('AuthorLabel')), $hash2(["user"], {"user": $scope.get('CurrentUser').$instance()}))
            }; return nil; })()), self.$t("div", $hash2([], {}), (function() {if ((($c = message.$try("discussion_message_karma")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return self.$t((((($scope.get('Components')).$$scope.get('DiscussionMessageKarmas'))).$$scope.get('Show')), $hash2(["discussion_message_karma", "on_karma_changed"], {"discussion_message_karma": message.$discussion_message_karma(), "on_karma_changed": self.$event(($c = ($d = self).$lambda, $c.$$p = (TMP_14 = function(dmkt){var self = TMP_14.$$s || this;
if (dmkt == null) dmkt = nil;
              return self.$on_karma_changed(dmkt, self.$n_state("message_authors")['$[]'](message.$user_id()).$try("id"))}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $c).call($d))}))
              } else {
              return nil
            }; return nil; })())), self.$t("div", $hash2(["className"], {"className": "message-body"}), self.$t("div", $hash2(["className", "dangerouslySetInnerHTML"], {"className": "text", "dangerouslySetInnerHTML": $hash2(["__html"], {"__html": message.$content()}).$to_n()})), self.$t("div", $hash2([], {}), self.$message_controlls(message))), (function() {if (self.$state().$current_reply()['$=='](message.$id())) {
              return self.$t((((($scope.get('Components')).$$scope.get('DiscussionMessages'))).$$scope.get('New')), $hash2(["discussion_id", "reply_to", "on_cancel_reply", "holding_message", "on_message_submitted"], {"discussion_id": self.$state().$discussion().$id(), "reply_to": message.$id(), "on_cancel_reply": self.$event(($c = ($e = self).$lambda, $c.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this;

              return self.$cancel_reply()}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15), $c).call($e)), "holding_message": message, "on_message_submitted": self.$event(($c = ($f = self).$lambda, $c.$$p = (TMP_16 = function(msg, holding_message){var self = TMP_16.$$s || this;
if (msg == null) msg = nil;if (holding_message == null) holding_message = nil;
              return self.$on_message_submitted(msg, holding_message)}, TMP_16.$$s = self, TMP_16.$$arity = 2, TMP_16), $c).call($f))}))
              } else {
              return nil
            }; return nil; })(), (function() {if ((($c = message.$children_messages()['$empty?']()['$!']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return self.$render_children_for_message(message, 2)
              } else {
              return nil
            }; return nil; })())}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13), $a).call($b);
        }, TMP_17.$$arity = 2);

        Opal.defn(self, '$on_karma_changed', TMP_19 = function ːon_karma_changed(dmkt, user_id) {
          var $a, $b, TMP_18, self = this, amount_to_increment_on = nil;

          amount_to_increment_on = $rb_times(dmkt.$amount_change_factor(), (((($scope.get('Services')).$$scope.get('KarmaManager'))).$$scope.get('USERS_COMMENT_UP_OR_DOWN_VOTED')));
          ($a = ($b = self.$n_state("message_authors")).$each, $a.$$p = (TMP_18 = function(key, user){var self = TMP_18.$$s || this, $c;
if (key == null) key = nil;if (user == null) user = nil;
          if (user.$id()['$=='](user_id)) {
              return ($c = user.$user_karma(), $c['$count=']($rb_plus($c.$count(), amount_to_increment_on)))
              } else {
              return nil
            }}, TMP_18.$$s = self, TMP_18.$$arity = 2, TMP_18), $a).call($b);
          return self.$force_update();
        }, TMP_19.$$arity = 2);

        Opal.defn(self, '$message_controlls', TMP_21 = function ːmessage_controlls(message) {
          var $a, $b, TMP_20, self = this;

          return self.$t("div", $hash2(["className"], {"className": "message-controlls"}), self.$t("span", $hash2(["onClick"], {"onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_20 = function(){var self = TMP_20.$$s || this;

          return self.$set_reply_to(message.$id())}, TMP_20.$$s = self, TMP_20.$$arity = 0, TMP_20), $a).call($b)}), self.$t("i", $hash2(["className"], {"className": "icon-comment-empty"})), "reply"));
        }, TMP_21.$$arity = 1);

        Opal.defn(self, '$cancel_reply', TMP_22 = function ːcancel_reply() {
          var self = this;

          return self.$set_state($hash2(["current_reply"], {"current_reply": false}));
        }, TMP_22.$$arity = 0);

        Opal.defn(self, '$set_reply_to', TMP_23 = function ːset_reply_to(message_id) {
          var self = this;

          return self.$set_state($hash2(["current_reply"], {"current_reply": message_id}));
        }, TMP_23.$$arity = 1);

        Opal.defn(self, '$sort_by_parent_child', TMP_26 = function ːsort_by_parent_child(array) {
          var $a, $b, TMP_24, $c, TMP_25, self = this, target_hash = nil;

          target_hash = ($a = ($b = $scope.get('Hash')).$new, $a.$$p = (TMP_24 = function(h, k){var self = TMP_24.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
          return h['$[]='](k, $hash2(["id", "message"], {"id": nil, "message": $scope.get('DiscussionMessage').$new()}))}, TMP_24.$$s = self, TMP_24.$$arity = 2, TMP_24), $a).call($b);
          ($a = ($c = array).$each, $a.$$p = (TMP_25 = function(message){var self = TMP_25.$$s || this, $d, $e, x = nil, id = nil, parent_id = nil;
if (message == null) message = nil;
          $d = [message.$id(), ((function() {if ((($e = ((x = message.$discussion_message_id()))['$!']()['$!']()) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
              return x
              } else {
              return 0
            }; return nil; })())], id = $d[0], parent_id = $d[1], $d;
            target_hash['$[]'](id)['$[]=']("id", message.$id());
            target_hash['$[]'](id)['$[]=']("message", message);
            return target_hash['$[]'](parent_id)['$[]']("message").$children_messages()['$<<'](target_hash['$[]'](id)['$[]']("message"));}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25), $a).call($c);
          return target_hash['$[]'](0)['$[]']("message");
        }, TMP_26.$$arity = 1);

        return (Opal.defn(self, '$on_message_submitted', TMP_27 = function ːon_message_submitted(message, holding_message) {
          var self = this, e = nil;

          try {
            holding_message.$children_messages()['$<<'](message);
            self.$state().$discussion().$discussion_messages()['$<<'](message);
            return self.$set_state($hash2(["current_reply", "sorted_messages"], {"current_reply": false, "sorted_messages": self.$state().$sorted_messages()}));
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
              try {
                return self.$p(e)
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };
        }, TMP_27.$$arity = 2), nil) && 'on_message_submitted';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/forms/file_input"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$==', '$reset_value', '$props', '$value=', '$ref', '$[]', '$errors', '$model', '$attr', '$t', '$show_name', '$map', '$uploaded', '$state', '$name', '$attributes', '$lambda', '$cancel_upload', '$valid_or_not?', '$keyed', '$handle_change', '$children', '$files', '$[]=', '$puts', '$set_state', '$clear_inputs']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Forms, self = $Forms = $module($base, 'Forms');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $FileInput(){};
        var self = $FileInput = $klass($base, $super, 'FileInput', $FileInput);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10;

        self.$expose();

        Opal.defn(self, '$__component_will_update__', TMP_1 = function ː__component_will_update__() {
          var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

          TMP_1.$$p = null;
          $zuper = [];
          
          for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
            $zuper[$zuper_index] = arguments[$zuper_index];
          }
          if (self.$props().$reset_value()['$=='](true)) {
            (($a = [""]), $b = self.$ref("" + (self)), $b['$value='].apply($b, $a), $a[$a.length-1])};
          return ($a = ($b = self, Opal.find_super_dispatcher(self, '__component_will_update__', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$valid_or_not?', TMP_2 = function() {
          var $a, self = this;

          if ((($a = self.$props().$model().$errors()['$[]'](self.$props().$attr())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "invalid"
            } else {
            return "valid"
          };
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$render', TMP_6 = function ːrender() {
          var $a, $b, TMP_3, $c, TMP_4, $d, TMP_5, self = this, errors = nil;

          return self.$t("div", $hash2([], {}), self.$t("p", $hash2([], {}), "" + (self.$props().$show_name())), (function() {if ((($a = errors = self.$props().$model().$errors()['$[]'](self.$props().$attr())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = errors).$map, $a.$$p = (TMP_3 = function(er){var self = TMP_3.$$s || this;
if (er == null) er = nil;
            return self.$t("div", $hash2([], {}), self.$t("p", $hash2([], {}), er))}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b)
            } else {
            return nil
          }; return nil; })(), (function() {if ((($a = self.$state().$uploaded()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("div", $hash2([], {}), self.$t("p", $hash2([], {}), "selected file: " + (self.$props().$model().$attributes()['$[]'](self.$props().$attr()).$name())), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

            return self.$cancel_upload()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($c)}), "cancel"))
            } else {
            return nil
          }; return nil; })(), self.$t("div", $hash2([], {}), self.$t("label", $hash2([], {}), (function() {if ((($a = self.$state().$uploaded()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("button", $hash2([], {}), "select another")
            } else {
            return self.$t("button", $hash2([], {}), "upload file")
          }; return nil; })(), self.$t("input", $hash2(["className", "ref", "type", "key", "onChange"], {"className": "" + (self['$valid_or_not?']()), "ref": "" + (self), "type": "file", "key": self.$props().$keyed(), "onChange": ($a = ($d = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

          return self.$handle_change()}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($d)})))), self.$children());
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$handle_change', TMP_7 = function ːhandle_change() {
          var $a, self = this, x = nil;

          x = self.$ref("" + (self)).$files()['$[]'](0);
          if (x !== false && x !== nil && x != null) {
            self.$props().$model().$attributes()['$[]='](self.$props().$attr(), ((($a = x) !== false && $a !== nil && $a != null) ? $a : (self.$puts("NO FILE"), "")));
            return self.$set_state($hash2(["uploaded"], {"uploaded": true}));
            } else {
            self.$props().$model().$attributes()['$[]='](self.$props().$attr(), "");
            return self.$set_state($hash2(["uploaded"], {"uploaded": false}));
          };
        }, TMP_7.$$arity = 0);

        Opal.defn(self, '$collect', TMP_8 = function ːcollect() {
          var $a, self = this;

          return self.$props().$model().$attributes()['$[]='](self.$props().$attr(), ((($a = self.$ref("" + (self)).$files()['$[]'](0)) !== false && $a !== nil && $a != null) ? $a : ""));
        }, TMP_8.$$arity = 0);

        Opal.defn(self, '$cancel_upload', TMP_9 = function ːcancel_upload() {
          var self = this;

          self.$clear_inputs();
          self.$props().$model().$attributes()['$[]='](self.$props().$attr(), "");
          return self.$set_state($hash2(["uploaded"], {"uploaded": false}));
        }, TMP_9.$$arity = 0);

        return (Opal.defn(self, '$clear_inputs', TMP_10 = function ːclear_inputs() {
          var $a, $b, self = this;

          return (($a = [""]), $b = self.$ref("" + (self)), $b['$value='].apply($b, $a), $a[$a.length-1]);
        }, TMP_10.$$arity = 0), nil) && 'clear_inputs';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/forms/file_input_img_preview"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$expose', '$attr_accessor', '$==', '$reset_value', '$props', '$value=', '$ref', '$Native', '$[]', '$errors', '$model', '$attr', '$set_state', '$n_prop', '$set_image_input_component', '$files', '$to_n', '$t', '$valid_or_not?', '$counter', '$state', '$map', '$uploaded', '$name', '$attributes', '$lambda', '$cancel_upload', '$keyed', '$handle_change', '$parse_image_by_url', '$image_to_preview', '$call', '$n_ref', '$then', '$data_url_to_blob', '$recue', '$e', '$p', '$create_from_url', '$emit', '$[]=', '$preview_image', '$n_state', '$file', '$clear_inputs']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Forms, self = $Forms = $module($base, 'Forms');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $FileInputImgPreview(){};
        var self = $FileInputImgPreview = $klass($base, $super, 'FileInputImgPreview', $FileInputImgPreview);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_12, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19;

        self.$expose();

        self.$attr_accessor("preserved_file");

        Opal.defn(self, '$__component_will_update__', TMP_1 = function ː__component_will_update__() {
          var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

          TMP_1.$$p = null;
          $zuper = [];
          
          for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
            $zuper[$zuper_index] = arguments[$zuper_index];
          }
          if (self.$props().$reset_value()['$=='](true)) {
            (($a = [""]), $b = self.$ref("" + (self)), $b['$value='].apply($b, $a), $a[$a.length-1])};
          return ($a = ($b = self, Opal.find_super_dispatcher(self, '__component_will_update__', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$component_will_receive_props', TMP_2 = function ːcomponent_will_receive_props(next_props) {
          var $a, self = this, x = nil;

          next_props = self.$Native(next_props);
          if ((($a = x = next_props.$model().$errors()['$[]'](self.$props().$attr())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$set_state($hash2(["errors", "uploaded", "image_to_preview"], {"errors": x, "uploaded": false, "image_to_preview": false}))
            } else {
            return self.$set_state($hash2(["errors"], {"errors": false}))
          };
        }, TMP_2.$$arity = 1);

        Opal.defn(self, '$valid_or_not?', TMP_3 = function() {
          var $a, self = this;

          if ((($a = self.$props().$model().$errors()['$[]'](self.$props().$attr())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "invalid"
            } else {
            return "valid"
          };
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$get_initial_state', TMP_4 = function ːget_initial_state() {
          var $a, self = this;

          if ((($a = self.$n_prop("should_assign_self_to_owner")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$n_prop("owner").$set_image_input_component(self)};
          return $hash2(["counter", "errors", "image_to_preview"], {"counter": 0, "errors": false, "image_to_preview": false});
        }, TMP_4.$$arity = 0);

        Opal.defn(self, '$preview_image', TMP_5 = function ːpreview_image(file) {
          var $a, self = this;

          if (file == null) {
            file = nil;
          }
          ((($a = file) !== false && $a !== nil && $a != null) ? $a : file = self.$ref("" + (self)).$files()['$[]'](0));
          
        var file = file.$to_n();
        var reader  = new FileReader();

        reader.onloadend = function () {
          self.$set_state($hash2(["image_to_preview"], {"image_to_preview": reader.result}));
        }

        if (file) {
          reader.readAsDataURL(file);
        } else {
          self.$set_state($hash2(["image_to_preview"], {"image_to_preview": false}));
        }
        ;
        }, TMP_5.$$arity = -1);

        Opal.defn(self, '$render', TMP_12 = function ːrender() {
          var $a, $b, TMP_6, $c, TMP_7, $d, TMP_8, $e, TMP_9, $f, TMP_10, self = this;

          return self.$t("div", $hash2(["className"], {"className": "" + (self['$valid_or_not?']()) + " file-input-image-preview"}), self.$t("div", $hash2(["key"], {"key": self.$state().$counter()}), (function() {if ((($a = self.$state().$errors()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = self.$state().$errors()).$map, $a.$$p = (TMP_6 = function(er){var self = TMP_6.$$s || this;
if (er == null) er = nil;
            return self.$t("p", $hash2([], {}), "" + (er))}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($b)
            } else {
            return nil
          }; return nil; })()), (function() {if ((($a = self.$state().$uploaded()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("div", $hash2([], {}), self.$t("p", $hash2([], {}), "selected file: " + (self.$props().$model().$attributes()['$[]'](self.$props().$attr()).$name())), self.$t("button", $hash2(["className", "onClick"], {"className": "btn btn-sm btn-danger", "onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

            return self.$cancel_upload()}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($c)}), "cancel"))
            } else {
            return nil
          }; return nil; })(), self.$t("div", $hash2(["className"], {"className": "g-with-bottom-divider"}), self.$t("div", $hash2(["className"], {"className": "label_holder"}), self.$t("form", $hash2(["ref"], {"ref": "form" + (self)}), self.$t("label", $hash2(["className"], {"className": "file_input_container"}), (function() {if ((($a = self.$state().$uploaded()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("button", $hash2(["className"], {"className": "upload_button btn btn-sm btn-dafault"}), "select another")
            } else {
            return self.$t("button", $hash2(["className"], {"className": "upload_button btn btn-sm btn-default"}), "choose image to upload")
          }; return nil; })(), self.$t("input", $hash2(["id", "name", "className", "ref", "type", "key", "onChange"], {"id": "" + (self) + "fileinput", "name": "" + (self) + "fileinput", "className": "" + (self['$valid_or_not?']()) + " fileinput", "ref": "" + (self), "type": "file", "key": self.$props().$keyed(), "onChange": ($a = ($d = self).$lambda, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

          return self.$handle_change()}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($d)}))))), (function() {if ((($a = self.$state().$uploaded()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return [self.$t("p", $hash2(["className"], {"className": "or"}), "or"), self.$t("div", $hash2(["className"], {"className": "input-and-button"}), self.$t("input", $hash2(["placeholder", "ref"], {"placeholder": "paste link to image", "ref": "upload_by_url_input"})), self.$t("button", $hash2(["className", "onClick"], {"className": "btn btn-default", "onClick": ($a = ($e = self).$lambda, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

            return self.$parse_image_by_url()}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($e)}), "ok"))]
          }; return nil; })()), (function() {if ((($a = self.$state().$image_to_preview()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("div", $hash2([], {}), self.$t("p", $hash2([], {}), "this image will be uploaded"), self.$t("div", $hash2(["className"], {"className": "preview-area"}), self.$t("img", $hash2(["src", "alt"], {"src": self.$state().$image_to_preview(), "alt": "preview-image"}))), self.$t("div", $hash2(["className"], {"className": "controll-buttons"}), (function() {if ((($a = self.$n_prop("actions_on_preview_image")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return ($a = ($f = self.$n_prop("actions_on_preview_image")).$map, $a.$$p = (TMP_10 = function(action){var self = TMP_10.$$s || this, $g, $h, TMP_11;
if (action == null) action = nil;
              return self.$t("button", $hash2(["className", "onClick"], {"className": "btn btn-sm btn-primary", "onClick": ($g = ($h = self).$lambda, $g.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

                return action['$[]']("event").$call(self)}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $g).call($h)}), action['$[]']("button_text"))}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10), $a).call($f)
              } else {
              return nil
            }; return nil; })()))
            } else {
            return nil
          }; return nil; })());
        }, TMP_12.$$arity = 0);

        Opal.defn(self, '$parse_image_by_url', TMP_14 = function ːparse_image_by_url() {
          var $a, $b, TMP_13, self = this, image_url = nil;

          image_url = self.$n_ref("upload_by_url_input").value;
          return ($a = ($b = $scope.get('PostImage').$create_from_url($hash2(["extra_params"], {"extra_params": $hash2(["url"], {"url": image_url})}))).$then, $a.$$p = (TMP_13 = function(attributes){var self = TMP_13.$$s || this, url = nil;
if (attributes == null) attributes = nil;
          url = attributes['$[]']("post_size_url");
            
            var image = new Image();
            image.onload = function(){
              var canvas = document.createElement('canvas');
              canvas.width = image.width;
              canvas.height = image.height;
              var ctx = canvas.getContext('2d');
              ctx.drawImage(image, 0,0);
              var dataUrl = canvas.toDataURL();

              var blob = (($scope.get('Services')).$$scope.get('JsHelpers')).$data_url_to_blob(dataUrl)
              var file = new File([blob], "from_url.jpg", {type: 'image/png'})
              self.$handle_change(self.$Native(file))
            }
            image.src = url
          ;
            self.$recue($hash($scope.get('Exception'), self.$e()));
            return self.$p(self.$e());}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13), $a).call($b);
        }, TMP_14.$$arity = 0);

        Opal.defn(self, '$handle_change', TMP_15 = function ːhandle_change(file) {
          var $a, self = this;

          if (file == null) {
            file = nil;
          }
          if ((($a = self.$n_prop("on_file_chosen_by_user")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$emit("on_file_chosen_by_user")};
          ((($a = file) !== false && $a !== nil && $a != null) ? $a : file = self.$ref("" + (self)).$files()['$[]'](0));
          if (file !== false && file !== nil && file != null) {
            self.$props().$model().$attributes()['$[]='](self.$props().$attr(), ((($a = file) !== false && $a !== nil && $a != null) ? $a : ""));
            self.$set_state($hash2(["uploaded"], {"uploaded": true}));
            self.$emit("image_preload_status", true);
            } else {
            self.$props().$model().$attributes()['$[]='](self.$props().$attr(), "");
            self.$set_state($hash2(["uploaded"], {"uploaded": false}));
            self.$emit("image_preload_status", true);
          };
          return self.$preview_image(file);
        }, TMP_15.$$arity = -1);

        Opal.defn(self, '$collect', TMP_16 = function ːcollect() {
          var $a, self = this, file = nil;

          
        //var blobBin = atob(self.$n_state("image_to_preview").split(',')[1]);
        //var array = [];
        //for(var i = 0; i < blobBin.length; i++) {
        //    array.push(blobBin.charCodeAt(i));
        //}
        //blob = new Blob([new Uint8Array(array)], {type: 'image/png'});
        //self.$file() = new File([blob], 'memified.jpg', {type: 'image/png'});
        ;
          file = self.$n_state("image_to_preview");
          self.preserved_file = self.$props().$model().$attributes()['$[]'](self.$props().$attr());
          return self.$props().$model().$attributes()['$[]='](self.$props().$attr(), ((($a = file) !== false && $a !== nil && $a != null) ? $a : ""));
        }, TMP_16.$$arity = 0);

        Opal.defn(self, '$clear_inputs_and_previewed_image', TMP_17 = function ːclear_inputs_and_previewed_image() {
          var self = this;

          self.$clear_inputs();
          return self.$set_state($hash2(["uploaded", "image_to_preview"], {"uploaded": false, "image_to_preview": false}));
        }, TMP_17.$$arity = 0);

        Opal.defn(self, '$cancel_upload', TMP_18 = function ːcancel_upload() {
          var $a, self = this;

          if ((($a = self.$n_prop("on_cancel_upload")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$emit("on_cancel_upload")};
          self.$clear_inputs();
          return self.$props().$model().$attributes()['$[]='](self.$props().$attr(), "");
        }, TMP_18.$$arity = 0);

        return (Opal.defn(self, '$clear_inputs', TMP_19 = function ːclear_inputs() {
          var self = this;

          self.$n_ref("form" + (self)).reset();
          self.$set_state($hash2(["uploaded", "image_to_preview"], {"uploaded": false, "image_to_preview": false}));
          return self.$emit("image_preload_status", false);
        }, TMP_19.$$arity = 0), nil) && 'clear_inputs';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/forms/input"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$==', '$reset_value', '$props', '$value=', '$ref', '$[]', '$errors', '$model', '$attr', '$t', '$n_prop', '$map', '$required_field', '$valid_or_not?', '$type', '$keyed', '$attributes', '$show_name', '$lambda', '$on_change', '$children', '$call', '$collect', '$record_changes', '$[]=', '$value', '$!=']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Forms, self = $Forms = $module($base, 'Forms');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Input(){};
        var self = $Input = $klass($base, $super, 'Input', $Input);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_5, TMP_6, TMP_7, TMP_8;

        self.$expose();

        Opal.defn(self, '$__component_will_update__', TMP_1 = function ː__component_will_update__() {
          var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

          TMP_1.$$p = null;
          $zuper = [];
          
          for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
            $zuper[$zuper_index] = arguments[$zuper_index];
          }
          if (self.$props().$reset_value()['$=='](true)) {
            (($a = [""]), $b = self.$ref("" + (self)), $b['$value='].apply($b, $a), $a[$a.length-1])};
          return ($a = ($b = self, Opal.find_super_dispatcher(self, '__component_will_update__', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$valid_or_not?', TMP_2 = function() {
          var $a, self = this;

          if ((($a = self.$props().$model().$errors()['$[]'](self.$props().$attr())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "invalid"
            } else {
            return "valid"
          };
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$render', TMP_5 = function ːrender() {
          var $a, $b, TMP_3, $c, TMP_4, self = this, errors = nil;

          return self.$t("div", $hash2([], {}), (function() {if ((($a = errors = self.$n_prop("model").$errors()['$[]'](self.$n_prop("attr"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("div", $hash2(["className"], {"className": "error-messages"}), ($a = ($b = errors).$map, $a.$$p = (TMP_3 = function(er){var self = TMP_3.$$s || this;
if (er == null) er = nil;
            return self.$t("p", $hash2([], {}), er)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b))
            } else {
            return nil
          }; return nil; })(), self.$t("div", $hash2(["className"], {"className": "input-with-field-requirement"}), (function() {if ((($a = self.$props().$required_field()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("div", $hash2(["className"], {"className": "forms-requiredField"}), "*", self.$t("sup", $hash2([], {}), "required"))
          } else if ((($a = self.$n_prop("optional_field")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("div", $hash2(["className"], {"className": "forms-optionalField"}), "*", self.$t("sup", $hash2([], {}), "optional"))
            } else {
            return nil
          }; return nil; })(), self.$t("input", $hash2(["className", "ref", "type", "key", "defaultValue", "placeholder", "onChange"], {"className": "" + (self['$valid_or_not?']()), "ref": "" + (self), "type": self.$props().$type(), "key": self.$props().$keyed(), "defaultValue": self.$props().$model().$attributes()['$[]'](self.$props().$attr()), "placeholder": "" + (self.$props().$show_name()), "onChange": ($a = ($c = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

          return self.$on_change()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($c)}))), self.$children());
        }, TMP_5.$$arity = 0);

        Opal.defn(self, '$on_change', TMP_6 = function ːon_change() {
          var $a, self = this;

          if ((($a = self.$n_prop("on_change")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$n_prop("on_change").$call()};
          if ((($a = self.$n_prop("collect_on_change")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$collect()
            } else {
            return nil
          };
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$collect', TMP_7 = function ːcollect() {
          var $a, self = this, current = nil, changed = nil;

          if ((($a = self.$props().$record_changes()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            current = self.$props().$model().$attributes()['$[]'](self.$props().$attr());
            changed = self.$props().$model().$attributes()['$[]='](self.$props().$attr(), self.$ref("" + (self)).$value());
            if ((($a = current['$!='](changed)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$props().$model().$attributes()['$[]=']("_changed", true)
              } else {
              return nil
            };
            } else {
            return self.$props().$model().$attributes()['$[]='](self.$props().$attr(), self.$ref("" + (self)).$value())
          };
        }, TMP_7.$$arity = 0);

        return (Opal.defn(self, '$clear_inputs', TMP_8 = function ːclear_inputs() {
          var $a, $b, self = this;

          return (($a = [""]), $b = self.$ref("" + (self)), $b['$value='].apply($b, $a), $a[$a.length-1]);
        }, TMP_8.$$arity = 0), nil) && 'clear_inputs';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/forms/multiple_select_autocomplete_with_type_input"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$expose', '$prepare_initial_state', '$[]', '$model_registry', '$parsing_model', '$props', '$autocomplete_url', '$new', '$show_attribute', '$selected_passed_as_prop?', '$preselected', '$data=', '$+', '$data', '$t', '$required_field', '$optional_field', '$map', '$mark_for_destruction', '$attributes', '$lambda', '$remove', '$state', '$selected', '$handle_input_change', '$enter_pressed_on_input', '$Native', '$add_typed', '$>', '$length', '$options', '$add', '$value', '$ref', '$<<', '$set_state', '$value=', '$id', '$[]=', '$which', '$==', '$then', '$parse', '$json', '$p', '$get', '$model', '$attr']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Forms, self = $Forms = $module($base, 'Forms');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $MultipleSelectAutocompleWithTypeInput(){};
        var self = $MultipleSelectAutocompleWithTypeInput = $klass($base, $super, 'MultipleSelectAutocompleWithTypeInput', $MultipleSelectAutocompleWithTypeInput);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_17, TMP_18;

        def.selected = nil;
        self.$expose();

        Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
          var self = this;

          self.$prepare_initial_state();
          return $hash2(["parsing_model", "autocomplete_url", "selected", "options", "show_attribute"], {"parsing_model": $scope.get('Model').$model_registry()['$[]'](self.$props().$parsing_model()), "autocomplete_url": self.$props().$autocomplete_url(), "selected": self.selected, "options": $scope.get('ModelCollection').$new(), "show_attribute": self.$props().$show_attribute()});
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$prepare_initial_state', TMP_2 = function ːprepare_initial_state() {
          var self = this;

          return self['$selected_passed_as_prop?']();
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$selected_passed_as_prop?', TMP_3 = function() {
          var $a, self = this;

          if ((($a = self.$props().$preselected()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ($a = (self.selected = $scope.get('ModelCollection').$new()), $a['$data=']($rb_plus($a.$data(), self.$props().$preselected().$data())))
            } else {
            return self.selected = $scope.get('ModelCollection').$new()
          };
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$render', TMP_11 = function ːrender() {
          var $a, $b, TMP_4, $c, TMP_6, $d, TMP_7, $e, TMP_8, $f, TMP_9, self = this;

          return self.$t("div", $hash2(["className"], {"className": "multiple-select"}), self.$t("p", $hash2([], {}), "you can add tags that you think best describe your post", (function() {if ((($a = self.$props().$required_field()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("span", $hash2(["className"], {"className": "forms-requiredField"}), "*", self.$t("sup", $hash2([], {}), "required"))
          } else if ((($a = self.$props().$optional_field()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("span", $hash2(["className"], {"className": "forms-optionalField"}), "*", self.$t("sup", $hash2([], {}), "optional"))
            } else {
            return nil
          }; return nil; })()), self.$t("div", $hash2(["className"], {"className": "selected"}), ($a = ($b = self.$state().$selected()).$map, $a.$$p = (TMP_4 = function(model){var self = TMP_4.$$s || this, $c, $d, TMP_5;
if (model == null) model = nil;
          if ((($c = ($d = self.$props().$mark_for_destruction(), $d !== false && $d !== nil && $d != null ?model.$attributes()['$[]'](self.$props().$mark_for_destruction()) : $d)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return nil;};
            return self.$t("span", $hash2(["className", "onClick"], {"className": "selected-item", "onClick": ($c = ($d = self).$lambda, $c.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

            return self.$remove(model)}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $c).call($d)}), model.$attributes()['$[]'](self.$state().$show_attribute()), " X");}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($b)), self.$t("div", $hash2(["className", "onChange"], {"className": "input-group", "onChange": ($a = ($c = self).$lambda, $a.$$p = (TMP_6 = function(e){var self = TMP_6.$$s || this;
if (e == null) e = nil;
          return self.$handle_input_change(e)}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($c)}), self.$t("input", $hash2(["placeholder", "type", "ref", "onKeyPress"], {"placeholder": "start typing", "type": "text", "ref": "temporary_input", "onKeyPress": ($a = ($d = self).$lambda, $a.$$p = (TMP_7 = function(e){var self = TMP_7.$$s || this;
if (e == null) e = nil;
          return self.$enter_pressed_on_input(self.$Native(e))}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($d)})), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($e = self).$lambda, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

          return self.$add_typed()}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($e)}), "add")), (function() {if ((($a = $rb_gt(self.$state().$options().$data().$length(), 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("div", $hash2(["className"], {"className": "drop-down"}), ($a = ($f = self.$state().$options()).$map, $a.$$p = (TMP_9 = function(model){var self = TMP_9.$$s || this, $g, $h, TMP_10;
if (model == null) model = nil;
            return self.$t("p", $hash2(["onClick"], {"onClick": ($g = ($h = self).$lambda, $g.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

              return self.$add(model)}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $g).call($h)}), model.$attributes()['$[]'](self.$state().$show_attribute()))}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $a).call($f))
            } else {
            return nil
          }; return nil; })());
        }, TMP_11.$$arity = 0);

        Opal.defn(self, '$add_typed', TMP_12 = function ːadd_typed() {
          var $a, $b, self = this, whats_typed = nil, temporary_input = nil, to_add = nil;

          whats_typed = (temporary_input = self.$ref("temporary_input").$value());
          to_add = self.$state().$parsing_model().$new($hash(self.$state().$show_attribute(), whats_typed));
          self.$state().$selected()['$<<'](to_add);
          (($a = [[]]), $b = self.$state().$options(), $b['$data='].apply($b, $a), $a[$a.length-1]);
          self.$set_state($hash2(["selected", "options"], {"selected": self.$state().$selected(), "options": self.$state().$options()}));
          return (($a = [""]), $b = self.$ref("temporary_input"), $b['$value='].apply($b, $a), $a[$a.length-1]);
        }, TMP_12.$$arity = 0);

        Opal.defn(self, '$remove', TMP_13 = function ːremove(model) {
          var $a, $b, self = this;

          if ((($a = ($b = self.$props().$mark_for_destruction(), $b !== false && $b !== nil && $b != null ?model.$id() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            model.$attributes()['$[]='](self.$props().$mark_for_destruction(), true);
            return self.$set_state($hash2(["selected"], {"selected": self.$state().$selected()}));
            } else {
            self.$state().$selected().$remove(model);
            return self.$set_state($hash2(["selected"], {"selected": self.$state().$selected()}));
          };
        }, TMP_13.$$arity = 1);

        Opal.defn(self, '$enter_pressed_on_input', TMP_14 = function ːenter_pressed_on_input(e) {
          var self = this, key = nil;

          key = e.$which();
          if (key['$=='](13)) {
            return self.$add_typed()
            } else {
            return nil
          };
        }, TMP_14.$$arity = 1);

        Opal.defn(self, '$add', TMP_15 = function ːadd(model) {
          var $a, $b, self = this;

          (($a = [""]), $b = self.$ref("temporary_input"), $b['$value='].apply($b, $a), $a[$a.length-1]);
          (($a = [[]]), $b = self.$state().$options(), $b['$data='].apply($b, $a), $a[$a.length-1]);
          self.$state().$selected()['$<<'](model);
          return self.$set_state($hash2(["selected"], {"selected": self.$state().$selected()}));
        }, TMP_15.$$arity = 1);

        Opal.defn(self, '$handle_input_change', TMP_17 = function ːhandle_input_change(e) {
          var $a, $b, TMP_16, self = this, already_typed = nil;

          already_typed = e.target.value;
          (($a = [[]]), $b = self.$state().$options(), $b['$data='].apply($b, $a), $a[$a.length-1]);
          return ($a = ($b = $scope.get('HTTP').$get("/api" + (self.$state().$autocomplete_url()), $hash2(["payload"], {"payload": $hash2(["typed"], {"typed": already_typed})}))).$then, $a.$$p = (TMP_16 = function(response){var self = TMP_16.$$s || this, $c, _options = nil;
if (response == null) response = nil;
          try {
              _options = self.$state().$parsing_model().$parse(response.$json());
              ($c = self.$state().$options(), $c['$data=']($rb_plus($c.$data(), _options.$data())));
              return self.$set_state($hash2(["options"], {"options": self.$state().$options()}));
            } catch ($err) {
              if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                try {
                  return self.$p(e)
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $a).call($b);
        }, TMP_17.$$arity = 1);

        return (Opal.defn(self, '$collect', TMP_18 = function ːcollect() {
          var self = this;

          return self.$props().$model().$attributes()['$[]='](self.$props().$attr(), self.$state().$selected());
        }, TMP_18.$$arity = 0), nil) && 'collect';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/forms/plain_check_box"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$t', '$[]', '$errors', '$model', '$props', '$checked', '$check_value', '$state', '$[]=', '$attr', '$map', '$merge', '$keyed', '$lambda', '$check', '$options', '$show_name', '$children', '$set_state', '$!', '$to_call_on_change', '$emit', '$attributes', '$value=', '$ref']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Forms, self = $Forms = $module($base, 'Forms');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $PlainCheckbox(){};
        var self = $PlainCheckbox = $klass($base, $super, 'PlainCheckbox', $PlainCheckbox);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_7, TMP_8, TMP_9, TMP_10;

        self.$expose();

        Opal.defn(self, '$render', TMP_1 = function ːrender() {
          var self = this;

          return self.$t("div", $hash2([], {}));
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$valid_or_not?', TMP_2 = function() {
          var $a, self = this;

          if ((($a = self.$props().$model().$errors()['$[]']("attr")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "invalid"
            } else {
            return "valid"
          };
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$get_initial_state', TMP_3 = function ːget_initial_state() {
          var $a, self = this;

          return $hash2(["checked", "check_value"], {"checked": self.$props().$checked(), "check_value": (function() {if ((($a = self.$props().$check_value()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$props().$check_value()
            } else {
            return "1"
          }; return nil; })()});
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$options', TMP_4 = function ːoptions() {
          var $a, self = this, opts = nil;

          opts = $hash2([], {});
          if ((($a = self.$state().$checked()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            opts['$[]=']("checked", "checked")
            } else {
            nil
          };
          return opts;
        }, TMP_4.$$arity = 0);

        Opal.defn(self, '$render', TMP_7 = function ːrender() {
          var $a, $b, TMP_5, $c, $d, $e, TMP_6, self = this;

          return self.$t("div", $hash2([], {}), (function() {if ((($a = self.$props().$model().$errors()['$[]'](self.$props().$attr())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = (($c = self.$props().$attr(), $d = self.$props().$model().$errors(), ((($e = $d['$[]']($c)) !== false && $e !== nil && $e != null) ? $e : $d['$[]=']($c, []))))).$map, $a.$$p = (TMP_5 = function(er){var self = TMP_5.$$s || this;
if (er == null) er = nil;
            return self.$t("div", $hash2(["className"], {"className": "errors"}), self.$t("p", $hash2([], {}), er), self.$t("br", $hash2([], {})))}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($b)
            } else {
            return nil
          }; return nil; })(), self.$t("input", $hash2(["type", "key", "onChange"], {"type": "checkbox", "key": self.$props().$keyed(), "onChange": ($a = ($c = self).$lambda, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

          return self.$check()}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($c)}).$merge(self.$options())), self.$t("p", $hash2(["className"], {"className": "show_name"}), "" + (self.$props().$show_name())), self.$children());
        }, TMP_7.$$arity = 0);

        Opal.defn(self, '$check', TMP_8 = function ːcheck() {
          var $a, self = this;

          self.$set_state($hash2(["checked"], {"checked": self.$state().$checked()['$!']()}));
          if ((($a = self.$props().$to_call_on_change()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$emit("to_call_on_change")
            } else {
            return nil
          };
        }, TMP_8.$$arity = 0);

        Opal.defn(self, '$collect', TMP_9 = function ːcollect() {
          var $a, self = this;

          return self.$props().$model().$attributes()['$[]='](self.$props().$attr(), (function() {if ((($a = self.$state().$checked()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$state().$check_value()
            } else {
            return ""
          }; return nil; })());
        }, TMP_9.$$arity = 0);

        return (Opal.defn(self, '$clear_inputs', TMP_10 = function ːclear_inputs() {
          var $a, $b, self = this;

          return (($a = [""]), $b = self.$ref("" + (self)), $b['$value='].apply($b, $a), $a[$a.length-1]);
        }, TMP_10.$$arity = 0), nil) && 'clear_inputs';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/forms/plain_single_select"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$prepare_initial_state', '$select_options', '$props', '$preselected_option', '$delete', '$t', '$open', '$state', '$show_name', '$attr', '$lambda', '$toggle_dropdown', '$[]', '$selected', '$deselect', '$show_value', '$map', '$to_n', '$select', '$options', '$set_state', '$!', '$delete_at', '$<<', '$[]=', '$attributes', '$model', '$select_value']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Forms, self = $Forms = $module($base, 'Forms');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $PlainSingleSelect(){};
        var self = $PlainSingleSelect = $klass($base, $super, 'PlainSingleSelect', $PlainSingleSelect);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11;

        self.$expose();

        Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
          var self = this;

          return self.$prepare_initial_state();
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$prepare_initial_state', TMP_2 = function ːprepare_initial_state() {
          var $a, self = this, options = nil, preselected_option = nil;

          options = self.$props().$select_options();
          preselected_option = ((($a = self.$props().$preselected_option()) !== false && $a !== nil && $a != null) ? $a : false);
          if (preselected_option !== false && preselected_option !== nil && preselected_option != null) {
            options.$delete(preselected_option)};
          return $hash2(["open", "options", "selected"], {"open": false, "options": options, "selected": [preselected_option]});
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$render', TMP_7 = function ːrender() {
          var $a, $b, TMP_3, $c, TMP_4, $d, TMP_5, self = this;

          return self.$t("div", $hash2(["className"], {"className": "dropdown " + ((function() {if ((($a = self.$state().$open()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "open"
            } else {
            return ""
          }; return nil; })())}), self.$t("p", $hash2([], {}), "" + ((((($a = self.$props().$show_name()) !== false && $a !== nil && $a != null) ? $a : self.$props().$attr())))), self.$t("div", $hash2(["className"], {"className": "input-group"}), self.$t("div", $hash2(["className"], {"className": "input-group-btn"}), self.$t("button", $hash2(["role", "aria-haspopup", "aria-expanded", "className", "onClick"], {"role": "button", "aria-haspopup": "true", "aria-expanded": "" + ((function() {if ((($a = self.$state().$open()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "true"
            } else {
            return "false"
          }; return nil; })()), "className": "btn btn-default", "onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

          return self.$toggle_dropdown()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($b)}), self.$t("span", $hash2(["className"], {"className": "caret"})))), self.$t("div", $hash2(["className"], {"className": "form-control"}), (function() {if ((($a = self.$state().$selected()['$[]'](0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("p", $hash2(["onClick"], {"onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

            return self.$deselect()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($c)}), self.$state().$selected()['$[]'](0).$show_value())
            } else {
            return nil
          }; return nil; })())), self.$t("ul", $hash2(["className"], {"className": "dropdown-menu"}), ($a = ($d = self.$state().$options()).$map, $a.$$p = (TMP_5 = function(option){var self = TMP_5.$$s || this, $e, $f, TMP_6;
if (option == null) option = nil;
          return self.$t("li", $hash2(["style", "onClick"], {"style": $hash2(["cursor"], {"cursor": "pointer"}).$to_n(), "onClick": ($e = ($f = self).$lambda, $e.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

            return self.$select(option)}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $e).call($f)}), " ", option.$show_value())}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($d)));
        }, TMP_7.$$arity = 0);

        Opal.defn(self, '$toggle_dropdown', TMP_8 = function ːtoggle_dropdown() {
          var self = this;

          return self.$set_state($hash2(["open"], {"open": self.$state().$open()['$!']()}));
        }, TMP_8.$$arity = 0);

        Opal.defn(self, '$deselect', TMP_9 = function ːdeselect() {
          var self = this, to_deselect = nil, options = nil;

          to_deselect = self.$state().$selected().$delete_at(0);
          options = self.$state().$options();
          options['$<<'](to_deselect);
          return self.$set_state($hash2(["options", "selected"], {"options": options, "selected": []}));
        }, TMP_9.$$arity = 0);

        Opal.defn(self, '$select', TMP_10 = function ːselect(option) {
          var self = this, options = nil, previously_selected = nil, selected = nil;

          options = self.$state().$options();
          previously_selected = self.$state().$selected().$delete_at(0);
          selected = options.$delete(option);
          if (previously_selected !== false && previously_selected !== nil && previously_selected != null) {
            options['$<<'](previously_selected)};
          return self.$set_state($hash2(["options", "selected"], {"options": options, "selected": [selected]}));
        }, TMP_10.$$arity = 1);

        return (Opal.defn(self, '$collect', TMP_11 = function ːcollect() {
          var self = this;

          return self.$props().$model().$attributes()['$[]='](self.$props().$attr(), self.$state().$selected()['$[]'](0).$select_value());
        }, TMP_11.$$arity = 0), nil) && 'collect';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/forms/range_input"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$[]', '$errors', '$n_prop', '$t', '$display_errors_if_any', '$valid?', '$attributes', '$lambda', '$on_change', '$map', '$call', '$collect', '$p', '$value', '$ref', '$record_changes', '$props', '$model', '$attr', '$[]=', '$!=', '$value=']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Forms, self = $Forms = $module($base, 'Forms');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $RangeInput(){};
        var self = $RangeInput = $klass($base, $super, 'RangeInput', $RangeInput);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3, TMP_5, TMP_6, TMP_7, TMP_8;

        self.$expose();

        Opal.defn(self, '$valid?', TMP_1 = function() {
          var $a, self = this;

          if ((($a = self.$n_prop("model").$errors()['$[]'](self.$n_prop("attr"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "invalid"
            } else {
            return "valid"
          };
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$render', TMP_3 = function ːrender() {
          var $a, $b, TMP_2, self = this;

          return self.$t("div", $hash2(["className"], {"className": "Forms-RangeInput"}), self.$display_errors_if_any(), self.$t("div", $hash2(["className"], {"className": "input-with-field-requirement"}), self.$t("input", $hash2(["className", "type", "defaultValue", "placeholder", "onChange", "min", "max", "ref"], {"className": "" + (self['$valid?']()), "type": "range", "defaultValue": "" + (self.$n_prop("model").$attributes()['$[]'](self.$n_prop("attr"))), "placeholder": self.$n_prop("show_name"), "onChange": ($a = ($b = self).$lambda, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

          return self.$on_change()}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($b), "min": self.$n_prop("min"), "max": self.$n_prop("max"), "ref": "" + (self)}))));
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$display_errors_if_any', TMP_5 = function ːdisplay_errors_if_any() {
          var $a, $b, TMP_4, self = this, errors = nil;

          if ((($a = errors = self.$n_prop("model").$errors()['$[]'](self.$n_prop("attr"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("div", $hash2(["className"], {"className": "error-messages"}), ($a = ($b = errors).$map, $a.$$p = (TMP_4 = function(er){var self = TMP_4.$$s || this;
if (er == null) er = nil;
            return self.$t("p", $hash2([], {}), er)}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($b))
            } else {
            return nil
          };
        }, TMP_5.$$arity = 0);

        Opal.defn(self, '$on_change', TMP_6 = function ːon_change() {
          var $a, self = this, on_change_event = nil;

          if ((($a = on_change_event = self.$n_prop("on_change")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            on_change_event.$call()};
          if ((($a = self.$n_prop("collect_on_change")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$collect()
            } else {
            return nil
          };
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$collect', TMP_7 = function ːcollect() {
          var $a, self = this, current = nil, changed = nil;

          self.$p("collecting: " + (self.$ref("" + (self)).$value()));
          if ((($a = self.$props().$record_changes()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            current = self.$props().$model().$attributes()['$[]'](self.$props().$attr());
            changed = self.$props().$model().$attributes()['$[]='](self.$props().$attr(), self.$ref("" + (self)).$value());
            if ((($a = current['$!='](changed)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$props().$model().$attributes()['$[]=']("_changed", true)
              } else {
              return nil
            };
            } else {
            return self.$props().$model().$attributes()['$[]='](self.$props().$attr(), self.$ref("" + (self)).$value())
          };
        }, TMP_7.$$arity = 0);

        return (Opal.defn(self, '$clear_inputs', TMP_8 = function ːclear_inputs() {
          var $a, $b, self = this;

          return (($a = [nil]), $b = self.$ref("" + (self)), $b['$value='].apply($b, $a), $a[$a.length-1]);
        }, TMP_8.$$arity = 0), nil) && 'clear_inputs';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/forms/select_from_labels"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$!', '$option', '$props', '$url_feed', '$puts', '$name', '$class', '$parsing_model', '$show_value', '$new', '$preselected', '$options', '$set_state', '$then', '$parse', '$json', '$state', '$data=', '$+', '$data', '$p', '$get', '$t', '$n_prop', '$required_field', '$optional_field', '$selected', '$map', '$lambda', '$select', '$[]', '$attributes', '$deselect', '$[]=', '$model', '$attr']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Forms, self = $Forms = $module($base, 'Forms');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $SelectFromLabels(){};
        var self = $SelectFromLabels = $klass($base, $super, 'SelectFromLabels', $SelectFromLabels);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4, TMP_8, TMP_9, TMP_10, TMP_11;

        self.$expose();

        Opal.defn(self, '$validate_props', TMP_1 = function ːvalidate_props() {
          var $a, $b, self = this;

          if ((($a = ($b = self.$props().$option()['$!'](), $b !== false && $b !== nil && $b != null ?self.$props().$url_feed()['$!']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$puts("" + (self.$class().$name()) + " expects either options or url_feed")};
          if ((($a = ($b = self.$props().$parsing_model()['$!'](), $b !== false && $b !== nil && $b != null ?self.$props().$url_feed() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$puts("" + (self.$class().$name()) + " expects parsing_model prop when url_feed is given")};
          if ((($a = self.$props().$show_value()['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$puts("" + (self.$class().$name()) + " expects show_name prop")
            } else {
            return nil
          };
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$get_initial_state', TMP_2 = function ːget_initial_state() {
          var self = this;

          return $hash2(["options", "selected"], {"options": $scope.get('ModelCollection').$new(), "selected": self.$props().$preselected()});
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$component_did_mount', TMP_4 = function ːcomponent_did_mount() {
          var $a, $b, TMP_3, self = this;

          if ((($a = self.$props().$options()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$set_state($hash2(["options"], {"options": self.$props().$options()}))};
          if ((($a = self.$props().$url_feed()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = $scope.get('HTTP').$get(self.$props().$url_feed())).$then, $a.$$p = (TMP_3 = function(response){var self = TMP_3.$$s || this, $c, _options = nil, e = nil;
if (response == null) response = nil;
            try {
                _options = self.$props().$parsing_model().$parse(response.$json());
                ($c = self.$state().$options(), $c['$data=']($rb_plus($c.$data(), _options.$data())));
                return self.$set_state($hash2(["options"], {"options": self.$state().$options()}));
              } catch ($err) {
                if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                  try {
                    return self.$p(e)
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              }}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b)
            } else {
            return nil
          };
        }, TMP_4.$$arity = 0);

        Opal.defn(self, '$render', TMP_8 = function ːrender() {
          var $a, $b, TMP_5, $c, TMP_7, self = this;

          return self.$t("div", $hash2(["className"], {"className": "select-from-labels"}), self.$t("p", $hash2(["className"], {"className": "show-name"}), self.$n_prop("show_name"), (function() {if ((($a = self.$props().$required_field()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("span", $hash2(["className"], {"className": "forms-requiredField"}), "*", self.$t("sup", $hash2([], {}), "required"))
          } else if ((($a = self.$props().$optional_field()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("span", $hash2(["className"], {"className": "forms-optionalField"}), "*", self.$t("sup", $hash2([], {}), "optional"))
            } else {
            return nil
          }; return nil; })()), (function() {if ((($a = self.$state().$selected()['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("div", $hash2(["className"], {"className": "select-area"}), ($a = ($b = self.$state().$options()).$map, $a.$$p = (TMP_5 = function(option){var self = TMP_5.$$s || this, $c, $d, TMP_6;
if (option == null) option = nil;
            return self.$t("div", $hash2(["className", "onClick"], {"className": "option", "onClick": ($c = ($d = self).$lambda, $c.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

              return self.$select(option)}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $c).call($d)}), option.$attributes()['$[]'](self.$props().$show_value()))}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($b))
            } else {
            return nil
          }; return nil; })(), (function() {if ((($a = self.$state().$selected()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("div", $hash2(["className"], {"className": "selected option"}), self.$t("span", $hash2([], {}), self.$state().$selected().$attributes()['$[]'](self.$props().$show_value())), self.$t("span", $hash2(["className", "onClick"], {"className": "delete-selected", "onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

            return self.$deselect()}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($c)}), " X"))
            } else {
            return nil
          }; return nil; })());
        }, TMP_8.$$arity = 0);

        Opal.defn(self, '$select', TMP_9 = function ːselect(option) {
          var self = this;

          return self.$set_state($hash2(["selected"], {"selected": option}));
        }, TMP_9.$$arity = 1);

        Opal.defn(self, '$deselect', TMP_10 = function ːdeselect() {
          var self = this;

          return self.$set_state($hash2(["selected"], {"selected": nil}));
        }, TMP_10.$$arity = 0);

        return (Opal.defn(self, '$collect', TMP_11 = function ːcollect() {
          var self = this;

          return self.$props().$model().$attributes()['$[]='](self.$props().$attr(), self.$state().$selected());
        }, TMP_11.$$arity = 0), nil) && 'collect';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/forms/services/select_option"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$attr_accessor']);
  return (function($base, $super) {
    function $SelectOption(){};
    var self = $SelectOption = $klass($base, $super, 'SelectOption', $SelectOption);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    self.$attr_accessor("select_value", "show_value");

    return (Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(select_value, show_value) {
      var self = this;

      if (show_value == null) {
        show_value = false;
      }
      self.select_value = select_value;
      return self.show_value = (function() {if (show_value !== false && show_value !== nil && show_value != null) {
        return show_value
        } else {
        return select_value
      }; return nil; })();
    }, TMP_1.$$arity = -2), nil) && 'initialize';
  })($scope.base, null)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/forms/wysi_textarea"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$[]', '$errors', '$model', '$props', '$attr', '$t', '$modal', '$show_name', '$map', '$unique_name', '$to_n', '$n_prop', '$lambda', '$init_image_insertion', '$attributes', '$handle_blur', '$destroy', '$Native', '$collect', '$call', '$book_mark_not_set?', '$alert', '$modal_open', '$modal_content_for_image_insert', '$event', '$insert_image_component', '$set_bookmark', '$exec', '$commands', '$composer', '$post_size_url', '$id', '$modal_close', '$getBookmark', '$selection', '$==', '$bookmark', '$setBookmark', '$record_changes', '$[]=', '$getValue', '$!=', '$clear']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Forms, self = $Forms = $module($base, 'Forms');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $WysiTextarea(){};
        var self = $WysiTextarea = $klass($base, $super, 'WysiTextarea', $WysiTextarea);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18;

        def.wysi_editor = def.bookmark = nil;
        self.$expose();

        Opal.defn(self, '$valid_or_not?', TMP_1 = function() {
          var $a, self = this;

          if ((($a = self.$props().$model().$errors()['$[]'](self.$props().$attr())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "invalid"
            } else {
            return "valid"
          };
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$render', TMP_5 = function ːrender() {
          var $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, self = this, x = nil;

          return self.$t("div", $hash2(["className"], {"className": "input-wysi"}), self.$modal(), self.$t("p", $hash2(["className"], {"className": "show-name"}), self.$props().$show_name()), (function() {if ((($a = x = self.$props().$model().$errors()['$[]'](self.$props().$attr())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("div", $hash2(["className"], {"className": "invalid"}), ($a = ($b = x).$map, $a.$$p = (TMP_2 = function(er){var self = TMP_2.$$s || this;
if (er == null) er = nil;
            return self.$t("p", $hash2([], {}), er)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b))
            } else {
            return nil
          }; return nil; })(), self.$t("div", $hash2(["id", "style"], {"id": "wysi_toolbar" + (self.$unique_name()), "style": $hash2(["display"], {"display": "none"}).$to_n()}), (function() {if ((($a = self.$n_prop("allow_media_insert")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("div", $hash2(["className"], {"className": "controll-buttons"}), self.$t("button", $hash2(["className", "onClick"], {"className": "btn btn-primary", "onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

            return self.$init_image_insertion()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($c)}), "insert image"))
            } else {
            return nil
          }; return nil; })()), self.$t("div", $hash2(["id", "dangerouslySetInnerHTML", "onBlur"], {"id": "wysi" + (self.$unique_name()), "dangerouslySetInnerHTML": $hash2(["__html"], {"__html": self.$props().$model().$attributes()['$[]'](self.$props().$attr())}).$to_n(), "onBlur": ($a = ($d = self).$lambda, $a.$$p = (TMP_4 = function(e){var self = TMP_4.$$s || this;
if (e == null) e = nil;
          return self.$handle_blur(e)}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($d)})));
        }, TMP_5.$$arity = 0);

        Opal.defn(self, '$component_will_unmount', TMP_6 = function ːcomponent_will_unmount() {
          var self = this;

          return self.wysi_editor.$destroy();
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$component_did_mount', TMP_7 = function ːcomponent_did_mount() {
          var $a, self = this, parse_rules = nil, wysi_elem = nil, wysi_toolbar_elem = nil;

          parse_rules = (function() {if ((($a = self.$n_prop("parse_rules")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$n_prop("parse_rules")
            } else {
            return wysihtml5ParserRules;
          }; return nil; })();
          wysi_elem = "wysi" + (self.$unique_name());
          wysi_toolbar_elem = "wysi_toolbar" + (self.$unique_name());
          self.wysi_editor = self.$Native(
  				new wysihtml5.Editor(
            wysi_elem,
            {
    				  toolbar: wysi_toolbar_elem,
              parserRules: parse_rules,
              useLineBreaks: false
    				},
            function(){
              console.log("wysiLoaded");
            }
          )
  			);
          
        self.wysi_editor.$to_n().on(
          "load",
          function(){

            if (self.$n_prop("focus_on_load")) {
              self.wysi_editor.$to_n().focus();
            };

            if (self.$n_prop("collect_on_change") || self.$n_prop("on_change")) {
              $(self.wysi_editor.$to_n().editableElement).on(
                "keydown.wysi_event",
                function(){
                  if (self.$n_prop("collect_on_change")) {
                    self.$collect();
                  }
                  if (self.$n_prop("on_change")) {
                    self.$n_prop("on_change").$call()
                  }
                }
              )
            }

          }
        );
        ;
        }, TMP_7.$$arity = 0);

        Opal.defn(self, '$init_image_insertion', TMP_8 = function ːinit_image_insertion() {
          var $a, self = this;

          if ((($a = self['$book_mark_not_set?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$alert("click on textarea where you want to put your image, and then click here");
            return nil;
            } else {
            return self.$modal_open(nil, self.$modal_content_for_image_insert())
          };
        }, TMP_8.$$arity = 0);

        Opal.defn(self, '$modal_head_for_image_insert', TMP_9 = function ːmodal_head_for_image_insert() {
          var self = this;

          return self.$t("p", $hash2([], {}), "upload image and select it");
        }, TMP_9.$$arity = 0);

        Opal.defn(self, '$modal_content_for_image_insert', TMP_11 = function ːmodal_content_for_image_insert() {
          var $a, $b, TMP_10, self = this;

          return self.$t("div", $hash2([], {}), self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('New')), $hash2(["on_image_uploaded"], {"on_image_uploaded": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_10 = function(image){var self = TMP_10.$$s || this;
if (image == null) image = nil;
          return self.$insert_image_component(image)}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10), $a).call($b))})));
        }, TMP_11.$$arity = 0);

        Opal.defn(self, '$insert_image_component', TMP_12 = function ːinsert_image_component(post_image) {
          var self = this;

          self.$set_bookmark();
          self.wysi_editor.$composer().$commands().$exec("insertHTML", "<img src=\"" + (post_image.$post_size_url()) + "\" imageId=\"" + (post_image.$id()) + "\">");
          return self.$modal_close();
        }, TMP_12.$$arity = 1);

        Opal.defn(self, '$bookmark', TMP_13 = function ːbookmark() {
          var self = this;

          return self.bookmark = self.wysi_editor.$composer().$selection().$getBookmark();
        }, TMP_13.$$arity = 0);

        Opal.defn(self, '$book_mark_not_set?', TMP_14 = function() {
          var self = this;

          if (self.$bookmark()['$=='](0)) {
            return true
            } else {
            return nil
          };
        }, TMP_14.$$arity = 0);

        Opal.defn(self, '$set_bookmark', TMP_15 = function ːset_bookmark() {
          var self = this;

          return self.wysi_editor.$composer().$selection().$setBookmark(self.bookmark);
        }, TMP_15.$$arity = 0);

        Opal.defn(self, '$handle_blur', TMP_16 = function ːhandle_blur(e) {
          var self = this;

          return self.$bookmark();
        }, TMP_16.$$arity = 1);

        Opal.defn(self, '$collect', TMP_17 = function ːcollect() {
          var $a, self = this, current = nil, changed = nil;

          if ((($a = self.$props().$record_changes()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            current = self.$props().$model().$attributes()['$[]'](self.$props().$attr());
            changed = self.$props().$model().$attributes()['$[]='](self.$props().$attr(), self.wysi_editor.$getValue());
            if ((($a = current['$!='](changed)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$props().$model().$attributes()['$[]=']("_changed", true)
              } else {
              return nil
            };
            } else {
            return self.$props().$model().$attributes()['$[]='](self.$props().$attr(), self.wysi_editor.$getValue())
          };
        }, TMP_17.$$arity = 0);

        return (Opal.defn(self, '$clear_inputs', TMP_18 = function ːclear_inputs() {
          var self = this;

          return self.wysi_editor.$clear();
        }, TMP_18.$$arity = 0), nil) && 'clear_inputs';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/media_stories/carousel"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$props', '$t', '$lambda', '$move_to_prev_offset', '$map', '$==', '$n_prop', '$emit', '$show_thumb', '$media', '$each_with_index', '$move_to_next_offset', '$===']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $MediaStories, self = $MediaStories = $module($base, 'MediaStories');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Carousel(){};
        var self = $Carousel = $klass($base, $super, 'Carousel', $Carousel);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_7, TMP_8, TMP_9, TMP_10;

        self.$expose();

        Opal.defn(self, '$validate', TMP_1 = function ːvalidate() {
          var self = this;

          return nil;
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$render', TMP_7 = function ːrender() {
          var $a, $b, TMP_2, $c, TMP_3, $d, TMP_5, $e, TMP_6, self = this;

          console.log(self.$props());
          return self.$t("div", $hash2(["className"], {"className": "MediaStories-Carousel"}), self.$t("div", $hash2(["className", "onClick"], {"className": "navigationBtn", "onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

          return self.$move_to_prev_offset()}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($b)}), self.$t("div", $hash2([], {}), "<")), ($a = ($c = self.$n_prop("media_story_nodes").$each_with_index()).$map, $a.$$p = (TMP_3 = function(media_story_node, index){var self = TMP_3.$$s || this, $d, $e, TMP_4, active = nil;
if (media_story_node == null) media_story_node = nil;if (index == null) index = nil;
          active = (function() {if ((($d = (self.$n_prop("node_offset")['$=='](index))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              return "active"
              } else {
              return ""
            }; return nil; })();
            return self.$t("div", $hash2(["className", "onClick", "key"], {"className": "individualThumb " + (active), "onClick": ($d = ($e = self).$lambda, $d.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

            return self.$emit("on_select", index)}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $d).call($e), "key": media_story_node}), self.$show_thumb(media_story_node.$media()));}, TMP_3.$$s = self, TMP_3.$$arity = 2, TMP_3), $a).call($c), (function() {if ((($a = self.$n_prop("show_add_button")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("div", $hash2(["className"], {"className": "individualThumb"}), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($d = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

            return self.$emit("on_add")}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($d)}), "add"))
            } else {
            return nil
          }; return nil; })(), self.$t("div", $hash2(["className", "onClick"], {"className": "navigationBtn", "onClick": ($a = ($e = self).$lambda, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

          return self.$move_to_next_offset()}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($e)}), self.$t("div", $hash2([], {}), ">")));
        }, TMP_7.$$arity = 0);

        Opal.defn(self, '$move_to_prev_offset', TMP_8 = function ːmove_to_prev_offset() {
          var self = this;

          return self.$emit("on_move_to_prev_offset");
        }, TMP_8.$$arity = 0);

        Opal.defn(self, '$move_to_next_offset', TMP_9 = function ːmove_to_next_offset() {
          var self = this;

          return self.$emit("on_move_to_next_offset");
        }, TMP_9.$$arity = 0);

        return (Opal.defn(self, '$show_thumb', TMP_10 = function ːshow_thumb(media) {
          var self = this, $case = nil;

          return (function() {$case = media;if ($scope.get('PostImage')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": media}))}else if ($scope.get('VideoEmbed')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('VideoEmbeds'))).$$scope.get('Show')), $hash2(["video_embed", "no_playback"], {"video_embed": media, "no_playback": true}))}else if ($scope.get('PostGif')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('PostGifs'))).$$scope.get('Show')), $hash2(["post_gif", "no_playback"], {"post_gif": media, "no_playback": true}))}else {return self.$t("p", $hash2([], {}), "text content")}})();
        }, TMP_10.$$arity = 1), nil) && 'show_thumb';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/media_stories/edit"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$n_prop', '$media_story_nodes', '$n_state', '$t', '$modal', '$event', '$lambda', '$on_node_select_to_set_in_view', '$push_new_node_to_media_nodes', '$input', '$set_title_changed', '$save_title_change', '$[]', '$remove_media_story_node', '$set_state', '$collect_inputs', '$then', '$has_errors?', '$update', '$<<', '$new', '$id', '$-', '$length', '$data', '$delete']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $MediaStories, self = $MediaStories = $module($base, 'MediaStories');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Edit(){};
        var self = $Edit = $klass($base, $super, 'Edit', $Edit);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_7, TMP_8, TMP_10, TMP_11, TMP_12, TMP_13;

        self.$expose();

        self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

        Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
          var self = this;

          return $hash2(["media_story", "node_offset", "title_changed"], {"media_story": self.$n_prop("media_story"), "node_offset": 0, "title_changed": false});
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$render', TMP_7 = function ːrender() {
          var $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, $e, TMP_5, $f, TMP_6, self = this, media_story_nodes = nil;

          media_story_nodes = self.$n_state("media_story").$media_story_nodes();
          return self.$t("div", $hash2(["className"], {"className": "MediaStories-Edit"}), self.$modal(), self.$t((((($scope.get('Components')).$$scope.get('MediaStories'))).$$scope.get('Carousel')), $hash2(["media_story_nodes", "node_offset", "on_select", "on_add"], {"media_story_nodes": media_story_nodes, "node_offset": self.$n_state("node_offset"), "on_select": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_2 = function(index){var self = TMP_2.$$s || this;
if (index == null) index = nil;
          return self.$on_node_select_to_set_in_view(index)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b)), "on_add": self.$event(($a = ($c = self).$lambda, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

          return self.$push_new_node_to_media_nodes()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($c))})), self.$t("div", $hash2(["className"], {"className": "titleGroup"}), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('Input')), self.$n_state("media_story"), "title", $hash2(["show_name", "on_change", "namespace"], {"show_name": "title", "on_change": self.$event(($a = ($d = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

          return self.$set_title_changed()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($d)), "namespace": "mSTitle"})), (function() {if ((($a = self.$n_state("title_changed")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($e = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

            return self.$save_title_change()}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($e)}), "update title")
            } else {
            return nil
          }; return nil; })()), self.$t("div", $hash2(["className"], {"className": "mediaShowGroup"}), self.$t((((($scope.get('Components')).$$scope.get('MediaStoryNodes'))).$$scope.get('New')), $hash2(["media_story_node", "edit_mode_flag", "on_remove"], {"media_story_node": self.$n_state("media_story").$media_story_nodes()['$[]'](self.$n_state("node_offset")), "edit_mode_flag": true, "on_remove": self.$event(($a = ($f = self).$lambda, $a.$$p = (TMP_6 = function(media_story_node){var self = TMP_6.$$s || this;
if (media_story_node == null) media_story_node = nil;
          return self.$remove_media_story_node(media_story_node)}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($f))}))));
        }, TMP_7.$$arity = 0);

        Opal.defn(self, '$set_title_changed', TMP_8 = function ːset_title_changed() {
          var self = this;

          return self.$set_state($hash2(["title_changed"], {"title_changed": true}));
        }, TMP_8.$$arity = 0);

        Opal.defn(self, '$save_title_change', TMP_10 = function ːsave_title_change() {
          var $a, $b, TMP_9, self = this;

          self.$collect_inputs($hash2(["namespace"], {"namespace": "mSTitle"}));
          return ($a = ($b = self.$n_state("media_story").$update()).$then, $a.$$p = (TMP_9 = function(media_story){var self = TMP_9.$$s || this, $c;
if (media_story == null) media_story = nil;
          if ((($c = media_story['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return self.$set_state($hash2(["media_story"], {"media_story": self.$n_state("media_story")}))
              } else {
              return self.$set_state($hash2(["media_story", "title_changed"], {"media_story": self.$n_state("media_story"), "title_changed": false}))
            }}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $a).call($b);
        }, TMP_10.$$arity = 0);

        Opal.defn(self, '$on_node_select_to_set_in_view', TMP_11 = function ːon_node_select_to_set_in_view(index) {
          var self = this;

          return self.$set_state($hash2(["node_offset"], {"node_offset": index}));
        }, TMP_11.$$arity = 1);

        Opal.defn(self, '$push_new_node_to_media_nodes', TMP_12 = function ːpush_new_node_to_media_nodes() {
          var self = this;

          self.$n_state("media_story").$media_story_nodes()['$<<']($scope.get('MediaStoryNode').$new($hash2(["media_story_id"], {"media_story_id": self.$n_state("media_story").$id()})));
          return self.$set_state($hash2(["media_story", "node_offset"], {"media_story": self.$n_state("media_story"), "node_offset": $rb_minus(self.$n_state("media_story").$media_story_nodes().$data().$length(), 1)}));
        }, TMP_12.$$arity = 0);

        return (Opal.defn(self, '$remove_media_story_node', TMP_13 = function ːremove_media_story_node(media_story_node) {
          var self = this;

          self.$n_state("media_story").$media_story_nodes().$data().$delete(media_story_node);
          return self.$set_state($hash2(["media_story"], {"media_story": self.$n_state("media_story")}));
        }, TMP_13.$$arity = 1), nil) && 'remove_media_story_node';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/media_stories/new"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$new', '$<<', '$media_story_nodes', '$n_state', '$p', '$errors', '$t', '$modal', '$event', '$lambda', '$on_node_select_to_set_in_view', '$push_new_node_to_media_nodes', '$move_to_next_offset', '$!=', '$[]', '$map', '$input', '$==', '$remove', '$submit', '$cancel', '$+', '$set_state', '$id', '$-', '$length', '$data', '$delete', '$collect_inputs', '$then', '$has_errors?', '$emit', '$create']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $MediaStories, self = $MediaStories = $module($base, 'MediaStories');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $New(){};
        var self = $New = $klass($base, $super, 'New', $New);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_18, TMP_19;

        self.$expose();

        self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

        Opal.defn(self, '$validate', TMP_1 = function ːvalidate() {
          var self = this;

          return nil;
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$get_initial_state', TMP_2 = function ːget_initial_state() {
          var self = this, media_story = nil;

          media_story = $scope.get('MediaStory').$new();
          media_story.$media_story_nodes()['$<<']($scope.get('MediaStoryNode').$new());
          return $hash2(["media_story", "node_offset"], {"media_story": media_story, "node_offset": 0});
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$render', TMP_12 = function ːrender() {
          var $a, $b, TMP_3, $c, TMP_4, $d, TMP_5, $e, TMP_6, $f, TMP_7, $g, TMP_8, $h, TMP_9, $i, TMP_10, $j, TMP_11, self = this, media_story_nodes = nil, ers = nil, ners = nil;

          media_story_nodes = self.$n_state("media_story").$media_story_nodes();
          self.$p(self.$n_state("media_story").$errors());
          return self.$t("div", $hash2(["className"], {"className": "MediaStories-New"}), self.$modal(), self.$t((((($scope.get('Components')).$$scope.get('MediaStories'))).$$scope.get('Carousel')), $hash2(["media_story_nodes", "node_offset", "on_select", "on_add", "show_add_button", "on_move_to_next_offset", "on_move_to_prev_offset"], {"media_story_nodes": media_story_nodes, "node_offset": self.$n_state("node_offset"), "on_select": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_3 = function(index){var self = TMP_3.$$s || this;
if (index == null) index = nil;
          return self.$on_node_select_to_set_in_view(index)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b)), "on_add": self.$event(($a = ($c = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

          return self.$push_new_node_to_media_nodes()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($c)), "show_add_button": true, "on_move_to_next_offset": self.$event(($a = ($d = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

          return self.$move_to_next_offset(1)}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($d)), "on_move_to_prev_offset": self.$event(($a = ($e = self).$lambda, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

          return self.$move_to_next_offset(-1)}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($e))})), (function() {if ((($a = ((($f = ((ers = self.$n_state("media_story").$errors()['$[]']("general")))['$!='](nil)) !== false && $f !== nil && $f != null) ? $f : ((ners = self.$n_state("media_story").$errors()['$[]']("media_story_nodes")))['$!='](nil))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("div", $hash2(["className"], {"className": "invalid"}), (function() {if (ers !== false && ers !== nil && ers != null) {
              return ($a = ($f = ers).$map, $a.$$p = (TMP_7 = function(er){var self = TMP_7.$$s || this;
if (er == null) er = nil;
              return self.$t("p", $hash2([], {}), er)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($f)
              } else {
              return nil
            }; return nil; })(), (function() {if (ners !== false && ners !== nil && ners != null) {
              return ($a = ($g = ners).$map, $a.$$p = (TMP_8 = function(er){var self = TMP_8.$$s || this;
if (er == null) er = nil;
              return self.$t("p", $hash2([], {}), er)}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $a).call($g)
              } else {
              return nil
            }; return nil; })())
            } else {
            return nil
          }; return nil; })(), self.$t("div", $hash2(["className"], {"className": "g-plainTextInput"}), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('Input')), self.$n_state("media_story"), "title", $hash2(["show_name", "required_field"], {"show_name": "title", "required_field": true}))), self.$t((((($scope.get('Components')).$$scope.get('MediaStoryNodes'))).$$scope.get('New')), $hash2(["media_story_node", "can_be_removed", "on_remove"], {"media_story_node": media_story_nodes['$[]'](self.$n_state("node_offset")), "can_be_removed": ((function() {if ((($a = (self.$n_state("node_offset")['$=='](0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return false
            } else {
            return true
          }; return nil; })()), "on_remove": self.$event(($a = ($h = self).$lambda, $a.$$p = (TMP_9 = function(media_story_node){var self = TMP_9.$$s || this;
if (media_story_node == null) media_story_node = nil;
          return self.$remove(media_story_node)}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $a).call($h))})), self.$t("div", $hash2(["className"], {"className": "submitBtnGroup"}), self.$t("button", $hash2(["className", "onClick"], {"className": "submit", "onClick": ($a = ($i = self).$lambda, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

          return self.$submit()}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $a).call($i)}), "submit"), self.$t("button", $hash2(["className", "onClick"], {"className": "submit", "onClick": ($a = ($j = self).$lambda, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

          return self.$cancel()}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $a).call($j)}), "cancel")));
        }, TMP_12.$$arity = 0);

        Opal.defn(self, '$move_to_next_offset', TMP_13 = function ːmove_to_next_offset(value) {
          var $a, self = this, new_offset = nil;

          new_offset = $rb_plus(self.$n_state("node_offset"), value);
          if ((($a = self.$n_state("media_story").$media_story_nodes()['$[]'](new_offset)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$set_state($hash2(["node_offset"], {"node_offset": new_offset}))
            } else {
            return nil
          };
        }, TMP_13.$$arity = 1);

        Opal.defn(self, '$on_node_select_to_set_in_view', TMP_14 = function ːon_node_select_to_set_in_view(index) {
          var self = this;

          return self.$set_state($hash2(["node_offset"], {"node_offset": index}));
        }, TMP_14.$$arity = 1);

        Opal.defn(self, '$push_new_node_to_media_nodes', TMP_15 = function ːpush_new_node_to_media_nodes() {
          var self = this;

          self.$n_state("media_story").$media_story_nodes()['$<<']($scope.get('MediaStoryNode').$new($hash2(["media_story_id"], {"media_story_id": self.$n_state("media_story").$id()})));
          return self.$set_state($hash2(["media_story", "node_offset"], {"media_story": self.$n_state("media_story"), "node_offset": $rb_minus(self.$n_state("media_story").$media_story_nodes().$data().$length(), 1)}));
        }, TMP_15.$$arity = 0);

        Opal.defn(self, '$remove', TMP_16 = function ːremove(media_story_node) {
          var self = this;

          self.$n_state("media_story").$media_story_nodes().$data().$delete(media_story_node);
          return self.$set_state($hash2(["media_story", "node_offset"], {"media_story": self.$n_state("media_story"), "node_offset": ($rb_minus(self.$n_state("node_offset"), 1))}));
        }, TMP_16.$$arity = 1);

        Opal.defn(self, '$submit', TMP_18 = function ːsubmit() {
          var $a, $b, TMP_17, self = this;

          self.$collect_inputs();
          return ($a = ($b = self.$n_state("media_story").$create()).$then, $a.$$p = (TMP_17 = function(media_story){var self = TMP_17.$$s || this, $c, e = nil;
if (media_story == null) media_story = nil;
          try {
              if ((($c = media_story['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return self.$set_state($hash2(["media_story"], {"media_story": media_story}))
                } else {
                self.$p("on_done");
                return self.$emit("on_done", media_story);
              }
            } catch ($err) {
              if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                try {
                  return self.$p(e)
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17), $a).call($b);
        }, TMP_18.$$arity = 0);

        return (Opal.defn(self, '$cancel', TMP_19 = function ːcancel() {
          var self = this;

          return self.$emit("on_cancel");
        }, TMP_19.$$arity = 0), nil) && 'cancel';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/media_stories/show"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$set_state', '$==', '$n_state', '$t', '$title', '$n_prop', '$media_story_nodes', '$event', '$lambda', '$on_node_select_to_set_in_view', '$move_to_prev_offset', '$move_to_next_offset', '$[]', '$length', '$data', '$-', '$+']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $MediaStories, self = $MediaStories = $module($base, 'MediaStories');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Show(){};
        var self = $Show = $klass($base, $super, 'Show', $Show);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_6, TMP_7, TMP_8, TMP_9;

        self.$expose();

        Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
          var self = this;

          return $hash2(["node_offset", "blink"], {"node_offset": 0, "blink": "blink1"});
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$toggle_blink', TMP_2 = function ːtoggle_blink() {
          var self = this;

          return self.$set_state($hash2(["blink"], {"blink": ((function() {if (self.$n_state("blink")['$==']("blink1")) {
            return "blink0"
            } else {
            return "blink1"
          }; return nil; })())}));
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$render', TMP_6 = function ːrender() {
          var $a, $b, TMP_3, $c, TMP_4, $d, TMP_5, self = this;

          return self.$t("div", $hash2(["className"], {"className": "MediaStories-Show"}), self.$t("div", $hash2(["className"], {"className": "title"}), self.$t("h3", $hash2([], {}), self.$n_prop("media_story").$title())), self.$t((((($scope.get('Components')).$$scope.get('MediaStories'))).$$scope.get('Carousel')), $hash2(["media_story_nodes", "node_offset", "on_select", "hide_add_button_flag", "on_move_to_prev_offset", "on_move_to_next_offset"], {"media_story_nodes": self.$n_prop("media_story").$media_story_nodes(), "node_offset": self.$n_state("node_offset"), "on_select": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_3 = function(index){var self = TMP_3.$$s || this;
if (index == null) index = nil;
          return self.$on_node_select_to_set_in_view(index)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b)), "hide_add_button_flag": false, "on_move_to_prev_offset": self.$event(($a = ($c = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

          return self.$move_to_prev_offset()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($c)), "on_move_to_next_offset": self.$event(($a = ($d = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

          return self.$move_to_next_offset()}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($d))})), self.$t((((($scope.get('Components')).$$scope.get('MediaStoryNodes'))).$$scope.get('Show')), $hash2(["media_story_node", "blink"], {"media_story_node": self.$n_prop("media_story").$media_story_nodes()['$[]'](self.$n_state("node_offset")), "blink": self.$n_state("blink")})));
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$move_to_prev_offset', TMP_7 = function ːmove_to_prev_offset() {
          var self = this, node_offset = nil, nodes_length = nil;

          node_offset = self.$n_state("node_offset");
          nodes_length = self.$n_prop("media_story").$media_story_nodes().$data().$length();
          if (node_offset['$=='](0)) {
            return self.$set_state($hash2(["node_offset"], {"node_offset": ($rb_minus(nodes_length, 1))}))
            } else {
            return self.$set_state($hash2(["node_offset"], {"node_offset": $rb_minus(node_offset, 1)}))
          };
        }, TMP_7.$$arity = 0);

        Opal.defn(self, '$move_to_next_offset', TMP_8 = function ːmove_to_next_offset() {
          var self = this, node_offset = nil, nodes_length = nil;

          node_offset = self.$n_state("node_offset");
          nodes_length = self.$n_prop("media_story").$media_story_nodes().$data().$length();
          if (node_offset['$=='](($rb_minus(nodes_length, 1)))) {
            return self.$set_state($hash2(["node_offset"], {"node_offset": 0}))
            } else {
            return self.$set_state($hash2(["node_offset"], {"node_offset": $rb_plus(node_offset, 1)}))
          };
        }, TMP_8.$$arity = 0);

        return (Opal.defn(self, '$on_node_select_to_set_in_view', TMP_9 = function ːon_node_select_to_set_in_view(index) {
          var self = this;

          return self.$set_state($hash2(["node_offset"], {"node_offset": index}));
        }, TMP_9.$$arity = 1), nil) && 'on_node_select_to_set_in_view';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/media_story_nodes/edit"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$n_prop', '$t']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $MediaStoryNodes, self = $MediaStoryNodes = $module($base, 'MediaStoryNodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Edit(){};
        var self = $Edit = $klass($base, $super, 'Edit', $Edit);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

        self.$expose();

        Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
          var self = this;

          return $hash2(["media_story_node"], {"media_story_node": self.$n_prop("media_story_node")});
        }, TMP_1.$$arity = 0);

        return (Opal.defn(self, '$render', TMP_2 = function ːrender() {
          var self = this;

          return self.$t("div", $hash2(["className"], {"className": "MediaStoryNodes Edit"}));
        }, TMP_2.$$arity = 0), nil) && 'render';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/media_story_nodes/new"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$is_a?', '$n_prop', '$p', '$name', '$class', '$t', '$modal', '$[]', '$errors', '$map', '$media', '$lambda', '$clear_media', '$delete_this', '$show_node_depending_on_type', '$input', '$id', '$submit_when_in_editing_mode', '$===', '$add_media_button', '$init_image_addition', '$init_gif_addition', '$init_video_embed_addition', '$modal_open', '$event', '$insert_image', '$media=', '$media_type=', '$modal_close', '$force_update', '$open_modal_for_post_gif_to_edit_its_subtitles', '$open_modal_for_subtitle_insertion_for_gif', '$insert_gif_component', '$new', '$media_id=', '$collect_inputs', '$update_existing_media_story_node', '$create_media_story_node', '$then', '$has_errors?', '$alert', '$update', '$create', '$errors=', '$emit', '$destroy']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $MediaStoryNodes, self = $MediaStoryNodes = $module($base, 'MediaStoryNodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $New(){};
        var self = $New = $klass($base, $super, 'New', $New);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_7, TMP_8, TMP_12, TMP_14, TMP_15, TMP_17, TMP_20, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_28, TMP_30, TMP_32;

        self.$expose();

        self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

        Opal.defn(self, '$validate', TMP_1 = function ːvalidate() {
          var $a, self = this;

          if ((($a = self.$n_prop("media_story_node")['$is_a?']($scope.get('MediaStoryNode'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return self.$p("" + (self.$class().$name()) + " invalid prop :media_story_node - expecting MediaStoryNode instance got <" + (self.$n_prop("media_story_node")) + ">")
          };
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$get_initial_state', TMP_2 = function ːget_initial_state() {
          var self = this;

          return $hash2([], {});
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$render', TMP_7 = function ːrender() {
          var $a, $b, TMP_3, $c, TMP_4, $d, TMP_5, $e, TMP_6, self = this, media_story_node = nil, ers = nil, button_text = nil;

          media_story_node = self.$n_prop("media_story_node");
          return self.$t("div", $hash2(["className"], {"className": "MediaStoryNodes-New"}), self.$modal(), self.$t("div", $hash2(["className"], {"className": "mediaShow"}), (function() {if ((($a = ers = self.$n_prop("media_story_node").$errors()['$[]']("media")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("div", $hash2(["className"], {"className": "invalid"}), ($a = ($b = ers).$map, $a.$$p = (TMP_3 = function(er){var self = TMP_3.$$s || this;
if (er == null) er = nil;
            return self.$t("p", $hash2([], {}), er)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b))
            } else {
            return nil
          }; return nil; })(), self.$t("div", $hash2(["className"], {"className": ""}), (function() {if ((($a = self.$n_prop("media_story_node").$media()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

            return self.$clear_media()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($c)}), "clear")
            } else {
            return nil
          }; return nil; })(), (function() {if ((($a = self.$n_prop("can_be_removed")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("div", $hash2(["className", "onClick"], {"className": "removeBtn", "onClick": ($a = ($d = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

            return self.$delete_this()}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($d)}), self.$t("button", $hash2([], {}), "delete this slide"))
            } else {
            return nil
          }; return nil; })()), self.$show_node_depending_on_type()), self.$t("div", $hash2(["className"], {"className": "annotationInput"}), self.$t("p", $hash2(["className"], {"className": "inputAnnotation"}), "add annotation"), self.$t("div", $hash2(["key"], {"key": self.$n_prop("node_offset")}), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('WysiTextarea')), media_story_node, "annotation", $hash2(["collect_on_change"], {"collect_on_change": true})))), (function() {if ((($a = self.$n_prop("edit_mode_flag")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            button_text = (function() {if ((($a = self.$n_prop("media_story_node").$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return "save changes"
              } else {
              return "create slide"
            }; return nil; })();
            return self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($e = self).$lambda, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

            return self.$submit_when_in_editing_mode()}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($e)}), button_text);
            } else {
            return nil
          }; return nil; })());
        }, TMP_7.$$arity = 0);

        Opal.defn(self, '$show_node_depending_on_type', TMP_8 = function ːshow_node_depending_on_type() {
          var self = this, $case = nil, media = nil;

          return (function() {$case = media = self.$n_prop("media_story_node").$media();if ($scope.get('PostImage')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": media}))}else if ($scope.get('VideoEmbed')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('VideoEmbeds'))).$$scope.get('New')), $hash2(["video_embed", "key"], {"video_embed": media, "key": "" + (media)}))}else if ($scope.get('PostGif')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('PostGifs'))).$$scope.get('Show')), $hash2(["post_gif"], {"post_gif": media}))}else {return self.$add_media_button()}})();
        }, TMP_8.$$arity = 0);

        Opal.defn(self, '$add_media_button', TMP_12 = function ːadd_media_button() {
          var $a, $b, TMP_9, $c, TMP_10, $d, TMP_11, self = this;

          return self.$t("div", $hash2(["className"], {"className": "addNode"}), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

          return self.$init_image_addition()}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($b)}), "add image"), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

          return self.$init_gif_addition()}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $a).call($c)}), "add gif"), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($d = self).$lambda, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

          return self.$init_video_embed_addition()}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $a).call($d)}), "embed video"));
        }, TMP_12.$$arity = 0);

        Opal.defn(self, '$init_image_addition', TMP_14 = function ːinit_image_addition() {
          var $a, $b, TMP_13, self = this;

          return self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('UploadAndPreview')), $hash2(["on_image_selected", "post_images"], {"on_image_selected": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_13 = function(image){var self = TMP_13.$$s || this;
if (image == null) image = nil;
          return self.$insert_image(image)}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13), $a).call($b)), "post_images": []})));
        }, TMP_14.$$arity = 0);

        Opal.defn(self, '$insert_image', TMP_15 = function ːinsert_image(image) {
          var $a, $b, self = this;

          (($a = [image]), $b = self.$n_prop("media_story_node"), $b['$media='].apply($b, $a), $a[$a.length-1]);
          (($a = ["PostImage"]), $b = self.$n_prop("media_story_node"), $b['$media_type='].apply($b, $a), $a[$a.length-1]);
          self.$modal_close();
          return self.$force_update();
        }, TMP_15.$$arity = 1);

        Opal.defn(self, '$init_gif_addition', TMP_17 = function ːinit_gif_addition() {
          var $a, $b, TMP_16, self = this;

          return self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('PostGifs'))).$$scope.get('New')), $hash2(["on_post_gif_uploaded"], {"on_post_gif_uploaded": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_16 = function(post_gif){var self = TMP_16.$$s || this;
if (post_gif == null) post_gif = nil;
          return self.$open_modal_for_post_gif_to_edit_its_subtitles(post_gif)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $a).call($b))})));
        }, TMP_17.$$arity = 0);

        Opal.defn(self, '$open_modal_for_post_gif_to_edit_its_subtitles', TMP_20 = function ːopen_modal_for_post_gif_to_edit_its_subtitles(post_gif) {
          var $a, $b, TMP_18, $c, TMP_19, self = this;

          self.$modal_close();
          return self.$modal_open(nil, self.$t("div", $hash2([], {}), self.$t("p", $hash2([], {}), "Your gif has been uploaded."), self.$t("p", $hash2([], {}), "want to add subtitles, or funny stuff to gif?"), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_18 = function(){var self = TMP_18.$$s || this;

          return self.$open_modal_for_subtitle_insertion_for_gif(post_gif)}, TMP_18.$$s = self, TMP_18.$$arity = 0, TMP_18), $a).call($b)}), "yeah!"), self.$t("button", $hash2(["onClck"], {"onClck": ($a = ($c = self).$lambda, $a.$$p = (TMP_19 = function(){var self = TMP_19.$$s || this;

          return self.$insert_gif_component(post_gif)}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19), $a).call($c)}), "nope")));
        }, TMP_20.$$arity = 1);

        Opal.defn(self, '$open_modal_for_subtitle_insertion_for_gif', TMP_22 = function ːopen_modal_for_subtitle_insertion_for_gif(post_gif) {
          var $a, $b, TMP_21, self = this;

          self.$modal_close();
          return self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('Subtitles'))).$$scope.get('New')), $hash2(["post_gif", "on_completed"], {"post_gif": post_gif, "on_completed": ($a = ($b = self).$lambda, $a.$$p = (TMP_21 = function(post_gif){var self = TMP_21.$$s || this;
if (post_gif == null) post_gif = nil;
          return self.$insert_gif_component(post_gif)}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21), $a).call($b)})));
        }, TMP_22.$$arity = 1);

        Opal.defn(self, '$insert_gif_component', TMP_23 = function ːinsert_gif_component(post_gif) {
          var $a, $b, self = this;

          (($a = [post_gif]), $b = self.$n_prop("media_story_node"), $b['$media='].apply($b, $a), $a[$a.length-1]);
          (($a = ["PostGif"]), $b = self.$n_prop("media_story_node"), $b['$media_type='].apply($b, $a), $a[$a.length-1]);
          return self.$force_update();
        }, TMP_23.$$arity = 1);

        Opal.defn(self, '$init_video_embed_addition', TMP_24 = function ːinit_video_embed_addition() {
          var $a, $b, self = this;

          (($a = [$scope.get('VideoEmbed').$new()]), $b = self.$n_prop("media_story_node"), $b['$media='].apply($b, $a), $a[$a.length-1]);
          (($a = ["VideoEmbed"]), $b = self.$n_prop("media_story_node"), $b['$media_type='].apply($b, $a), $a[$a.length-1]);
          return self.$force_update();
        }, TMP_24.$$arity = 0);

        Opal.defn(self, '$clear_media', TMP_25 = function ːclear_media() {
          var $a, $b, self = this;

          (($a = [nil]), $b = self.$n_prop("media_story_node"), $b['$media='].apply($b, $a), $a[$a.length-1]);
          (($a = [nil]), $b = self.$n_prop("media_story_node"), $b['$media_type='].apply($b, $a), $a[$a.length-1]);
          (($a = [nil]), $b = self.$n_prop("media_story_node"), $b['$media_id='].apply($b, $a), $a[$a.length-1]);
          return self.$force_update();
        }, TMP_25.$$arity = 0);

        Opal.defn(self, '$submit_when_in_editing_mode', TMP_26 = function ːsubmit_when_in_editing_mode() {
          var $a, self = this;

          self.$collect_inputs();
          if ((($a = self.$n_prop("media_story_node").$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$update_existing_media_story_node()
            } else {
            return self.$create_media_story_node()
          };
        }, TMP_26.$$arity = 0);

        Opal.defn(self, '$update_existing_media_story_node', TMP_28 = function ːupdate_existing_media_story_node() {
          var $a, $b, TMP_27, self = this;

          return ($a = ($b = self.$n_prop("media_story_node").$update()).$then, $a.$$p = (TMP_27 = function(media_story_node){var self = TMP_27.$$s || this, $c;
if (media_story_node == null) media_story_node = nil;
          if ((($c = media_story_node['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return self.$force_update()
              } else {
              self.$alert("updated successfully");
              return self.$force_update();
            }}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27), $a).call($b);
        }, TMP_28.$$arity = 0);

        Opal.defn(self, '$create_media_story_node', TMP_30 = function ːcreate_media_story_node() {
          var $a, $b, TMP_29, self = this;

          return ($a = ($b = self.$n_prop("media_story_node").$create()).$then, $a.$$p = (TMP_29 = function(media_story_node){var self = TMP_29.$$s || this, $c;
if (media_story_node == null) media_story_node = nil;
          if ((($c = media_story_node['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return self.$force_update()
              } else {
              self.$alert("created successfully");
              return self.$force_update();
            }}, TMP_29.$$s = self, TMP_29.$$arity = 1, TMP_29), $a).call($b);
        }, TMP_30.$$arity = 0);

        return (Opal.defn(self, '$delete_this', TMP_32 = function ːdelete_this() {
          var $a, $b, TMP_31, self = this;

          if ((($a = self.$n_prop("media_story_node").$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = self.$n_prop("media_story_node").$destroy()).$then, $a.$$p = (TMP_31 = function(media_story_node){var self = TMP_31.$$s || this, $c, $d;
if (media_story_node == null) media_story_node = nil;
            if ((($c = media_story_node['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                (($c = [media_story_node.$errors()]), $d = self.$n_prop("media_story_node"), $d['$errors='].apply($d, $c), $c[$c.length-1]);
                return self.$force_update();
                } else {
                return self.$emit("on_remove", self.$n_prop("media_story_node"))
              }}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31), $a).call($b)
            } else {
            return self.$emit("on_remove", self.$n_prop("media_story_node"))
          };
        }, TMP_32.$$arity = 0), nil) && 'delete_this';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/media_story_nodes/show"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$t', '$n_prop', '$show_node_depending_on_type', '$to_n', '$annotation', '$media', '$===']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $MediaStoryNodes, self = $MediaStoryNodes = $module($base, 'MediaStoryNodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Show(){};
        var self = $Show = $klass($base, $super, 'Show', $Show);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

        self.$expose();

        Opal.defn(self, '$render', TMP_1 = function ːrender() {
          var self = this;

          return self.$t("div", $hash2(["className"], {"className": "MediaStoryNodes-Show " + (self.$n_prop("blink"))}), self.$t("div", $hash2(["className"], {"className": "mediaContent"}), self.$show_node_depending_on_type()), self.$t("div", $hash2(["className", "dangerouslySetInnerHTML"], {"className": "annotation", "dangerouslySetInnerHTML": $hash2(["__html"], {"__html": self.$n_prop("media_story_node").$annotation()}).$to_n()})));
        }, TMP_1.$$arity = 0);

        return (Opal.defn(self, '$show_node_depending_on_type', TMP_2 = function ːshow_node_depending_on_type() {
          var self = this, $case = nil, media = nil;

          return (function() {$case = media = self.$n_prop("media_story_node").$media();if ($scope.get('PostImage')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": media}))}else if ($scope.get('VideoEmbed')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('VideoEmbeds'))).$$scope.get('Show')), $hash2(["video_embed"], {"video_embed": media}))}else if ($scope.get('PostGif')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('PostGifs'))).$$scope.get('Show')), $hash2(["post_gif"], {"post_gif": media}))}else { return nil }})();
        }, TMP_2.$$arity = 0), nil) && 'show_node_depending_on_type';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/menues/top"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $gvars = Opal.gvars;

  Opal.add_stubs(['$expose', '$subscribe', '$force_update', '$mobile_render', '$regular_render', '$t', '$lambda', '$m_toggle_menu', '$m_open', '$state', '$link_to', '$id', '$instance', '$==', '$has_role?', '$!', '$logout', '$set_state', '$collapsed', '$each', '$include?', '$rb', '$refs', '$unsubscribe', '$then', '$pushState']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Menues, self = $Menues = $module($base, 'Menues');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Top(){};
        var self = $Top = $klass($base, $super, 'Top', $Top);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_7, TMP_9, TMP_10, TMP_11, TMP_13, TMP_14, TMP_16;

        self.$expose();

        Opal.defn(self, '$init', TMP_1 = function ːinit() {
          var self = this;

          return $scope.get('CurrentUser').$subscribe("user_logged_in", self);
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$user_logged_in', TMP_2 = function ːuser_logged_in() {
          var self = this;

          return self.$force_update();
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$get_initial_state', TMP_3 = function ːget_initial_state() {
          var self = this;

          return $hash2(["m_open"], {"m_open": false});
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$render', TMP_4 = function ːrender() {
          var $a, self = this;
          if ($gvars.IS_MOBILE == null) $gvars.IS_MOBILE = nil;

          if ((($a = $gvars.IS_MOBILE) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$mobile_render()
            } else {
            return self.$regular_render()
          };
        }, TMP_4.$$arity = 0);

        Opal.defn(self, '$mobile_render', TMP_7 = function ːmobile_render() {
          var $a, $b, TMP_5, $c, TMP_6, self = this;

          return self.$t("div", $hash2(["className"], {"className": "m-menu"}), self.$t("button", $hash2(["type", "onClick"], {"type": "button", "onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

          return self.$m_toggle_menu()}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($b)}), "menu"), self.$t("div", $hash2(["className"], {"className": "m-menu-hidden-part " + (self.$state().$m_open())}), self.$t("button", $hash2(["className", "onClick"], {"className": "g-close-btn btn-xs", "onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

          return self.$m_toggle_menu()}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($c)}), "X"), self.$t("ul", $hash2([], {}), self.$link_to(self.$t("li", $hash2([], {}), "home"), "/"), self.$link_to(self.$t("li", $hash2([], {}), "test signup"), "/signup"), self.$link_to(self.$t("li", $hash2([], {}), "test login"), "/login"), self.$link_to(self.$t("li", $hash2([], {}), "dashboard"), "/dashboard/" + ($scope.get('CurrentUser').$instance().$id())), self.$link_to(self.$t("li", $hash2([], {}), "staff_userSubmitted_Unpublished_Posts_Index"), "/staff/user_submitted/posts/index"))));
        }, TMP_7.$$arity = 0);

        Opal.defn(self, '$regular_render', TMP_9 = function ːregular_render() {
          var $a, $b, TMP_8, $c, self = this;

          return self.$t("div", $hash2(["className"], {"className": "menu"}), self.$t("ul", $hash2([], {}), self.$link_to(self.$t("li", $hash2([], {}), "home"), "/"), (function() {if ((($a = ((($b = $scope.get('CurrentUser').$instance()['$=='](nil)) !== false && $b !== nil && $b != null) ? $b : $scope.get('CurrentUser').$instance()['$has_role?']("no_name"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return [self.$link_to(self.$t("li", $hash2([], {}), "signup"), "/signup"), self.$link_to(self.$t("li", $hash2([], {}), "login"), "/login")]
            } else {
            return nil
          }; return nil; })(), self.$link_to(self.$t("li", $hash2([], {}), "dashboard"), "/dashboard/" + ($scope.get('CurrentUser').$instance().$id())), (function() {if ((($a = ($b = $scope.get('CurrentUser').$instance().$id(), $b !== false && $b !== nil && $b != null ?$scope.get('CurrentUser').$instance()['$has_role?']("guest")['$!']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("li", $hash2(["onClick"], {"onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

            return self.$logout()}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($b)}), "logout")
            } else {
            return nil
          }; return nil; })(), (function() {if ((($a = ($c = $scope.get('CurrentUser').$instance(), $c !== false && $c !== nil && $c != null ?$scope.get('CurrentUser').$instance()['$has_role?']("staff") : $c)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$link_to(self.$t("li", $hash2([], {}), "staff_userSubmitted_Unpublished_Posts_Index"), "/staff/user_submitted/posts/index")
            } else {
            return nil
          }; return nil; })(), self.$t("li", $hash2([], {}), self.$link_to("test", "/test"))), self.$t((((($scope.get('Components')).$$scope.get('Users'))).$$scope.get('CurrentUserStatus')), $hash2([], {})));
        }, TMP_9.$$arity = 0);

        Opal.defn(self, '$m_toggle_menu', TMP_10 = function ːm_toggle_menu() {
          var self = this;

          return self.$set_state($hash2(["m_open"], {"m_open": self.$state().$m_open()['$!']()}));
        }, TMP_10.$$arity = 0);

        Opal.defn(self, '$toggle_collapse', TMP_11 = function ːtoggle_collapse() {
          var self = this;

          return self.$set_state($hash2(["collapsed"], {"collapsed": self.$state().$collapsed()['$!']()}));
        }, TMP_11.$$arity = 0);

        Opal.defn(self, '$clear_opened', TMP_13 = function ːclear_opened(d_d) {
          var $a, $b, TMP_12, self = this;

          return ($a = ($b = self.$refs()).$each, $a.$$p = (TMP_12 = function(k, v){var self = TMP_12.$$s || this, $c;
if (k == null) k = nil;if (v == null) v = nil;
          if ((($c = k['$include?']("d_d")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              if ((($c = (v.$rb()['$=='](d_d))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return nil
                } else {
                return v.$rb().$set_state($hash2(["open"], {"open": false}))
              }
              } else {
              return nil
            }}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12), $a).call($b);
        }, TMP_13.$$arity = 1);

        Opal.defn(self, '$component_will_unmount', TMP_14 = function ːcomponent_will_unmount() {
          var self = this;

          return $scope.get('CurrentUser').$unsubscribe("user_logged_in", self);
        }, TMP_14.$$arity = 0);

        return (Opal.defn(self, '$logout', TMP_16 = function ːlogout() {
          var $a, $b, TMP_15, self = this;

          return ($a = ($b = $scope.get('CurrentUser').$logout()).$then, $a.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this;
            if ($gvars.HISTORY == null) $gvars.HISTORY = nil;

          return $gvars.HISTORY.$pushState(nil, "/login_or_continue_as_guest")}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15), $a).call($b);
        }, TMP_16.$$arity = 0), nil) && 'logout';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/personality_tests/answer_variants/edit"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$t', '$modal', '$input', '$n_prop', '$lambda', '$set_text_changed', '$n_state', '$update_text', '$content', '$==', '$content_type', '$delete_image', '$init_image_insertion', '$map', '$title', '$p_t_personality', '$set_personality_scale_scale_changed', '$scale_changed', '$update_scale', '$personality_scales', '$delete', '$submit_when_save_in_place', '$scale_changed=', '$force_update', '$collect_inputs', '$then', '$update', '$set_state', '$modal_open', '$event', '$insert_image_to_content', '$modal_close', '$has_errors?', '$each', '$add_error', '$errors', '$content=', '$content_type=', '$content_id=', '$id', '$update_test_answer_variant_as_content', '$remove_from_test_answer_variant', '$emit', '$p', '$personality_test_destroy', '$variant']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PersonalityTests, self = $PersonalityTests = $module($base, 'PersonalityTests');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $AnswerVariants, self = $AnswerVariants = $module($base, 'AnswerVariants');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Edit(){};
          var self = $Edit = $klass($base, $super, 'Edit', $Edit);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_11, TMP_12, TMP_14, TMP_15, TMP_17, TMP_19, TMP_22, TMP_25, TMP_27;

          self.$expose();

          self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

          Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
            var self = this;

            return $hash2(["text_changed"], {"text_changed": false});
          }, TMP_1.$$arity = 0);

          Opal.defn(self, '$render', TMP_11 = function ːrender() {
            var $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, $e, TMP_5, $f, TMP_6, $g, TMP_9, $h, TMP_10, self = this;

            return self.$t("div", $hash2(["className"], {"className": "PersonalityTests AnswerVariants-New Edit"}), self.$modal(), self.$t("div", $hash2(["className"], {"className": "answer-group"}), self.$input((($scope.get('Forms')).$$scope.get('Input')), self.$n_prop("variant"), "text", $hash2(["show_name", "required", "on_change"], {"show_name": "answer", "required": true, "on_change": ($a = ($b = self).$lambda, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

            return self.$set_text_changed()}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($b)}))), (function() {if ((($a = self.$n_state("text_changed")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("div", $hash2([], {}), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

              return self.$update_text()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($c)}), "update text"))
              } else {
              return nil
            }; return nil; })(), self.$t("div", $hash2(["className"], {"className": "m_content"}), (function() {if ((($a = ($d = self.$n_prop("variant").$content(), $d !== false && $d !== nil && $d != null ?self.$n_prop("variant").$content_type()['$==']("PostImage") : $d)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("div", $hash2(["className"], {"className": "PostTest-Variant-Image"}), self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": self.$n_prop("variant").$content()})), self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($d = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

              return self.$delete_image()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($d), "className": "btn btn-sm"}), "remove this")))
              } else {
              return self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($e = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

              return self.$init_image_insertion()}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($e), "className": "btn btn-sm"}), "add image"))
            }; return nil; })()), self.$t("div", $hash2(["className"], {"className": "personality_scales"}), ($a = ($f = self.$n_prop("variant").$personality_scales()).$map, $a.$$p = (TMP_6 = function(personality_scale){var self = TMP_6.$$s || this, $g, $h, TMP_7, $i, TMP_8;
if (personality_scale == null) personality_scale = nil;
            return self.$t("div", $hash2([], {}), self.$t("p", $hash2([], {}), personality_scale.$p_t_personality().$title()), self.$input((($scope.get('Forms')).$$scope.get('RangeInput')), personality_scale, "scale", $hash2(["min", "max", "on_change"], {"min": 0, "max": 10, "on_change": ($g = ($h = self).$lambda, $g.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

              return self.$set_personality_scale_scale_changed(personality_scale)}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $g).call($h)})), (function() {if ((($g = personality_scale.$scale_changed()) !== nil && $g != null && (!$g.$$is_boolean || $g == true))) {
                return self.$t("div", $hash2([], {}), self.$t("button", $hash2(["onClick"], {"onClick": ($g = ($i = self).$lambda, $g.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

                return self.$update_scale(personality_scale)}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $g).call($i)}), "update this scale"))
                } else {
                return nil
              }; return nil; })())}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($f)), self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), (function() {if ((($a = self.$n_prop("save_in_place")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($g = self).$lambda, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

              return self.$delete()}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($g), "className": "btn btn-sm"}), "delete")
            }; return nil; })(), (function() {if ((($a = self.$n_prop("save_in_place")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($h = self).$lambda, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

              return self.$submit_when_save_in_place()}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $a).call($h), "className": "btn btn-sm"}), "save")
              } else {
              return nil
            }; return nil; })()));
          }, TMP_11.$$arity = 0);

          Opal.defn(self, '$set_personality_scale_scale_changed', TMP_12 = function ːset_personality_scale_scale_changed(personality_scale) {
            var $a, $b, self = this;

            (($a = [true]), $b = personality_scale, $b['$scale_changed='].apply($b, $a), $a[$a.length-1]);
            return self.$force_update();
          }, TMP_12.$$arity = 1);

          Opal.defn(self, '$update_scale', TMP_14 = function ːupdate_scale(personality_scale) {
            var $a, $b, TMP_13, self = this;

            self.$collect_inputs();
            return ($a = ($b = personality_scale.$update()).$then, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this, $c, $d;

            (($c = [false]), $d = personality_scale, $d['$scale_changed='].apply($d, $c), $c[$c.length-1]);
              return self.$force_update();}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $a).call($b);
          }, TMP_14.$$arity = 1);

          Opal.defn(self, '$set_text_changed', TMP_15 = function ːset_text_changed() {
            var self = this;

            return self.$set_state($hash2(["text_changed"], {"text_changed": true}));
          }, TMP_15.$$arity = 0);

          Opal.defn(self, '$update_text', TMP_17 = function ːupdate_text() {
            var $a, $b, TMP_16, self = this;

            self.$collect_inputs();
            return ($a = ($b = self.$n_prop("variant").$update()).$then, $a.$$p = (TMP_16 = function(variant){var self = TMP_16.$$s || this;
if (variant == null) variant = nil;
            return self.$force_update()}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $a).call($b);
          }, TMP_17.$$arity = 0);

          Opal.defn(self, '$init_image_insertion', TMP_19 = function ːinit_image_insertion() {
            var $a, $b, TMP_18, self = this;

            return self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('UploadAndPreview')), $hash2(["on_image_selected", "post_images"], {"on_image_selected": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_18 = function(image){var self = TMP_18.$$s || this;
if (image == null) image = nil;
            return self.$insert_image_to_content(image)}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18), $a).call($b)), "post_images": []})));
          }, TMP_19.$$arity = 0);

          Opal.defn(self, '$insert_image_to_content', TMP_22 = function ːinsert_image_to_content(image) {
            var $a, $b, TMP_20, self = this;

            self.$modal_close();
            return ($a = ($b = image.$update_test_answer_variant_as_content($hash2(["wilds"], {"wilds": $hash2(["test_answer_variant_id"], {"test_answer_variant_id": self.$n_prop("variant").$id()})}))).$then, $a.$$p = (TMP_20 = function(u_img){var self = TMP_20.$$s || this, $c, $d, TMP_21, $e;
if (u_img == null) u_img = nil;
            if ((($c = u_img['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                ($c = ($d = u_img.$errors()).$each, $c.$$p = (TMP_21 = function(er){var self = TMP_21.$$s || this;
if (er == null) er = nil;
                return self.$n_prop("variant").$add_error("content", er)}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21), $c).call($d)
                } else {
                (($c = [u_img]), $e = self.$n_prop("variant"), $e['$content='].apply($e, $c), $c[$c.length-1]);
                (($c = ["PostImage"]), $e = self.$n_prop("variant"), $e['$content_type='].apply($e, $c), $c[$c.length-1]);
                (($c = [u_img.$id()]), $e = self.$n_prop("variant"), $e['$content_id='].apply($e, $c), $c[$c.length-1]);
              };
              return self.$force_update();}, TMP_20.$$s = self, TMP_20.$$arity = 1, TMP_20), $a).call($b);
          }, TMP_22.$$arity = 1);

          Opal.defn(self, '$delete_image', TMP_25 = function ːdelete_image() {
            var $a, $b, TMP_23, self = this;

            return ($a = ($b = self.$n_prop("variant").$content().$remove_from_test_answer_variant($hash2(["wilds"], {"wilds": $hash2(["test_answer_variant_id"], {"test_answer_variant_id": self.$n_prop("variant").$id()})}))).$then, $a.$$p = (TMP_23 = function(image){var self = TMP_23.$$s || this, $c, $d, TMP_24, $e;
if (image == null) image = nil;
            if ((($c = image['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                ($c = ($d = image.$errors()).$each, $c.$$p = (TMP_24 = function(er){var self = TMP_24.$$s || this;
if (er == null) er = nil;
                return self.$n_prop("variant").$add_error("content", er)}, TMP_24.$$s = self, TMP_24.$$arity = 1, TMP_24), $c).call($d)
                } else {
                (($c = [nil]), $e = self.$n_prop("variant"), $e['$content='].apply($e, $c), $c[$c.length-1]);
                (($c = [nil]), $e = self.$n_prop("variant"), $e['$content_type='].apply($e, $c), $c[$c.length-1]);
              };
              return self.$set_state($hash2(["variant"], {"variant": self.$n_prop("variant")}));}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23), $a).call($b);
          }, TMP_25.$$arity = 0);

          return (Opal.defn(self, '$delete', TMP_27 = function() {
            var $a, $b, TMP_26, self = this;

            if ((($a = self.$n_prop("variant").$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return ($a = ($b = self.$n_prop("variant").$personality_test_destroy()).$then, $a.$$p = (TMP_26 = function(variant){var self = TMP_26.$$s || this, $c, e = nil;
if (variant == null) variant = nil;
              try {
                  if ((($c = variant['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                    return self.$force_update()
                    } else {
                    return self.$emit("on_delete", variant)
                  }
                } catch ($err) {
                  if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                    try {
                      return self.$p(e)
                    } finally { Opal.pop_exception() }
                  } else { throw $err; }
                }}, TMP_26.$$s = self, TMP_26.$$arity = 1, TMP_26), $a).call($b)
              } else {
              return self.$emit("on_delete", self.$variant())
            };
          }, TMP_27.$$arity = 0), nil) && 'delete';
        })($scope.base, $scope.get('RW'))
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/personality_tests/answer_variants/new"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$n_prop', '$<<', '$comps_to_call_collect_on', '$delete', '$t', '$modal', '$input', '$content', '$==', '$content_type', '$lambda', '$delete_image', '$init_image_insertion', '$map', '$title', '$p_t_personality', '$personality_scales', '$emit', '$submit_when_save_in_place', '$modal_open', '$event', '$insert_image', '$modal_close', '$content=', '$content_type=', '$force_update', '$collect_inputs', '$handle_inputs', '$then', '$populate_variant_scales_with_personalities', '$p', '$personality_test_create']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PersonalityTests, self = $PersonalityTests = $module($base, 'PersonalityTests');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $AnswerVariants, self = $AnswerVariants = $module($base, 'AnswerVariants');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $New(){};
          var self = $New = $klass($base, $super, 'New', $New);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_9, TMP_11, TMP_12, TMP_13, TMP_14, TMP_16;

          self.$expose();

          self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

          Opal.defn(self, '$init', TMP_1 = function ːinit() {
            var self = this;

            return self.count = 0;
          }, TMP_1.$$arity = 0);

          Opal.defn(self, '$component_did_mount', TMP_2 = function ːcomponent_did_mount() {
            var $a, self = this;

            if ((($a = self.$n_prop("save_in_place")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$n_prop("owner").$comps_to_call_collect_on()['$<<'](self)
            };
          }, TMP_2.$$arity = 0);

          Opal.defn(self, '$component_will_unmount', TMP_3 = function ːcomponent_will_unmount() {
            var $a, self = this;

            if ((($a = self.$n_prop("save_in_place")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$n_prop("owner").$comps_to_call_collect_on().$delete(self)
            };
          }, TMP_3.$$arity = 0);

          Opal.defn(self, '$render', TMP_9 = function ːrender() {
            var $a, $b, TMP_4, $c, TMP_5, $d, TMP_6, $e, TMP_7, $f, TMP_8, self = this;

            return self.$t("div", $hash2(["className"], {"className": "AnswerVariants-New"}), self.$modal(), self.$t("div", $hash2(["className"], {"className": "answer-group"}), self.$input((($scope.get('Forms')).$$scope.get('Input')), self.$n_prop("variant"), "text", $hash2(["show_name", "required_field"], {"show_name": "answer", "required_field": true}))), self.$t("div", $hash2(["className"], {"className": "m_content"}), (function() {if ((($a = ($b = self.$n_prop("variant").$content(), $b !== false && $b !== nil && $b != null ?self.$n_prop("variant").$content_type()['$==']("PostImage") : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("div", $hash2(["className"], {"className": "PostTest-Variant-Image"}), self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": self.$n_prop("variant").$content()})), self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

              return self.$delete_image()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($b), "className": "btn btn-sm"}), "remove this")))
              } else {
              return self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

              return self.$init_image_insertion()}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($c), "className": "btn btn-sm"}), "add image"))
            }; return nil; })()), self.$t("div", $hash2(["className"], {"className": "personality_scales"}), ($a = ($d = self.$n_prop("variant").$personality_scales()).$map, $a.$$p = (TMP_6 = function(personality_scale){var self = TMP_6.$$s || this;
if (personality_scale == null) personality_scale = nil;
            return self.$t("div", $hash2([], {}), self.$t("p", $hash2([], {}), personality_scale.$p_t_personality().$title()), self.$input((($scope.get('Forms')).$$scope.get('RangeInput')), personality_scale, "scale", $hash2(["min", "max"], {"min": 0, "max": 10})))}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($d)), self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($e = self).$lambda, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

            return self.$emit("on_delete")}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($e), "className": "btn btn-sm"}), "delete"), (function() {if ((($a = self.$n_prop("save_in_place")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($f = self).$lambda, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

              return self.$submit_when_save_in_place()}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($f), "className": "btn btn-sm"}), "save")
              } else {
              return nil
            }; return nil; })()));
          }, TMP_9.$$arity = 0);

          Opal.defn(self, '$init_image_insertion', TMP_11 = function ːinit_image_insertion() {
            var $a, $b, TMP_10, self = this;

            return self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('UploadAndPreview')), $hash2(["on_image_selected", "post_images"], {"on_image_selected": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_10 = function(image){var self = TMP_10.$$s || this;
if (image == null) image = nil;
            return self.$insert_image(image)}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10), $a).call($b)), "post_images": self.$n_prop("image_roster")})));
          }, TMP_11.$$arity = 0);

          Opal.defn(self, '$insert_image', TMP_12 = function ːinsert_image(image) {
            var $a, $b, self = this;

            self.$modal_close();
            (($a = [image]), $b = self.$n_prop("variant"), $b['$content='].apply($b, $a), $a[$a.length-1]);
            (($a = ["PostImage"]), $b = self.$n_prop("variant"), $b['$content_type='].apply($b, $a), $a[$a.length-1]);
            return self.$force_update();
          }, TMP_12.$$arity = 1);

          Opal.defn(self, '$delete_image', TMP_13 = function ːdelete_image() {
            var $a, $b, self = this;

            (($a = [nil]), $b = self.$n_prop("variant"), $b['$content='].apply($b, $a), $a[$a.length-1]);
            (($a = [nil]), $b = self.$n_prop("variant"), $b['$content_type='].apply($b, $a), $a[$a.length-1]);
            return self.$force_update();
          }, TMP_13.$$arity = 0);

          Opal.defn(self, '$handle_inputs', TMP_14 = function ːhandle_inputs() {
            var self = this;

            return self.$collect_inputs();
          }, TMP_14.$$arity = 0);

          return (Opal.defn(self, '$submit_when_save_in_place', TMP_16 = function ːsubmit_when_save_in_place() {
            var $a, $b, TMP_15, self = this;

            self.$handle_inputs();
            return ($a = ($b = self.$n_prop("variant").$personality_test_create()).$then, $a.$$p = (TMP_15 = function(variant){var self = TMP_15.$$s || this, e = nil;
if (variant == null) variant = nil;
            try {
                self.$n_prop("owner").$populate_variant_scales_with_personalities(variant);
                return self.$n_prop("owner").$force_update();
              } catch ($err) {
                if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                  try {
                    return self.$p(e)
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              }}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15), $a).call($b);
          }, TMP_16.$$arity = 0), nil) && 'submit_when_save_in_place';
        })($scope.base, $scope.get('RW'))
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/personality_tests/answer_variants/show"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$n_prop', '$n_state', '$t', '$lambda', '$select', '$text', '$content', '$==', '$content_type', '$set_state', '$emit']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PersonalityTests, self = $PersonalityTests = $module($base, 'PersonalityTests');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $AnswerVariants, self = $AnswerVariants = $module($base, 'AnswerVariants');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Show(){};
          var self = $Show = $klass($base, $super, 'Show', $Show);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4, TMP_5;

          self.$expose();

          Opal.defn(self, '$validate_props', TMP_1 = function ːvalidate_props() {
            var self = this;

            return nil;
          }, TMP_1.$$arity = 0);

          Opal.defn(self, '$get_initial_state', TMP_2 = function ːget_initial_state() {
            var self = this, variant = nil;

            variant = self.$n_prop("variant");
            return $hash2(["variant", "selected"], {"variant": variant, "selected": false});
          }, TMP_2.$$arity = 0);

          Opal.defn(self, '$render', TMP_4 = function ːrender() {
            var $a, $b, TMP_3, $c, self = this, variant = nil, active = nil, selected_css = nil;

            variant = self.$n_state("variant");
            active = (function() {if ((($a = self.$n_prop("answered")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return ""
              } else {
              return "active"
            }; return nil; })();
            selected_css = (function() {if ((($a = self.$n_state("selected")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return "correctSelected"
              } else {
              return ""
            }; return nil; })();
            return self.$t("div", $hash2(["className", "onClick"], {"className": "PostTestsAnswerVariants-Show " + (active) + " " + (selected_css), "onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this, $c;

            if ((($c = self.$n_prop("answered")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return nil
                } else {
                return self.$select()
              }}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($b)}), (function() {if ((($a = variant.$text()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("h4", $hash2(["className"], {"className": "text"}), variant.$text())
              } else {
              return nil
            }; return nil; })(), (function() {if ((($a = ($c = variant.$content(), $c !== false && $c !== nil && $c != null ?variant.$content_type()['$==']("PostImage") : $c)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image", "css_class"], {"post_image": variant.$content(), "css_class": "media_thumb"}))
              } else {
              return nil
            }; return nil; })(), (function() {if ((($a = self.$n_prop("answered")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$t("div", $hash2(["className"], {"className": "button-wrap"}), self.$t("button", $hash2(["className"], {"className": "btn btn-sm btn-primary"}), "select"))
            }; return nil; })());
          }, TMP_4.$$arity = 0);

          return (Opal.defn(self, '$select', TMP_5 = function ːselect() {
            var self = this;

            self.$set_state($hash2(["selected"], {"selected": true}));
            return self.$emit("on_selected", self.$n_state("variant"));
          }, TMP_5.$$arity = 0), nil) && 'select';
        })($scope.base, $scope.get('RW'))
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/personality_tests/edit"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$n_prop', '$then', '$add_p_t_personalities_to_personality_scales', '$set_state', '$p', '$personality_test_edit', '$each', '$[]=', '$id', '$p_t_personalities', '$[]', '$p_t_personality_id', '$p_t_personality=', '$personality_scales', '$test_answer_variants', '$test_questions', '$t', '$modal', '$n_state', '$errors', '$map', '$input', '$lambda', '$update_title', '$thumbnail', '$start_replacing_thumbnail', '$init_thumbnail_insertion', '$delete_personality', '$on_p_t_personality_created', '$add_personality', '$delete_question', '$add_question', '$handle_inputs', '$emit', '$new', '$post_test_id=', '$<<', '$force_update', '$collect_inputs', '$has_errors?', '$update', '$modal_open', '$event', '$change_thumbnail', '$modal_close', '$add_error', '$thumbnail=', '$update_thumbnail', '$test_answer_variant_id', '$data', '$personality_scales=', '$delete', '$delete_personality_from_question_variants', '$==', '$p_t_personality', '$p_t_personality_id=', '$+']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PersonalityTests, self = $PersonalityTests = $module($base, 'PersonalityTests');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Edit(){};
        var self = $Edit = $klass($base, $super, 'Edit', $Edit);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3, TMP_8, TMP_25, TMP_26, TMP_28, TMP_30, TMP_33, TMP_34, TMP_38, TMP_39, TMP_43, TMP_45, TMP_47, TMP_48;

        self.$expose();

        self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

        Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
          var self = this;

          return $hash2(["post_test", "post_title_is_changed"], {"post_test": false, "post_title_is_changed": false});
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$component_did_mount', TMP_3 = function ːcomponent_did_mount() {
          var $a, $b, TMP_2, self = this, id = nil;

          id = self.$n_prop("post_test_id");
          return ($a = ($b = Opal.get('PostTest').$personality_test_edit($hash2(["wilds"], {"wilds": $hash2(["id"], {"id": id})}))).$then, $a.$$p = (TMP_2 = function(post_test){var self = TMP_2.$$s || this, e = nil;
if (post_test == null) post_test = nil;
          try {
              self.$add_p_t_personalities_to_personality_scales(post_test);
              return self.$set_state($hash2(["post_test"], {"post_test": post_test}));
            } catch ($err) {
              if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                try {
                  return self.$p(e)
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b);
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$add_p_t_personalities_to_personality_scales', TMP_8 = function ːadd_p_t_personalities_to_personality_scales(post_test) {
          var $a, $b, TMP_4, $c, TMP_5, self = this, personalities_mapped_by_id = nil;

          personalities_mapped_by_id = $hash2([], {});
          ($a = ($b = post_test.$p_t_personalities()).$each, $a.$$p = (TMP_4 = function(personality_scale){var self = TMP_4.$$s || this;
if (personality_scale == null) personality_scale = nil;
          return personalities_mapped_by_id['$[]='](personality_scale.$id(), personality_scale)}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($b);
          ($a = ($c = post_test.$test_questions()).$each, $a.$$p = (TMP_5 = function(test_question){var self = TMP_5.$$s || this, $d, $e, TMP_6;
if (test_question == null) test_question = nil;
          return ($d = ($e = test_question.$test_answer_variants()).$each, $d.$$p = (TMP_6 = function(variant){var self = TMP_6.$$s || this, $f, $g, TMP_7;
if (variant == null) variant = nil;
            return ($f = ($g = variant.$personality_scales()).$each, $f.$$p = (TMP_7 = function(personality_scale){var self = TMP_7.$$s || this, $h, $i, personality_to_assign = nil;
if (personality_scale == null) personality_scale = nil;
              personality_to_assign = personalities_mapped_by_id['$[]'](personality_scale.$p_t_personality_id());
                return (($h = [personality_to_assign]), $i = personality_scale, $i['$p_t_personality='].apply($i, $h), $h[$h.length-1]);}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $f).call($g)}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $d).call($e)}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($c);
          return post_test;
        }, TMP_8.$$arity = 1);

        Opal.defn(self, '$render', TMP_25 = function ːrender() {
          var $a, $b, TMP_9, $c, TMP_10, $d, TMP_11, $e, TMP_12, $f, TMP_13, $g, TMP_14, $h, TMP_18, $i, TMP_19, $j, TMP_22, $k, TMP_23, $l, TMP_24, self = this, errors = nil;

          return self.$t("div", $hash2(["className"], {"className": "PersonalityTests-Edit"}), self.$modal(), (function() {if ((($a = self.$n_state("post_test")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("div", $hash2([], {}), (function() {if ((($a = errors = self.$n_state("post_test").$errors()['$[]']("general")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("div", $hash2(["className"], {"className": "invalid"}), ($a = ($b = errors).$map, $a.$$p = (TMP_9 = function(er){var self = TMP_9.$$s || this;
if (er == null) er = nil;
              return self.$t("p", $hash2([], {}), er)}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $a).call($b))
              } else {
              return nil
            }; return nil; })(), self.$t("div", $hash2(["className"], {"className": "questionRelated-group"}), self.$t("div", $hash2(["className"], {"className": "title"}), self.$input((($scope.get('Forms')).$$scope.get('Input')), self.$n_state("post_test"), "title", $hash2(["show_name", "required_field", "collect_on_change", "on_change"], {"show_name": "enter name", "required_field": true, "collect_on_change": true, "on_change": ($a = ($c = self).$lambda, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

            return self.$set_state($hash2(["post_title_is_changed"], {"post_title_is_changed": true}))}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $a).call($c)})), (function() {if ((($a = self.$n_state("post_title_is_changed")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($d = self).$lambda, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

              return self.$update_title()}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $a).call($d)}), "update title")
              } else {
              return nil
            }; return nil; })()), (function() {if ((($a = self.$n_state("post_test").$thumbnail()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("div", $hash2(["className"], {"className": "thumbnail"}), self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": self.$n_state("post_test").$thumbnail()})), self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), self.$t("button", $hash2(["className", "onClick"], {"className": "btn btn-sm", "onClick": ($a = ($e = self).$lambda, $a.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this;

              return self.$start_replacing_thumbnail()}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12), $a).call($e)}), "replace thumbnail")))
              } else {
              return self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), self.$t("button", $hash2(["className", "onClick"], {"className": "btn btn-sm", "onClick": ($a = ($f = self).$lambda, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;

              return self.$init_thumbnail_insertion()}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $a).call($f)}), "add image thumbnail"))
            }; return nil; })()), self.$t("div", $hash2(["className"], {"className": "personalities-group"}), ($a = ($g = self.$n_state("post_test").$p_t_personalities()).$map, $a.$$p = (TMP_14 = function(p_t_personality){var self = TMP_14.$$s || this, $h, $i, TMP_15, $j, TMP_16, $k, TMP_17;
if (p_t_personality == null) p_t_personality = nil;
            if ((($h = p_t_personality.$id()) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
                return self.$t((((((((($scope.get('Components')).$$scope.get('PostTests'))).$$scope.get('PersonalityTests'))).$$scope.get('Personalities'))).$$scope.get('Edit')), $hash2(["p_t_personality", "owner", "on_delete", "image_roster"], {"p_t_personality": p_t_personality, "owner": self, "on_delete": ($h = ($i = self).$lambda, $h.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this;

                return self.$delete_personality(p_t_personality)}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15), $h).call($i), "image_roster": []}))
                } else {
                return self.$t((((((((($scope.get('Components')).$$scope.get('PostTests'))).$$scope.get('PersonalityTests'))).$$scope.get('Personalities'))).$$scope.get('New')), $hash2(["p_t_personality", "owner", "on_delete", "image_roster", "edit_mode", "on_p_t_personality_created"], {"p_t_personality": p_t_personality, "owner": self, "on_delete": ($h = ($j = self).$lambda, $h.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this;

                return self.$delete_personality(p_t_personality)}, TMP_16.$$s = self, TMP_16.$$arity = 0, TMP_16), $h).call($j), "image_roster": [], "edit_mode": true, "on_p_t_personality_created": ($h = ($k = self).$lambda, $h.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this;

                return self.$on_p_t_personality_created(p_t_personality)}, TMP_17.$$s = self, TMP_17.$$arity = 0, TMP_17), $h).call($k)}))
              }}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($g), self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($h = self).$lambda, $a.$$p = (TMP_18 = function(){var self = TMP_18.$$s || this;

            return self.$add_personality()}, TMP_18.$$s = self, TMP_18.$$arity = 0, TMP_18), $a).call($h), "className": "btn btn-sm"}), "add personality"))), self.$t("div", $hash2(["className"], {"className": "TestQuestions-container"}), ($a = ($i = self.$n_state("post_test").$test_questions()).$map, $a.$$p = (TMP_19 = function(question){var self = TMP_19.$$s || this, $j, $k, TMP_20, $l, TMP_21;
if (question == null) question = nil;
            if ((($j = question.$id()) !== nil && $j != null && (!$j.$$is_boolean || $j == true))) {
                return self.$t((((((((($scope.get('Components')).$$scope.get('PostTests'))).$$scope.get('PersonalityTests'))).$$scope.get('Questions'))).$$scope.get('Edit')), $hash2(["question", "owner", "on_delete", "image_roster"], {"question": question, "owner": self, "on_delete": ($j = ($k = self).$lambda, $j.$$p = (TMP_20 = function(){var self = TMP_20.$$s || this;

                return self.$delete_question(question)}, TMP_20.$$s = self, TMP_20.$$arity = 0, TMP_20), $j).call($k), "image_roster": []}))
                } else {
                return self.$t((((((((($scope.get('Components')).$$scope.get('PostTests'))).$$scope.get('PersonalityTests'))).$$scope.get('Questions'))).$$scope.get('New')), $hash2(["question", "owner", "on_delete", "image_roster", "edit_mode"], {"question": question, "owner": self, "on_delete": ($j = ($l = self).$lambda, $j.$$p = (TMP_21 = function(){var self = TMP_21.$$s || this;

                return self.$delete_question(question)}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21), $j).call($l), "image_roster": [], "edit_mode": true}))
              }}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19), $a).call($i), self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($j = self).$lambda, $a.$$p = (TMP_22 = function(){var self = TMP_22.$$s || this;

            return self.$add_question()}, TMP_22.$$s = self, TMP_22.$$arity = 0, TMP_22), $a).call($j), "className": "btn btn-sm"}), "add question"))), self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($k = self).$lambda, $a.$$p = (TMP_23 = function(){var self = TMP_23.$$s || this;

            return self.$handle_inputs()}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23), $a).call($k), "className": "btn btn-sm"}), "submit"), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($l = self).$lambda, $a.$$p = (TMP_24 = function(){var self = TMP_24.$$s || this;

            return self.$emit("on_cancel")}, TMP_24.$$s = self, TMP_24.$$arity = 0, TMP_24), $a).call($l), "className": "btn btn-sm"}), "cancel")))
            } else {
            return nil
          }; return nil; })());
        }, TMP_25.$$arity = 0);

        Opal.defn(self, '$add_question', TMP_26 = function ːadd_question() {
          var $a, $b, self = this, test_question = nil;

          test_question = $scope.get('TestQuestion').$new();
          (($a = [self.$n_state("post_test").$id()]), $b = test_question, $b['$post_test_id='].apply($b, $a), $a[$a.length-1]);
          self.$n_state("post_test").$test_questions()['$<<'](test_question);
          return self.$force_update();
        }, TMP_26.$$arity = 0);

        Opal.defn(self, '$update_title', TMP_28 = function ːupdate_title() {
          var $a, $b, TMP_27, self = this;

          self.$collect_inputs();
          return ($a = ($b = self.$n_state("post_test").$update()).$then, $a.$$p = (TMP_27 = function(post_test){var self = TMP_27.$$s || this, $c;
if (post_test == null) post_test = nil;
          if ((($c = post_test['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return self.$set_state($hash2(["post_test"], {"post_test": self.$n_state("post_test")}))
              } else {
              return self.$set_state($hash2(["post_test", "post_title_is_changed"], {"post_test": self.$n_state("post_test"), "post_title_is_changed": false}))
            }}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27), $a).call($b);
        }, TMP_28.$$arity = 0);

        Opal.defn(self, '$start_replacing_thumbnail', TMP_30 = function ːstart_replacing_thumbnail() {
          var $a, $b, TMP_29, self = this;

          return self.$modal_open(self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('UploadAndPreview')), $hash2(["on_image_selected", "post_images"], {"on_image_selected": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_29 = function(image){var self = TMP_29.$$s || this;
if (image == null) image = nil;
          return self.$change_thumbnail(image)}, TMP_29.$$s = self, TMP_29.$$arity = 1, TMP_29), $a).call($b)), "post_images": []})));
        }, TMP_30.$$arity = 0);

        Opal.defn(self, '$change_thumbnail', TMP_33 = function ːchange_thumbnail(image) {
          var $a, $b, TMP_31, self = this;

          self.$modal_close();
          return ($a = ($b = image.$update_thumbnail($hash2(["wilds"], {"wilds": $hash2(["post_test_id", "id"], {"post_test_id": self.$n_state("post_test").$id(), "id": image.$id()})}))).$then, $a.$$p = (TMP_31 = function(pi){var self = TMP_31.$$s || this, $c, $d, TMP_32, $e;
if (pi == null) pi = nil;
          if ((($c = pi['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              ($c = ($d = pi.$errors()).$each, $c.$$p = (TMP_32 = function(er){var self = TMP_32.$$s || this;
if (er == null) er = nil;
              return self.$n_state("post_test").$add_error("thumbnail", "thumbnail: " + (er))}, TMP_32.$$s = self, TMP_32.$$arity = 1, TMP_32), $c).call($d);
              return self.$set_state($hash2(["post_test"], {"post_test": self.$n_state("post_test")}));
              } else {
              (($c = [pi]), $e = self.$n_state("post_test"), $e['$thumbnail='].apply($e, $c), $c[$c.length-1]);
              return self.$set_state($hash2(["post_test"], {"post_test": self.$n_state("post_test")}));
            }}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31), $a).call($b);
        }, TMP_33.$$arity = 1);

        Opal.defn(self, '$add_personality', TMP_34 = function ːadd_personality() {
          var $a, $b, self = this, personality = nil;

          personality = $scope.get('P_T_Personality').$new();
          (($a = [self.$n_state("post_test").$id()]), $b = personality, $b['$post_test_id='].apply($b, $a), $a[$a.length-1]);
          self.$n_state("post_test").$p_t_personalities()['$<<'](personality);
          return self.$set_state($hash2(["post_test"], {"post_test": self.$n_state("post_test")}));
        }, TMP_34.$$arity = 0);

        Opal.defn(self, '$on_p_t_personality_created', TMP_38 = function ːon_p_t_personality_created(personality) {
          var $a, $b, TMP_35, $c, TMP_36, $d, self = this, variant_id_to_personality_scale = nil;

          variant_id_to_personality_scale = $hash2([], {});
          ($a = ($b = personality.$personality_scales()).$each, $a.$$p = (TMP_35 = function(personality_scale){var self = TMP_35.$$s || this, $c, $d;
if (personality_scale == null) personality_scale = nil;
          (($c = [personality]), $d = personality_scale, $d['$p_t_personality='].apply($d, $c), $c[$c.length-1]);
            return variant_id_to_personality_scale['$[]='](personality_scale.$test_answer_variant_id(), personality_scale);}, TMP_35.$$s = self, TMP_35.$$arity = 1, TMP_35), $a).call($b);
          ($a = ($c = self.$n_state("post_test").$test_questions()).$each, $a.$$p = (TMP_36 = function(test_question){var self = TMP_36.$$s || this, $d, $e, TMP_37;
if (test_question == null) test_question = nil;
          return ($d = ($e = test_question.$test_answer_variants()).$each, $d.$$p = (TMP_37 = function(test_answer_variant){var self = TMP_37.$$s || this, personality_scale_to_add = nil;
if (test_answer_variant == null) test_answer_variant = nil;
            personality_scale_to_add = variant_id_to_personality_scale['$[]'](test_answer_variant.$id());
              return test_answer_variant.$personality_scales().$data()['$<<'](personality_scale_to_add);}, TMP_37.$$s = self, TMP_37.$$arity = 1, TMP_37), $d).call($e)}, TMP_36.$$s = self, TMP_36.$$arity = 1, TMP_36), $a).call($c);
          (($a = [$scope.get('ModelCollection').$new()]), $d = personality, $d['$personality_scales='].apply($d, $a), $a[$a.length-1]);
          return self.$force_update();
        }, TMP_38.$$arity = 1);

        Opal.defn(self, '$delete_personality', TMP_39 = function ːdelete_personality(p_t_personality) {
          var self = this;

          self.$n_state("post_test").$p_t_personalities().$data().$delete(p_t_personality);
          self.$delete_personality_from_question_variants(p_t_personality);
          return self.$set_state($hash2(["post_test"], {"post_test": self.$n_state("post_test")}));
        }, TMP_39.$$arity = 1);

        Opal.defn(self, '$delete_personality_from_question_variants', TMP_43 = function ːdelete_personality_from_question_variants(personality) {
          var $a, $b, TMP_40, self = this;

          return ($a = ($b = self.$n_state("post_test").$test_questions()).$each, $a.$$p = (TMP_40 = function(test_question){var self = TMP_40.$$s || this, $c, $d, TMP_41;
if (test_question == null) test_question = nil;
          return ($c = ($d = test_question.$test_answer_variants()).$each, $c.$$p = (TMP_41 = function(test_answer_variant){var self = TMP_41.$$s || this, $e, $f, TMP_42, personality_scale_to_delete = nil;
if (test_answer_variant == null) test_answer_variant = nil;
            personality_scale_to_delete = false;
              ($e = ($f = test_answer_variant.$personality_scales().$data()).$each, $e.$$p = (TMP_42 = function(personality_scale){var self = TMP_42.$$s || this;
if (personality_scale == null) personality_scale = nil;
              if (personality_scale.$p_t_personality()['$=='](personality)) {
                  return personality_scale_to_delete = personality_scale
                  } else {
                  return nil
                }}, TMP_42.$$s = self, TMP_42.$$arity = 1, TMP_42), $e).call($f);
              if (personality_scale_to_delete !== false && personality_scale_to_delete !== nil && personality_scale_to_delete != null) {
                return test_answer_variant.$personality_scales().$data().$delete(personality_scale_to_delete)
                } else {
                return nil
              };}, TMP_41.$$s = self, TMP_41.$$arity = 1, TMP_41), $c).call($d)}, TMP_40.$$s = self, TMP_40.$$arity = 1, TMP_40), $a).call($b);
        }, TMP_43.$$arity = 1);

        Opal.defn(self, '$populate_variant_with_personality_scales', TMP_45 = function ːpopulate_variant_with_personality_scales(variant) {
          var $a, $b, TMP_44, self = this;

          return ($a = ($b = self.$n_state("post_test").$p_t_personalities()).$each, $a.$$p = (TMP_44 = function(personality){var self = TMP_44.$$s || this, $c, $d, personality_scale = nil;
if (personality == null) personality = nil;
          personality_scale = $scope.get('PersonalityScale').$new();
            (($c = [personality.$id()]), $d = personality_scale, $d['$p_t_personality_id='].apply($d, $c), $c[$c.length-1]);
            (($c = [personality]), $d = personality_scale, $d['$p_t_personality='].apply($d, $c), $c[$c.length-1]);
            return variant.$personality_scales()['$<<'](personality_scale);}, TMP_44.$$s = self, TMP_44.$$arity = 1, TMP_44), $a).call($b);
        }, TMP_45.$$arity = 1);

        Opal.defn(self, '$populate_personality_scales_with_personalities', TMP_47 = function ːpopulate_personality_scales_with_personalities(variant) {
          var $a, $b, TMP_46, self = this, index = nil;

          index = 0;
          return ($a = ($b = variant.$personality_scales()).$each, $a.$$p = (TMP_46 = function(personality_scale){var self = TMP_46.$$s || this, $c, $d;
if (personality_scale == null) personality_scale = nil;
          (($c = [self.$n_state("post_test").$p_t_personalities().$data()['$[]'](index)]), $d = personality_scale, $d['$p_t_personality='].apply($d, $c), $c[$c.length-1]);
            return index = $rb_plus(index, 1);}, TMP_46.$$s = self, TMP_46.$$arity = 1, TMP_46), $a).call($b);
        }, TMP_47.$$arity = 1);

        return (Opal.defn(self, '$delete_question', TMP_48 = function ːdelete_question(question) {
          var self = this;

          self.$n_state("post_test").$test_questions().$data().$delete(question);
          return self.$force_update();
        }, TMP_48.$$arity = 1), nil) && 'delete_question';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/personality_tests/new"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$new', '$t', '$modal', '$[]', '$errors', '$n_state', '$map', '$input', '$thumbnail', '$lambda', '$delete_thumbnail', '$init_thumbnail_insertion', '$delete_personality', '$p_t_personalities', '$add_personality', '$delete_question', '$test_questions', '$add_question', '$handle_inputs', '$emit', '$delete', '$data', '$set_state', '$<<', '$add_personality_to_question_variants', '$delete_personality_from_question_variants', '$modal_open', '$event', '$insert_thumbnail', '$modal_close', '$thumbnail=', '$each', '$to_proc', '$collect_inputs', '$fail', '$raise', '$then', '$has_errors?', '$populate_variant_personality_scales_with_personality', '$test_answer_variants', '$p', '$create_personality', '$p_t_personality=', '$personality_scales', '$find_index', '$delete_at']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PersonalityTests, self = $PersonalityTests = $module($base, 'PersonalityTests');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $New(){};
        var self = $New = $klass($base, $super, 'New', $New);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_20, TMP_21, TMP_22, TMP_27, TMP_30, TMP_32, TMP_35, TMP_38;

        def.comps_to_call_collect_on = nil;
        self.$expose();

        self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

        Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
          var self = this;

          self.comps_to_call_collect_on = [];
          return $hash2(["post_test", "image_roster"], {"post_test": $scope.get('PostTest').$new($hash2(["is_personality"], {"is_personality": true})), "image_roster": []});
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$comps_to_call_collect_on', TMP_2 = function ːcomps_to_call_collect_on() {
          var self = this;

          return self.comps_to_call_collect_on;
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$render', TMP_14 = function ːrender() {
          var $a, $b, TMP_3, $c, TMP_4, $d, TMP_5, $e, TMP_6, $f, TMP_8, $g, TMP_9, $h, TMP_11, $i, TMP_12, $j, TMP_13, self = this, errors = nil, thumb_errors = nil;

          return self.$t("div", $hash2(["className"], {"className": "PostTests-New PersonalityTests"}), self.$modal(), (function() {if ((($a = errors = self.$n_state("post_test").$errors()['$[]']("general")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("div", $hash2(["className"], {"className": "invalid"}), ($a = ($b = errors).$map, $a.$$p = (TMP_3 = function(er){var self = TMP_3.$$s || this;
if (er == null) er = nil;
            return self.$t("p", $hash2([], {}), er)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b))
            } else {
            return nil
          }; return nil; })(), self.$t("div", $hash2(["className"], {"className": "questionRelated-group"}), self.$t("div", $hash2(["className"], {"className": "title"}), self.$input((($scope.get('Forms')).$$scope.get('Input')), self.$n_state("post_test"), "title", $hash2(["show_name", "required_field", "collect_on_change"], {"show_name": "enter name", "required_field": true, "collect_on_change": true}))), (function() {if ((($a = thumb_errors = self.$n_state("post_test").$errors()['$[]']("thumbnail")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("p", $hash2(["className"], {"className": "invalid"}), thumb_errors)
            } else {
            return nil
          }; return nil; })(), (function() {if ((($a = self.$n_state("post_test").$thumbnail()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("div", $hash2(["className"], {"className": "thumbnail"}), self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": self.$n_state("post_test").$thumbnail()})), self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), self.$t("button", $hash2(["className", "onClick"], {"className": "btn btn-sm", "onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

            return self.$delete_thumbnail()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($c)}), "delete")))
            } else {
            return self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), self.$t("button", $hash2(["className", "onClick"], {"className": "btn btn-sm", "onClick": ($a = ($d = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

            return self.$init_thumbnail_insertion()}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($d)}), "add image thumbnail"))
          }; return nil; })()), self.$t("div", $hash2(["className"], {"className": "personalities-group"}), ($a = ($e = self.$n_state("post_test").$p_t_personalities()).$map, $a.$$p = (TMP_6 = function(p_t_personality){var self = TMP_6.$$s || this, $f, $g, TMP_7;
if (p_t_personality == null) p_t_personality = nil;
          return self.$t((((((((($scope.get('Components')).$$scope.get('PostTests'))).$$scope.get('PersonalityTests'))).$$scope.get('Personalities'))).$$scope.get('New')), $hash2(["p_t_personality", "owner", "on_delete", "image_roster"], {"p_t_personality": p_t_personality, "owner": self, "on_delete": ($f = ($g = self).$lambda, $f.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

            return self.$delete_personality(p_t_personality)}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $f).call($g), "image_roster": self.$n_state("image_roster")}))}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($e), self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($f = self).$lambda, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

          return self.$add_personality()}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($f), "className": "btn btn-sm"}), "add personality"))), self.$t("div", $hash2(["className"], {"className": "TestQuestions-container"}), ($a = ($g = self.$n_state("post_test").$test_questions()).$map, $a.$$p = (TMP_9 = function(question){var self = TMP_9.$$s || this, $h, $i, TMP_10;
if (question == null) question = nil;
          return self.$t((((((((($scope.get('Components')).$$scope.get('PostTests'))).$$scope.get('PersonalityTests'))).$$scope.get('Questions'))).$$scope.get('New')), $hash2(["question", "owner", "on_delete", "image_roster"], {"question": question, "owner": self, "on_delete": ($h = ($i = self).$lambda, $h.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

            return self.$delete_question(question)}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $h).call($i), "image_roster": self.$n_state("image_roster")}))}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $a).call($g), self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($h = self).$lambda, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

          return self.$add_question()}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $a).call($h), "className": "btn btn-sm"}), "add question"))), self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($i = self).$lambda, $a.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this;

          return self.$handle_inputs()}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12), $a).call($i), "className": "btn btn-sm"}), "submit"), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($j = self).$lambda, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;

          return self.$emit("on_cancel")}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $a).call($j), "className": "btn btn-sm"}), "cancel")));
        }, TMP_14.$$arity = 0);

        Opal.defn(self, '$delete_question', TMP_15 = function ːdelete_question(question) {
          var self = this;

          self.$n_state("post_test").$test_questions().$data().$delete(question);
          return self.$set_state($hash2(["post_test"], {"post_test": self.$n_state("post_test")}));
        }, TMP_15.$$arity = 1);

        Opal.defn(self, '$add_question', TMP_16 = function ːadd_question() {
          var self = this;

          self.$n_state("post_test").$test_questions()['$<<']($scope.get('TestQuestion').$new());
          return self.$set_state($hash2(["post_test"], {"post_test": self.$n_state("post_test")}));
        }, TMP_16.$$arity = 0);

        Opal.defn(self, '$add_personality', TMP_17 = function ːadd_personality() {
          var self = this, personality = nil;

          personality = $scope.get('P_T_Personality').$new();
          self.$n_state("post_test").$p_t_personalities()['$<<'](personality);
          self.$add_personality_to_question_variants(personality);
          return self.$set_state($hash2(["post_test"], {"post_test": self.$n_state("post_test")}));
        }, TMP_17.$$arity = 0);

        Opal.defn(self, '$delete_personality', TMP_18 = function ːdelete_personality(p_t_personality) {
          var self = this;

          self.$n_state("post_test").$p_t_personalities().$data().$delete(p_t_personality);
          self.$delete_personality_from_question_variants(p_t_personality);
          return self.$set_state($hash2(["post_test"], {"post_test": self.$n_state("post_test")}));
        }, TMP_18.$$arity = 1);

        Opal.defn(self, '$init_thumbnail_insertion', TMP_20 = function ːinit_thumbnail_insertion() {
          var $a, $b, TMP_19, self = this;

          return self.$modal_open(self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('UploadAndPreview')), $hash2(["on_image_selected", "post_images"], {"on_image_selected": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_19 = function(image){var self = TMP_19.$$s || this;
if (image == null) image = nil;
          return self.$insert_thumbnail(image)}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19), $a).call($b)), "post_images": self.$n_state("image_roster")})));
        }, TMP_20.$$arity = 0);

        Opal.defn(self, '$insert_thumbnail', TMP_21 = function ːinsert_thumbnail(image) {
          var $a, $b, self = this;

          self.$modal_close();
          (($a = [image]), $b = self.$n_state("post_test"), $b['$thumbnail='].apply($b, $a), $a[$a.length-1]);
          return self.$set_state($hash2(["post_test"], {"post_test": self.$n_state("post_test")}));
        }, TMP_21.$$arity = 1);

        Opal.defn(self, '$delete_thumbnail', TMP_22 = function ːdelete_thumbnail() {
          var $a, $b, self = this;

          (($a = [nil]), $b = self.$n_state("post_test"), $b['$thumbnail='].apply($b, $a), $a[$a.length-1]);
          return self.$set_state($hash2(["post_test"], {"post_test": self.$n_state("post_test")}));
        }, TMP_22.$$arity = 0);

        Opal.defn(self, '$handle_inputs', TMP_27 = function ːhandle_inputs() {
          var $a, $b, $c, TMP_23, $d, $e, TMP_24, self = this;

          ($a = ($b = self.comps_to_call_collect_on).$each, $a.$$p = "handle_inputs".$to_proc(), $a).call($b);
          self.$collect_inputs($hash2(["form_model"], {"form_model": "post_test"}));
          return ($a = ($c = ($d = ($e = self.$n_state("post_test").$create_personality()).$then, $d.$$p = (TMP_24 = function(post_test){var self = TMP_24.$$s || this, $f, $g, TMP_25, e = nil;
if (post_test == null) post_test = nil;
          try {
              if ((($f = post_test['$has_errors?']()) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
                ($f = ($g = post_test.$test_questions()).$each, $f.$$p = (TMP_25 = function(test_question){var self = TMP_25.$$s || this, $h, $i, TMP_26;
if (test_question == null) test_question = nil;
                return ($h = ($i = test_question.$test_answer_variants()).$each, $h.$$p = (TMP_26 = function(variant){var self = TMP_26.$$s || this;
if (variant == null) variant = nil;
                  return self.$populate_variant_personality_scales_with_personality(variant)}, TMP_26.$$s = self, TMP_26.$$arity = 1, TMP_26), $h).call($i)}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25), $f).call($g);
                return self.$set_state($hash2(["post_test"], {"post_test": post_test}));
                } else {
                return self.$emit("on_done", self.$n_state("post_test"))
              }
            } catch ($err) {
              if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                try {
                  self.$p(e);
                  return self.$raise(e);
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }}, TMP_24.$$s = self, TMP_24.$$arity = 1, TMP_24), $d).call($e)).$fail, $a.$$p = (TMP_23 = function(er){var self = TMP_23.$$s || this;
if (er == null) er = nil;
          return self.$raise(er)}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23), $a).call($c);
        }, TMP_27.$$arity = 0);

        Opal.defn(self, '$populate_variant_personality_scales_with_personality', TMP_30 = function ːpopulate_variant_personality_scales_with_personality(variant) {
          var $a, $b, TMP_28, self = this;

          return ($a = ($b = self.$n_state("post_test").$p_t_personalities()).$each, $a.$$p = (TMP_28 = function(personality){var self = TMP_28.$$s || this, $c, $d, TMP_29;
if (personality == null) personality = nil;
          return ($c = ($d = variant.$personality_scales()).$each, $c.$$p = (TMP_29 = function(personality_scale){var self = TMP_29.$$s || this, $e, $f;
if (personality_scale == null) personality_scale = nil;
            return (($e = [personality]), $f = personality_scale, $f['$p_t_personality='].apply($f, $e), $e[$e.length-1])}, TMP_29.$$s = self, TMP_29.$$arity = 1, TMP_29), $c).call($d)}, TMP_28.$$s = self, TMP_28.$$arity = 1, TMP_28), $a).call($b);
        }, TMP_30.$$arity = 1);

        Opal.defn(self, '$populate_variant_with_personality_scales', TMP_32 = function ːpopulate_variant_with_personality_scales(variant) {
          var $a, $b, TMP_31, self = this;

          return ($a = ($b = self.$n_state("post_test").$p_t_personalities()).$each, $a.$$p = (TMP_31 = function(personality){var self = TMP_31.$$s || this, $c, $d, personality_scale = nil;
if (personality == null) personality = nil;
          personality_scale = $scope.get('PersonalityScale').$new();
            (($c = [personality]), $d = personality_scale, $d['$p_t_personality='].apply($d, $c), $c[$c.length-1]);
            return variant.$personality_scales()['$<<'](personality_scale);}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31), $a).call($b);
        }, TMP_32.$$arity = 1);

        Opal.defn(self, '$delete_personality_from_question_variants', TMP_35 = function ːdelete_personality_from_question_variants(personality) {
          var $a, $b, TMP_33, self = this, post_test = nil, index = nil;

          post_test = self.$n_state("post_test");
          index = post_test.$p_t_personalities().$data().$find_index(personality);
          return ($a = ($b = post_test.$test_questions()).$each, $a.$$p = (TMP_33 = function(test_question){var self = TMP_33.$$s || this, $c, $d, TMP_34;
if (test_question == null) test_question = nil;
          return ($c = ($d = test_question.$test_answer_variants()).$each, $c.$$p = (TMP_34 = function(test_answer_variant){var self = TMP_34.$$s || this;
if (test_answer_variant == null) test_answer_variant = nil;
            return test_answer_variant.$personality_scales().$data().$delete_at(index)}, TMP_34.$$s = self, TMP_34.$$arity = 1, TMP_34), $c).call($d)}, TMP_33.$$s = self, TMP_33.$$arity = 1, TMP_33), $a).call($b);
        }, TMP_35.$$arity = 1);

        return (Opal.defn(self, '$add_personality_to_question_variants', TMP_38 = function ːadd_personality_to_question_variants(personality) {
          var $a, $b, TMP_36, self = this;

          return ($a = ($b = self.$n_state("post_test").$test_questions()).$each, $a.$$p = (TMP_36 = function(test_question){var self = TMP_36.$$s || this, $c, $d, TMP_37;
if (test_question == null) test_question = nil;
          return ($c = ($d = test_question.$test_answer_variants()).$each, $c.$$p = (TMP_37 = function(test_answer_variant){var self = TMP_37.$$s || this, $e, $f, personality_scale = nil;
if (test_answer_variant == null) test_answer_variant = nil;
            personality_scale = $scope.get('PersonalityScale').$new();
              (($e = [personality]), $f = personality_scale, $f['$p_t_personality='].apply($f, $e), $e[$e.length-1]);
              return test_answer_variant.$personality_scales()['$<<'](personality_scale);}, TMP_37.$$s = self, TMP_37.$$arity = 1, TMP_37), $c).call($d)}, TMP_36.$$s = self, TMP_36.$$arity = 1, TMP_36), $a).call($b);
        }, TMP_38.$$arity = 1), nil) && 'add_personality_to_question_variants';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/personality_tests/personalities/edit"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$n_prop', '$t', '$modal', '$input', '$lambda', '$set_title_changed', '$n_state', '$update_title', '$media', '$display_media', '$clear_media', '$init_image_addition', '$init_gif_addition', '$init_video_embed_addition', '$delete', '$===', '$modal_open', '$event', '$add_image', '$media_id=', '$id', '$media_type=', '$media=', '$modal_close', '$update_media', '$add_gif', '$new', '$add_video_embed', '$force_update', '$video_embed=', '$then', '$validate', '$has_errors?', '$emit', '$destroy', '$set_state', '$update', '$medias_update']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PersonalityTests, self = $PersonalityTests = $module($base, 'PersonalityTests');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $Personalities, self = $Personalities = $module($base, 'Personalities');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Edit(){};
          var self = $Edit = $klass($base, $super, 'Edit', $Edit);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_9, TMP_10, TMP_12, TMP_13, TMP_15, TMP_16, TMP_18, TMP_19, TMP_20, TMP_22, TMP_23, TMP_25, TMP_27;

          self.$expose();

          self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

          Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
            var self = this;

            return $hash2(["title_changed"], {"title_changed": false});
          }, TMP_1.$$arity = 0);

          Opal.defn(self, '$render', TMP_9 = function ːrender() {
            var $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, $e, TMP_5, $f, TMP_6, $g, TMP_7, $h, TMP_8, self = this, p_t_personality = nil;

            p_t_personality = self.$n_prop("p_t_personality");
            return self.$t("div", $hash2(["className"], {"className": "Personalities-New"}), self.$modal(), self.$t("div", $hash2(["className"], {"className": "title"}), self.$input((($scope.get('Forms')).$$scope.get('Input')), p_t_personality, "title", $hash2(["required", "show_name", "collect_on_change", "on_change"], {"required": true, "show_name": "title", "collect_on_change": true, "on_change": ($a = ($b = self).$lambda, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

            return self.$set_title_changed()}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($b)}))), (function() {if ((($a = self.$n_state("title_changed")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

              return self.$update_title()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($c)}), "update title")
              } else {
              return nil
            }; return nil; })(), self.$t("div", $hash2(["className"], {"className": "media"}), (function() {if ((($a = p_t_personality.$media()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return [self.$display_media(), self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), self.$t("button", $hash2(["className", "onClick"], {"className": "btn btn-xs", "onClick": ($a = ($d = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

              return self.$clear_media()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($d)}), "remove media"))]
              } else {
              return self.$t("div", $hash2([], {}), self.$t("div", $hash2(["className"], {"className": "invalid"}), "please provide media"), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($e = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

              return self.$init_image_addition()}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($e)}), "add image"), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($f = self).$lambda, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

              return self.$init_gif_addition()}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($f)}), "add gif"), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($g = self).$lambda, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

              return self.$init_video_embed_addition()}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($g)}), "embed video"))
            }; return nil; })()), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($h = self).$lambda, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

            return self.$delete()}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($h)}), "remove this personality"));
          }, TMP_9.$$arity = 0);

          Opal.defn(self, '$display_media', TMP_10 = function ːdisplay_media() {
            var self = this, $case = nil, media = nil;

            return (function() {$case = media = self.$n_prop("p_t_personality").$media();if ($scope.get('PostImage')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": media}))}else if ($scope.get('PostGif')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('PostGifs'))).$$scope.get('Show')), $hash2(["post_gif"], {"post_gif": media}))}else if ($scope.get('VideoEmbed')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('VideoEmbeds'))).$$scope.get('Show')), $hash2(["video_embed"], {"video_embed": media}))}else { return nil }})();
          }, TMP_10.$$arity = 0);

          Opal.defn(self, '$init_image_addition', TMP_12 = function ːinit_image_addition() {
            var $a, $b, TMP_11, self = this;

            return self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('UploadAndPreview')), $hash2(["on_image_selected", "post_images"], {"on_image_selected": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_11 = function(image){var self = TMP_11.$$s || this;
if (image == null) image = nil;
            return self.$add_image(image)}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($b)), "post_images": []})));
          }, TMP_12.$$arity = 0);

          Opal.defn(self, '$add_image', TMP_13 = function ːadd_image(image) {
            var $a, $b, self = this, personality = nil;

            personality = self.$n_prop("p_t_personality");
            (($a = [image.$id()]), $b = personality, $b['$media_id='].apply($b, $a), $a[$a.length-1]);
            (($a = ["PostImage"]), $b = personality, $b['$media_type='].apply($b, $a), $a[$a.length-1]);
            (($a = [image]), $b = personality, $b['$media='].apply($b, $a), $a[$a.length-1]);
            self.$modal_close();
            return self.$update_media();
          }, TMP_13.$$arity = 1);

          Opal.defn(self, '$init_gif_addition', TMP_15 = function ːinit_gif_addition() {
            var $a, $b, TMP_14, self = this;

            return self.$modal_open(nil, self.$t("div", $hash2([], {}), self.$t((((($scope.get('Components')).$$scope.get('PostGifs'))).$$scope.get('New')), $hash2(["on_done", "subtitles_allowed"], {"on_done": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_14 = function(post_gif){var self = TMP_14.$$s || this;
if (post_gif == null) post_gif = nil;
            return self.$add_gif(post_gif)}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($b)), "subtitles_allowed": true}))));
          }, TMP_15.$$arity = 0);

          Opal.defn(self, '$add_gif', TMP_16 = function ːadd_gif(gif) {
            var $a, $b, self = this, personality = nil;

            personality = self.$n_prop("p_t_personality");
            (($a = [gif.$id()]), $b = personality, $b['$media_id='].apply($b, $a), $a[$a.length-1]);
            (($a = ["PostGif"]), $b = personality, $b['$media_type='].apply($b, $a), $a[$a.length-1]);
            self.$modal_close();
            return self.$update_media();
          }, TMP_16.$$arity = 1);

          Opal.defn(self, '$init_video_embed_addition', TMP_18 = function ːinit_video_embed_addition() {
            var $a, $b, TMP_17, self = this, personality = nil;

            personality = self.$n_prop("p_t_personality");
            (($a = ["VideoEmbed"]), $b = personality, $b['$media_type='].apply($b, $a), $a[$a.length-1]);
            (($a = [$scope.get('VideoEmbed').$new()]), $b = personality, $b['$media='].apply($b, $a), $a[$a.length-1]);
            self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('VideoEmbeds'))).$$scope.get('New')), $hash2(["video_embed", "on_uploaded"], {"video_embed": personality.$media(), "on_uploaded": ($a = ($b = self).$lambda, $a.$$p = (TMP_17 = function(video_embed){var self = TMP_17.$$s || this;
if (video_embed == null) video_embed = nil;
            return self.$add_video_embed(video_embed)}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17), $a).call($b)})));
            return self.$force_update();
          }, TMP_18.$$arity = 0);

          Opal.defn(self, '$add_video_embed', TMP_19 = function ːadd_video_embed(video_embed) {
            var $a, $b, self = this;

            (($a = [video_embed]), $b = self.$n_prop("p_t_personality"), $b['$video_embed='].apply($b, $a), $a[$a.length-1]);
            return self.$force_update();
          }, TMP_19.$$arity = 1);

          Opal.defn(self, '$clear_media', TMP_20 = function ːclear_media() {
            var $a, $b, self = this, personality = nil;

            personality = self.$n_prop("p_t_personality");
            (($a = [nil]), $b = personality, $b['$media_type='].apply($b, $a), $a[$a.length-1]);
            (($a = [nil]), $b = personality, $b['$media='].apply($b, $a), $a[$a.length-1]);
            return self.$force_update();
          }, TMP_20.$$arity = 0);

          Opal.defn(self, '$delete', TMP_22 = function() {
            var $a, $b, TMP_21, self = this;

            return ($a = ($b = self.$n_prop("p_t_personality").$destroy()).$then, $a.$$p = (TMP_21 = function(p_t_personality){var self = TMP_21.$$s || this, $c;
if (p_t_personality == null) p_t_personality = nil;
            p_t_personality.$validate();
              if ((($c = p_t_personality['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return self.$force_update()
                } else {
                return self.$emit("on_delete", p_t_personality)
              };}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21), $a).call($b);
          }, TMP_22.$$arity = 0);

          Opal.defn(self, '$set_title_changed', TMP_23 = function ːset_title_changed() {
            var self = this;

            return self.$set_state($hash2(["title_changed"], {"title_changed": true}));
          }, TMP_23.$$arity = 0);

          Opal.defn(self, '$update_title', TMP_25 = function ːupdate_title() {
            var $a, $b, TMP_24, self = this;

            return ($a = ($b = self.$n_prop("p_t_personality").$update()).$then, $a.$$p = (TMP_24 = function(p_t_personality){var self = TMP_24.$$s || this, $c;
if (p_t_personality == null) p_t_personality = nil;
            if ((($c = p_t_personality['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return self.$force_update()
                } else {
                self.$set_state($hash2(["title_changed"], {"title_changed": false}));
                return self.$n_prop("owner").$force_update();
              }}, TMP_24.$$s = self, TMP_24.$$arity = 1, TMP_24), $a).call($b);
          }, TMP_25.$$arity = 0);

          return (Opal.defn(self, '$update_media', TMP_27 = function ːupdate_media() {
            var $a, $b, TMP_26, self = this;

            return ($a = ($b = self.$n_prop("p_t_personality").$medias_update()).$then, $a.$$p = (TMP_26 = function(p_t_personality){var self = TMP_26.$$s || this;
if (p_t_personality == null) p_t_personality = nil;
            return self.$force_update()}, TMP_26.$$s = self, TMP_26.$$arity = 1, TMP_26), $a).call($b);
          }, TMP_27.$$arity = 0), nil) && 'update_media';
        })($scope.base, $scope.get('RW'))
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/personality_tests/personalities/new"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$edit_mode', '$props', '$n_prop', '$<<', '$comps_to_call_collect_on', '$delete', '$id', '$t', '$modal', '$input', '$[]', '$errors', '$each', '$media', '$display_media', '$lambda', '$clear_media', '$init_image_addition', '$init_gif_addition', '$init_video_embed_addition', '$create_personality', '$===', '$modal_open', '$event', '$add_image', '$media_id=', '$media_type=', '$media=', '$modal_close', '$force_update', '$add_gif', '$p', '$file=', '$new', '$add_video_embed', '$collect_inputs', '$then', '$emit', '$create', '$delete_personality']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PersonalityTests, self = $PersonalityTests = $module($base, 'PersonalityTests');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $Personalities, self = $Personalities = $module($base, 'Personalities');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $New(){};
          var self = $New = $klass($base, $super, 'New', $New);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_10, TMP_11, TMP_13, TMP_14, TMP_16, TMP_17, TMP_19, TMP_20, TMP_21, TMP_22, TMP_24, TMP_25;

          self.$expose();

          self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

          Opal.defn(self, '$component_did_mount', TMP_1 = function ːcomponent_did_mount() {
            var $a, self = this;

            if ((($a = self.$props().$edit_mode()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return nil
            } else if ((($a = self.$n_prop("save_in_place")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$n_prop("owner").$comps_to_call_collect_on()['$<<'](self)
            };
          }, TMP_1.$$arity = 0);

          Opal.defn(self, '$component_will_unmount', TMP_2 = function ːcomponent_will_unmount() {
            var $a, self = this;

            if ((($a = self.$props().$edit_mode()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return nil
            } else if ((($a = self.$n_prop("save_in_place")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$n_prop("owner").$comps_to_call_collect_on().$delete(self)
            };
          }, TMP_2.$$arity = 0);

          Opal.defn(self, '$render', TMP_10 = function ːrender() {
            var $a, $b, TMP_3, $c, TMP_4, $d, TMP_5, $e, TMP_6, $f, TMP_7, $g, TMP_8, $h, TMP_9, self = this, edit_mode = nil, new_model = nil, p_t_personality = nil, errors = nil;

            edit_mode = (function() {if ((($a = self.$n_prop("edit_mode")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return true
              } else {
              return false
            }; return nil; })();
            new_model = (function() {if ((($a = self.$n_prop("p_t_personality").$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return false
              } else {
              return true
            }; return nil; })();
            p_t_personality = self.$n_prop("p_t_personality");
            return self.$t("div", $hash2(["className"], {"className": "Personalities-New"}), self.$modal(), self.$t("div", $hash2(["className"], {"className": "title"}), self.$input((($scope.get('Forms')).$$scope.get('Input')), p_t_personality, "title", $hash2(["required", "show_name", "collect_on_change"], {"required": true, "show_name": "title", "collect_on_change": true}))), self.$t("div", $hash2(["className"], {"className": "media"}), (function() {if ((($a = errors = p_t_personality.$errors()['$[]']("media")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("div", $hash2(["className"], {"className": "invalid"}), ($a = ($b = errors).$each, $a.$$p = (TMP_3 = function(error){var self = TMP_3.$$s || this;
if (error == null) error = nil;
              return self.$t("p", $hash2([], {}), error)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b))
              } else {
              return nil
            }; return nil; })(), (function() {if ((($a = p_t_personality.$media()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return [self.$display_media(), self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), self.$t("button", $hash2(["className", "onClick"], {"className": "btn btn-xs", "onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

              return self.$clear_media()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($c)}), "remove media"))]
              } else {
              return self.$t("div", $hash2([], {}), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($d = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

              return self.$init_image_addition()}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($d)}), "add image"), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($e = self).$lambda, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

              return self.$init_gif_addition()}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($e)}), "add gif"), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($f = self).$lambda, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

              return self.$init_video_embed_addition()}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($f)}), "embed video"))
            }; return nil; })()), (function() {if ((($a = (($g = new_model !== false && new_model !== nil && new_model != null) ? edit_mode : new_model)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($g = self).$lambda, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

              return self.$create_personality()}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($g)}), "save personality")
              } else {
              return nil
            }; return nil; })(), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($h = self).$lambda, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

            return self.$delete()}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($h)}), "remove this personality"));
          }, TMP_10.$$arity = 0);

          Opal.defn(self, '$display_media', TMP_11 = function ːdisplay_media() {
            var self = this, $case = nil, media = nil;

            return (function() {$case = media = self.$n_prop("p_t_personality").$media();if ($scope.get('PostImage')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": media}))}else if ($scope.get('PostGif')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('PostGifs'))).$$scope.get('Show')), $hash2(["post_gif"], {"post_gif": media}))}else if ($scope.get('VideoEmbed')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('VideoEmbeds'))).$$scope.get('Show')), $hash2(["video_embed"], {"video_embed": media}))}else { return nil }})();
          }, TMP_11.$$arity = 0);

          Opal.defn(self, '$init_image_addition', TMP_13 = function ːinit_image_addition() {
            var $a, $b, TMP_12, self = this;

            return self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('UploadAndPreview')), $hash2(["on_image_selected", "post_images"], {"on_image_selected": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_12 = function(image){var self = TMP_12.$$s || this;
if (image == null) image = nil;
            return self.$add_image(image)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $a).call($b)), "post_images": []})));
          }, TMP_13.$$arity = 0);

          Opal.defn(self, '$add_image', TMP_14 = function ːadd_image(image) {
            var $a, $b, self = this, personality = nil;

            personality = self.$n_prop("p_t_personality");
            (($a = [image.$id()]), $b = personality, $b['$media_id='].apply($b, $a), $a[$a.length-1]);
            (($a = ["PostImage"]), $b = personality, $b['$media_type='].apply($b, $a), $a[$a.length-1]);
            (($a = [image]), $b = personality, $b['$media='].apply($b, $a), $a[$a.length-1]);
            self.$modal_close();
            return self.$force_update();
          }, TMP_14.$$arity = 1);

          Opal.defn(self, '$init_gif_addition', TMP_16 = function ːinit_gif_addition() {
            var $a, $b, TMP_15, self = this;

            return self.$modal_open(nil, self.$t("div", $hash2([], {}), self.$t((((($scope.get('Components')).$$scope.get('PostGifs'))).$$scope.get('New')), $hash2(["on_done", "subtitles_allowed"], {"on_done": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_15 = function(post_gif){var self = TMP_15.$$s || this;
if (post_gif == null) post_gif = nil;
            return self.$add_gif(post_gif)}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15), $a).call($b)), "subtitles_allowed": true}))));
          }, TMP_16.$$arity = 0);

          Opal.defn(self, '$add_gif', TMP_17 = function ːadd_gif(gif) {
            var $a, $b, self = this, personality = nil;

            self.$p("adding gif");
            self.$modal_close();
            (($a = [null]), $b = gif, $b['$file='].apply($b, $a), $a[$a.length-1]);
            personality = self.$n_prop("p_t_personality");
            (($a = [gif.$id()]), $b = personality, $b['$media_id='].apply($b, $a), $a[$a.length-1]);
            (($a = ["PostGif"]), $b = personality, $b['$media_type='].apply($b, $a), $a[$a.length-1]);
            (($a = [gif]), $b = personality, $b['$media='].apply($b, $a), $a[$a.length-1]);
            return self.$force_update();
          }, TMP_17.$$arity = 1);

          Opal.defn(self, '$init_video_embed_addition', TMP_19 = function ːinit_video_embed_addition() {
            var $a, $b, TMP_18, self = this;

            self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('VideoEmbeds'))).$$scope.get('New')), $hash2(["video_embed", "on_done"], {"video_embed": $scope.get('VideoEmbed').$new(), "on_done": ($a = ($b = self).$lambda, $a.$$p = (TMP_18 = function(video_embed){var self = TMP_18.$$s || this;
if (video_embed == null) video_embed = nil;
            return self.$add_video_embed(video_embed)}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18), $a).call($b)})));
            return self.$force_update();
          }, TMP_19.$$arity = 0);

          Opal.defn(self, '$add_video_embed', TMP_20 = function ːadd_video_embed(video_embed) {
            var $a, $b, self = this, personality = nil;

            personality = self.$n_prop("p_t_personality");
            (($a = ["VideoEmbed"]), $b = personality, $b['$media_type='].apply($b, $a), $a[$a.length-1]);
            (($a = [video_embed.$id()]), $b = personality, $b['$media_id='].apply($b, $a), $a[$a.length-1]);
            (($a = [video_embed]), $b = personality, $b['$media='].apply($b, $a), $a[$a.length-1]);
            self.$modal_close();
            return self.$force_update();
          }, TMP_20.$$arity = 1);

          Opal.defn(self, '$clear_media', TMP_21 = function ːclear_media() {
            var $a, $b, self = this, personality = nil;

            personality = self.$n_prop("p_t_personality");
            (($a = [nil]), $b = personality, $b['$media_type='].apply($b, $a), $a[$a.length-1]);
            (($a = [nil]), $b = personality, $b['$media='].apply($b, $a), $a[$a.length-1]);
            return self.$force_update();
          }, TMP_21.$$arity = 0);

          Opal.defn(self, '$handle_inputs', TMP_22 = function ːhandle_inputs() {
            var self = this;

            return self.$collect_inputs($hash2(["model"], {"model": self.$n_prop("p_t_personality")}));
          }, TMP_22.$$arity = 0);

          Opal.defn(self, '$create_personality', TMP_24 = function ːcreate_personality() {
            var $a, $b, TMP_23, self = this;

            return ($a = ($b = self.$n_prop("p_t_personality").$create()).$then, $a.$$p = (TMP_23 = function(p_t_personality){var self = TMP_23.$$s || this, e = nil;
if (p_t_personality == null) p_t_personality = nil;
            self.$p("should emit");
              try {
                return self.$emit("on_p_t_personality_created", p_t_personality)
              } catch ($err) {
                if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                  try {
                    return self.$p(e)
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              };}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23), $a).call($b);
          }, TMP_24.$$arity = 0);

          return (Opal.defn(self, '$delete', TMP_25 = function() {
            var self = this;

            return self.$n_prop("owner").$delete_personality(self.$n_prop("p_t_personality"));
          }, TMP_25.$$arity = 0), nil) && 'delete';
        })($scope.base, $scope.get('RW'))
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/personality_tests/personalities/show"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$n_prop', '$t', '$title', '$display_media_depending_on_type', '$media', '$===']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PersonalityTests, self = $PersonalityTests = $module($base, 'PersonalityTests');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $Personalities, self = $Personalities = $module($base, 'Personalities');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Show(){};
          var self = $Show = $klass($base, $super, 'Show', $Show);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

          self.$expose();

          Opal.defn(self, '$render', TMP_1 = function ːrender() {
            var self = this, p_t_personality = nil;

            p_t_personality = self.$n_prop("p_t_personality");
            return self.$t("div", $hash2(["className"], {"className": "PersonalityTests-Personalities-Show"}), self.$t("div", $hash2(["className"], {"className": "title"}), self.$t("h3", $hash2([], {}), p_t_personality.$title())), self.$t("div", $hash2(["className"], {"className": "media"}), self.$display_media_depending_on_type()));
          }, TMP_1.$$arity = 0);

          return (Opal.defn(self, '$display_media_depending_on_type', TMP_2 = function ːdisplay_media_depending_on_type() {
            var self = this, $case = nil, media = nil;

            return (function() {$case = media = self.$n_prop("p_t_personality").$media();if ($scope.get('PostImage')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": media}))}else if ($scope.get('PostGif')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('PostGifs'))).$$scope.get('Show')), $hash2(["post_gif"], {"post_gif": media}))}else if ($scope.get('VideoEmbed')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('VideoEmbeds'))).$$scope.get('New')), $hash2(["video_embed"], {"video_embed": media}))}else { return nil }})();
          }, TMP_2.$$arity = 0), nil) && 'display_media_depending_on_type';
        })($scope.base, $scope.get('RW'))
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/personality_tests/questions/edit"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$attr_accessor', '$n_prop', '$t', '$modal', '$errors', '$map', '$input', '$lambda', '$set_text_changed', '$n_state', '$update_text', '$content', '$delete_image', '$init_image_insertion_to_content', '$id', '$delete', '$data', '$test_answer_variants', '$add_variant', '$emit', '$delete_question', '$submit_when_save_in_place', '$set_state', '$collect_inputs', '$then', '$update', '$new', '$test_question_id=', '$populate_variant_with_personality_scales', '$<<', '$force_update', '$p', '$each', '$to_proc', '$modal_open', '$event', '$insert_image_to_content', '$modal_close', '$has_errors?', '$add_error', '$content=', '$content_type=', '$content_id=', '$update_test_question_as_content', '$remove_from_test_question', '$populate_personality_scales_with_personalities', '$personality_test_destroy', '$post_test_id']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PersonalityTests, self = $PersonalityTests = $module($base, 'PersonalityTests');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $Questions, self = $Questions = $module($base, 'Questions');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Edit(){};
          var self = $Edit = $klass($base, $super, 'Edit', $Edit);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_15, TMP_16, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_24, TMP_27, TMP_30, TMP_31, TMP_33;

          def.comps_to_call_collect_on = nil;
          self.$expose();

          self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

          self.$attr_accessor("comps_to_call_collect_on");

          Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
            var $a, self = this;

            self.edit_mode = (function() {if ((($a = self.$n_prop("edit_mode")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return true
              } else {
              return false
            }; return nil; })();
            self.comps_to_call_collect_on = [];
            return $hash2(["text_changed"], {"text_changed": false});
          }, TMP_1.$$arity = 0);

          Opal.defn(self, '$render', TMP_15 = function ːrender() {
            var $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, $e, TMP_5, $f, TMP_6, $g, TMP_7, $h, TMP_8, $i, TMP_11, $j, TMP_12, $k, TMP_13, $l, TMP_14, self = this;

            return self.$t("div", $hash2(["className"], {"className": "TestQuestions-New"}), self.$modal(), self.$t("div", $hash2(["className"], {"className": "g-errors-group"}), (function() {if ((($a = self.$n_prop("question").$errors()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return ($a = ($b = self.$n_prop("question").$errors()).$map, $a.$$p = (TMP_2 = function(er){var self = TMP_2.$$s || this;
if (er == null) er = nil;
              return self.$t("p", $hash2([], {}), er)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b)
              } else {
              return nil
            }; return nil; })()), self.$input((($scope.get('Forms')).$$scope.get('Input')), self.$n_prop("question"), "text", $hash2(["show_name", "required_field", "on_change"], {"show_name": "question", "required_field": true, "on_change": ($a = ($c = self).$lambda, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

            return self.$set_text_changed()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($c)})), (function() {if ((($a = self.$n_state("text_changed")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($d = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

              return self.$update_text()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($d)}), "update title")
              } else {
              return nil
            }; return nil; })(), (function() {if ((($a = self.$n_prop("question").$content()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("div", $hash2(["className"], {"className": "thumbnail"}), self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": self.$n_prop("question").$content()})), self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($e = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

              return self.$delete_image()}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($e), "className": "btn btn-sm"}), "remove image"), self.$t("buttin", $hash2(["onClick"], {"onClick": ($a = ($f = self).$lambda, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

              return self.$init_image_insertion_to_content()}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($f)}), "replace image")))
              } else {
              return self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($g = self).$lambda, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

              return self.$init_image_insertion_to_content()}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($g), "className": "btn btn-sm"}), "add image"))
            }; return nil; })(), self.$t("div", $hash2(["className"], {"className": "variants-container"}), ($a = ($h = self.$n_prop("question").$test_answer_variants().$data()).$map, $a.$$p = (TMP_8 = function(variant){var self = TMP_8.$$s || this, $i, $j, TMP_9, $k, TMP_10;
if (variant == null) variant = nil;
            if ((($i = variant.$id()) !== nil && $i != null && (!$i.$$is_boolean || $i == true))) {
                return self.$t((((((($scope.get('Components')).$$scope.get('PersonalityTests'))).$$scope.get('AnswerVariants'))).$$scope.get('Edit')), $hash2(["owner", "variant", "on_delete", "image_roster"], {"owner": self, "variant": variant, "on_delete": ($i = ($j = self).$lambda, $i.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

                return self.$delete(variant)}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $i).call($j), "image_roster": []}))
                } else {
                return self.$t((((((($scope.get('Components')).$$scope.get('PersonalityTests'))).$$scope.get('AnswerVariants'))).$$scope.get('New')), $hash2(["owner", "variant", "on_delete", "image_roster", "save_in_place"], {"owner": self, "variant": variant, "on_delete": ($i = ($k = self).$lambda, $i.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

                return self.$delete(variant)}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $i).call($k), "image_roster": [], "save_in_place": true}))
              }}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $a).call($h), self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($i = self).$lambda, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

            return self.$add_variant()}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $a).call($i), "className": "btn btn-sm"}), "add_variant"))), self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($j = self).$lambda, $a.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this;

            return self.$emit("on_delete")}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12), $a).call($j), "className": "btn btn-sm"}), "delete")), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($k = self).$lambda, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;

            return self.$delete_question()}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $a).call($k)}), "delete this question"), (function() {if ((($a = self.$n_prop("save_in_place")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($l = self).$lambda, $a.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this;

              return self.$submit_when_save_in_place()}, TMP_14.$$s = self, TMP_14.$$arity = 0, TMP_14), $a).call($l)}), "save")
              } else {
              return nil
            }; return nil; })());
          }, TMP_15.$$arity = 0);

          Opal.defn(self, '$set_text_changed', TMP_16 = function ːset_text_changed() {
            var self = this;

            return self.$set_state($hash2(["text_changed"], {"text_changed": true}));
          }, TMP_16.$$arity = 0);

          Opal.defn(self, '$update_text', TMP_18 = function ːupdate_text() {
            var $a, $b, TMP_17, self = this;

            self.$collect_inputs();
            return ($a = ($b = self.$n_prop("question").$update()).$then, $a.$$p = (TMP_17 = function(question){var self = TMP_17.$$s || this;
if (question == null) question = nil;
            return self.$set_state($hash2(["text_changed"], {"text_changed": false}))}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17), $a).call($b);
          }, TMP_18.$$arity = 0);

          Opal.defn(self, '$add_variant', TMP_19 = function ːadd_variant() {
            var $a, $b, self = this, variant = nil;

            variant = $scope.get('TestAnswerVariant').$new();
            (($a = [self.$n_prop("question").$id()]), $b = variant, $b['$test_question_id='].apply($b, $a), $a[$a.length-1]);
            self.$populate_variant_with_personality_scales(variant);
            self.$n_prop("question").$test_answer_variants().$data()['$<<'](variant);
            return self.$force_update();
          }, TMP_19.$$arity = 0);

          Opal.defn(self, '$delete', TMP_20 = function(variant) {
            var self = this;

            self.$p("deleting");
            self.$n_prop("question").$test_answer_variants().$data().$delete(variant);
            return self.$force_update();
          }, TMP_20.$$arity = 1);

          Opal.defn(self, '$populate_variant_with_personality_scales', TMP_21 = function ːpopulate_variant_with_personality_scales(variant) {
            var self = this;

            return self.$n_prop("owner").$populate_variant_with_personality_scales(variant);
          }, TMP_21.$$arity = 1);

          Opal.defn(self, '$handle_inputs', TMP_22 = function ːhandle_inputs() {
            var $a, $b, self = this;

            ($a = ($b = self.comps_to_call_collect_on).$each, $a.$$p = "handle_inputs".$to_proc(), $a).call($b);
            return self.$collect_inputs($hash2(["model"], {"model": self.$n_prop("variant")}));
          }, TMP_22.$$arity = 0);

          Opal.defn(self, '$init_image_insertion_to_content', TMP_24 = function ːinit_image_insertion_to_content() {
            var $a, $b, TMP_23, self = this;

            return self.$modal_open(self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('UploadAndPreview')), $hash2(["on_image_selected", "post_images"], {"on_image_selected": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_23 = function(image){var self = TMP_23.$$s || this;
if (image == null) image = nil;
            return self.$insert_image_to_content(image)}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23), $a).call($b)), "post_images": self.$n_prop("image_roster")})));
          }, TMP_24.$$arity = 0);

          Opal.defn(self, '$insert_image_to_content', TMP_27 = function ːinsert_image_to_content(image) {
            var $a, $b, TMP_25, self = this;

            self.$modal_close();
            return ($a = ($b = image.$update_test_question_as_content($hash2(["wilds"], {"wilds": $hash2(["test_question_id", "id"], {"test_question_id": self.$n_prop("question").$id(), "id": image.$id()})}))).$then, $a.$$p = (TMP_25 = function(u_img){var self = TMP_25.$$s || this, $c, $d, TMP_26, $e;
if (u_img == null) u_img = nil;
            if ((($c = u_img['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                ($c = ($d = u_img.$errors()).$each, $c.$$p = (TMP_26 = function(er){var self = TMP_26.$$s || this;
if (er == null) er = nil;
                return self.$n_prop("question").$add_error("content", er)}, TMP_26.$$s = self, TMP_26.$$arity = 1, TMP_26), $c).call($d)
                } else {
                (($c = [u_img]), $e = self.$n_prop("question"), $e['$content='].apply($e, $c), $c[$c.length-1]);
                (($c = ["PostImage"]), $e = self.$n_prop("question"), $e['$content_type='].apply($e, $c), $c[$c.length-1]);
                (($c = [u_img.$id()]), $e = self.$n_prop("question"), $e['$content_id='].apply($e, $c), $c[$c.length-1]);
              };
              return self.$force_update();}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25), $a).call($b);
          }, TMP_27.$$arity = 1);

          Opal.defn(self, '$delete_image', TMP_30 = function ːdelete_image() {
            var $a, $b, TMP_28, self = this;

            return ($a = ($b = self.$n_prop("question").$content().$remove_from_test_question($hash2(["wilds"], {"wilds": $hash2(["test_question_id"], {"test_question_id": self.$n_prop("question").$id()})}))).$then, $a.$$p = (TMP_28 = function(image){var self = TMP_28.$$s || this, $c, $d, TMP_29, $e;
if (image == null) image = nil;
            if ((($c = image['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                ($c = ($d = image.$errors()).$each, $c.$$p = (TMP_29 = function(er){var self = TMP_29.$$s || this;
if (er == null) er = nil;
                return self.$n_prop("question").$add_error("content", er)}, TMP_29.$$s = self, TMP_29.$$arity = 1, TMP_29), $c).call($d)
                } else {
                (($c = [nil]), $e = self.$n_prop("question"), $e['$content_id='].apply($e, $c), $c[$c.length-1]);
                (($c = [nil]), $e = self.$n_prop("question"), $e['$content='].apply($e, $c), $c[$c.length-1]);
                (($c = [nil]), $e = self.$n_prop("question"), $e['$content_type='].apply($e, $c), $c[$c.length-1]);
              };
              return self.$force_update();}, TMP_28.$$s = self, TMP_28.$$arity = 1, TMP_28), $a).call($b);
          }, TMP_30.$$arity = 0);

          Opal.defn(self, '$populate_variant_scales_with_personalities', TMP_31 = function ːpopulate_variant_scales_with_personalities(variant) {
            var self = this;

            return self.$n_prop("owner").$populate_personality_scales_with_personalities(variant);
          }, TMP_31.$$arity = 1);

          return (Opal.defn(self, '$delete_question', TMP_33 = function ːdelete_question() {
            var $a, $b, TMP_32, self = this;

            return ($a = ($b = self.$n_prop("question").$personality_test_destroy($hash2(["wilds"], {"wilds": $hash2(["personality_test_id"], {"personality_test_id": self.$n_prop("question").$post_test_id()})}))).$then, $a.$$p = (TMP_32 = function(test_question){var self = TMP_32.$$s || this, $c;
if (test_question == null) test_question = nil;
            if ((($c = test_question['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return self.$force_update()
                } else {
                return self.$emit("on_delete", self.$n_prop("test_question"))
              }}, TMP_32.$$s = self, TMP_32.$$arity = 1, TMP_32), $a).call($b);
          }, TMP_33.$$arity = 0), nil) && 'delete_question';
        })($scope.base, $scope.get('RW'))
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/personality_tests/questions/new"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$attr_accessor', '$n_prop', '$<<', '$comps_to_call_collect_on', '$delete', '$t', '$modal', '$errors', '$map', '$input', '$content', '$==', '$question_type', '$lambda', '$delete_image', '$init_image_insertion', '$data', '$test_answer_variants', '$add_variant', '$emit', '$create_when_in_edit_mode', '$new', '$populate_variant_with_personality_scales', '$force_update', '$each', '$to_proc', '$collect_inputs', '$modal_close', '$content=', '$question_type=', '$content_type=', '$modal_open', '$event', '$insert_image_to_on_answered', '$then', '$populate_personality_scales_with_personalities', '$p', '$personality_test_create', '$post_test_id']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PersonalityTests, self = $PersonalityTests = $module($base, 'PersonalityTests');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $Questions, self = $Questions = $module($base, 'Questions');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $New(){};
          var self = $New = $klass($base, $super, 'New', $New);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_20, TMP_23;

          def.comps_to_call_collect_on = nil;
          self.$expose();

          self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

          self.$attr_accessor("comps_to_call_collect_on");

          Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
            var self = this;

            self.comps_to_call_collect_on = [];
            return $hash2([], {});
          }, TMP_1.$$arity = 0);

          Opal.defn(self, '$component_did_mount', TMP_2 = function ːcomponent_did_mount() {
            var $a, self = this;

            if ((($a = self.$n_prop("edit_mode")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$n_prop("owner").$comps_to_call_collect_on()['$<<'](self)
            };
          }, TMP_2.$$arity = 0);

          Opal.defn(self, '$component_will_unmount', TMP_3 = function ːcomponent_will_unmount() {
            var $a, self = this;

            if ((($a = self.$n_prop("edit_mode")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$n_prop("owner").$comps_to_call_collect_on().$delete(self)
            };
          }, TMP_3.$$arity = 0);

          Opal.defn(self, '$render', TMP_12 = function ːrender() {
            var $a, $b, TMP_4, $c, TMP_5, $d, TMP_6, $e, TMP_7, $f, TMP_9, $g, TMP_10, $h, TMP_11, self = this;

            return self.$t("div", $hash2(["className"], {"className": "TestQuestions-New"}), self.$modal(), self.$t("div", $hash2(["className"], {"className": "g-errors-group"}), (function() {if ((($a = self.$n_prop("question").$errors()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return ($a = ($b = self.$n_prop("question").$errors()).$map, $a.$$p = (TMP_4 = function(er){var self = TMP_4.$$s || this;
if (er == null) er = nil;
              return self.$t("p", $hash2([], {}), er)}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($b)
              } else {
              return nil
            }; return nil; })()), self.$input((($scope.get('Forms')).$$scope.get('Input')), self.$n_prop("question"), "text", $hash2(["show_name", "required_field"], {"show_name": "question", "required_field": true})), (function() {if ((($a = ($c = self.$n_prop("question").$content(), $c !== false && $c !== nil && $c != null ?self.$n_prop("question").$question_type()['$==']("PostImage") : $c)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("div", $hash2(["className"], {"className": "thumbnail"}), self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": self.$n_prop("question").$content()})), self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

              return self.$delete_image()}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($c), "className": "btn btn-sm"}), "remove this")))
              } else {
              return self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($d = self).$lambda, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

              return self.$init_image_insertion()}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($d), "className": "btn btn-sm"}), "add image"))
            }; return nil; })(), self.$t("div", $hash2(["className"], {"className": "variants-container"}), ($a = ($e = self.$n_prop("question").$test_answer_variants().$data()).$map, $a.$$p = (TMP_7 = function(variant){var self = TMP_7.$$s || this, $f, $g, TMP_8;
if (variant == null) variant = nil;
            return self.$t((((((($scope.get('Components')).$$scope.get('PersonalityTests'))).$$scope.get('AnswerVariants'))).$$scope.get('New')), $hash2(["owner", "variant", "on_delete", "image_roster"], {"owner": self, "variant": variant, "on_delete": ($f = ($g = self).$lambda, $f.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

              return self.$delete(variant)}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $f).call($g), "image_roster": self.$n_prop("image_roster")}))}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($e), self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($f = self).$lambda, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

            return self.$add_variant()}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($f), "className": "btn btn-sm"}), "add_variant"))), self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($g = self).$lambda, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

            return self.$emit("on_delete")}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $a).call($g), "className": "btn btn-sm"}), "delete")), (function() {if ((($a = self.$n_prop("edit_mode")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($h = self).$lambda, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

              return self.$create_when_in_edit_mode()}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $a).call($h)}), "save")
              } else {
              return nil
            }; return nil; })());
          }, TMP_12.$$arity = 0);

          Opal.defn(self, '$add_variant', TMP_13 = function ːadd_variant() {
            var self = this, variant = nil;

            variant = $scope.get('TestAnswerVariant').$new();
            self.$populate_variant_with_personality_scales(variant);
            self.$n_prop("question").$test_answer_variants().$data()['$<<'](variant);
            return self.$force_update();
          }, TMP_13.$$arity = 0);

          Opal.defn(self, '$delete', TMP_14 = function(variant) {
            var self = this;

            self.$n_prop("question").$test_answer_variants().$data().$delete(variant);
            return self.$force_update();
          }, TMP_14.$$arity = 1);

          Opal.defn(self, '$populate_variant_with_personality_scales', TMP_15 = function ːpopulate_variant_with_personality_scales(variant) {
            var self = this;

            return self.$n_prop("owner").$populate_variant_with_personality_scales(variant);
          }, TMP_15.$$arity = 1);

          Opal.defn(self, '$handle_inputs', TMP_16 = function ːhandle_inputs() {
            var $a, $b, self = this;

            ($a = ($b = self.comps_to_call_collect_on).$each, $a.$$p = "handle_inputs".$to_proc(), $a).call($b);
            return self.$collect_inputs($hash2(["model"], {"model": self.$n_prop("question")}));
          }, TMP_16.$$arity = 0);

          Opal.defn(self, '$insert_image', TMP_17 = function ːinsert_image(image) {
            var $a, $b, self = this;

            self.$modal_close();
            (($a = [image]), $b = self.$n_prop("question"), $b['$content='].apply($b, $a), $a[$a.length-1]);
            (($a = ["PostImage"]), $b = self.$n_prop("question"), $b['$question_type='].apply($b, $a), $a[$a.length-1]);
            (($a = ["PostImage"]), $b = self.$n_prop("question"), $b['$content_type='].apply($b, $a), $a[$a.length-1]);
            return self.$force_update();
          }, TMP_17.$$arity = 1);

          Opal.defn(self, '$delete_image', TMP_18 = function ːdelete_image() {
            var $a, $b, self = this;

            (($a = [nil]), $b = self.$n_prop("question"), $b['$content='].apply($b, $a), $a[$a.length-1]);
            (($a = [nil]), $b = self.$n_prop("question"), $b['$content_type='].apply($b, $a), $a[$a.length-1]);
            (($a = [nil]), $b = self.$n_prop("question"), $b['$question_type='].apply($b, $a), $a[$a.length-1]);
            return self.$force_update();
          }, TMP_18.$$arity = 0);

          Opal.defn(self, '$init_image_insertion_for_on_answered', TMP_20 = function ːinit_image_insertion_for_on_answered() {
            var $a, $b, TMP_19, self = this;

            return self.$modal_open(self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('UploadAndPreview')), $hash2(["on_image_selected", "post_images"], {"on_image_selected": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_19 = function(image){var self = TMP_19.$$s || this;
if (image == null) image = nil;
            return self.$insert_image_to_on_answered(image)}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19), $a).call($b)), "post_images": self.$n_prop("image_roster")})));
          }, TMP_20.$$arity = 0);

          return (Opal.defn(self, '$create_when_in_edit_mode', TMP_23 = function ːcreate_when_in_edit_mode() {
            var $a, $b, $c, TMP_21, self = this;

            ($a = ($b = self.comps_to_call_collect_on).$each, $a.$$p = "handle_inputs".$to_proc(), $a).call($b);
            self.$collect_inputs($hash2(["model"], {"model": self.$n_prop("question")}));
            return ($a = ($c = self.$n_prop("question").$personality_test_create($hash2(["wilds"], {"wilds": $hash2(["personality_test_id"], {"personality_test_id": self.$n_prop("question").$post_test_id()})}))).$then, $a.$$p = (TMP_21 = function(test_question){var self = TMP_21.$$s || this, $d, $e, TMP_22, e = nil;
if (test_question == null) test_question = nil;
            try {
                ($d = ($e = test_question.$test_answer_variants()).$each, $d.$$p = (TMP_22 = function(variant){var self = TMP_22.$$s || this;
if (variant == null) variant = nil;
                return self.$n_prop("owner").$populate_personality_scales_with_personalities(variant)}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22), $d).call($e);
                return self.$n_prop("owner").$force_update();
              } catch ($err) {
                if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                  try {
                    return self.$p(e)
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              }}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21), $a).call($c);
          }, TMP_23.$$arity = 0), nil) && 'create_when_in_edit_mode';
        })($scope.base, $scope.get('RW'))
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/personality_tests/questions/show"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$n_prop', '$n_state', '$t', '$text', '$content', '$map', '$lambda', '$on_selected', '$data', '$test_answer_variants', '$set_state', '$emit']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PersonalityTests, self = $PersonalityTests = $module($base, 'PersonalityTests');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $Questions, self = $Questions = $module($base, 'Questions');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Show(){};
          var self = $Show = $klass($base, $super, 'Show', $Show);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_5, TMP_6;

          self.$expose();

          Opal.defn(self, '$validate_props', TMP_1 = function ːvalidate_props() {
            var self = this;

            return nil;
          }, TMP_1.$$arity = 0);

          Opal.defn(self, '$get_initial_state', TMP_2 = function ːget_initial_state() {
            var self = this;

            return $hash2(["question", "answered"], {"question": self.$n_prop("question"), "answered": false});
          }, TMP_2.$$arity = 0);

          Opal.defn(self, '$render', TMP_5 = function ːrender() {
            var $a, $b, TMP_3, self = this, question = nil;

            question = self.$n_state("question");
            return self.$t("div", $hash2(["className"], {"className": "PostTestsQuestions-Show"}), (function() {if ((($a = question.$text()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("h4", $hash2(["className"], {"className": "text"}), question.$text())
              } else {
              return nil
            }; return nil; })(), (function() {if ((($a = question.$content()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image", "css_class"], {"post_image": question.$content(), "css_class": "thumbnail"}))
              } else {
              return nil
            }; return nil; })(), self.$t("div", $hash2(["className"], {"className": "variantsContainer"}), ($a = ($b = question.$test_answer_variants().$data()).$map, $a.$$p = (TMP_3 = function(variant){var self = TMP_3.$$s || this, $c, $d, TMP_4;
if (variant == null) variant = nil;
            return self.$t((((((($scope.get('Components')).$$scope.get('PersonalityTests'))).$$scope.get('AnswerVariants'))).$$scope.get('Show')), $hash2(["variant", "on_selected", "answered"], {"variant": variant, "on_selected": ($c = ($d = self).$lambda, $c.$$p = (TMP_4 = function(variant){var self = TMP_4.$$s || this;
if (variant == null) variant = nil;
              return self.$on_selected(variant)}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $c).call($d), "answered": self.$n_state("answered")}))}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b)));
          }, TMP_5.$$arity = 0);

          return (Opal.defn(self, '$on_selected', TMP_6 = function ːon_selected(variant) {
            var self = this;

            self.$set_state($hash2(["answered"], {"answered": true}));
            return self.$emit("on_answered", self.$n_state("question"), variant);
          }, TMP_6.$$arity = 1), nil) && 'on_selected';
        })($scope.base, $scope.get('RW'))
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/personality_tests/show"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$p', '$n_prop', '$length', '$data', '$test_questions', '$prepare_answer_tracker', '$populate_variant_scales_with_personalities', '$each', '$[]=', '$id', '$p_t_personalities', '$[]', '$p_t_personality_id', '$p_t_personality=', '$personality_scales', '$test_answer_variants', '$n_state', '$t', '$title', '$thumbnail', '$map', '$lambda', '$on_answered', '$media', '$===', '$decrement_questions_left_to_answer', '$-', '$==', '$calculate_leading_personality', '$set_state', '$new', '$p_t_personality', '$+', '$scale', '$>']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PersonalityTests, self = $PersonalityTests = $module($base, 'PersonalityTests');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Show(){};
        var self = $Show = $klass($base, $super, 'Show', $Show);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4, TMP_9, TMP_12, TMP_13, TMP_14, TMP_19;

        self.$expose();

        Opal.defn(self, '$validate_props', TMP_1 = function ːvalidate_props() {
          var self = this;

          return nil;
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$get_initial_state', TMP_2 = function ːget_initial_state() {
          var self = this, post_test = nil, questions_left_to_answer = nil, answer_tracker = nil;

          self.$p("gon render personality_test/show");
          post_test = self.$n_prop("post_test");
          questions_left_to_answer = post_test.$test_questions().$data().$length();
          answer_tracker = self.$prepare_answer_tracker(post_test);
          self.$populate_variant_scales_with_personalities(post_test);
          return $hash2(["post_test", "answer_tracker", "questions_left_to_answer", "leading_personality", "completed"], {"post_test": post_test, "answer_tracker": answer_tracker, "questions_left_to_answer": questions_left_to_answer, "leading_personality": false, "completed": false});
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$prepare_answer_tracker', TMP_4 = function ːprepare_answer_tracker(post_test) {
          var $a, $b, TMP_3, self = this, answer_tracker = nil;

          answer_tracker = $hash2([], {});
          ($a = ($b = post_test.$test_questions()).$each, $a.$$p = (TMP_3 = function(test_question){var self = TMP_3.$$s || this;
if (test_question == null) test_question = nil;
          return answer_tracker['$[]='](test_question, nil)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b);
          return answer_tracker;
        }, TMP_4.$$arity = 1);

        Opal.defn(self, '$populate_variant_scales_with_personalities', TMP_9 = function ːpopulate_variant_scales_with_personalities(post_test) {
          var $a, $b, TMP_5, $c, TMP_6, self = this, personalities_mapped_by_id = nil;

          personalities_mapped_by_id = $hash2([], {});
          ($a = ($b = post_test.$p_t_personalities()).$each, $a.$$p = (TMP_5 = function(personality_scale){var self = TMP_5.$$s || this;
if (personality_scale == null) personality_scale = nil;
          return personalities_mapped_by_id['$[]='](personality_scale.$id(), personality_scale)}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($b);
          ($a = ($c = post_test.$test_questions()).$each, $a.$$p = (TMP_6 = function(test_question){var self = TMP_6.$$s || this, $d, $e, TMP_7;
if (test_question == null) test_question = nil;
          return ($d = ($e = test_question.$test_answer_variants()).$each, $d.$$p = (TMP_7 = function(variant){var self = TMP_7.$$s || this, $f, $g, TMP_8;
if (variant == null) variant = nil;
            return ($f = ($g = variant.$personality_scales()).$each, $f.$$p = (TMP_8 = function(personality_scale){var self = TMP_8.$$s || this, $h, $i, personality_to_assign = nil;
if (personality_scale == null) personality_scale = nil;
              personality_to_assign = personalities_mapped_by_id['$[]'](personality_scale.$p_t_personality_id());
                return (($h = [personality_to_assign]), $i = personality_scale, $i['$p_t_personality='].apply($i, $h), $h[$h.length-1]);}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $f).call($g)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $d).call($e)}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($c);
          return post_test;
        }, TMP_9.$$arity = 1);

        Opal.defn(self, '$render', TMP_12 = function ːrender() {
          var $a, $b, TMP_10, self = this, post_test = nil, $case = nil, media = nil;

          post_test = self.$n_state("post_test");
          return self.$t("div", $hash2(["className"], {"className": "PostTests-Show PersonalityTests"}), self.$t("h2", $hash2(["className"], {"className": "title"}), post_test.$title()), self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image", "css_class"], {"post_image": post_test.$thumbnail(), "css_class": "thumbnail"})), self.$t("div", $hash2(["className"], {"className": "questionsContainer"}), ($a = ($b = post_test.$test_questions().$data()).$map, $a.$$p = (TMP_10 = function(question){var self = TMP_10.$$s || this, $c, $d, TMP_11;
if (question == null) question = nil;
          return self.$t((((((($scope.get('Components')).$$scope.get('PersonalityTests'))).$$scope.get('Questions'))).$$scope.get('Show')), $hash2(["key", "question", "on_answered", "test_completed"], {"key": question.$id(), "question": question, "on_answered": ($c = ($d = self).$lambda, $c.$$p = (TMP_11 = function(question, variant){var self = TMP_11.$$s || this;
if (question == null) question = nil;if (variant == null) variant = nil;
            return self.$on_answered(question, variant)}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11), $c).call($d), "test_completed": self.$n_state("completed")}))}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10), $a).call($b)), (function() {if ((($a = self.$n_state("completed")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("div", $hash2(["className"], {"className": "personalityReveal"}), "rev", self.$t("p", $hash2(["className"], {"className": "title"}), self.$n_state("leading_personality").$title()), self.$t("div", $hash2(["className"], {"className": "media"}), (function() {$case = media = self.$n_state("leading_personality").$media();if ($scope.get('PostImage')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": media}))}else if ($scope.get('PostGif')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('PostGifs'))).$$scope.get('Show')), $hash2(["post_gif"], {"post_gif": media}))}else if ($scope.get('VideoEmbed')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('VideoEmbeds'))).$$scope.get('Show')), $hash2(["video_embed"], {"video_embed": media}))}else { return nil }})()))
            } else {
            return nil
          }; return nil; })());
        }, TMP_12.$$arity = 0);

        Opal.defn(self, '$on_answered', TMP_13 = function ːon_answered(question, variant) {
          var self = this;

          self.$n_state("answer_tracker")['$[]='](question, variant);
          return self.$decrement_questions_left_to_answer();
        }, TMP_13.$$arity = 2);

        Opal.defn(self, '$decrement_questions_left_to_answer', TMP_14 = function ːdecrement_questions_left_to_answer() {
          var self = this, count = nil, leading_personality = nil;

          count = $rb_minus(self.$n_state("questions_left_to_answer"), 1);
          if (count['$=='](0)) {
            leading_personality = self.$calculate_leading_personality();
            return self.$set_state($hash2(["completed", "questions_left_to_answer", "leading_personality"], {"completed": true, "questions_left_to_answer": count, "leading_personality": leading_personality}));
            } else {
            return self.$set_state($hash2(["questions_left_to_answer"], {"questions_left_to_answer": count}))
          };
        }, TMP_14.$$arity = 0);

        return (Opal.defn(self, '$calculate_leading_personality', TMP_19 = function ːcalculate_leading_personality() {
          var $a, $b, TMP_15, $c, TMP_16, $d, TMP_18, self = this, post_test = nil, personality_to_count = nil, greatest_count_so_far = nil, greatest_personality = nil;

          post_test = self.$n_state("post_test");
          personality_to_count = ($a = ($b = $scope.get('Hash')).$new, $a.$$p = (TMP_15 = function(hash, key){var self = TMP_15.$$s || this;
if (hash == null) hash = nil;if (key == null) key = nil;
          return hash['$[]='](key, 0)}, TMP_15.$$s = self, TMP_15.$$arity = 2, TMP_15), $a).call($b);
          ($a = ($c = self.$n_state("answer_tracker")).$each, $a.$$p = (TMP_16 = function(question, variant){var self = TMP_16.$$s || this, $d, $e, TMP_17;
if (question == null) question = nil;if (variant == null) variant = nil;
          return ($d = ($e = variant.$personality_scales().$data()).$each, $d.$$p = (TMP_17 = function(personality_scale){var self = TMP_17.$$s || this, $f, $g;
if (personality_scale == null) personality_scale = nil;
            return ($f = personality_scale.$p_t_personality(), $g = personality_to_count, $g['$[]=']($f, $rb_plus($g['$[]']($f), personality_scale.$scale())))}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17), $d).call($e)}, TMP_16.$$s = self, TMP_16.$$arity = 2, TMP_16), $a).call($c);
          greatest_count_so_far = 0;
          greatest_personality = nil;
          ($a = ($d = personality_to_count).$each, $a.$$p = (TMP_18 = function(personality, count){var self = TMP_18.$$s || this, $e;
if (personality == null) personality = nil;if (count == null) count = nil;
          if ((($e = $rb_gt(count, greatest_count_so_far)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
              greatest_count_so_far = count;
              return greatest_personality = personality;
              } else {
              return nil
            }}, TMP_18.$$s = self, TMP_18.$$arity = 2, TMP_18), $a).call($d);
          return greatest_personality;
        }, TMP_19.$$arity = 0), nil) && 'calculate_leading_personality';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/post_gifs/new"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$n_prop', '$!', '$is_a?', '$puts', '$class', '$on_post_gif_uploaded', '$props', '$include', '$new', '$t', '$modal', '$progress_bar', '$n_state', '$lambda', '$init_subtitle_addition', '$emit_on_done', '$input', '$post_gif', '$state', '$handle_inputs', '$modal_open', '$handle_subtitle_insertion_complete', '$set_state', '$collect_inputs', '$has_errors?', '$then', '$perform_action_on_post_gif_upload', '$p', '$create', '$emit']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PostGifs, self = $PostGifs = $module($base, 'PostGifs');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $New(){};
        var self = $New = $klass($base, $super, 'New', $New);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_6, TMP_8, TMP_9, TMP_11, TMP_12, TMP_13;

        self.$expose();

        Opal.defn(self, '$validate_props', TMP_1 = function ːvalidate_props() {
          var $a, self = this, x = nil;

          if ((($a = x = self.$n_prop("on_post_gif_uploaded")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if ((($a = x['$is_a?']($scope.get('ProcEvent'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$puts("" + (self) + " of " + (self.$class()) + " - :on_post_gif_uploaded optional prop was\n                  passed, that should be of ProcEvent instance, but was not\n                  got " + (self.$props().$on_post_gif_uploaded().$class()) + " instead")
              } else {
              return nil
            }
            } else {
            return nil
          };
        }, TMP_1.$$arity = 0);

        self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

        Opal.defn(self, '$get_initial_state', TMP_2 = function ːget_initial_state() {
          var self = this;

          return $hash2(["post_gif", "uploaded"], {"post_gif": $scope.get('PostGif').$new(), "uploaded": false});
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$render', TMP_6 = function ːrender() {
          var $a, $b, TMP_3, $c, TMP_4, $d, TMP_5, self = this;

          return self.$t("div", $hash2([], {}), self.$modal(), self.$progress_bar(), (function() {if ((($a = self.$n_state("uploaded")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("div", $hash2([], {}), self.$t((((($scope.get('Components')).$$scope.get('PostGifs'))).$$scope.get('Show')), $hash2(["post_gif"], {"post_gif": self.$n_state("post_gif")})), self.$t("div", $hash2([], {}), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

            return self.$init_subtitle_addition()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($b)}), "add subtitles"), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

            return self.$emit_on_done()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($c)}), "submit")))
            } else {
            return self.$t("div", $hash2([], {}), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('FileInput')), self.$state().$post_gif(), "file", $hash2(["show_name", "reset_on_collect"], {"show_name": "choose gif to upload", "reset_on_collect": true})), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($d = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

            return self.$handle_inputs()}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($d)}), "upload"))
          }; return nil; })());
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$init_subtitle_addition', TMP_8 = function ːinit_subtitle_addition() {
          var $a, $b, TMP_7, self = this;

          return self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('Subtitles'))).$$scope.get('New')), $hash2(["post_gif", "on_completed"], {"post_gif": self.$n_state("post_gif"), "on_completed": ($a = ($b = self).$lambda, $a.$$p = (TMP_7 = function(post_gif){var self = TMP_7.$$s || this;
if (post_gif == null) post_gif = nil;
          return self.$handle_subtitle_insertion_complete(post_gif)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b)})));
        }, TMP_8.$$arity = 0);

        Opal.defn(self, '$handle_subtitle_insertion_complete', TMP_9 = function ːhandle_subtitle_insertion_complete(post_gif) {
          var self = this;

          self.$set_state($hash2(["post_gif"], {"post_gif": post_gif}));
          return self.$emit_on_done();
        }, TMP_9.$$arity = 1);

        Opal.defn(self, '$handle_inputs', TMP_11 = function ːhandle_inputs() {
          var $a, $b, TMP_10, self = this;

          self.$collect_inputs($hash2(["form_model"], {"form_model": "post_gif"}));
          if ((($a = self.$state().$post_gif()['$has_errors?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$set_state($hash2(["post_gif"], {"post_gif": self.$state().$post_gif()}))
            } else {
            return ($a = ($b = self.$state().$post_gif().$create($hash2(["component"], {"component": self}))).$then, $a.$$p = (TMP_10 = function(_post_gif){var self = TMP_10.$$s || this, $c, e = nil;
if (_post_gif == null) _post_gif = nil;
            try {
                if ((($c = _post_gif['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                  return self.$set_state($hash2(["post_gif"], {"post_gif": self.$state().$post_gif()}))
                  } else {
                  return self.$perform_action_on_post_gif_upload(_post_gif)
                }
              } catch ($err) {
                if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                  try {
                    return self.$p(e)
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              }}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10), $a).call($b)
          };
        }, TMP_11.$$arity = 0);

        Opal.defn(self, '$perform_action_on_post_gif_upload', TMP_12 = function ːperform_action_on_post_gif_upload(post_gif) {
          var $a, self = this;

          if ((($a = self.$n_prop("subtitles_allowed")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$set_state($hash2(["uploaded"], {"uploaded": true}))
            } else {
            return self.$emit_on_done()
          };
        }, TMP_12.$$arity = 1);

        return (Opal.defn(self, '$emit_on_done', TMP_13 = function ːemit_on_done() {
          var self = this;

          return self.$emit("on_done", self.$n_state("post_gif"));
        }, TMP_13.$$arity = 0), nil) && 'emit_on_done';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/post_gifs/show"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$!', '$post_gif', '$props', '$is_a?', '$puts', '$class', '$dimensions', '$n_prop', '$split', '$subtitles', '$>', '$length', '$t', '$width', '$state', '$height', '$post_gif_url', '$map', '$content', '$n_state', '$n_ref', '$-', '$attach_listeners_to_video', '$find_and_render_subtitles', '$map_bserach_subtitles', '$get_video_current_time', '$!=', '$set_state', '$map_bserach', '$from', '$to']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PostGifs, self = $PostGifs = $module($base, 'PostGifs');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Show(){};
        var self = $Show = $klass($base, $super, 'Show', $Show);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_10;

        def.has_subtitles = def.subtitles = def.video = def.subtitles_length = nil;
        self.$expose();

        Opal.defn(self, '$validate_props', TMP_1 = function ːvalidate_props() {
          var $a, $b, self = this;

          if ((($a = ((($b = self.$props().$post_gif()['$!']()) !== false && $b !== nil && $b != null) ? $b : self.$props().$post_gif()['$is_a?']($scope.get('PostGif'))['$!']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$puts("" + (self) + " of " + (self.$class()) + ": required_prop :post_gif : PostGif was not passed -> got " + (self.$props().$post_gif()) + " of " + (self.$props().$post_gif().$class()) + " instead")
            } else {
            return nil
          };
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$get_initial_state', TMP_2 = function ːget_initial_state() {
          var $a, $b, self = this, width = nil, height = nil;

          if ((($a = self.$n_prop("post_gif").$dimensions()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            $b = self.$n_prop("post_gif").$dimensions().$split("x"), $a = Opal.to_ary($b), width = ($a[0] == null ? nil : $a[0]), height = ($a[1] == null ? nil : $a[1]), $b
            } else {
            $b = [nil, nil], $a = Opal.to_ary($b), width = ($a[0] == null ? nil : $a[0]), height = ($a[1] == null ? nil : $a[1]), $b
          };
          if ((($a = ($b = self.$n_prop("post_gif").$subtitles(), $b !== false && $b !== nil && $b != null ?$rb_gt(self.$n_prop("post_gif").$subtitles().$length(), 0) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.has_subtitles = true};
          return $hash2(["width", "height", "subtitles_to_render"], {"width": width, "height": height, "subtitles_to_render": []});
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$render', TMP_4 = function ːrender() {
          var $a, $b, TMP_3, self = this;

          return self.$t("div", $hash2(["className"], {"className": "post-gif-show"}), self.$t("div", $hash2(["className", "style"], {"className": "video embed-responsive", "style": {width: self.$state().$width(), height: self.$state().$height()}}), self.$t("video", $hash2(["controls", "loop", "ref"], {"controls": true, "loop": true, "ref": "video"}), self.$t("source", $hash2(["src"], {"src": self.$n_prop("post_gif").$post_gif_url()}))), self.$t("div", $hash2(["className"], {"className": "subtitle-block"}), ($a = ($b = self.$n_state("subtitles_to_render")).$map, $a.$$p = (TMP_3 = function(subtitle){var self = TMP_3.$$s || this;
if (subtitle == null) subtitle = nil;
          return self.$t("p", $hash2(["className"], {"className": "individual-subtitle"}), subtitle.$content())}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b))));
        }, TMP_4.$$arity = 0);

        Opal.defn(self, '$component_did_mount', TMP_5 = function ːcomponent_did_mount() {
          var $a, self = this;

          if ((($a = self.has_subtitles) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.video = self.$n_ref("video");
            self.subtitles = self.$n_prop("post_gif").$subtitles();
            self.subtitles_length = $rb_minus(self.subtitles.$length(), 1);
            return self.$attach_listeners_to_video();
            } else {
            return nil
          };
        }, TMP_5.$$arity = 0);

        Opal.defn(self, '$attach_listeners_to_video', TMP_6 = function ːattach_listeners_to_video() {
          var self = this;

          

          self.video.ontimeupdate = function(){
            self.$find_and_render_subtitles()
          }

        ;
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$find_and_render_subtitles', TMP_7 = function ːfind_and_render_subtitles() {
          var $a, self = this, subtitles = nil;

          subtitles = self.$map_bserach_subtitles(self.$get_video_current_time());
          if ((($a = self.$n_state("subtitles_to_render")['$!='](subtitles)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$set_state($hash2(["subtitles_to_render"], {"subtitles_to_render": subtitles}))
            } else {
            return nil
          };
        }, TMP_7.$$arity = 0);

        Opal.defn(self, '$get_video_current_time', TMP_8 = function ːget_video_current_time() {
          var self = this;

          return self.video["currentTime"];
        }, TMP_8.$$arity = 0);

        return (Opal.defn(self, '$map_bserach_subtitles', TMP_10 = function ːmap_bserach_subtitles(time) {
          var $a, $b, TMP_9, self = this;

          return ($a = ($b = $scope.get('Subtitle')).$map_bserach, $a.$$p = (TMP_9 = function(val){var self = TMP_9.$$s || this;
if (val == null) val = nil;
          
            if (time >= val.$from() && !(time > val.$to())) {
              return true
            } else {
              return false
            }
          ;}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $a).call($b, self.subtitles, time, 0, self.subtitles_length, [], false);
        }, TMP_10.$$arity = 1), nil) && 'map_bserach_subtitles';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/post_images/collage_new"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$n_prop', '$event', '$lambda', '$draw', '$t', '$read_and_add_to_roster', '$map', '$[]', '$n_state', '$toggle_should_show_controlls_for_boundaries', '$on_done', '$render_draggable', '$n_ref', '$add_image_to_roster', '$create_boundary', '$<<', '$set_state', '$reset_input', '$!', '$force_update', '$emit', '$*', '$+', '$grab_image_from_prop', '$clear_canvas', '$each', '$draw_boundary']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PostImages, self = $PostImages = $module($base, 'PostImages');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $CollageNew(){};
        var self = $CollageNew = $klass($base, $super, 'CollageNew', $CollageNew);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_21, TMP_22, TMP_23;

        def.canvas_width = def.canvas_height = def.boundaries_updated_event = def.boundary_id_counter = def.canvas = def.ctx = nil;
        self.$expose();

        self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

        Opal.defn(self, '$validate_props', TMP_1 = function ːvalidate_props() {
          var self = this;

          return nil;
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$get_initial_state', TMP_3 = function ːget_initial_state() {
          var $a, $b, TMP_2, self = this;

          self.image_url = self.$n_prop("image_src");
          self.boundaries_updated_event = self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

          return self.$draw()}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($b));
          self.canvas_width = 600;
          self.canvas_height = 600;
          self.boundary_id_counter = -1;
          return $hash2(["boundaries", "should_show_controlls_for_boundaries"], {"boundaries": [], "should_show_controlls_for_boundaries": true});
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$render', TMP_9 = function ːrender() {
          var $a, $b, TMP_4, $c, TMP_5, $d, TMP_6, $e, TMP_7, $f, TMP_8, self = this;

          return self.$t("div", $hash2(["className"], {"className": "post-images-collage-new"}), self.$t("form", $hash2(["ref"], {"ref": "" + (self) + "form"}), self.$t("input", $hash2(["onChange", "type", "multiple", "ref"], {"onChange": ($a = ($b = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

          return self.$read_and_add_to_roster()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($b), "type": "file", "multiple": true, "ref": "" + (self)}))), self.$t("div", $hash2(["className"], {"className": "col-lg-12"}), ($a = ($c = self.$n_state("boundaries")).$map, $a.$$p = (TMP_5 = function(boundary){var self = TMP_5.$$s || this;
if (boundary == null) boundary = nil;
          return self.$t("img", $hash2(["src", "style"], {"src": boundary['$[]']("image")["src"], "style": {width: '20px', height: '20px'}}))}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($c), self.$t("p", $hash2([], {}), "show frame", self.$t("input", $hash2(["type", "checked", "onChange"], {"type": "checkbox", "checked": self.$n_state("should_show_controlls_for_boundaries"), "onChange": ($a = ($d = self).$lambda, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

          return self.$toggle_should_show_controlls_for_boundaries()}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($d)}))), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($e = self).$lambda, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

          return self.$on_done()}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($e)}), "apply changes")), self.$t("div", $hash2(["className"], {"className": "block col-lg-12"}), self.$t("div", $hash2(["className"], {"className": "outerCanvasWrapper"}), self.$t("div", $hash2(["className", "style"], {"className": "canvas-wrapper", "style": {position: 'relative', width: self.canvas_width + 'px', height: self.canvas_height + 'px'}}), self.$t("canvas", $hash2(["className", "ref", "style"], {"className": "canvas", "ref": "canvas", "style": {width: self.canvas_width + 'px', height: self.canvas_height + 'px'}})), ($a = ($f = self.$n_state("boundaries")).$map, $a.$$p = (TMP_8 = function(model){var self = TMP_8.$$s || this;
if (model == null) model = nil;
          return self.$render_draggable(model)}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $a).call($f)))));
        }, TMP_9.$$arity = 0);

        Opal.defn(self, '$read_and_add_to_roster', TMP_10 = function ːread_and_add_to_roster() {
          var self = this;

          
        var files    = self.$n_ref("" + (self)).files;

        if (files.length > 0) {
          var i;
          for (i = 0; i < files.length; i++) {
            var file = files[i];
            var reader = new FileReader();

            reader.onloadend = function(){

              var image = new Image();
              image.onload = function(){
                self.$add_image_to_roster(image)
              }
              image.src = reader.result

            }

            if (file) {
              reader.readAsDataURL(file);
            }

          }
        }
        ;
        }, TMP_10.$$arity = 0);

        Opal.defn(self, '$reset_input', TMP_11 = function ːreset_input() {
          var self = this;

          return self.$n_ref("" + (self) + "form").reset();
        }, TMP_11.$$arity = 0);

        Opal.defn(self, '$add_image_to_roster', TMP_12 = function ːadd_image_to_roster(image) {
          var self = this, boundaries = nil, new_boundary = nil;

          boundaries = self.$n_state("boundaries");
          new_boundary = self.$create_boundary(image);
          boundaries['$<<'](new_boundary);
          self.$set_state($hash2(["boundaries"], {"boundaries": boundaries}));
          self.$reset_input();
          return self.$draw();
        }, TMP_12.$$arity = 1);

        Opal.defn(self, '$toggle_should_show_controlls_for_boundaries', TMP_13 = function ːtoggle_should_show_controlls_for_boundaries() {
          var self = this, val = nil;

          val = self.$n_state("should_show_controlls_for_boundaries");
          return self.$set_state($hash2(["should_show_controlls_for_boundaries"], {"should_show_controlls_for_boundaries": val['$!']()}));
        }, TMP_13.$$arity = 0);

        Opal.defn(self, '$render_draggable', TMP_15 = function ːrender_draggable(model) {
          var $a, $b, TMP_14, self = this;

          return self.$t($scope.get('Draggable'), $hash2(["model", "boundaries_changed", "should_show_controlls_for_boundaries", "boundaries_updated"], {"model": model, "boundaries_changed": ($a = ($b = self).$lambda, $a.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this;

          return self.$force_update()}, TMP_14.$$s = self, TMP_14.$$arity = 0, TMP_14), $a).call($b), "should_show_controlls_for_boundaries": self.$n_state("should_show_controlls_for_boundaries"), "boundaries_updated": self.boundaries_updated_event}));
        }, TMP_15.$$arity = 1);

        Opal.defn(self, '$on_done', TMP_16 = function ːon_done() {
          var self = this, image = nil;

          image = self.$n_ref("canvas").toDataURL();
          return self.$emit("on_done", image);
        }, TMP_16.$$arity = 0);

        Opal.defn(self, '$create_boundary', TMP_17 = function ːcreate_boundary(image) {
          var self = this, initial_width = nil, initial_height = nil;

          initial_width = $rb_times(self.canvas_width, 0.9);
          initial_height = 100;
          return $hash2(["id", "boundaries_height", "boundaries_width", "top", "left", "height", "width", "image"], {"id": (self.boundary_id_counter = $rb_plus(self.boundary_id_counter, 1)), "boundaries_height": self.canvas_height, "boundaries_width": self.canvas_width, "top": self.canvas_height / 3, "left": ((self.canvas_width - initial_width) / 2), "height": initial_height, "width": initial_width, "image": image});
        }, TMP_17.$$arity = 1);

        Opal.defn(self, '$component_did_mount', TMP_18 = function ːcomponent_did_mount() {
          var self = this;

          self.canvas = self.$n_ref("canvas");
          self.canvas["width"]=self.canvas_width;
          self.canvas["height"]=self.canvas_height;
          self.ctx = self.canvas.getContext("2d");
          return self.$grab_image_from_prop();
        }, TMP_18.$$arity = 0);

        Opal.defn(self, '$grab_image_from_prop', TMP_19 = function ːgrab_image_from_prop() {
          var self = this, image_src = nil;

          image_src = self.$n_prop("image_src");
          
        var image = new Image();
        image.onload = function(){
          self.$add_image_to_roster(image)
        }
        image.src = image_src
        ;
        }, TMP_19.$$arity = 0);

        Opal.defn(self, '$draw', TMP_21 = function ːdraw() {
          var $a, $b, TMP_20, self = this;

          self.$clear_canvas();
          return ($a = ($b = self.$n_state("boundaries")).$each, $a.$$p = (TMP_20 = function(boundary){var self = TMP_20.$$s || this;
if (boundary == null) boundary = nil;
          return self.$draw_boundary(boundary)}, TMP_20.$$s = self, TMP_20.$$arity = 1, TMP_20), $a).call($b);
        }, TMP_21.$$arity = 0);

        Opal.defn(self, '$clear_canvas', TMP_22 = function ːclear_canvas() {
          var self = this;

          return self.ctx.clearRect(0, 0, self.canvas_width, self.canvas_height);
        }, TMP_22.$$arity = 0);

        return (Opal.defn(self, '$draw_boundary', TMP_23 = function ːdraw_boundary(boundary) {
          var self = this;

          return self.ctx.drawImage(boundary['$[]']("image"), boundary['$[]']("left"), boundary['$[]']("top"), boundary['$[]']("width"), boundary['$[]']("height"));
        }, TMP_23.$$arity = 1), nil) && 'draw_boundary';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/post_images/index"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$n_prop', '$t', '$map', '$post_size_url', '$lambda', '$insert_image', '$delete', '$attributes', '$emit']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PostImages, self = $PostImages = $module($base, 'PostImages');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Index(){};
        var self = $Index = $klass($base, $super, 'Index', $Index);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_4, TMP_5;

        self.$expose();

        Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
          var self = this;

          return $hash2([], {});
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$render', TMP_4 = function ːrender() {
          var $a, $b, TMP_2, self = this, post_images_roster = nil;

          post_images_roster = ((($a = self.$n_prop("post_images")) !== false && $a !== nil && $a != null) ? $a : []);
          return self.$t("div", $hash2(["className"], {"className": "post-image-roster"}), ($a = ($b = post_images_roster).$map, $a.$$p = (TMP_2 = function(post_image){var self = TMP_2.$$s || this, $c, $d, TMP_3;
if (post_image == null) post_image = nil;
          return self.$t("div", $hash2(["className"], {"className": "wrapped-img"}), self.$t("img", $hash2(["src"], {"src": "" + (post_image.$post_size_url())})), self.$t("button", $hash2(["onClick"], {"onClick": ($c = ($d = self).$lambda, $c.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

            return self.$insert_image(post_image)}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $c).call($d)}), "insert this image"))}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b));
        }, TMP_4.$$arity = 0);

        return (Opal.defn(self, '$insert_image', TMP_5 = function ːinsert_image(post_image) {
          var self = this;

          post_image.$attributes().$delete("file");
          return self.$emit("on_image_selected", post_image);
        }, TMP_5.$$arity = 1), nil) && 'insert_image';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/post_images/meme_generator"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$n_prop', '$event', '$lambda', '$draw', '$new', '$t', '$==', '$map', '$render_draggable', '$n_state', '$add_input_frame', '$input', '$_draw', '$data', '$toggle_should_show_controlls_for_boundaries', '$on_done', '$set_state', '$!', '$n_ref', '$emit', '$<<', '$top_boundary_model_attributes', '$force_update', '$*', '$/', '$image_onload', '$scale_image_dimensions_for_width', '$-', '$[]', '$collect_inputs', '$attributes', '$clear_canvas', '$draw_image', '$each', '$fill_text_within_boundaries', '$get_lines', '$length', '$<=', '$[]=', '$>=', '$write_lines', '$line_width_exceeds_boundaries', '$split', '$>', '$measure_text_width', '$+']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PostImages, self = $PostImages = $module($base, 'PostImages');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $MemeGenerator(){};
        var self = $MemeGenerator = $klass($base, $super, 'MemeGenerator', $MemeGenerator);

        var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_9, TMP_10, TMP_11, TMP_12, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_22, TMP_23, TMP_24, TMP_25, TMP_27, TMP_28, TMP_29, TMP_31;

        def.canvas_width = def.canvas_height = def.canvas_should_display = def.boundaries_updated_event = def.image_url = def.actual_image_height = def.actual_image_width = def.image_width = def.image_height = def.ctx = def.image = nil;
        self.$expose();

        self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

        Opal.defn(self, '$get_initial_state', TMP_2 = function ːget_initial_state() {
          var $a, $b, TMP_1, self = this;

          self.canvas_should_display = "none";
          self.image_url = self.$n_prop("image_src");
          self.boundaries_updated_event = self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this;

          return self.$draw()}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b));
          return $hash2(["boundaries", "should_show_controlls_for_boundaries"], {"boundaries": $scope.get('ModelCollection').$new(), "should_show_controlls_for_boundaries": true});
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$render', TMP_9 = function ːrender() {
          var $a, $b, TMP_3, $c, TMP_4, $d, TMP_5, $e, TMP_7, $f, TMP_8, self = this;

          return self.$t("div", $hash2(["className"], {"className": "memegenerator row"}), self.$t("div", $hash2(["className"], {"className": "block col-lg-6"}), self.$t("div", $hash2(["className", "style"], {"className": "canvas-wrapper", "style": {position: 'relative', width: self.canvas_width + 'px', height: self.canvas_height + 'px'}}), self.$t("canvas", $hash2(["className", "ref", "display"], {"className": "canvas", "ref": "canvas", "display": self.canvas_should_display})), (function() {if (self.canvas_should_display['$==']("")) {
            return ($a = ($b = self.$n_state("boundaries")).$map, $a.$$p = (TMP_3 = function(model){var self = TMP_3.$$s || this;
if (model == null) model = nil;
            return self.$render_draggable(model)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b)
            } else {
            return nil
          }; return nil; })())), self.$t("div", $hash2(["className"], {"className": "inputs col-lg-6"}), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

          return self.$add_input_frame()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($c)}), "add input"), ($a = ($d = self.$n_state("boundaries").$data()).$map, $a.$$p = (TMP_5 = function(boundary){var self = TMP_5.$$s || this, $e, $f, TMP_6;
if (boundary == null) boundary = nil;
          return self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('Input')), boundary, "text", $hash2(["on_change"], {"on_change": ($e = ($f = self).$lambda, $e.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

            return self.$_draw()}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $e).call($f)}))}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($d), self.$t("p", $hash2([], {}), "show frame", self.$t("input", $hash2(["type", "checked", "onChange"], {"type": "checkbox", "checked": self.$n_state("should_show_controlls_for_boundaries"), "onChange": ($a = ($e = self).$lambda, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

          return self.$toggle_should_show_controlls_for_boundaries()}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($e)}))), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($f = self).$lambda, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

          return self.$on_done()}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($f)}), "apply changes")));
        }, TMP_9.$$arity = 0);

        Opal.defn(self, '$toggle_should_show_controlls_for_boundaries', TMP_10 = function ːtoggle_should_show_controlls_for_boundaries() {
          var self = this, val = nil;

          val = self.$n_state("should_show_controlls_for_boundaries");
          return self.$set_state($hash2(["should_show_controlls_for_boundaries"], {"should_show_controlls_for_boundaries": val['$!']()}));
        }, TMP_10.$$arity = 0);

        Opal.defn(self, '$on_done', TMP_11 = function ːon_done() {
          var self = this, image = nil;

          image = self.$n_ref("canvas").toDataURL();
          return self.$emit("on_done", image);
        }, TMP_11.$$arity = 0);

        Opal.defn(self, '$add_input_frame', TMP_12 = function ːadd_input_frame() {
          var self = this;

          self.$n_state("boundaries")['$<<']($scope.get('Model').$new(self.$top_boundary_model_attributes()));
          return self.$force_update();
        }, TMP_12.$$arity = 0);

        Opal.defn(self, '$render_draggable', TMP_14 = function ːrender_draggable(model) {
          var $a, $b, TMP_13, self = this;

          return self.$t($scope.get('Draggable'), $hash2(["boundaries_updated", "model", "boundaries_changed", "should_show_controlls_for_boundaries"], {"boundaries_updated": self.boundaries_updated_event, "model": model, "boundaries_changed": ($a = ($b = self).$lambda, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;

          return self.$force_update()}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $a).call($b), "should_show_controlls_for_boundaries": self.$n_state("should_show_controlls_for_boundaries")}));
        }, TMP_14.$$arity = 1);

        Opal.defn(self, '$top_boundary_model_attributes', TMP_15 = function ːtop_boundary_model_attributes() {
          var self = this, initial_width = nil, initial_height = nil;

          initial_width = $rb_times(self.canvas_width, 0.9);
          initial_height = 30;
          return $hash2(["boundaries_height", "boundaries_width", "top", "left", "height", "width", "text", "line_height", "boundaries_updated", "font_size", "font_type"], {"boundaries_height": self.canvas_height, "boundaries_width": self.canvas_width, "top": self.canvas_height / 3, "left": ((self.canvas_width - initial_width) / 2), "height": initial_height, "width": initial_width, "text": "", "line_height": initial_height, "boundaries_updated": self.boundaries_updated_event, "font_size": $rb_times(initial_height, 0.9), "font_type": "Impact"});
        }, TMP_15.$$arity = 0);

        Opal.defn(self, '$scale_image_dimensions_for_width', TMP_16 = function ːscale_image_dimensions_for_width(current_height, current_width, new_width) {
          var self = this, new_height = nil;

          new_height = $rb_times(($rb_divide(current_height, current_width)), new_width);
          return $hash2(["new_height", "new_width"], {"new_height": new_height, "new_width": new_width});
        }, TMP_16.$$arity = 3);

        Opal.defn(self, '$component_did_mount', TMP_17 = function ːcomponent_did_mount() {
          var self = this;

          
          var image = new Image();
          image.onload = function(){
            self.$image_onload(image);
          };
          image.src = self.image_url
        ;
          return self.ctx = self.$n_ref("canvas").getContext("2d");
        }, TMP_17.$$arity = 0);

        Opal.defn(self, '$image_onload', TMP_18 = function ːimage_onload(image) {
          var $a, self = this, available_width = nil, new_dimensions = nil;

          self.image = image;
          self.actual_image_height = image["height"];
          self.actual_image_width = image["width"];
          available_width = ((($a = $('.block')[0].offsetWidth) !== false && $a !== nil && $a != null) ? $a : 400);
          new_dimensions = self.$scale_image_dimensions_for_width(self.actual_image_height, self.actual_image_width, $rb_minus(available_width, 10));
          self.image_height = new_dimensions['$[]']("new_height");
          self.image_width = new_dimensions['$[]']("new_width");
          self.canvas_width = self.image_width;
          self.canvas_height = self.image_height;
          self.line_height = 20;
          self.$n_ref("canvas")["width"]=self.canvas_width;
          self.$n_ref("canvas")["height"]=self.canvas_height;
          self.canvas_should_display = "";
          return self.$draw();
        }, TMP_18.$$arity = 1);

        Opal.defn(self, '$_draw', TMP_19 = function ː_draw() {
          var self = this;

          self.$collect_inputs($hash2(["validate"], {"validate": false}));
          return self.$draw();
        }, TMP_19.$$arity = 0);

        Opal.defn(self, '$cs_a', TMP_20 = function ːcs_a() {
          var self = this;

          return self.$n_state("canvas_state").$attributes();
        }, TMP_20.$$arity = 0);

        Opal.defn(self, '$draw', TMP_22 = function ːdraw() {
          var $a, $b, TMP_21, self = this;

          self.$clear_canvas();
          self.$draw_image();
          return ($a = ($b = self.$n_state("boundaries")).$each, $a.$$p = (TMP_21 = function(boundary){var self = TMP_21.$$s || this;
if (boundary == null) boundary = nil;
          return self.$fill_text_within_boundaries(boundary)}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21), $a).call($b);
        }, TMP_22.$$arity = 0);

        Opal.defn(self, '$clear_canvas', TMP_23 = function ːclear_canvas() {
          var self = this;

          return self.ctx.clearRect(0, 0, self.image_width, self.image_height);
        }, TMP_23.$$arity = 0);

        Opal.defn(self, '$draw_image', TMP_24 = function ːdraw_image() {
          var self = this;

          return self.ctx.drawImage(self.image, 0, 0, self.actual_image_width, self.actual_image_width, 0, 0, self.canvas_width, self.canvas_height);
        }, TMP_24.$$arity = 0);

        Opal.defn(self, '$fill_text_within_boundaries', TMP_25 = function ːfill_text_within_boundaries(boundary) {
          var $a, self = this, lines = nil, height_and_potential_height_difference = nil;

          self.ctx["font"]="" + (boundary.$attributes()['$[]']("font_size")) + "px " + (boundary.$attributes()['$[]']("font_type"));
          if ((($a = boundary.$attributes()['$[]']("text")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            lines = self.$get_lines(boundary);
            height_and_potential_height_difference = ($rb_minus(boundary.$attributes()['$[]']("height"), ($rb_times(lines.$length(), boundary.$attributes()['$[]']("font_size")))));
            if ((($a = $rb_le(height_and_potential_height_difference, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              boundary.$attributes()['$[]=']("font_size", boundary.$attributes()['$[]']("font_size") * 0.9);
              self.$fill_text_within_boundaries(boundary);
              return nil;
            } else if ((($a = $rb_ge(height_and_potential_height_difference, boundary.$attributes()['$[]']("font_size"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              boundary.$attributes()['$[]=']("font_size", boundary.$attributes()['$[]']("font_size") * 1.1);
              self.$fill_text_within_boundaries(boundary);
              return nil;};
            return self.$write_lines(lines, boundary);
            } else {
            return nil
          };
        }, TMP_25.$$arity = 1);

        Opal.defn(self, '$get_lines', TMP_27 = function ːget_lines(boundary) {
          var $a, $b, TMP_26, self = this, text = nil, line_text = nil, line_index = nil, lines_ary = nil;

          text = boundary.$attributes()['$[]']("text");
          line_text = "";
          line_index = 0;
          lines_ary = [];
          ($a = ($b = text.$split(" ")).$each, $a.$$p = (TMP_26 = function(word){var self = TMP_26.$$s || this, $c;
if (word == null) word = nil;
          if ((($c = self.$line_width_exceeds_boundaries("" + (line_text) + " " + (word), boundary.$attributes()['$[]']("width"))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              lines_ary['$[]='](line_index, line_text);
              line_index = line_index + 1;
              return line_text = word;
              } else {
              return line_text = "" + (line_text) + " " + (word)
            }}, TMP_26.$$s = self, TMP_26.$$arity = 1, TMP_26), $a).call($b);
          lines_ary['$<<'](line_text);
          return lines_ary;
        }, TMP_27.$$arity = 1);

        Opal.defn(self, '$line_width_exceeds_boundaries', TMP_28 = function ːline_width_exceeds_boundaries(text, width) {
          var self = this;

          return $rb_gt(self.$measure_text_width(text), width);
        }, TMP_28.$$arity = 2);

        Opal.defn(self, '$measure_text_width', TMP_29 = function ːmeasure_text_width(text) {
          var self = this;

          return self.ctx.measureText(text)["width"];
        }, TMP_29.$$arity = 1);

        return (Opal.defn(self, '$write_lines', TMP_31 = function ːwrite_lines(lines, boundary) {
          var $a, $b, TMP_30, self = this, current_y = nil;

          current_y = boundary.$attributes()['$[]']("top") + boundary.$attributes()['$[]']("font_size");
          self.ctx["shadowBlur"]=10;
          self.ctx["shadowColor"]="black";
          self.ctx["fillStyle"]="white";
          return ($a = ($b = lines).$each, $a.$$p = (TMP_30 = function(line){var self = TMP_30.$$s || this, line_width = nil, x = nil;
            if (self.ctx == null) self.ctx = nil;
if (line == null) line = nil;
          line_width = self.$measure_text_width(line);
            x = $rb_plus(($rb_divide(($rb_minus(boundary.$attributes()['$[]']("width"), line_width)), 2)), boundary.$attributes()['$[]']("left"));
            self.ctx.fillText(line, x, current_y);
            return current_y += boundary.$attributes()['$[]']("font_size");}, TMP_30.$$s = self, TMP_30.$$arity = 1, TMP_30), $a).call($b);
        }, TMP_31.$$arity = 2), nil) && 'write_lines';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/post_images/new"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$n_prop', '$!', '$is_a?', '$puts', '$class', '$on_image_uploaded', '$props', '$include', '$new', '$p', '$n_state', '$errors', '$t', '$modal', '$progress_bar', '$general_errors_for', '$input', '$post_image', '$state', '$event', '$lambda', '$set_state', '$init_meme_generator', '$init_collage_generator', '$handle_inputs', '$modal_open', '$modal_close', '$collect_inputs', '$has_errors?', '$clear_inputs_and_previewed_image', '$emit', '$file', '$call', '$then', '$update_when_has_errors', '$perform_action_on_image_upload', '$create', '$file=', '$preserved_file']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PostImages, self = $PostImages = $module($base, 'PostImages');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $New(){};
        var self = $New = $klass($base, $super, 'New', $New);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_8, TMP_10, TMP_12, TMP_13, TMP_15, TMP_16, TMP_17;

        def.image_input_component = nil;
        self.$expose();

        Opal.defn(self, '$validate_props', TMP_1 = function ːvalidate_props() {
          var $a, self = this, x = nil;

          if ((($a = x = self.$n_prop("on_image_uploaded")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if ((($a = x['$is_a?']($scope.get('ProcEvent'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$puts("" + (self) + " of " + (self.$class()) + " - :on_image_uploaded optional prop was\n                  passed, that should be of ProcEvent instance, but was not\n                  got " + (self.$props().$on_image_uploaded().$class()) + " instead")
              } else {
              return nil
            }
            } else {
            return nil
          };
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$set_image_input_component', TMP_2 = function ːset_image_input_component(component) {
          var self = this;

          return self.image_input_component = component;
        }, TMP_2.$$arity = 1);

        self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

        Opal.defn(self, '$get_initial_state', TMP_3 = function ːget_initial_state() {
          var self = this;

          return $hash2(["post_image", "image_preload_status", "loads_by_url"], {"post_image": $scope.get('PostImage').$new(), "image_preload_status": false, "loads_by_url": false});
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$render', TMP_8 = function ːrender() {
          var $a, $b, TMP_4, $c, TMP_5, $d, TMP_6, $e, TMP_7, self = this;

          self.$p("post_image: " + (self.$n_state("post_image")));
          self.$p("post_image: " + (self.$n_state("post_image").$errors()));
          return self.$t("div", $hash2(["className"], {"className": "images-new"}), self.$modal(), self.$progress_bar(), self.$general_errors_for(self.$n_state("post_image")), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('FileInputImgPreview')), self.$state().$post_image(), "file", $hash2(["show_name", "reset_on_collect", "image_preload_status", "should_assign_self_to_owner", "owner", "actions_on_preview_image", "button_content_for_action_on_preview_image", "on_file_chosen_by_user", "on_cancel_upload"], {"show_name": "image", "reset_on_collect": true, "image_preload_status": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_4 = function(status){var self = TMP_4.$$s || this;
if (status == null) status = nil;
          return self.$set_state($hash2(["image_preload_status"], {"image_preload_status": status}))}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($b)), "should_assign_self_to_owner": true, "owner": self, "actions_on_preview_image": [$hash2(["event", "button_text"], {"event": ($a = ($c = self).$lambda, $a.$$p = (TMP_5 = function(input_component){var self = TMP_5.$$s || this;
if (input_component == null) input_component = nil;
          return self.$init_meme_generator(input_component)}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($c), "button_text": "edit: make meme"}), $hash2(["event", "button_text"], {"event": ($a = ($d = self).$lambda, $a.$$p = (TMP_6 = function(input_component){var self = TMP_6.$$s || this;
if (input_component == null) input_component = nil;
          return self.$init_collage_generator(input_component)}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($d), "button_text": "edit: make collage"})], "button_content_for_action_on_preview_image": "make meme out of this image", "on_file_chosen_by_user": self.$n_prop("on_file_chosen_by_user"), "on_cancel_upload": self.$n_prop("on_cancel_upload")})), (function() {if ((($a = self.$n_prop("hide_alt_text")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return [self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('Input')), self.$n_state("post_image"), "alt_text", $hash2(["show_name", "required_field"], {"show_name": "describe image in text", "required_field": true})), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('Input')), self.$n_state("post_image"), "source_name", $hash2(["show_name"], {"show_name": "where did you get image"}))]
          }; return nil; })(), (function() {if ((($a = self.$n_state("image_preload_status")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($e = self).$lambda, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

            return self.$handle_inputs()}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($e), "className": "btn btn-xs submit-btn"}), "upload image")
            } else {
            return nil
          }; return nil; })());
        }, TMP_8.$$arity = 0);

        Opal.defn(self, '$init_meme_generator', TMP_10 = function ːinit_meme_generator(input_component) {
          var $a, $b, TMP_9, self = this;

          return self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('MemeGenerator')), $hash2(["image_src", "on_done"], {"image_src": input_component.$n_state("image_to_preview"), "on_done": ($a = ($b = self).$lambda, $a.$$p = (TMP_9 = function(image_src){var self = TMP_9.$$s || this;
if (image_src == null) image_src = nil;
          self.$modal_close();
            return input_component.$set_state($hash2(["image_to_preview"], {"image_to_preview": image_src}));}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $a).call($b)})));
        }, TMP_10.$$arity = 1);

        Opal.defn(self, '$init_collage_generator', TMP_12 = function ːinit_collage_generator(input_component) {
          var $a, $b, TMP_11, self = this;

          return self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('CollageNew')), $hash2(["image_src", "on_done"], {"image_src": input_component.$n_state("image_to_preview"), "on_done": ($a = ($b = self).$lambda, $a.$$p = (TMP_11 = function(image_src){var self = TMP_11.$$s || this;
if (image_src == null) image_src = nil;
          self.$modal_close();
            return input_component.$set_state($hash2(["image_to_preview"], {"image_to_preview": image_src}));}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($b)})));
        }, TMP_12.$$arity = 1);

        Opal.defn(self, '$handle_upload_by_url_input_change', TMP_13 = function ːhandle_upload_by_url_input_change() {
          var self = this;

          return nil;
        }, TMP_13.$$arity = 0);

        Opal.defn(self, '$handle_inputs', TMP_15 = function ːhandle_inputs() {
          var $a, $b, TMP_14, self = this, e = nil;

          try {
            self.$collect_inputs($hash2(["form_model"], {"form_model": "post_image"}));
            if ((($a = self.$state().$post_image()['$has_errors?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$set_state($hash2(["post_image"], {"post_image": self.$state().$post_image()}))
            } else if ((($a = self.$n_prop("acts_as_proxy")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              self.image_input_component.$clear_inputs_and_previewed_image();
              return self.$emit("on_image_selected", self.$n_state("post_image").$file());
            } else if ((($a = self.$n_prop("on_collect")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$n_prop("on_collect").$call(self.$n_state("post_image"), self)
              } else {
              return ($a = ($b = self.$state().$post_image().$create($hash2(["component"], {"component": self}))).$then, $a.$$p = (TMP_14 = function(_post_image){var self = TMP_14.$$s || this, $c, e = nil;
                if (self.image_input_component == null) self.image_input_component = nil;
if (_post_image == null) _post_image = nil;
              try {
                  if ((($c = _post_image['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                    return self.$update_when_has_errors()
                    } else {
                    self.image_input_component.$clear_inputs_and_previewed_image();
                    return self.$perform_action_on_image_upload(_post_image);
                  }
                } catch ($err) {
                  if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                    try {
                      return console.log(e);
                    } finally { Opal.pop_exception() }
                  } else { throw $err; }
                }}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($b)
            };
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
              try {
                return console.log(e);
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };
        }, TMP_15.$$arity = 0);

        Opal.defn(self, '$update_when_has_errors', TMP_16 = function ːupdate_when_has_errors() {
          var $a, $b, self = this;

          (($a = [self.image_input_component.$preserved_file()]), $b = self.$state().$post_image(), $b['$file='].apply($b, $a), $a[$a.length-1]);
          return self.$set_state($hash2(["post_image"], {"post_image": self.$state().$post_image()}));
        }, TMP_16.$$arity = 0);

        return (Opal.defn(self, '$perform_action_on_image_upload', TMP_17 = function ːperform_action_on_image_upload(image) {
          var self = this;

          self.$emit("on_image_uploaded", image);
          return self.$set_state($hash2(["post_image"], {"post_image": $scope.get('PostImage').$new()}));
        }, TMP_17.$$arity = 1), nil) && 'perform_action_on_image_upload';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/post_images/show"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$!', '$post_image', '$props', '$is_a?', '$puts', '$class', '$n_prop', '$split', '$dimensions', '$t', '$post_size_url', '$alt_text', '$source_name']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PostImages, self = $PostImages = $module($base, 'PostImages');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Show(){};
        var self = $Show = $klass($base, $super, 'Show', $Show);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

        self.$expose();

        Opal.defn(self, '$validate_props', TMP_1 = function ːvalidate_props() {
          var $a, $b, self = this;

          if ((($a = ((($b = self.$props().$post_image()['$!']()) !== false && $b !== nil && $b != null) ? $b : self.$props().$post_image()['$is_a?']($scope.get('PostImage'))['$!']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$puts("" + (self) + " of " + (self.$class()) + ": required_prop :post_image : PostImage was not passed -> got " + (self.$props().$post_image()) + " of " + (self.$props().$post_image().$class()) + " instead")
            } else {
            return nil
          };
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$get_initial_state', TMP_2 = function ːget_initial_state() {
          var $a, $b, self = this, width = nil, height = nil;

          width = 600;
          height = 600;
          if ((($a = self.$n_prop("post_image")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            $b = self.$props().$post_image().$dimensions().$split("x"), $a = Opal.to_ary($b), width = ($a[0] == null ? nil : $a[0]), height = ($a[1] == null ? nil : $a[1]), $b};
          return $hash2(["width", "height"], {"width": width, "height": height});
        }, TMP_2.$$arity = 0);

        return (Opal.defn(self, '$render', TMP_3 = function ːrender() {
          var $a, $b, self = this;

          return self.$t("div", $hash2(["className"], {"className": "post-image-show " + (self.$n_prop("css_class"))}), (function() {if ((($a = self.$n_prop("post_image")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return [self.$t("div", $hash2([], {}), self.$t("img", $hash2(["src", "className", "alt"], {"src": self.$n_prop("post_image").$post_size_url(), "className": "img-responsive", "alt": self.$n_prop("post_image").$alt_text()}))), (function() {if ((($a = ($b = self.$n_prop("show_source"), $b !== false && $b !== nil && $b != null ?self.$n_prop("post_image").$source_name() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("div", $hash2(["className"], {"className": "sourceDisclaimer"}), self.$n_prop("post_image").$source_name())
              } else {
              return nil
            }; return nil; })()]
            } else {
            return nil
          }; return nil; })());
        }, TMP_3.$$arity = 0), nil) && 'render';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/post_images/upload_and_preview"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$t', '$n_prop', '$event', '$lambda', '$on_image_uploaded', '$<<', '$force_update']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PostImages, self = $PostImages = $module($base, 'PostImages');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $UploadAndPreview(){};
        var self = $UploadAndPreview = $klass($base, $super, 'UploadAndPreview', $UploadAndPreview);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3, TMP_4;

        self.$expose();

        Opal.defn(self, '$validate_props', TMP_1 = function ːvalidate_props() {
          var self = this;

          return nil;
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$render', TMP_3 = function ːrender() {
          var $a, $b, TMP_2, self = this;

          return self.$t("div", $hash2([], {}), self.$t("p", $hash2([], {}), "you can upload images many times for them to be later used"), self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Index')), $hash2(["ref", "on_image_selected", "post_images"], {"ref": "index", "on_image_selected": self.$n_prop("on_image_selected"), "post_images": self.$n_prop("post_images")})), self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('New')), $hash2(["ref", "on_image_uploaded"], {"ref": "new", "on_image_uploaded": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_2 = function(image){var self = TMP_2.$$s || this;
if (image == null) image = nil;
          return self.$on_image_uploaded(image)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b))})));
        }, TMP_3.$$arity = 0);

        return (Opal.defn(self, '$on_image_uploaded', TMP_4 = function ːon_image_uploaded(image) {
          var $a, self = this;

          if ((($a = self.$n_prop("post_images")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$n_prop("post_images")['$<<'](image);
            return self.$force_update();
            } else {
            return nil
          };
        }, TMP_4.$$arity = 1), nil) && 'on_image_uploaded';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/post_karma_transactions/new"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$!', '$n_prop', '$is_a?', '$p', '$name', '$cklass', '$>', '$amount', '$<', '$t', '$lambda', '$like', '$liked?', '$dislike', '$disliked?', '$previous_amount=', '$amount=', '$create', '$then', '$has_errors?', '$[]', '$errors', '$alert', '$set_state', '$update_karma', '$attributes', '$attributes=', '$count=', '$+', '$count', '$amount_change_factor', '$emit', '$force_update']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PostKarmaTransactions, self = $PostKarmaTransactions = $module($base, 'PostKarmaTransactions');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $New(){};
        var self = $New = $klass($base, $super, 'New', $New);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_8, TMP_9, TMP_10, TMP_12;

        self.$expose();

        self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

        Opal.defn(self, '$validate_props', TMP_1 = function ːvalidate_props() {
          var $a, $b, self = this;

          if ((($a = ((($b = self.$n_prop("pkt")['$!']()) !== false && $b !== nil && $b != null) ? $b : self.$n_prop("pkt")['$is_a?']($scope.get('PostKarmaTransaction'))['$!']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$p("WARNING: " + (self.$cklass().$name()) + " expects pkt prop of PostKarmaTransaction type, got " + (self.$n_prop("pkt")) + " instead")
            } else {
            return nil
          };
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$get_initial_state', TMP_2 = function ːget_initial_state() {
          var self = this;

          return $hash2([], {});
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$liked?', TMP_3 = function() {
          var $a, $b, self = this;

          if ((($a = $rb_gt((((($b = self.$n_prop("pkt").$amount()) !== false && $b !== nil && $b != null) ? $b : 0)), 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "liked"
            } else {
            return nil
          };
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$disliked?', TMP_4 = function() {
          var $a, $b, self = this;

          if ((($a = $rb_lt((((($b = self.$n_prop("pkt").$amount()) !== false && $b !== nil && $b != null) ? $b : 0)), 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "disliked"
            } else {
            return nil
          };
        }, TMP_4.$$arity = 0);

        Opal.defn(self, '$component_will_receive_props', TMP_5 = function ːcomponent_will_receive_props(np) {
          var self = this;

          return nil;
        }, TMP_5.$$arity = 1);

        Opal.defn(self, '$render', TMP_8 = function ːrender() {
          var $a, $b, TMP_6, $c, TMP_7, self = this;

          return self.$t("div", $hash2(["className"], {"className": "like-group zoom"}), self.$t("span", $hash2(["onClick", "className"], {"onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

          return self.$like()}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($b), "className": self['$liked?']()}), self.$t("i", $hash2(["className"], {"className": "icon-thumbs-up-1"}))), self.$t("span", $hash2(["onClick", "className"], {"onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

          return self.$dislike()}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($c), "className": self['$disliked?']()}), self.$t("i", $hash2(["className"], {"className": "icon-thumbs-down-1"}))));
        }, TMP_8.$$arity = 0);

        Opal.defn(self, '$like', TMP_9 = function ːlike() {
          var $a, $b, $c, self = this;

          (($a = [((($c = self.$n_prop("pkt").$amount()) !== false && $c !== nil && $c != null) ? $c : 0)]), $b = self.$n_prop("pkt"), $b['$previous_amount='].apply($b, $a), $a[$a.length-1]);
          (($a = [1]), $b = self.$n_prop("pkt"), $b['$amount='].apply($b, $a), $a[$a.length-1]);
          return self.$create();
        }, TMP_9.$$arity = 0);

        Opal.defn(self, '$dislike', TMP_10 = function ːdislike() {
          var $a, $b, $c, self = this;

          (($a = [((($c = self.$n_prop("pkt").$amount()) !== false && $c !== nil && $c != null) ? $c : 0)]), $b = self.$n_prop("pkt"), $b['$previous_amount='].apply($b, $a), $a[$a.length-1]);
          (($a = [-1]), $b = self.$n_prop("pkt"), $b['$amount='].apply($b, $a), $a[$a.length-1]);
          return self.$create();
        }, TMP_10.$$arity = 0);

        return (Opal.defn(self, '$create', TMP_12 = function ːcreate() {
          var $a, $b, TMP_11, self = this, pkt = nil;

          pkt = self.$n_prop("pkt");
          return ($a = ($b = pkt.$create()).$then, $a.$$p = (TMP_11 = function(post_karma_transaction){var self = TMP_11.$$s || this, $c, $d, e = nil;
if (post_karma_transaction == null) post_karma_transaction = nil;
          try {
              if ((($c = post_karma_transaction['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                if ((($c = post_karma_transaction.$errors()['$[]']("general")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                  return self.$alert(post_karma_transaction.$errors()['$[]']("general"))
                  } else {
                  return self.$set_state($hash2(["post_karma_transaction"], {"post_karma_transaction": post_karma_transaction}))
                }
                } else {
                $scope.get('CurrentUser').$update_karma(post_karma_transaction.$attributes()['$[]']("user_change_amount"));
                (($c = [post_karma_transaction.$attributes()]), $d = pkt, $d['$attributes='].apply($d, $c), $c[$c.length-1]);
                if ((($c = self.$n_prop("post_karma")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                  ($c = self.$n_prop("post_karma"), $c['$count=']($rb_plus($c.$count(), post_karma_transaction.$amount_change_factor())))};
                self.$emit("pkt_changed", post_karma_transaction);
                return self.$force_update();
              }
            } catch ($err) {
              if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                try {
                  return self.$p(e)
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($b);
        }, TMP_12.$$arity = 0), nil) && 'create';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/post_tests/answer_variants/edit"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$n_prop', '$t', '$modal', '$[]', '$errors', '$n_state', '$map', '$lambda', '$update_variant', '$correct', '$toggle_correct', '$input', '$event', '$set_variant_changed', '$content', '$==', '$content_type', '$delete_image', '$init_image_insertion', '$destroy_variant', '$correct=', '$!', '$set_state', '$modal_open', '$insert_image_to_content', '$modal_close', '$then', '$has_errors?', '$each', '$add_error', '$content=', '$content_type=', '$update_test_answer_variant_as_content', '$id', '$remove_from_test_answer_variant', '$<<', '$comps_to_call_collect_on', '$delete', '$collect_inputs', '$update', '$validate', '$p', '$emit', '$destroy']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PostTests, self = $PostTests = $module($base, 'PostTests');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $AnswerVariants, self = $AnswerVariants = $module($base, 'AnswerVariants');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Edit(){};
          var self = $Edit = $klass($base, $super, 'Edit', $Edit);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_11, TMP_12, TMP_14, TMP_17, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_26, TMP_28;

          self.$expose();

          self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

          Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
            var self = this, variant = nil;

            variant = self.$n_prop("variant");
            return $hash2(["variant", "variant_changed"], {"variant": variant, "variant_changed": false});
          }, TMP_1.$$arity = 0);

          Opal.defn(self, '$render', TMP_11 = function ːrender() {
            var $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, $e, TMP_5, $f, TMP_6, $g, TMP_7, $h, TMP_8, $i, TMP_9, $j, TMP_10, self = this, x = nil;

            return self.$t("div", $hash2([], {}), self.$modal(), (function() {if ((($a = x = self.$n_state("variant").$errors()['$[]']("general")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return ($a = ($b = x).$map, $a.$$p = (TMP_2 = function(er){var self = TMP_2.$$s || this;
if (er == null) er = nil;
              return self.$t("p", $hash2([], {}), er)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b)
              } else {
              return nil
            }; return nil; })(), (function() {if ((($a = self.$n_state("variant_changed")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

              return self.$update_variant()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($c)}), "update")
              } else {
              return nil
            }; return nil; })(), (function() {if ((($a = self.$n_state("variant").$correct()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($d = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

              return self.$toggle_correct()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($d)}), "mark as incorrect answer")
              } else {
              return self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($e = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

              return self.$toggle_correct()}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($e)}), "mark as correct answer")
            }; return nil; })(), self.$input((($scope.get('Forms')).$$scope.get('Input')), self.$n_state("variant"), "text", $hash2(["show_name", "on_change"], {"show_name": "answer", "on_change": self.$event(($a = ($f = self).$lambda, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

            return self.$set_variant_changed()}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($f))})), (function() {if ((($a = ($g = self.$n_state("variant").$content(), $g !== false && $g !== nil && $g != null ?self.$n_state("variant").$content_type()['$==']("PostImage") : $g)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("div", $hash2(["className"], {"className": "PostTest-Variant-Image"}), self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": self.$n_state("variant").$content()})), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($g = self).$lambda, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

              return self.$delete_image()}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($g)}), "remove this"), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($h = self).$lambda, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

              return self.$init_image_insertion()}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($h)}), "replace this"))
              } else {
              return self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($i = self).$lambda, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

              return self.$init_image_insertion()}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($i)}), "add image")
            }; return nil; })(), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($j = self).$lambda, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

            return self.$destroy_variant()}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $a).call($j)}), "delete"));
          }, TMP_11.$$arity = 0);

          Opal.defn(self, '$toggle_correct', TMP_12 = function ːtoggle_correct() {
            var $a, $b, self = this;

            (($a = [self.$n_state("variant").$correct()['$!']()]), $b = self.$n_state("variant"), $b['$correct='].apply($b, $a), $a[$a.length-1]);
            return self.$set_state($hash2(["variant", "variant_changed"], {"variant": self.$n_state("variant"), "variant_changed": true}));
          }, TMP_12.$$arity = 0);

          Opal.defn(self, '$init_image_insertion', TMP_14 = function ːinit_image_insertion() {
            var $a, $b, TMP_13, self = this;

            return self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('UploadAndPreview')), $hash2(["on_image_selected", "post_images"], {"on_image_selected": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_13 = function(image){var self = TMP_13.$$s || this;
if (image == null) image = nil;
            return self.$insert_image_to_content(image)}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13), $a).call($b)), "post_images": self.$n_prop("image_roster")})));
          }, TMP_14.$$arity = 0);

          Opal.defn(self, '$insert_image_to_content', TMP_17 = function ːinsert_image_to_content(image) {
            var $a, $b, TMP_15, self = this;

            self.$modal_close();
            return ($a = ($b = image.$update_test_answer_variant_as_content($hash2(["wilds"], {"wilds": $hash2(["test_answer_variant_id"], {"test_answer_variant_id": self.$n_state("variant").$id()})}))).$then, $a.$$p = (TMP_15 = function(u_img){var self = TMP_15.$$s || this, $c, $d, TMP_16, $e;
if (u_img == null) u_img = nil;
            if ((($c = u_img['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                ($c = ($d = u_img.$errors()).$each, $c.$$p = (TMP_16 = function(er){var self = TMP_16.$$s || this;
if (er == null) er = nil;
                return self.$n_state("variant").$add_error("content", er)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $c).call($d)
                } else {
                (($c = [u_img]), $e = self.$n_state("variant"), $e['$content='].apply($e, $c), $c[$c.length-1]);
                (($c = ["PostImage"]), $e = self.$n_state("variant"), $e['$content_type='].apply($e, $c), $c[$c.length-1]);
              };
              return self.$set_state($hash2(["variant"], {"variant": self.$n_state("variant")}));}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15), $a).call($b);
          }, TMP_17.$$arity = 1);

          Opal.defn(self, '$delete_image', TMP_20 = function ːdelete_image() {
            var $a, $b, TMP_18, self = this;

            return ($a = ($b = self.$n_state("variant").$content().$remove_from_test_answer_variant($hash2(["wilds"], {"wilds": $hash2(["test_answer_variant_id"], {"test_answer_variant_id": self.$n_state("variant").$id()})}))).$then, $a.$$p = (TMP_18 = function(image){var self = TMP_18.$$s || this, $c, $d, TMP_19, $e;
if (image == null) image = nil;
            if ((($c = image['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                ($c = ($d = image.$errors()).$each, $c.$$p = (TMP_19 = function(er){var self = TMP_19.$$s || this;
if (er == null) er = nil;
                return self.$n_state("variant").$add_error("content", er)}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19), $c).call($d)
                } else {
                (($c = [nil]), $e = self.$n_state("variant"), $e['$content='].apply($e, $c), $c[$c.length-1]);
                (($c = [nil]), $e = self.$n_state("variant"), $e['$content_type='].apply($e, $c), $c[$c.length-1]);
              };
              return self.$set_state($hash2(["variant"], {"variant": self.$n_state("variant")}));}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18), $a).call($b);
          }, TMP_20.$$arity = 0);

          Opal.defn(self, '$component_did_mount', TMP_21 = function ːcomponent_did_mount() {
            var self = this;

            return self.$n_prop("owner").$comps_to_call_collect_on()['$<<'](self);
          }, TMP_21.$$arity = 0);

          Opal.defn(self, '$component_will_unmount', TMP_22 = function ːcomponent_will_unmount() {
            var self = this;

            return self.$n_prop("owner").$comps_to_call_collect_on().$delete(self);
          }, TMP_22.$$arity = 0);

          Opal.defn(self, '$handle_inputs', TMP_23 = function ːhandle_inputs() {
            var self = this;

            return self.$collect_inputs($hash2(["form_model"], {"form_model": "variant"}));
          }, TMP_23.$$arity = 0);

          Opal.defn(self, '$set_variant_changed', TMP_24 = function ːset_variant_changed() {
            var $a, self = this;

            if ((($a = self.$n_state("variant_changed")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$set_state($hash2(["variant_changed"], {"variant_changed": true}))
            };
          }, TMP_24.$$arity = 0);

          Opal.defn(self, '$update_variant', TMP_26 = function ːupdate_variant() {
            var $a, $b, TMP_25, self = this;

            self.$collect_inputs();
            return ($a = ($b = self.$n_state("variant").$update()).$then, $a.$$p = (TMP_25 = function(variant){var self = TMP_25.$$s || this, $c;
if (variant == null) variant = nil;
            if ((($c = variant['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return self.$set_state($hash2(["variant"], {"variant": variant}))
                } else {
                return self.$set_state($hash2(["variant_changed", "variant"], {"variant_changed": false, "variant": variant}))
              }}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25), $a).call($b);
          }, TMP_26.$$arity = 0);

          return (Opal.defn(self, '$destroy_variant', TMP_28 = function ːdestroy_variant() {
            var $a, $b, TMP_27, self = this;

            return ($a = ($b = self.$n_state("variant").$destroy()).$then, $a.$$p = (TMP_27 = function(variant){var self = TMP_27.$$s || this, $c;
if (variant == null) variant = nil;
            variant.$validate();
              if ((($c = variant['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return self.$set_state($hash2(["variant"], {"variant": variant}))
                } else {
                self.$p("should del var");
                return self.$emit("on_delete");
              };}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27), $a).call($b);
          }, TMP_28.$$arity = 0), nil) && 'destroy_variant';
        })($scope.base, $scope.get('RW'))
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/post_tests/answer_variants/new"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$n_prop', '$t', '$modal', '$input', '$n_state', '$correct', '$lambda', '$toggle_correct', '$content', '$==', '$content_type', '$delete_image', '$init_image_insertion', '$emit', '$submit_when_save_in_place', '$correct=', '$!', '$set_state', '$modal_open', '$event', '$insert_image', '$modal_close', '$content=', '$content_type=', '$<<', '$comps_to_call_collect_on', '$delete', '$collect_inputs', '$then', '$has_errors?', '$create', '$id']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PostTests, self = $PostTests = $module($base, 'PostTests');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $AnswerVariants, self = $AnswerVariants = $module($base, 'AnswerVariants');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $New(){};
          var self = $New = $klass($base, $super, 'New', $New);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_8, TMP_9, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_18;

          self.$expose();

          self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

          Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
            var self = this, variant = nil;

            variant = self.$n_prop("variant");
            return $hash2(["variant"], {"variant": variant});
          }, TMP_1.$$arity = 0);

          Opal.defn(self, '$render', TMP_8 = function ːrender() {
            var $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, $e, TMP_5, $f, TMP_6, $g, TMP_7, self = this;

            return self.$t("div", $hash2(["className"], {"className": "AnswerVariants-New"}), self.$modal(), self.$t("div", $hash2(["className"], {"className": "answer-group"}), self.$input((($scope.get('Forms')).$$scope.get('Input')), self.$n_state("variant"), "text", $hash2(["show_name", "required"], {"show_name": "answer", "required": true})), self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), (function() {if ((($a = self.$n_state("variant").$correct()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

              return self.$toggle_correct()}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($b), "className": "btn btn-sm btn-success"}), "mark as incorrect answer")
              } else {
              return self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

              return self.$toggle_correct()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($c), "className": "btn btn-sm btn-danger"}), "mark as correct answer")
            }; return nil; })())), self.$t("div", $hash2(["className"], {"className": "m_content"}), (function() {if ((($a = ($d = self.$n_state("variant").$content(), $d !== false && $d !== nil && $d != null ?self.$n_state("variant").$content_type()['$==']("PostImage") : $d)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("div", $hash2(["className"], {"className": "PostTest-Variant-Image"}), self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": self.$n_state("variant").$content()})), self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($d = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

              return self.$delete_image()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($d), "className": "btn btn-sm"}), "remove this")))
              } else {
              return self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($e = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

              return self.$init_image_insertion()}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($e), "className": "btn btn-sm"}), "add image"))
            }; return nil; })()), self.$t("div", $hash2(["className"], {"className": "on_select_msg"}), self.$input((($scope.get('Forms')).$$scope.get('Input')), self.$n_state("variant"), "on_select_message", $hash2(["show_name", "required"], {"show_name": "message to show when selected", "required": false}))), self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), (function() {if ((($a = self.$n_prop("save_in_place")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($f = self).$lambda, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

              return self.$emit("on_delete")}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($f), "className": "btn btn-sm"}), "delete")
            }; return nil; })(), (function() {if ((($a = self.$n_prop("save_in_place")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($g = self).$lambda, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

              return self.$submit_when_save_in_place()}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($g), "className": "btn btn-sm"}), "save")
              } else {
              return nil
            }; return nil; })()));
          }, TMP_8.$$arity = 0);

          Opal.defn(self, '$toggle_correct', TMP_9 = function ːtoggle_correct() {
            var $a, $b, self = this;

            (($a = [self.$n_state("variant").$correct()['$!']()]), $b = self.$n_state("variant"), $b['$correct='].apply($b, $a), $a[$a.length-1]);
            return self.$set_state($hash2(["variant"], {"variant": self.$n_state("variant")}));
          }, TMP_9.$$arity = 0);

          Opal.defn(self, '$init_image_insertion', TMP_11 = function ːinit_image_insertion() {
            var $a, $b, TMP_10, self = this;

            return self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('UploadAndPreview')), $hash2(["on_image_selected", "post_images"], {"on_image_selected": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_10 = function(image){var self = TMP_10.$$s || this;
if (image == null) image = nil;
            return self.$insert_image(image)}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10), $a).call($b)), "post_images": self.$n_prop("image_roster")})));
          }, TMP_11.$$arity = 0);

          Opal.defn(self, '$insert_image', TMP_12 = function ːinsert_image(image) {
            var $a, $b, self = this;

            self.$modal_close();
            (($a = [image]), $b = self.$n_state("variant"), $b['$content='].apply($b, $a), $a[$a.length-1]);
            (($a = ["PostImage"]), $b = self.$n_state("variant"), $b['$content_type='].apply($b, $a), $a[$a.length-1]);
            return self.$set_state($hash2(["variant"], {"variant": self.$n_state("variant")}));
          }, TMP_12.$$arity = 1);

          Opal.defn(self, '$delete_image', TMP_13 = function ːdelete_image() {
            var $a, $b, self = this;

            (($a = [nil]), $b = self.$n_state("variant"), $b['$content='].apply($b, $a), $a[$a.length-1]);
            (($a = [nil]), $b = self.$n_state("variant"), $b['$content_type='].apply($b, $a), $a[$a.length-1]);
            return self.$set_state($hash2(["variant"], {"variant": self.$n_state("variant")}));
          }, TMP_13.$$arity = 0);

          Opal.defn(self, '$component_did_mount', TMP_14 = function ːcomponent_did_mount() {
            var $a, self = this;

            if ((($a = self.$n_prop("save_in_place")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$n_prop("owner").$comps_to_call_collect_on()['$<<'](self)
            };
          }, TMP_14.$$arity = 0);

          Opal.defn(self, '$component_will_unmount', TMP_15 = function ːcomponent_will_unmount() {
            var $a, self = this;

            if ((($a = self.$n_prop("save_in_place")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$n_prop("owner").$comps_to_call_collect_on().$delete(self)
            };
          }, TMP_15.$$arity = 0);

          Opal.defn(self, '$handle_inputs', TMP_16 = function ːhandle_inputs() {
            var self = this;

            return self.$collect_inputs($hash2(["form_model"], {"form_model": "variant"}));
          }, TMP_16.$$arity = 0);

          return (Opal.defn(self, '$submit_when_save_in_place', TMP_18 = function ːsubmit_when_save_in_place() {
            var $a, $b, TMP_17, self = this;

            self.$collect_inputs();
            return ($a = ($b = self.$n_state("variant").$create($hash2(["wilds"], {"wilds": $hash2(["test_question_id"], {"test_question_id": self.$n_prop("owner").$n_state("question").$id()})}))).$then, $a.$$p = (TMP_17 = function(variant){var self = TMP_17.$$s || this, $c;
if (variant == null) variant = nil;
            if ((($c = variant['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return self.$set_state($hash2(["variant"], {"variant": variant}))
                } else {
                return self.$emit("on_done", variant)
              }}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17), $a).call($b);
          }, TMP_18.$$arity = 0), nil) && 'submit_when_save_in_place';
        })($scope.base, $scope.get('RW'))
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/post_tests/answer_variants/show"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$n_prop', '$n_state', '$t', '$get_correct_or_incorrect_css_class', '$lambda', '$select', '$on_select_message', '$is_selected', '$text', '$content', '$==', '$content_type', '$correct', '$is_selected=', '$set_state', '$emit']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PostTests, self = $PostTests = $module($base, 'PostTests');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $AnswerVariants, self = $AnswerVariants = $module($base, 'AnswerVariants');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Show(){};
          var self = $Show = $klass($base, $super, 'Show', $Show);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3, TMP_4, TMP_5;

          self.$expose();

          Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
            var self = this, variant = nil;

            variant = self.$n_prop("variant");
            return $hash2(["variant", "selected"], {"variant": variant, "selected": false});
          }, TMP_1.$$arity = 0);

          Opal.defn(self, '$render', TMP_3 = function ːrender() {
            var $a, $b, TMP_2, $c, self = this, variant = nil, active = nil;

            variant = self.$n_state("variant");
            active = (function() {if ((($a = self.$n_prop("answered")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return ""
              } else {
              return "active"
            }; return nil; })();
            return self.$t("div", $hash2(["className", "onClick"], {"className": "PostTestsAnswerVariants-Show " + (active) + " " + (self.$get_correct_or_incorrect_css_class()), "onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $c;

            if ((($c = self.$n_prop("answered")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return nil
                } else {
                return self.$select()
              }}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($b)}), (function() {if ((($a = ($c = self.$n_state("selected"), $c !== false && $c !== nil && $c != null ?variant.$on_select_message() : $c)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("p", $hash2(["className"], {"className": "onSelectMsg"}), variant.$on_select_message())
              } else {
              return nil
            }; return nil; })(), (function() {if ((($a = ($c = self.$n_state("variant").$is_selected(), $c !== false && $c !== nil && $c != null ?self.$n_state("variant").$on_select_message() : $c)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("p", $hash2(["className"], {"className": "on_select_message"}), self.$n_state("variant").$on_select_message())
            } else if ((($a = variant.$text()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("h4", $hash2(["className"], {"className": "text"}), variant.$text())
              } else {
              return nil
            }; return nil; })(), (function() {if ((($a = ($c = variant.$content(), $c !== false && $c !== nil && $c != null ?variant.$content_type()['$==']("PostImage") : $c)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image", "css_class"], {"post_image": variant.$content(), "css_class": "media_thumb"}))
              } else {
              return nil
            }; return nil; })(), (function() {if ((($a = self.$n_prop("answered")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$t("div", $hash2(["className"], {"className": "button-wrap"}), self.$t("button", $hash2(["className"], {"className": "btn btn-sm btn-primary"}), "select"))
            }; return nil; })());
          }, TMP_3.$$arity = 0);

          Opal.defn(self, '$get_correct_or_incorrect_css_class', TMP_4 = function ːget_correct_or_incorrect_css_class() {
            var $a, self = this;

            if ((($a = self.$n_state("variant").$is_selected()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              if ((($a = self.$n_state("variant").$correct()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return "correctSelected"
                } else {
                return "incorrectSelected"
              }
              } else {
              return ""
            };
          }, TMP_4.$$arity = 0);

          return (Opal.defn(self, '$select', TMP_5 = function ːselect() {
            var $a, $b, self = this, variant = nil;

            variant = self.$n_state("variant");
            (($a = [true]), $b = variant, $b['$is_selected='].apply($b, $a), $a[$a.length-1]);
            self.$set_state($hash2(["variant"], {"variant": variant}));
            return self.$emit("on_selected", variant);
          }, TMP_5.$$arity = 0), nil) && 'select';
        })($scope.base, $scope.get('RW'))
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/post_tests/edit"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$attr_accessor', '$id', '$n_prop', '$then', '$attributes=', '$attributes', '$set_state', '$p', '$show', '$n_state', '$t', '$modal', '$[]', '$errors', '$map', '$lambda', '$update_post_test_attributes', '$input', '$event', '$set_post_is_changed', '$thumbnail', '$start_replacing_thumbnail', '$delete_question', '$test_questions', '$init_question_addition', '$delete_gradation', '$post_test_gradations', '$init_gradation_addition', '$emit', '$delete', '$data', '$modal_open', '$new', '$insert_question', '$modal_close', '$<<', '$insert_gradation', '$change_thumbnail', '$has_errors?', '$each', '$add_error', '$thumbnail=', '$update_thumbnail', '$collect_inputs', '$update']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PostTests, self = $PostTests = $module($base, 'PostTests');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Edit(){};
        var self = $Edit = $klass($base, $super, 'Edit', $Edit);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3, TMP_16, TMP_17, TMP_19, TMP_20, TMP_22, TMP_23, TMP_24, TMP_26, TMP_29, TMP_30, TMP_32;

        self.$expose();

        self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

        self.$attr_accessor("comps_to_call_collect_on");

        Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
          var self = this;

          self.comps_to_call_collect_on = [];
          return $hash2(["post_test", "image_roster", "post_is_changed"], {"post_test": false, "image_roster": [], "post_is_changed": false});
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$component_did_mount', TMP_3 = function ːcomponent_did_mount() {
          var $a, $b, TMP_2, self = this, id = nil;

          id = self.$n_prop("post_test").$id();
          return ($a = ($b = Opal.get('PostTest').$show($hash2(["wilds"], {"wilds": $hash2(["id"], {"id": id})}))).$then, $a.$$p = (TMP_2 = function(post_test){var self = TMP_2.$$s || this, $c, $d, e = nil;
if (post_test == null) post_test = nil;
          try {
              (($c = [post_test.$attributes()]), $d = self.$n_prop("post_test"), $d['$attributes='].apply($d, $c), $c[$c.length-1]);
              return self.$set_state($hash2(["post_test"], {"post_test": self.$n_prop("post_test")}));
            } catch ($err) {
              if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                try {
                  return self.$p(e)
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b);
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$render', TMP_16 = function ːrender() {
          var $a, $b, TMP_4, $c, TMP_5, $d, TMP_6, $e, TMP_7, $f, TMP_8, $g, TMP_9, $h, TMP_11, $i, TMP_12, $j, TMP_14, $k, TMP_15, self = this, x = nil;

          if ((($a = self.$n_state("post_test")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("div", $hash2([], {}), self.$modal(), (function() {if ((($a = x = self.$n_state("post_test").$errors()['$[]']("general")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return ($a = ($b = x).$map, $a.$$p = (TMP_4 = function(er){var self = TMP_4.$$s || this;
if (er == null) er = nil;
              return self.$t("p", $hash2([], {}), er)}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($b)
              } else {
              return nil
            }; return nil; })(), (function() {if ((($a = self.$n_state("post_is_changed")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

              return self.$update_post_test_attributes()}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($c)}), "update")
              } else {
              return nil
            }; return nil; })(), self.$input((($scope.get('Forms')).$$scope.get('Input')), self.$n_state("post_test"), "title", $hash2(["show_name", "required_field", "on_change"], {"show_name": "enter name", "required_field": true, "on_change": self.$event(($a = ($d = self).$lambda, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

            return self.$set_post_is_changed()}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($d))})), self.$t("div", $hash2(["className"], {"className": "PostTests-thumbnail"}), (function() {if ((($a = x = self.$n_state("post_test").$errors()['$[]']("tumbnail")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return ($a = ($e = x).$map, $a.$$p = (TMP_7 = function(er){var self = TMP_7.$$s || this;
if (er == null) er = nil;
              return self.$t("p", $hash2([], {}), er)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($e)
              } else {
              return nil
            }; return nil; })(), self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": self.$n_state("post_test").$thumbnail()})), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($f = self).$lambda, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

            return self.$start_replacing_thumbnail()}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($f)}), "replace thumbnail")), ($a = ($g = self.$n_state("post_test").$test_questions()).$map, $a.$$p = (TMP_9 = function(question){var self = TMP_9.$$s || this, $h, $i, TMP_10;
if (question == null) question = nil;
            return self.$t((((((($scope.get('Components')).$$scope.get('PostTests'))).$$scope.get('Questions'))).$$scope.get('Edit')), $hash2(["key", "question", "owner", "on_delete", "image_roster"], {"key": "" + (question), "question": question, "owner": self, "on_delete": ($h = ($i = self).$lambda, $h.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

              return self.$delete_question(question)}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $h).call($i), "image_roster": self.$n_state("image_roster")}))}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $a).call($g), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($h = self).$lambda, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

            return self.$init_question_addition()}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $a).call($h)}), "add_question"), ($a = ($i = self.$n_state("post_test").$post_test_gradations()).$map, $a.$$p = (TMP_12 = function(gradation){var self = TMP_12.$$s || this, $j, $k, TMP_13;
if (gradation == null) gradation = nil;
            return self.$t((((((($scope.get('Components')).$$scope.get('PostTests'))).$$scope.get('Gradations'))).$$scope.get('Edit')), $hash2(["key", "save_in_place", "owner", "image_roster", "on_delete", "gradation"], {"key": "" + (gradation), "save_in_place": true, "owner": self, "image_roster": self.$n_state("image_roster"), "on_delete": self.$event(($j = ($k = self).$lambda, $j.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;

              return self.$delete_gradation(gradation)}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $j).call($k)), "gradation": gradation}))}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $a).call($i), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($j = self).$lambda, $a.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this;

            return self.$init_gradation_addition()}, TMP_14.$$s = self, TMP_14.$$arity = 0, TMP_14), $a).call($j)}), "add gradation"), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($k = self).$lambda, $a.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this;

            return self.$emit("on_cancel")}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15), $a).call($k)}), "end editing"))
            } else {
            return self.$t("div", $hash2([], {}))
          };
        }, TMP_16.$$arity = 0);

        Opal.defn(self, '$delete_question', TMP_17 = function ːdelete_question(question) {
          var self = this;

          self.$n_state("post_test").$test_questions().$data().$delete(question);
          return self.$set_state($hash2(["post_test"], {"post_test": self.$n_state("post_test")}));
        }, TMP_17.$$arity = 1);

        Opal.defn(self, '$init_question_addition', TMP_19 = function ːinit_question_addition() {
          var $a, $b, TMP_18, self = this;

          return self.$modal_open(nil, self.$t((((((($scope.get('Components')).$$scope.get('PostTests'))).$$scope.get('Questions'))).$$scope.get('New')), $hash2(["owner", "question", "save_in_place", "on_done", "image_roster"], {"owner": self, "question": $scope.get('TestQuestion').$new(), "save_in_place": true, "on_done": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_18 = function(question){var self = TMP_18.$$s || this;
if (question == null) question = nil;
          return self.$insert_question(question)}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18), $a).call($b)), "image_roster": self.$n_state("image_roster")})));
        }, TMP_19.$$arity = 0);

        Opal.defn(self, '$insert_question', TMP_20 = function ːinsert_question(question) {
          var self = this;

          self.$modal_close();
          self.$n_state("post_test").$test_questions()['$<<'](question);
          return self.$set_state($hash2(["post_test"], {"post_test": self.$n_state("post_test")}));
        }, TMP_20.$$arity = 1);

        Opal.defn(self, '$init_gradation_addition', TMP_22 = function ːinit_gradation_addition() {
          var $a, $b, TMP_21, self = this;

          return self.$modal_open(nil, self.$t((((((($scope.get('Components')).$$scope.get('PostTests'))).$$scope.get('Gradations'))).$$scope.get('NewForEdit')), $hash2(["owner", "save_in_place", "gradation", "on_done", "image_roster"], {"owner": self, "save_in_place": true, "gradation": $scope.get('PostTestGradation').$new(), "on_done": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_21 = function(gradation){var self = TMP_21.$$s || this;
if (gradation == null) gradation = nil;
          return self.$insert_gradation(gradation)}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21), $a).call($b)), "image_roster": self.$n_state("image_roster")})));
        }, TMP_22.$$arity = 0);

        Opal.defn(self, '$insert_gradation', TMP_23 = function ːinsert_gradation(gradation) {
          var self = this;

          self.$modal_close();
          self.$n_state("post_test").$post_test_gradations().$data()['$<<'](gradation);
          return self.$set_state($hash2(["post_test"], {"post_test": self.$n_state("post_test")}));
        }, TMP_23.$$arity = 1);

        Opal.defn(self, '$delete_gradation', TMP_24 = function ːdelete_gradation(gradation) {
          var self = this;

          self.$n_state("post_test").$post_test_gradations().$data().$delete(gradation);
          return self.$set_state($hash2(["post_test"], {"post_test": self.$n_state("post_test")}));
        }, TMP_24.$$arity = 1);

        Opal.defn(self, '$start_replacing_thumbnail', TMP_26 = function ːstart_replacing_thumbnail() {
          var $a, $b, TMP_25, self = this;

          return self.$modal_open(self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('UploadAndPreview')), $hash2(["on_image_selected", "post_images"], {"on_image_selected": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_25 = function(image){var self = TMP_25.$$s || this;
if (image == null) image = nil;
          return self.$change_thumbnail(image)}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25), $a).call($b)), "post_images": self.$n_state("image_roster")})));
        }, TMP_26.$$arity = 0);

        Opal.defn(self, '$change_thumbnail', TMP_29 = function ːchange_thumbnail(image) {
          var $a, $b, TMP_27, self = this;

          self.$modal_close();
          return ($a = ($b = image.$update_thumbnail($hash2(["wilds"], {"wilds": $hash2(["post_test_id", "id"], {"post_test_id": self.$n_state("post_test").$id(), "id": image.$id()})}))).$then, $a.$$p = (TMP_27 = function(pi){var self = TMP_27.$$s || this, $c, $d, TMP_28, $e;
if (pi == null) pi = nil;
          if ((($c = pi['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              ($c = ($d = pi.$errors()).$each, $c.$$p = (TMP_28 = function(er){var self = TMP_28.$$s || this;
if (er == null) er = nil;
              return self.$n_state("post_test").$add_error("thumbnail", "thumbnail: " + (er))}, TMP_28.$$s = self, TMP_28.$$arity = 1, TMP_28), $c).call($d);
              return self.$set_state($hash2(["post_test"], {"post_test": self.$n_state("post_test")}));
              } else {
              (($c = [pi]), $e = self.$n_state("post_test"), $e['$thumbnail='].apply($e, $c), $c[$c.length-1]);
              return self.$set_state($hash2(["post_test"], {"post_test": self.$n_state("post_test")}));
            }}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27), $a).call($b);
        }, TMP_29.$$arity = 1);

        Opal.defn(self, '$set_post_is_changed', TMP_30 = function ːset_post_is_changed() {
          var $a, self = this;

          if ((($a = self.$n_state("post_is_changed")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return self.$set_state($hash2(["post_is_changed"], {"post_is_changed": true}))
          };
        }, TMP_30.$$arity = 0);

        return (Opal.defn(self, '$update_post_test_attributes', TMP_32 = function ːupdate_post_test_attributes() {
          var $a, $b, TMP_31, self = this;

          self.$collect_inputs();
          return ($a = ($b = self.$n_state("post_test").$update()).$then, $a.$$p = (TMP_31 = function(post_test){var self = TMP_31.$$s || this, $c;
if (post_test == null) post_test = nil;
          if ((($c = post_test['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return self.$set_state($hash2(["post_test"], {"post_test": self.$n_state("post_test")}))
              } else {
              return self.$set_state($hash2(["post_test", "post_is_changed"], {"post_test": self.$n_state("post_test"), "post_is_changed": false}))
            }}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31), $a).call($b);
        }, TMP_32.$$arity = 0), nil) && 'update_post_test_attributes';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/post_tests/gradations/edit"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$n_prop', '$t', '$modal', '$errors', '$n_state', '$map', '$lambda', '$destroy_gradation', '$input', '$set_gradation_changed', '$update_gradation', '$content', '$delete_content_image', '$init_image_insertion_for_content', '$<<', '$comps_to_call_collect_on', '$delete', '$collect_inputs', '$content=', '$force_update', '$modal_open', '$event', '$insert_image_to_content', '$modal_close', '$then', '$has_errors?', '$each', '$add_error', '$content_type=', '$set_state', '$update_post_test_gradation_as_content', '$id', '$content_id=', '$remove_from_post_test_gradation', '$id=', '$update', '$emit', '$destroy']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PostTests, self = $PostTests = $module($base, 'PostTests');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $Gradations, self = $Gradations = $module($base, 'Gradations');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Edit(){};
          var self = $Edit = $klass($base, $super, 'Edit', $Edit);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_17, TMP_20, TMP_23, TMP_24, TMP_26, TMP_28;

          self.$expose();

          self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

          Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
            var self = this, gradation = nil;

            gradation = self.$n_prop("gradation");
            return $hash2(["gradation", "gradation_changed"], {"gradation": gradation, "gradation_changed": false});
          }, TMP_1.$$arity = 0);

          Opal.defn(self, '$render', TMP_11 = function ːrender() {
            var $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, $e, TMP_5, $f, TMP_6, $g, TMP_7, $h, TMP_8, $i, TMP_9, $j, TMP_10, self = this;

            return self.$t("div", $hash2([], {}), self.$modal(), self.$t("div", $hash2([], {}), (function() {if ((($a = self.$n_state("gradation").$errors()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return ($a = ($b = self.$n_state("gradation").$errors()).$map, $a.$$p = (TMP_2 = function(er){var self = TMP_2.$$s || this;
if (er == null) er = nil;
              return self.$t("p", $hash2([], {}), er)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b)
              } else {
              return nil
            }; return nil; })(), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

            return self.$destroy_gradation()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($c)}), "delete this"), self.$input((($scope.get('Forms')).$$scope.get('Input')), self.$n_state("gradation"), "from", $hash2(["show_name", "required_field", "on_change"], {"show_name": "score from", "required_field": true, "on_change": ($a = ($d = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

            return self.$set_gradation_changed()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($d)})), self.$input((($scope.get('Forms')).$$scope.get('Input')), self.$n_state("gradation"), "to", $hash2(["show_name", "required_field", "on_change"], {"show_name": "score from", "required_field": true, "on_change": ($a = ($e = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

            return self.$set_gradation_changed()}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($e)})), self.$input((($scope.get('Forms')).$$scope.get('Input')), self.$n_state("gradation"), "message", $hash2(["show_name", "on_change"], {"show_name": "message", "on_change": ($a = ($f = self).$lambda, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

            return self.$set_gradation_changed()}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($f)})), (function() {if ((($a = self.$n_state("gradation_changed")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($g = self).$lambda, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

              return self.$update_gradation()}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($g)}), "udpate")
              } else {
              return nil
            }; return nil; })(), (function() {if ((($a = self.$n_state("gradation").$content()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("div", $hash2([], {}), self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": self.$n_state("gradation").$content()})), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($h = self).$lambda, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

              return self.$delete_content_image()}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($h)}), "delete"), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($i = self).$lambda, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

              return self.$init_image_insertion_for_content()}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($i)}), "replace image"))
              } else {
              return self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($j = self).$lambda, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

              return self.$init_image_insertion_for_content()}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $a).call($j)}), "add image")
            }; return nil; })()));
          }, TMP_11.$$arity = 0);

          Opal.defn(self, '$component_did_mount', TMP_12 = function ːcomponent_did_mount() {
            var $a, self = this;

            if ((($a = self.$n_prop("save_in_place")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$n_prop("owner").$comps_to_call_collect_on()['$<<'](self)
            };
          }, TMP_12.$$arity = 0);

          Opal.defn(self, '$component_will_unmount', TMP_13 = function ːcomponent_will_unmount() {
            var $a, self = this;

            if ((($a = self.$n_prop("save_in_place")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$n_prop("owner").$comps_to_call_collect_on().$delete(self)
            };
          }, TMP_13.$$arity = 0);

          Opal.defn(self, '$handle_inputs', TMP_14 = function ːhandle_inputs() {
            var self = this;

            return self.$collect_inputs();
          }, TMP_14.$$arity = 0);

          Opal.defn(self, '$set_content_nil', TMP_15 = function ːset_content_nil(gradation) {
            var $a, $b, self = this;

            (($a = [nil]), $b = gradation, $b['$content='].apply($b, $a), $a[$a.length-1]);
            return self.$force_update();
          }, TMP_15.$$arity = 1);

          Opal.defn(self, '$init_image_insertion_for_content', TMP_17 = function ːinit_image_insertion_for_content() {
            var $a, $b, TMP_16, self = this;

            return self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('UploadAndPreview')), $hash2(["on_image_selected", "post_images"], {"on_image_selected": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_16 = function(image){var self = TMP_16.$$s || this;
if (image == null) image = nil;
            return self.$insert_image_to_content(image)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $a).call($b)), "post_images": self.$n_prop("image_roster")})));
          }, TMP_17.$$arity = 0);

          Opal.defn(self, '$insert_image_to_content', TMP_20 = function ːinsert_image_to_content(image) {
            var $a, $b, TMP_18, self = this;

            self.$modal_close();
            return ($a = ($b = image.$update_post_test_gradation_as_content($hash2(["wilds"], {"wilds": $hash2(["post_test_gradation_id", "id"], {"post_test_gradation_id": self.$n_state("gradation").$id(), "id": image.$id()})}))).$then, $a.$$p = (TMP_18 = function(u_img){var self = TMP_18.$$s || this, $c, $d, TMP_19, $e;
if (u_img == null) u_img = nil;
            if ((($c = u_img['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                ($c = ($d = u_img.$errors()).$each, $c.$$p = (TMP_19 = function(er){var self = TMP_19.$$s || this;
if (er == null) er = nil;
                return self.$n_state("gradation").$add_error("content", er)}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19), $c).call($d)
                } else {
                (($c = [u_img]), $e = self.$n_state("gradation"), $e['$content='].apply($e, $c), $c[$c.length-1]);
                (($c = ["PostImage"]), $e = self.$n_state("gradation"), $e['$content_type='].apply($e, $c), $c[$c.length-1]);
              };
              return self.$set_state($hash2(["gradation"], {"gradation": self.$n_state("gradation")}));}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18), $a).call($b);
          }, TMP_20.$$arity = 1);

          Opal.defn(self, '$delete_content_image', TMP_23 = function ːdelete_content_image() {
            var $a, $b, TMP_21, self = this;

            return ($a = ($b = self.$n_state("gradation").$content().$remove_from_post_test_gradation($hash2(["wilds"], {"wilds": $hash2(["post_test_gradation_id"], {"post_test_gradation_id": self.$n_state("gradation").$id()})}))).$then, $a.$$p = (TMP_21 = function(image){var self = TMP_21.$$s || this, $c, $d, TMP_22, $e;
if (image == null) image = nil;
            if ((($c = image['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                ($c = ($d = image.$errors()).$each, $c.$$p = (TMP_22 = function(er){var self = TMP_22.$$s || this;
if (er == null) er = nil;
                return self.$n_state("gradation").$add_error("content", er)}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22), $c).call($d)
                } else {
                (($c = [nil]), $e = self.$n_state("gradation"), $e['$content_id='].apply($e, $c), $c[$c.length-1]);
                (($c = [nil]), $e = self.$n_state("gradation"), $e['$content='].apply($e, $c), $c[$c.length-1]);
                (($c = [nil]), $e = self.$n_state("gradation"), $e['$content_type='].apply($e, $c), $c[$c.length-1]);
              };
              return self.$set_state($hash2(["gradation"], {"gradation": self.$n_state("gradation")}));}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21), $a).call($b);
          }, TMP_23.$$arity = 0);

          Opal.defn(self, '$set_gradation_changed', TMP_24 = function ːset_gradation_changed() {
            var $a, self = this;

            if ((($a = self.$n_state("gradation_changed")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$set_state($hash2(["gradation_changed"], {"gradation_changed": true}))
            };
          }, TMP_24.$$arity = 0);

          Opal.defn(self, '$update_gradation', TMP_26 = function ːupdate_gradation() {
            var $a, $b, TMP_25, self = this;

            self.$collect_inputs();
            return ($a = ($b = self.$n_state("gradation").$update($hash2(["wilds"], {"wilds": $hash2(["post_test_id"], {"post_test_id": self.$n_prop("owner").$n_state("post_test").$id()})}))).$then, $a.$$p = (TMP_25 = function(gradation){var self = TMP_25.$$s || this, $c, $d;
if (gradation == null) gradation = nil;
            if ((($c = gradation['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                (($c = [self.$n_state("gradation").$id()]), $d = gradation, $d['$id='].apply($d, $c), $c[$c.length-1]);
                return self.$set_state($hash2(["gradation"], {"gradation": gradation}));
                } else {
                (($c = [self.$n_state("gradation").$id()]), $d = gradation, $d['$id='].apply($d, $c), $c[$c.length-1]);
                return self.$set_state($hash2(["gradation_changed", "gradation"], {"gradation_changed": false, "gradation": gradation}));
              }}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25), $a).call($b);
          }, TMP_26.$$arity = 0);

          return (Opal.defn(self, '$destroy_gradation', TMP_28 = function ːdestroy_gradation() {
            var $a, $b, TMP_27, self = this;

            return ($a = ($b = self.$n_state("gradation").$destroy()).$then, $a.$$p = (TMP_27 = function(gradation){var self = TMP_27.$$s || this, $c;
if (gradation == null) gradation = nil;
            if ((($c = gradation['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return self.$set_state($hash2(["gradation"], {"gradation": gradation}))
                } else {
                return self.$emit("on_delete", gradation)
              }}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27), $a).call($b);
          }, TMP_28.$$arity = 0), nil) && 'destroy_gradation';
        })($scope.base, $scope.get('RW'))
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/post_tests/gradations/new"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$t', '$modal', '$map', '$input', '$content', '$lambda', '$set_content_nil', '$init_image_insertion_for', '$data', '$n_prop', '$add_gradation', '$<<', '$new', '$force_update', '$comps_to_call_collect_on', '$delete', '$collect_inputs', '$content=', '$modal_open', '$event', '$insert_image', '$modal_close', '$content_type=']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PostTests, self = $PostTests = $module($base, 'PostTests');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $Gradations, self = $Gradations = $module($base, 'Gradations');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $New(){};
          var self = $New = $klass($base, $super, 'New', $New);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_13, TMP_14;

          def.comps_to_call_collect_on = nil;
          self.$expose();

          self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

          Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
            var self = this;

            self.comps_to_call_collect_on;
            return $hash2([], {});
          }, TMP_1.$$arity = 0);

          Opal.defn(self, '$render', TMP_6 = function ːrender() {
            var $a, $b, TMP_2, $c, TMP_5, self = this;

            return self.$t("div", $hash2([], {}), self.$modal(), ($a = ($b = self.$n_prop("gradations").$data()).$map, $a.$$p = (TMP_2 = function(gradation){var self = TMP_2.$$s || this, $c, $d, TMP_3, $e, TMP_4;
if (gradation == null) gradation = nil;
            return self.$t("div", $hash2([], {}), self.$input((($scope.get('Forms')).$$scope.get('Input')), gradation, "from", $hash2(["show_name", "required_field"], {"show_name": "score from", "required_field": true})), self.$input((($scope.get('Forms')).$$scope.get('Input')), gradation, "to", $hash2(["show_name", "required_field"], {"show_name": "score from", "required_field": true})), self.$input((($scope.get('Forms')).$$scope.get('Input')), gradation, "message", $hash2(["show_name"], {"show_name": "message"})), (function() {if ((($c = gradation.$content()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return self.$t("div", $hash2([], {}), self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": gradation.$content()})), self.$t("button", $hash2(["onClick"], {"onClick": ($c = ($d = self).$lambda, $c.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

                return self.$set_content_nil(gradation)}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $c).call($d)}), "delete"))
                } else {
                return self.$t("button", $hash2(["onClick"], {"onClick": ($c = ($e = self).$lambda, $c.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

                return self.$init_image_insertion_for(gradation)}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $c).call($e)}), "add image")
              }; return nil; })())}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

            return self.$add_gradation()}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($c)}), "add gradation"));
          }, TMP_6.$$arity = 0);

          Opal.defn(self, '$add_gradation', TMP_7 = function ːadd_gradation() {
            var self = this;

            self.$n_prop("gradations").$data()['$<<']($scope.get('PostTestGradation').$new());
            return self.$force_update();
          }, TMP_7.$$arity = 0);

          Opal.defn(self, '$component_did_mount', TMP_8 = function ːcomponent_did_mount() {
            var self = this;

            return self.$n_prop("owner").$comps_to_call_collect_on()['$<<'](self);
          }, TMP_8.$$arity = 0);

          Opal.defn(self, '$component_will_unmount', TMP_9 = function ːcomponent_will_unmount() {
            var self = this;

            return self.$n_prop("owner").$comps_to_call_collect_on().$delete(self);
          }, TMP_9.$$arity = 0);

          Opal.defn(self, '$handle_inputs', TMP_10 = function ːhandle_inputs() {
            var self = this;

            return self.$collect_inputs();
          }, TMP_10.$$arity = 0);

          Opal.defn(self, '$set_content_nil', TMP_11 = function ːset_content_nil(gradation) {
            var $a, $b, self = this;

            (($a = [nil]), $b = gradation, $b['$content='].apply($b, $a), $a[$a.length-1]);
            return self.$force_update();
          }, TMP_11.$$arity = 1);

          Opal.defn(self, '$init_image_insertion_for', TMP_13 = function ːinit_image_insertion_for(gradation) {
            var $a, $b, TMP_12, self = this;

            return self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('UploadAndPreview')), $hash2(["on_image_selected", "post_images"], {"on_image_selected": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_12 = function(image){var self = TMP_12.$$s || this;
if (image == null) image = nil;
            return self.$insert_image(gradation, image)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $a).call($b)), "post_images": self.$n_prop("image_roster")})));
          }, TMP_13.$$arity = 1);

          return (Opal.defn(self, '$insert_image', TMP_14 = function ːinsert_image(gradation, image) {
            var $a, $b, self = this;

            self.$modal_close();
            (($a = [image]), $b = gradation, $b['$content='].apply($b, $a), $a[$a.length-1]);
            (($a = ["PostImage"]), $b = gradation, $b['$content_type='].apply($b, $a), $a[$a.length-1]);
            return self.$force_update();
          }, TMP_14.$$arity = 2), nil) && 'insert_image';
        })($scope.base, $scope.get('RW'))
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/post_tests/gradations/new_for_edit"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$n_prop', '$t', '$modal', '$input', '$n_state', '$content', '$lambda', '$delete_content_image', '$init_image_insertion_for_content', '$submit_when_save_in_place', '$<<', '$comps_to_call_collect_on', '$delete', '$collect_inputs', '$content=', '$force_update', '$modal_open', '$event', '$insert_image', '$modal_close', '$content_type=', '$then', '$has_errors?', '$set_state', '$emit', '$create', '$id']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PostTests, self = $PostTests = $module($base, 'PostTests');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $Gradations, self = $Gradations = $module($base, 'Gradations');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $NewForEdit(){};
          var self = $NewForEdit = $klass($base, $super, 'NewForEdit', $NewForEdit);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_11, TMP_12, TMP_14;

          def.comps_to_call_collect_on = nil;
          self.$expose();

          self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

          Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
            var self = this, gradation = nil;

            self.comps_to_call_collect_on;
            gradation = self.$n_prop("gradation");
            return $hash2(["gradation"], {"gradation": gradation});
          }, TMP_1.$$arity = 0);

          Opal.defn(self, '$render', TMP_5 = function ːrender() {
            var $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, self = this;

            return self.$t("div", $hash2([], {}), self.$modal(), self.$t("div", $hash2([], {}), self.$input((($scope.get('Forms')).$$scope.get('Input')), self.$n_state("gradation"), "from", $hash2(["show_name", "required_field"], {"show_name": "score from", "required_field": true})), self.$input((($scope.get('Forms')).$$scope.get('Input')), self.$n_state("gradation"), "to", $hash2(["show_name", "required_field"], {"show_name": "score from", "required_field": true})), self.$input((($scope.get('Forms')).$$scope.get('Input')), self.$n_state("gradation"), "message", $hash2(["show_name"], {"show_name": "message"})), (function() {if ((($a = self.$n_state("gradation").$content()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("div", $hash2([], {}), self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": self.$n_state("gradation").$content()})), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

              return self.$delete_content_image()}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($b)}), "delete"))
              } else {
              return self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

              return self.$init_image_insertion_for_content()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($c)}), "add image")
            }; return nil; })()), (function() {if ((($a = self.$n_prop("save_in_place")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($d = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

              return self.$submit_when_save_in_place()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($d)}), "save")
              } else {
              return nil
            }; return nil; })());
          }, TMP_5.$$arity = 0);

          Opal.defn(self, '$component_did_mount', TMP_6 = function ːcomponent_did_mount() {
            var $a, self = this;

            if ((($a = self.$n_prop("save_in_place")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$n_prop("owner").$comps_to_call_collect_on()['$<<'](self)
            };
          }, TMP_6.$$arity = 0);

          Opal.defn(self, '$component_will_unmount', TMP_7 = function ːcomponent_will_unmount() {
            var $a, self = this;

            if ((($a = self.$n_prop("save_in_place")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$n_prop("owner").$comps_to_call_collect_on().$delete(self)
            };
          }, TMP_7.$$arity = 0);

          Opal.defn(self, '$handle_inputs', TMP_8 = function ːhandle_inputs() {
            var self = this;

            return self.$collect_inputs();
          }, TMP_8.$$arity = 0);

          Opal.defn(self, '$set_content_nil', TMP_9 = function ːset_content_nil(gradation) {
            var $a, $b, self = this;

            (($a = [nil]), $b = gradation, $b['$content='].apply($b, $a), $a[$a.length-1]);
            return self.$force_update();
          }, TMP_9.$$arity = 1);

          Opal.defn(self, '$init_image_insertion_for_content', TMP_11 = function ːinit_image_insertion_for_content() {
            var $a, $b, TMP_10, self = this;

            return self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('UploadAndPreview')), $hash2(["on_image_selected", "post_images"], {"on_image_selected": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_10 = function(image){var self = TMP_10.$$s || this;
if (image == null) image = nil;
            return self.$insert_image(image)}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10), $a).call($b)), "post_images": self.$n_prop("image_roster")})));
          }, TMP_11.$$arity = 0);

          Opal.defn(self, '$insert_image', TMP_12 = function ːinsert_image(image) {
            var $a, $b, self = this;

            self.$modal_close();
            (($a = [image]), $b = self.$n_state("gradation"), $b['$content='].apply($b, $a), $a[$a.length-1]);
            (($a = ["PostImage"]), $b = self.$n_state("gradation"), $b['$content_type='].apply($b, $a), $a[$a.length-1]);
            return self.$force_update();
          }, TMP_12.$$arity = 1);

          return (Opal.defn(self, '$submit_when_save_in_place', TMP_14 = function ːsubmit_when_save_in_place() {
            var $a, $b, TMP_13, self = this;

            self.$collect_inputs();
            return ($a = ($b = self.$n_state("gradation").$create($hash2(["wilds"], {"wilds": $hash2(["post_test_id"], {"post_test_id": self.$n_prop("owner").$n_state("post_test").$id()})}))).$then, $a.$$p = (TMP_13 = function(gradation){var self = TMP_13.$$s || this, $c;
if (gradation == null) gradation = nil;
            if ((($c = gradation['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return self.$set_state($hash2(["gradation"], {"gradation": gradation}))
                } else {
                return self.$emit("on_done", gradation)
              }}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13), $a).call($b);
          }, TMP_14.$$arity = 0), nil) && 'submit_when_save_in_place';
        })($scope.base, $scope.get('RW'))
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/post_tests/gradations/show"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$n_prop', '$n_state', '$t', '$message', '$content']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PostTests, self = $PostTests = $module($base, 'PostTests');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $Gradations, self = $Gradations = $module($base, 'Gradations');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Show(){};
          var self = $Show = $klass($base, $super, 'Show', $Show);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

          self.$expose();

          Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
            var self = this;

            return $hash2(["gradation"], {"gradation": self.$n_prop("gradation")});
          }, TMP_1.$$arity = 0);

          return (Opal.defn(self, '$render', TMP_2 = function ːrender() {
            var $a, self = this, gradation = nil;

            gradation = self.$n_state("gradation");
            return self.$t("div", $hash2(["className"], {"className": "PostTestsGradations-Show"}), self.$t("p", $hash2([], {}), "your result:"), self.$t("h1", $hash2(["className"], {"className": "msg"}), gradation.$message()), (function() {if ((($a = self.$n_state("gradation").$content()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("div", $hash2(["className"], {"className": "m_content"}), self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": gradation.$content()})))
              } else {
              return nil
            }; return nil; })());
          }, TMP_2.$$arity = 0), nil) && 'render';
        })($scope.base, $scope.get('RW'))
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/post_tests/new"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$attr_accessor', '$n_prop', '$new', '$post_test_gradations=', '$t', '$modal', '$[]', '$errors', '$n_state', '$map', '$input', '$thumbnail', '$lambda', '$delete_thumbnail', '$init_thumbnail_insertion', '$delete_question', '$test_questions', '$add_question', '$post_test_gradations', '$handle_inputs', '$emit', '$delete', '$data', '$set_state', '$<<', '$each', '$to_proc', '$collect_inputs', '$then', '$has_errors?', '$call', '$p', '$create', '$modal_open', '$event', '$insert_thumbnail', '$modal_close', '$thumbnail=']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PostTests, self = $PostTests = $module($base, 'PostTests');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $New(){};
        var self = $New = $klass($base, $super, 'New', $New);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_11, TMP_12, TMP_13, TMP_15, TMP_17, TMP_18, TMP_19;

        def.comps_to_call_collect_on = nil;
        self.$expose();

        Opal.defn(self, '$validate_props', TMP_1 = function ːvalidate_props() {
          var self = this;

          return nil;
        }, TMP_1.$$arity = 0);

        self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

        self.$attr_accessor("comps_to_call_collect_on");

        Opal.defn(self, '$get_initial_state', TMP_2 = function ːget_initial_state() {
          var $a, $b, self = this, post_test = nil;

          self.comps_to_call_collect_on = [];
          post_test = ((($a = self.$n_prop("post_test")) !== false && $a !== nil && $a != null) ? $a : Opal.get('PostTest').$new());
          (($a = [$scope.get('ModelCollection').$new()]), $b = post_test, $b['$post_test_gradations='].apply($b, $a), $a[$a.length-1]);
          return $hash2(["post_test", "image_roster"], {"post_test": post_test, "image_roster": []});
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$render', TMP_11 = function ːrender() {
          var $a, $b, TMP_3, $c, TMP_4, $d, TMP_5, $e, TMP_6, $f, TMP_8, $g, TMP_9, $h, TMP_10, self = this, x = nil;

          return self.$t("div", $hash2(["className"], {"className": "PostTests-New"}), self.$modal(), (function() {if ((($a = x = self.$n_state("post_test").$errors()['$[]']("general")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("div", $hash2(["className"], {"className": "errors-group"}), self.$t("p", $hash2([], {}), "your input has these errors"), ($a = ($b = x).$map, $a.$$p = (TMP_3 = function(er){var self = TMP_3.$$s || this;
if (er == null) er = nil;
            return self.$t("p", $hash2([], {}), er)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b))
            } else {
            return nil
          }; return nil; })(), self.$t("div", $hash2(["className"], {"className": "questionRelated-group"}), self.$t("div", $hash2(["className"], {"className": "title"}), self.$input((($scope.get('Forms')).$$scope.get('Input')), self.$n_state("post_test"), "title", $hash2(["show_name", "required_field"], {"show_name": "enter name", "required_field": true}))), (function() {if ((($a = self.$n_state("post_test").$thumbnail()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("div", $hash2(["className"], {"className": "thumbnail"}), self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": self.$n_state("post_test").$thumbnail()})), self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), self.$t("button", $hash2(["className", "onClick"], {"className": "btn btn-sm", "onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

            return self.$delete_thumbnail()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($c)}), "delete")))
            } else {
            return self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), self.$t("button", $hash2(["className", "onClick"], {"className": "btn btn-sm", "onClick": ($a = ($d = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

            return self.$init_thumbnail_insertion()}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($d)}), "add image thumbnail"))
          }; return nil; })()), self.$t("div", $hash2(["className"], {"className": "TestQuestions-container"}), ($a = ($e = self.$n_state("post_test").$test_questions()).$map, $a.$$p = (TMP_6 = function(question){var self = TMP_6.$$s || this, $f, $g, TMP_7;
if (question == null) question = nil;
          return self.$t((((((($scope.get('Components')).$$scope.get('PostTests'))).$$scope.get('Questions'))).$$scope.get('New')), $hash2(["question", "owner", "on_delete", "image_roster"], {"question": question, "owner": self, "on_delete": ($f = ($g = self).$lambda, $f.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

            return self.$delete_question(question)}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $f).call($g), "image_roster": self.$n_state("image_roster")}))}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($e), self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($f = self).$lambda, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

          return self.$add_question()}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($f), "className": "btn btn-sm"}), "add question"))), self.$t("div", $hash2(["className"], {"className": "TestGradations-container"}), self.$t((((((($scope.get('Components')).$$scope.get('PostTests'))).$$scope.get('Gradations'))).$$scope.get('New')), $hash2(["owner", "gradations", "image_roster"], {"owner": self, "gradations": self.$n_state("post_test").$post_test_gradations(), "image_roster": self.$n_state("image_roster")}))), self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($g = self).$lambda, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

          return self.$handle_inputs()}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($g), "className": "btn btn-sm"}), "submit"), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($h = self).$lambda, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

          return self.$emit("on_cancel")}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $a).call($h), "className": "btn btn-sm"}), "cancel")));
        }, TMP_11.$$arity = 0);

        Opal.defn(self, '$delete_question', TMP_12 = function ːdelete_question(question) {
          var self = this;

          self.$n_state("post_test").$test_questions().$data().$delete(question);
          return self.$set_state($hash2(["post_test"], {"post_test": self.$n_state("post_test")}));
        }, TMP_12.$$arity = 1);

        Opal.defn(self, '$add_question', TMP_13 = function ːadd_question(question) {
          var self = this;

          self.$n_state("post_test").$test_questions()['$<<']($scope.get('TestQuestion').$new());
          return self.$set_state($hash2(["post_test"], {"post_test": self.$n_state("post_test")}));
        }, TMP_13.$$arity = 1);

        Opal.defn(self, '$handle_inputs', TMP_15 = function ːhandle_inputs() {try {

          var $a, $b, $c, TMP_14, self = this;

          ($a = ($b = self.comps_to_call_collect_on).$each, $a.$$p = "handle_inputs".$to_proc(), $a).call($b);
          self.$collect_inputs($hash2(["form_model"], {"form_model": "post_test"}));
          return ($a = ($c = self.$n_state("post_test").$create()).$then, $a.$$p = (TMP_14 = function(post_test){var self = TMP_14.$$s || this, $d, e = nil;
if (post_test == null) post_test = nil;
          try {
              if ((($d = post_test['$has_errors?']()) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                return self.$set_state($hash2(["post_test"], {"post_test": post_test}))
                } else {
                if ((($d = self.$n_prop("on_collect")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                  self.$n_prop("on_collect").$call(self.$n_state("post_test"), self);
                  Opal.ret(nil);};
                return self.$emit("on_done", post_test);
              }
            } catch ($err) {
              if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                try {
                  return self.$p(e)
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($c);
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, TMP_15.$$arity = 0);

        Opal.defn(self, '$init_thumbnail_insertion', TMP_17 = function ːinit_thumbnail_insertion() {
          var $a, $b, TMP_16, self = this;

          return self.$modal_open(self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('UploadAndPreview')), $hash2(["on_image_selected", "post_images"], {"on_image_selected": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_16 = function(image){var self = TMP_16.$$s || this;
if (image == null) image = nil;
          return self.$insert_thumbnail(image)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $a).call($b)), "post_images": self.$n_state("image_roster")})));
        }, TMP_17.$$arity = 0);

        Opal.defn(self, '$insert_thumbnail', TMP_18 = function ːinsert_thumbnail(image) {
          var $a, $b, self = this;

          self.$modal_close();
          (($a = [image]), $b = self.$n_state("post_test"), $b['$thumbnail='].apply($b, $a), $a[$a.length-1]);
          return self.$set_state($hash2(["post_test"], {"post_test": self.$n_state("post_test")}));
        }, TMP_18.$$arity = 1);

        return (Opal.defn(self, '$delete_thumbnail', TMP_19 = function ːdelete_thumbnail() {
          var $a, $b, self = this;

          (($a = [nil]), $b = self.$n_state("post_test"), $b['$thumbnail='].apply($b, $a), $a[$a.length-1]);
          return self.$set_state($hash2(["post_test"], {"post_test": self.$n_state("post_test")}));
        }, TMP_19.$$arity = 0), nil) && 'delete_thumbnail';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/post_tests/questions/edit"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$attr_accessor', '$n_prop', '$t', '$modal', '$errors', '$n_state', '$map', '$lambda', '$destroy_question', '$update_question', '$input', '$set_question_changed', '$content', '$==', '$content_type', '$delete_image', '$init_image_insertion_to_content', '$delete_variant', '$data', '$test_answer_variants', '$set_on_answered_msg_changed', '$on_answered_m_content', '$delete_on_answered_content', '$init_image_insertion_for_on_answered_m_content', '$init_variant_addition', '$modal_open', '$event', '$insert_variant', '$new', '$modal_close', '$<<', '$set_state', '$delete', '$insert_image_to_content', '$insert_image_to_on_answered_m_content', '$then', '$has_errors?', '$each', '$add_error', '$content=', '$content_type=', '$update_test_question_as_content', '$id', '$on_answered_m_content=', '$on_answered_m_content_type=', '$p', '$update_test_question_as_on_answered_content', '$validate', '$emit', '$destroy', '$content_id=', '$remove_from_test_question', '$on_answered_m_content_id=', '$remove_from_test_question_as_on_answered_m_content', '$collect_inputs', '$update']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PostTests, self = $PostTests = $module($base, 'PostTests');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $Questions, self = $Questions = $module($base, 'Questions');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Edit(){};
          var self = $Edit = $klass($base, $super, 'Edit', $Edit);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_17, TMP_19, TMP_20, TMP_21, TMP_23, TMP_25, TMP_28, TMP_31, TMP_33, TMP_36, TMP_39, TMP_41, TMP_42, TMP_43;

          self.$expose();

          self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

          self.$attr_accessor("comps_to_call_collect_on");

          Opal.defn(self, '$validate_props', TMP_1 = function ːvalidate_props() {
            var self = this;

            return nil;
          }, TMP_1.$$arity = 0);

          Opal.defn(self, '$get_initial_state', TMP_2 = function ːget_initial_state() {
            var self = this, question = nil;

            self.comps_to_call_collect_on = [];
            question = self.$n_prop("question");
            return $hash2(["question", "question_changed", "on_answered_msg_changed"], {"question": question, "question_changed": false, "on_answered_msg_changed": false});
          }, TMP_2.$$arity = 0);

          Opal.defn(self, '$render', TMP_17 = function ːrender() {
            var $a, $b, TMP_3, $c, TMP_4, $d, TMP_5, $e, TMP_6, $f, TMP_7, $g, TMP_8, $h, TMP_9, $i, TMP_10, $j, TMP_12, $k, TMP_13, $l, TMP_14, $m, TMP_15, $n, TMP_16, self = this;

            return self.$t("div", $hash2([], {}), self.$modal(), (function() {if ((($a = self.$n_state("question").$errors()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return ($a = ($b = self.$n_state("question").$errors()).$map, $a.$$p = (TMP_3 = function(er){var self = TMP_3.$$s || this;
if (er == null) er = nil;
              return self.$t("p", $hash2([], {}), er)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b)
              } else {
              return nil
            }; return nil; })(), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

            return self.$destroy_question()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($c)}), "delete this question"), (function() {if ((($a = self.$n_state("question_changed")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($d = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

              return self.$update_question()}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($d)}), "udpate")
              } else {
              return nil
            }; return nil; })(), self.$input((($scope.get('Forms')).$$scope.get('Input')), self.$n_state("question"), "text", $hash2(["show_name", "required_field", "on_change"], {"show_name": "question", "required_field": true, "on_change": ($a = ($e = self).$lambda, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

            return self.$set_question_changed()}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($e)})), (function() {if ((($a = ($f = self.$n_state("question").$content(), $f !== false && $f !== nil && $f != null ?self.$n_state("question").$content_type()['$==']("PostImage") : $f)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("div", $hash2(["className"], {"className": "PostTest-Question-Image-Show"}), self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": self.$n_state("question").$content()})), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($f = self).$lambda, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

              return self.$delete_image()}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($f)}), "remove this image"), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($g = self).$lambda, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

              return self.$init_image_insertion_to_content()}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($g)}), "replace this image"))
              } else {
              return self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($h = self).$lambda, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

              return self.$init_image_insertion_to_content()}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($h)}), "add image")
            }; return nil; })(), ($a = ($i = self.$n_state("question").$test_answer_variants().$data()).$map, $a.$$p = (TMP_10 = function(variant){var self = TMP_10.$$s || this, $j, $k, TMP_11;
if (variant == null) variant = nil;
            return self.$t((((((($scope.get('Components')).$$scope.get('PostTests'))).$$scope.get('AnswerVariants'))).$$scope.get('Edit')), $hash2(["key", "owner", "variant", "on_delete", "image_roster"], {"key": "" + (variant), "owner": self, "variant": variant, "on_delete": ($j = ($k = self).$lambda, $j.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

              return self.$delete_variant(variant)}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $j).call($k), "image_roster": self.$n_prop("image_roster")}))}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10), $a).call($i), self.$t("div", $hash2(["className"], {"className": "on_answered_m_content"}), self.$t("p", $hash2([], {}), "you can add here a text and an image that will be shown after the question is answered"), (function() {if ((($a = self.$n_state("on_answered_msg_changed")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($j = self).$lambda, $a.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this;

              return self.$update_question()}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12), $a).call($j)}), "udpate")
              } else {
              return nil
            }; return nil; })(), self.$input((($scope.get('Forms')).$$scope.get('Input')), self.$n_state("question"), "on_answered_msg", $hash2(["show_name", "required_field", "on_change"], {"show_name": "text", "required_field": false, "on_change": ($a = ($k = self).$lambda, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;

            return self.$set_on_answered_msg_changed()}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $a).call($k)})), self.$t("div", $hash2(["className"], {"className": "btn-container"}), (function() {if ((($a = self.$n_state("question").$on_answered_m_content()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("div", $hash2(["className"], {"className": "on_answered_m_content_preview"}), self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": self.$n_state("question").$on_answered_m_content()})), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($l = self).$lambda, $a.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this;

              return self.$delete_on_answered_content()}, TMP_14.$$s = self, TMP_14.$$arity = 0, TMP_14), $a).call($l)}), "remove this"))
              } else {
              return self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($m = self).$lambda, $a.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this;

              return self.$init_image_insertion_for_on_answered_m_content()}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15), $a).call($m), "className": "btn btn-xs"}), "insert image")
            }; return nil; })())), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($n = self).$lambda, $a.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this;

            return self.$init_variant_addition()}, TMP_16.$$s = self, TMP_16.$$arity = 0, TMP_16), $a).call($n)}), "add_variant"));
          }, TMP_17.$$arity = 0);

          Opal.defn(self, '$init_variant_addition', TMP_19 = function ːinit_variant_addition() {
            var $a, $b, TMP_18, self = this;

            return self.$modal_open(nil, self.$t((((((($scope.get('Components')).$$scope.get('PostTests'))).$$scope.get('AnswerVariants'))).$$scope.get('New')), $hash2(["save_in_place", "on_done", "owner", "variant", "image_roster"], {"save_in_place": true, "on_done": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_18 = function(variant){var self = TMP_18.$$s || this;
if (variant == null) variant = nil;
            return self.$insert_variant(variant)}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18), $a).call($b)), "owner": self, "variant": $scope.get('TestAnswerVariant').$new(), "image_roster": self.$n_prop("image_roster")})));
          }, TMP_19.$$arity = 0);

          Opal.defn(self, '$insert_variant', TMP_20 = function ːinsert_variant(variant) {
            var self = this;

            self.$modal_close();
            self.$n_state("question").$test_answer_variants().$data()['$<<'](variant);
            return self.$set_state($hash2(["question"], {"question": self.$n_state("question")}));
          }, TMP_20.$$arity = 1);

          Opal.defn(self, '$delete_variant', TMP_21 = function ːdelete_variant(variant) {
            var self = this;

            self.$n_state("question").$test_answer_variants().$data().$delete(variant);
            return self.$set_state($hash2(["question"], {"question": self.$n_state("question")}));
          }, TMP_21.$$arity = 1);

          Opal.defn(self, '$init_image_insertion_to_content', TMP_23 = function ːinit_image_insertion_to_content() {
            var $a, $b, TMP_22, self = this;

            return self.$modal_open(self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('UploadAndPreview')), $hash2(["on_image_selected", "post_images"], {"on_image_selected": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_22 = function(image){var self = TMP_22.$$s || this;
if (image == null) image = nil;
            return self.$insert_image_to_content(image)}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22), $a).call($b)), "post_images": self.$n_prop("image_roster")})));
          }, TMP_23.$$arity = 0);

          Opal.defn(self, '$init_image_insertion_for_on_answered_m_content', TMP_25 = function ːinit_image_insertion_for_on_answered_m_content() {
            var $a, $b, TMP_24, self = this;

            return self.$modal_open(self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('UploadAndPreview')), $hash2(["on_image_selected", "post_images"], {"on_image_selected": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_24 = function(image){var self = TMP_24.$$s || this;
if (image == null) image = nil;
            return self.$insert_image_to_on_answered_m_content(image)}, TMP_24.$$s = self, TMP_24.$$arity = 1, TMP_24), $a).call($b)), "post_images": self.$n_prop("image_roster")})));
          }, TMP_25.$$arity = 0);

          Opal.defn(self, '$insert_image_to_content', TMP_28 = function ːinsert_image_to_content(image) {
            var $a, $b, TMP_26, self = this;

            self.$modal_close();
            return ($a = ($b = image.$update_test_question_as_content($hash2(["wilds"], {"wilds": $hash2(["test_question_id", "id"], {"test_question_id": self.$n_state("question").$id(), "id": image.$id()})}))).$then, $a.$$p = (TMP_26 = function(u_img){var self = TMP_26.$$s || this, $c, $d, TMP_27, $e;
if (u_img == null) u_img = nil;
            if ((($c = u_img['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                ($c = ($d = u_img.$errors()).$each, $c.$$p = (TMP_27 = function(er){var self = TMP_27.$$s || this;
if (er == null) er = nil;
                return self.$n_state("question").$add_error("content", er)}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27), $c).call($d)
                } else {
                (($c = [u_img]), $e = self.$n_state("question"), $e['$content='].apply($e, $c), $c[$c.length-1]);
                (($c = ["PostImage"]), $e = self.$n_state("question"), $e['$content_type='].apply($e, $c), $c[$c.length-1]);
              };
              return self.$set_state($hash2(["question"], {"question": self.$n_state("question")}));}, TMP_26.$$s = self, TMP_26.$$arity = 1, TMP_26), $a).call($b);
          }, TMP_28.$$arity = 1);

          Opal.defn(self, '$insert_image_to_on_answered_m_content', TMP_31 = function ːinsert_image_to_on_answered_m_content(image) {
            var $a, $b, TMP_29, self = this;

            self.$modal_close();
            return ($a = ($b = image.$update_test_question_as_on_answered_content($hash2(["wilds"], {"wilds": $hash2(["test_question_id", "id"], {"test_question_id": self.$n_state("question").$id(), "id": image.$id()})}))).$then, $a.$$p = (TMP_29 = function(u_img){var self = TMP_29.$$s || this, $c, $d, TMP_30, $e, e = nil;
if (u_img == null) u_img = nil;
            try {
                if ((($c = u_img['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                  ($c = ($d = u_img.$errors()).$each, $c.$$p = (TMP_30 = function(er){var self = TMP_30.$$s || this;
if (er == null) er = nil;
                  return self.$n_state("question").$add_error("on_answered_m_content", er)}, TMP_30.$$s = self, TMP_30.$$arity = 1, TMP_30), $c).call($d)
                  } else {
                  (($c = [u_img]), $e = self.$n_state("question"), $e['$on_answered_m_content='].apply($e, $c), $c[$c.length-1]);
                  (($c = ["PostImage"]), $e = self.$n_state("question"), $e['$on_answered_m_content_type='].apply($e, $c), $c[$c.length-1]);
                };
                return self.$set_state($hash2(["question"], {"question": self.$n_state("question")}));
              } catch ($err) {
                if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                  try {
                    return self.$p(e)
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              }}, TMP_29.$$s = self, TMP_29.$$arity = 1, TMP_29), $a).call($b);
          }, TMP_31.$$arity = 1);

          Opal.defn(self, '$destroy_question', TMP_33 = function ːdestroy_question() {
            var $a, $b, TMP_32, self = this;

            return ($a = ($b = self.$n_state("question").$destroy()).$then, $a.$$p = (TMP_32 = function(question){var self = TMP_32.$$s || this, $c;
if (question == null) question = nil;
            question.$validate();
              if ((($c = question['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return self.$set_state($hash2(["question"], {"question": question}))
                } else {
                return self.$emit("on_delete")
              };}, TMP_32.$$s = self, TMP_32.$$arity = 1, TMP_32), $a).call($b);
          }, TMP_33.$$arity = 0);

          Opal.defn(self, '$delete_image', TMP_36 = function ːdelete_image() {
            var $a, $b, TMP_34, self = this;

            return ($a = ($b = self.$n_state("question").$content().$remove_from_test_question($hash2(["wilds"], {"wilds": $hash2(["test_question_id"], {"test_question_id": self.$n_state("question").$id()})}))).$then, $a.$$p = (TMP_34 = function(image){var self = TMP_34.$$s || this, $c, $d, TMP_35, $e;
if (image == null) image = nil;
            if ((($c = image['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                ($c = ($d = image.$errors()).$each, $c.$$p = (TMP_35 = function(er){var self = TMP_35.$$s || this;
if (er == null) er = nil;
                return self.$n_state("question").$add_error("content", er)}, TMP_35.$$s = self, TMP_35.$$arity = 1, TMP_35), $c).call($d)
                } else {
                (($c = [nil]), $e = self.$n_state("question"), $e['$content_id='].apply($e, $c), $c[$c.length-1]);
                (($c = [nil]), $e = self.$n_state("question"), $e['$content='].apply($e, $c), $c[$c.length-1]);
                (($c = [nil]), $e = self.$n_state("question"), $e['$content_type='].apply($e, $c), $c[$c.length-1]);
              };
              return self.$set_state($hash2(["question"], {"question": self.$n_state("question")}));}, TMP_34.$$s = self, TMP_34.$$arity = 1, TMP_34), $a).call($b);
          }, TMP_36.$$arity = 0);

          Opal.defn(self, '$delete_on_answered_content', TMP_39 = function ːdelete_on_answered_content() {
            var $a, $b, TMP_37, self = this;

            return ($a = ($b = self.$n_state("question").$on_answered_m_content().$remove_from_test_question_as_on_answered_m_content($hash2(["wilds"], {"wilds": $hash2(["test_question_id"], {"test_question_id": self.$n_state("question").$id()})}))).$then, $a.$$p = (TMP_37 = function(image){var self = TMP_37.$$s || this, $c, $d, TMP_38, $e, e = nil;
if (image == null) image = nil;
            try {
                if ((($c = image['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                  ($c = ($d = image.$errors()).$each, $c.$$p = (TMP_38 = function(er){var self = TMP_38.$$s || this;
if (er == null) er = nil;
                  return self.$n_state("question").$add_error("on_answered_m_content", er)}, TMP_38.$$s = self, TMP_38.$$arity = 1, TMP_38), $c).call($d)
                  } else {
                  (($c = [nil]), $e = self.$n_state("question"), $e['$on_answered_m_content_id='].apply($e, $c), $c[$c.length-1]);
                  (($c = [nil]), $e = self.$n_state("question"), $e['$on_answered_m_content='].apply($e, $c), $c[$c.length-1]);
                };
                return self.$set_state($hash2(["question"], {"question": self.$n_state("question")}));
              } catch ($err) {
                if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                  try {
                    return self.$p(e)
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              }}, TMP_37.$$s = self, TMP_37.$$arity = 1, TMP_37), $a).call($b);
          }, TMP_39.$$arity = 0);

          Opal.defn(self, '$update_question', TMP_41 = function ːupdate_question() {
            var $a, $b, TMP_40, self = this;

            self.$collect_inputs();
            return ($a = ($b = self.$n_state("question").$update($hash2(["wilds"], {"wilds": $hash2(["post_test_id"], {"post_test_id": self.$n_prop("owner").$n_state("post_test").$id()})}))).$then, $a.$$p = (TMP_40 = function(question){var self = TMP_40.$$s || this, $c;
if (question == null) question = nil;
            if ((($c = question['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return self.$set_state($hash2(["question"], {"question": question}))
                } else {
                return self.$set_state($hash2(["question_changed", "on_answered_msg_changed", "question"], {"question_changed": false, "on_answered_msg_changed": false, "question": question}))
              }}, TMP_40.$$s = self, TMP_40.$$arity = 1, TMP_40), $a).call($b);
          }, TMP_41.$$arity = 0);

          Opal.defn(self, '$set_question_changed', TMP_42 = function ːset_question_changed() {
            var $a, self = this;

            if ((($a = self.$n_state("question_changed")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$set_state($hash2(["question_changed"], {"question_changed": true}))
            };
          }, TMP_42.$$arity = 0);

          return (Opal.defn(self, '$set_on_answered_msg_changed', TMP_43 = function ːset_on_answered_msg_changed() {
            var $a, self = this;

            if ((($a = self.$n_state("on_answered_msg_changed")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$set_state($hash2(["on_answered_msg_changed"], {"on_answered_msg_changed": true}))
            };
          }, TMP_43.$$arity = 0), nil) && 'set_on_answered_msg_changed';
        })($scope.base, $scope.get('RW'))
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/post_tests/questions/new"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$attr_accessor', '$n_prop', '$t', '$modal', '$errors', '$map', '$input', '$n_state', '$content', '$==', '$question_type', '$lambda', '$delete_image', '$init_image_insertion', '$delete', '$data', '$test_answer_variants', '$add_variant', '$on_answered_m_content', '$delete_on_answered_content', '$init_image_insertion_for_on_answered', '$emit', '$submit_when_save_in_place', '$<<', '$new', '$set_state', '$comps_to_call_collect_on', '$each', '$to_proc', '$collect_inputs', '$modal_open', '$event', '$insert_image', '$modal_close', '$content=', '$question_type=', '$content_type=', '$insert_image_to_on_answered', '$on_answered_m_content=', '$on_answered_m_content_type=', '$handle_inputs', '$then', '$has_errors?', '$create', '$id']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PostTests, self = $PostTests = $module($base, 'PostTests');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $Questions, self = $Questions = $module($base, 'Questions');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $New(){};
          var self = $New = $klass($base, $super, 'New', $New);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_20, TMP_21, TMP_22, TMP_24, TMP_25, TMP_26, TMP_28;

          def.comps_to_call_collect_on = nil;
          self.$expose();

          self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

          self.$attr_accessor("comps_to_call_collect_on");

          Opal.defn(self, '$validate_props', TMP_1 = function ːvalidate_props() {
            var self = this;

            return nil;
          }, TMP_1.$$arity = 0);

          Opal.defn(self, '$get_initial_state', TMP_2 = function ːget_initial_state() {
            var self = this, question = nil;

            self.comps_to_call_collect_on = [];
            question = self.$n_prop("question");
            return $hash2(["question"], {"question": question});
          }, TMP_2.$$arity = 0);

          Opal.defn(self, '$render', TMP_13 = function ːrender() {
            var $a, $b, TMP_3, $c, TMP_4, $d, TMP_5, $e, TMP_6, $f, TMP_8, $g, TMP_9, $h, TMP_10, $i, TMP_11, $j, TMP_12, self = this;

            return self.$t("div", $hash2(["className"], {"className": "TestQuestions-New"}), self.$modal(), self.$t("div", $hash2(["className"], {"className": "g-errors-group"}), (function() {if ((($a = self.$n_prop("question").$errors()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return ($a = ($b = self.$n_prop("question").$errors()).$map, $a.$$p = (TMP_3 = function(er){var self = TMP_3.$$s || this;
if (er == null) er = nil;
              return self.$t("p", $hash2([], {}), er)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b)
              } else {
              return nil
            }; return nil; })()), self.$input((($scope.get('Forms')).$$scope.get('Input')), self.$n_state("question"), "text", $hash2(["show_name", "required_field"], {"show_name": "question", "required_field": true})), (function() {if ((($a = ($c = self.$n_state("question").$content(), $c !== false && $c !== nil && $c != null ?self.$n_state("question").$question_type()['$==']("PostImage") : $c)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("div", $hash2(["className"], {"className": "thumbnail"}), self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": self.$n_state("question").$content()})), self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

              return self.$delete_image()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($c), "className": "btn btn-sm"}), "remove this")))
              } else {
              return self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($d = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

              return self.$init_image_insertion()}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($d), "className": "btn btn-sm"}), "add image"))
            }; return nil; })(), self.$t("div", $hash2(["className"], {"className": "variants-container"}), ($a = ($e = self.$n_state("question").$test_answer_variants().$data()).$map, $a.$$p = (TMP_6 = function(variant){var self = TMP_6.$$s || this, $f, $g, TMP_7;
if (variant == null) variant = nil;
            return self.$t((((((($scope.get('Components')).$$scope.get('PostTests'))).$$scope.get('AnswerVariants'))).$$scope.get('New')), $hash2(["owner", "variant", "on_delete", "image_roster"], {"owner": self, "variant": variant, "on_delete": ($f = ($g = self).$lambda, $f.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

              return self.$delete(variant)}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $f).call($g), "image_roster": self.$n_prop("image_roster")}))}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($e), self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($f = self).$lambda, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

            return self.$add_variant()}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($f), "className": "btn btn-sm"}), "add_variant"))), self.$t("div", $hash2(["className"], {"className": "on_answered_m_content"}), self.$t("p", $hash2([], {}), "you can add here a text and an image that will be shown after the question is answered"), self.$input((($scope.get('Forms')).$$scope.get('Input')), self.$n_state("question"), "on_answered_msg", $hash2(["show_name", "required_field"], {"show_name": "text", "required_field": false})), self.$t("div", $hash2(["className"], {"className": "btn-container"}), (function() {if ((($a = self.$n_state("question").$on_answered_m_content()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("div", $hash2(["className"], {"className": "on_answered_m_content_preview"}), self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": self.$n_state("question").$on_answered_m_content()})), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($g = self).$lambda, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

              return self.$delete_on_answered_content()}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($g)}), "remove this"))
              } else {
              return self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($h = self).$lambda, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

              return self.$init_image_insertion_for_on_answered()}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $a).call($h), "className": "btn btn-xs"}), "insert image")
            }; return nil; })())), self.$t("div", $hash2(["className"], {"className": "g-btn-group"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($i = self).$lambda, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

            return self.$emit("on_delete")}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $a).call($i), "className": "btn btn-sm"}), "delete")), (function() {if ((($a = self.$n_prop("save_in_place")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($j = self).$lambda, $a.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this;

              return self.$submit_when_save_in_place()}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12), $a).call($j)}), "save")
              } else {
              return nil
            }; return nil; })());
          }, TMP_13.$$arity = 0);

          Opal.defn(self, '$add_variant', TMP_14 = function ːadd_variant() {
            var self = this;

            self.$n_state("question").$test_answer_variants().$data()['$<<']($scope.get('TestAnswerVariant').$new());
            return self.$set_state($hash2(["question"], {"question": self.$n_state("question")}));
          }, TMP_14.$$arity = 0);

          Opal.defn(self, '$delete', TMP_15 = function(variant) {
            var self = this;

            self.$n_state("question").$test_answer_variants().$data().$delete(variant);
            return self.$set_state($hash2(["question"], {"question": self.$n_state("question")}));
          }, TMP_15.$$arity = 1);

          Opal.defn(self, '$component_did_mount', TMP_16 = function ːcomponent_did_mount() {
            var $a, self = this;

            if ((($a = self.$n_prop("save_in_place")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$n_prop("owner").$comps_to_call_collect_on()['$<<'](self)
            };
          }, TMP_16.$$arity = 0);

          Opal.defn(self, '$component_will_unmount', TMP_17 = function ːcomponent_will_unmount() {
            var $a, self = this;

            if ((($a = self.$n_prop("save_in_place")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$n_prop("owner").$comps_to_call_collect_on().$delete(self)
            };
          }, TMP_17.$$arity = 0);

          Opal.defn(self, '$handle_inputs', TMP_18 = function ːhandle_inputs() {
            var $a, $b, self = this;

            ($a = ($b = self.comps_to_call_collect_on).$each, $a.$$p = "handle_inputs".$to_proc(), $a).call($b);
            return self.$collect_inputs($hash2(["form_model"], {"form_model": "question"}));
          }, TMP_18.$$arity = 0);

          Opal.defn(self, '$init_image_insertion', TMP_20 = function ːinit_image_insertion() {
            var $a, $b, TMP_19, self = this;

            return self.$modal_open(self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('UploadAndPreview')), $hash2(["on_image_selected", "post_images"], {"on_image_selected": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_19 = function(image){var self = TMP_19.$$s || this;
if (image == null) image = nil;
            return self.$insert_image(image)}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19), $a).call($b)), "post_images": self.$n_prop("image_roster")})));
          }, TMP_20.$$arity = 0);

          Opal.defn(self, '$insert_image', TMP_21 = function ːinsert_image(image) {
            var $a, $b, self = this;

            self.$modal_close();
            (($a = [image]), $b = self.$n_state("question"), $b['$content='].apply($b, $a), $a[$a.length-1]);
            (($a = ["PostImage"]), $b = self.$n_state("question"), $b['$question_type='].apply($b, $a), $a[$a.length-1]);
            (($a = ["PostImage"]), $b = self.$n_state("question"), $b['$content_type='].apply($b, $a), $a[$a.length-1]);
            return self.$set_state($hash2(["question"], {"question": self.$n_state("question")}));
          }, TMP_21.$$arity = 1);

          Opal.defn(self, '$delete_image', TMP_22 = function ːdelete_image() {
            var $a, $b, self = this;

            (($a = [nil]), $b = self.$n_state("question"), $b['$content='].apply($b, $a), $a[$a.length-1]);
            (($a = [nil]), $b = self.$n_state("question"), $b['$content_type='].apply($b, $a), $a[$a.length-1]);
            (($a = [nil]), $b = self.$n_state("question"), $b['$question_type='].apply($b, $a), $a[$a.length-1]);
            return self.$set_state($hash2(["question"], {"question": self.$n_state("question")}));
          }, TMP_22.$$arity = 0);

          Opal.defn(self, '$init_image_insertion_for_on_answered', TMP_24 = function ːinit_image_insertion_for_on_answered() {
            var $a, $b, TMP_23, self = this;

            return self.$modal_open(self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('UploadAndPreview')), $hash2(["on_image_selected", "post_images"], {"on_image_selected": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_23 = function(image){var self = TMP_23.$$s || this;
if (image == null) image = nil;
            return self.$insert_image_to_on_answered(image)}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23), $a).call($b)), "post_images": self.$n_prop("image_roster")})));
          }, TMP_24.$$arity = 0);

          Opal.defn(self, '$insert_image_to_on_answered', TMP_25 = function ːinsert_image_to_on_answered(image) {
            var $a, $b, self = this;

            self.$modal_close();
            (($a = [image]), $b = self.$n_state("question"), $b['$on_answered_m_content='].apply($b, $a), $a[$a.length-1]);
            (($a = ["PostImage"]), $b = self.$n_state("question"), $b['$on_answered_m_content_type='].apply($b, $a), $a[$a.length-1]);
            return self.$set_state($hash2(["question"], {"question": self.$n_state("question")}));
          }, TMP_25.$$arity = 1);

          Opal.defn(self, '$delete_on_answered_content', TMP_26 = function ːdelete_on_answered_content() {
            var $a, $b, self = this;

            (($a = [nil]), $b = self.$n_state("question"), $b['$on_answered_m_content='].apply($b, $a), $a[$a.length-1]);
            (($a = [nil]), $b = self.$n_state("question"), $b['$on_answered_m_content_type='].apply($b, $a), $a[$a.length-1]);
            return self.$set_state($hash2(["question"], {"question": self.$n_state("question")}));
          }, TMP_26.$$arity = 0);

          return (Opal.defn(self, '$submit_when_save_in_place', TMP_28 = function ːsubmit_when_save_in_place() {
            var $a, $b, TMP_27, self = this;

            self.$handle_inputs();
            return ($a = ($b = self.$n_state("question").$create($hash2(["wilds"], {"wilds": $hash2(["post_test_id"], {"post_test_id": self.$n_prop("owner").$n_state("post_test").$id()})}))).$then, $a.$$p = (TMP_27 = function(question){var self = TMP_27.$$s || this, $c;
if (question == null) question = nil;
            if ((($c = question['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return self.$set_state($hash2(["question"], {"question": question}))
                } else {
                return self.$emit("on_done", question)
              }}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27), $a).call($b);
          }, TMP_28.$$arity = 0), nil) && 'submit_when_save_in_place';
        })($scope.base, $scope.get('RW'))
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/post_tests/questions/show"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$n_prop', '$n_state', '$t', '$text', '$content', '$==', '$content_type', '$map', '$lambda', '$on_selected', '$data', '$test_answer_variants', '$p', '$on_answered_m_content', '$on_answered_msg', '$render_m_content', '$===', '$correct', '$answered_correct=', '$set_state', '$emit']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PostTests, self = $PostTests = $module($base, 'PostTests');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $Questions, self = $Questions = $module($base, 'Questions');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Show(){};
          var self = $Show = $klass($base, $super, 'Show', $Show);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_4, TMP_5, TMP_6, TMP_7;

          self.$expose();

          Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
            var self = this, answered = nil;

            answered = false;
            return $hash2(["question", "answered_correct", "answered"], {"question": self.$n_prop("question"), "answered_correct": nil, "answered": false});
          }, TMP_1.$$arity = 0);

          Opal.defn(self, '$render', TMP_4 = function ːrender() {
            var $a, $b, TMP_2, self = this, question = nil, x = nil;

            question = self.$n_state("question");
            return self.$t("div", $hash2(["className"], {"className": "PostTestsQuestions-Show"}), (function() {if ((($a = question.$text()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("h4", $hash2(["className"], {"className": "text"}), question.$text())
              } else {
              return nil
            }; return nil; })(), (function() {if ((($a = ($b = question.$content(), $b !== false && $b !== nil && $b != null ?question.$content_type()['$==']("PostImage") : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image", "css_class"], {"post_image": question.$content(), "css_class": "thumbnail"}))
              } else {
              return nil
            }; return nil; })(), self.$t("div", $hash2(["className"], {"className": "variantsContainer"}), ($a = ($b = question.$test_answer_variants().$data()).$map, $a.$$p = (TMP_2 = function(variant){var self = TMP_2.$$s || this, $c, $d, TMP_3;
if (variant == null) variant = nil;
            return self.$t((((((($scope.get('Components')).$$scope.get('PostTests'))).$$scope.get('AnswerVariants'))).$$scope.get('Show')), $hash2(["variant", "on_selected", "answered"], {"variant": variant, "on_selected": ($c = ($d = self).$lambda, $c.$$p = (TMP_3 = function(variant){var self = TMP_3.$$s || this;
if (variant == null) variant = nil;
              return self.$on_selected(variant)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $c).call($d), "answered": self.$n_state("answered")}))}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b)), (function() {if ((($a = self.$n_state("answered")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              self.$p(self.$n_state("question").$on_answered_m_content());
              return self.$t("div", $hash2(["className"], {"className": "on_answered"}), (function() {if ((($a = x = question.$on_answered_msg()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return self.$t("p", $hash2(["className"], {"className": "msg"}), x)
                } else {
                return nil
              }; return nil; })(), (function() {if ((($a = x = question.$on_answered_m_content()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return self.$render_m_content()
                } else {
                return nil
              }; return nil; })());
              } else {
              return nil
            }; return nil; })());
          }, TMP_4.$$arity = 0);

          Opal.defn(self, '$render_m_content', TMP_5 = function ːrender_m_content() {
            var self = this, $case = nil, content = nil;

            self.$p("should render " + (self.$n_state("question").$on_answered_m_content()));
            return self.$t("div", $hash2(["className"], {"className": "m_content"}), (function() {$case = content = self.$n_state("question").$on_answered_m_content();if ($scope.get('PostImage')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image", "css_class"], {"post_image": content, "css_class": "img"}))}else { return nil }})());
          }, TMP_5.$$arity = 0);

          Opal.defn(self, '$on_selected', TMP_6 = function ːon_selected(variant) {
            var $a, $b, self = this, answered_correct = nil;

            answered_correct = variant.$correct();
            (($a = [answered_correct]), $b = self.$n_state("question"), $b['$answered_correct='].apply($b, $a), $a[$a.length-1]);
            self.$set_state($hash2(["answered_correct", "answered"], {"answered_correct": answered_correct, "answered": true}));
            return self.$emit("on_answered", self.$n_state("question"));
          }, TMP_6.$$arity = 1);

          return (Opal.defn(self, '$answered_correct', TMP_7 = function ːanswered_correct() {
            var self = this;

            return self.$n_state("answered_correct");
          }, TMP_7.$$arity = 0), nil) && 'answered_correct';
        })($scope.base, $scope.get('RW'))
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/post_tests/show"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$n_prop', '$get_questions', '$length', '$data', '$each', '$[]=', '$test_questions', '$thumbnail', '$post_test_gradations', '$n_state', '$get_thumbnail', '$t', '$title', '$map', '$id', '$lambda', '$on_answered', '$show_correct_gradation', '$answered_correct', '$+', '$==', '$-', '$set_state', '$get_gradations', '$>=', '$from', '$<=', '$to']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PostTests, self = $PostTests = $module($base, 'PostTests');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Show(){};
        var self = $Show = $klass($base, $super, 'Show', $Show);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3, TMP_4, TMP_5, TMP_6, TMP_9, TMP_10, TMP_12;

        self.$expose();

        Opal.defn(self, '$validate_props', TMP_1 = function ːvalidate_props() {
          var self = this;

          return nil;
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$get_initial_state', TMP_3 = function ːget_initial_state() {
          var $a, $b, TMP_2, self = this, post_test = nil, questions = nil, total_questions = nil, questions_answered = nil, answer_tracker = nil;

          post_test = self.$n_prop("post_test");
          questions = self.$get_questions();
          total_questions = questions.$data().$length();
          questions_answered = 0;
          answer_tracker = $hash2([], {});
          ($a = ($b = questions).$each, $a.$$p = (TMP_2 = function(question){var self = TMP_2.$$s || this;
if (question == null) question = nil;
          return answer_tracker['$[]='](question, nil)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b);
          return $hash2(["post_test", "completed", "questions_answered", "total_questions", "questions_answered_correctly", "answer_tracker"], {"post_test": post_test, "completed": false, "questions_answered": questions_answered, "total_questions": total_questions, "questions_answered_correctly": 0, "answer_tracker": answer_tracker});
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$get_questions', TMP_4 = function ːget_questions() {
          var self = this;

          return self.$n_prop("post_test").$test_questions();
        }, TMP_4.$$arity = 0);

        Opal.defn(self, '$get_thumbnail', TMP_5 = function ːget_thumbnail() {
          var self = this;

          return self.$n_prop("post_test").$thumbnail();
        }, TMP_5.$$arity = 0);

        Opal.defn(self, '$get_gradations', TMP_6 = function ːget_gradations() {
          var self = this;

          return self.$n_prop("post_test").$post_test_gradations();
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$render', TMP_9 = function ːrender() {
          var $a, $b, TMP_7, self = this, test = nil, questions = nil, thumbnail = nil;

          test = self.$n_state("post_test");
          questions = self.$get_questions();
          thumbnail = self.$get_thumbnail();
          return self.$t("div", $hash2(["className"], {"className": "PostTests-Show"}), self.$t("h2", $hash2(["className"], {"className": "title"}), test.$title()), (function() {if (thumbnail !== false && thumbnail !== nil && thumbnail != null) {
            return self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image", "css_class"], {"post_image": thumbnail, "css_class": "thumbnail"}))
            } else {
            return nil
          }; return nil; })(), self.$t("div", $hash2(["className"], {"className": "questionsContainer"}), ($a = ($b = questions.$data()).$map, $a.$$p = (TMP_7 = function(question){var self = TMP_7.$$s || this, $c, $d, TMP_8;
if (question == null) question = nil;
          return self.$t((((((($scope.get('Components')).$$scope.get('PostTests'))).$$scope.get('Questions'))).$$scope.get('Show')), $hash2(["key", "question", "on_answered", "test_completed"], {"key": question.$id(), "question": question, "on_answered": ($c = ($d = self).$lambda, $c.$$p = (TMP_8 = function(question){var self = TMP_8.$$s || this;
if (question == null) question = nil;
            return self.$on_answered(question)}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $c).call($d), "test_completed": self.$n_state("completed")}))}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b)), (function() {if ((($a = self.$n_state("completed")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$show_correct_gradation()
            } else {
            return nil
          }; return nil; })());
        }, TMP_9.$$arity = 0);

        Opal.defn(self, '$on_answered', TMP_10 = function ːon_answered(question) {
          var self = this, total_questions = nil, questions_answered = nil, answered_correct = nil, answer_tracker = nil, questions_answered_correctly = nil, completed = nil;

          total_questions = self.$n_state("total_questions");
          questions_answered = self.$n_state("questions_answered");
          answered_correct = question.$answered_correct();
          answer_tracker = self.$n_state("answer_tracker");
          questions_answered_correctly = self.$n_state("questions_answered_correctly");
          if (answered_correct !== false && answered_correct !== nil && answered_correct != null) {
            answer_tracker['$[]='](question, true);
            questions_answered_correctly = $rb_plus(questions_answered_correctly, 1);
            } else {
            answer_tracker['$[]='](question, false)
          };
          questions_answered = $rb_plus(questions_answered, 1);
          completed = false;
          if (($rb_minus(total_questions, questions_answered))['$=='](0)) {
            completed = true};
          return self.$set_state($hash2(["questions_answered", "answer_tracker", "completed", "questions_answered_correctly"], {"questions_answered": questions_answered, "answer_tracker": answer_tracker, "completed": completed, "questions_answered_correctly": questions_answered_correctly}));
        }, TMP_10.$$arity = 1);

        return (Opal.defn(self, '$show_correct_gradation', TMP_12 = function ːshow_correct_gradation() {
          var $a, $b, TMP_11, self = this, correct_count = nil, gradation_to_show = nil, gradations = nil;

          correct_count = self.$n_state("questions_answered_correctly");
          gradation_to_show = nil;
          gradations = self.$get_gradations();
          ($a = ($b = gradations.$data()).$each, $a.$$p = (TMP_11 = function(gradation){var self = TMP_11.$$s || this, $c, $d;
if (gradation == null) gradation = nil;
          if ((($c = ($d = $rb_ge(correct_count, gradation.$from()), $d !== false && $d !== nil && $d != null ?$rb_le(correct_count, gradation.$to()) : $d)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return gradation_to_show = gradation
              } else {
              return nil
            }}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($b);
          if (gradation_to_show !== false && gradation_to_show !== nil && gradation_to_show != null) {
            return self.$t((((((($scope.get('Components')).$$scope.get('PostTests'))).$$scope.get('Gradations'))).$$scope.get('Show')), $hash2(["gradation"], {"gradation": gradation_to_show}))
            } else {
            return nil
          };
        }, TMP_12.$$arity = 0), nil) && 'show_correct_gradation';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/post_tests/thumb_show"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$t', '$title', '$n_prop', '$get_thumbnail', '$s_thumbnail', '$thumbnail']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PostTests, self = $PostTests = $module($base, 'PostTests');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $ThumbShow(){};
        var self = $ThumbShow = $klass($base, $super, 'ThumbShow', $ThumbShow);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

        self.$expose();

        Opal.defn(self, '$validate_props', TMP_1 = function ːvalidate_props() {
          var self = this;

          return nil;
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$render', TMP_2 = function ːrender() {
          var self = this;

          return self.$t("div", $hash2(["className"], {"className": "postTest-thumbShow"}), self.$t("p", $hash2([], {}), "postTest here"), self.$t("h3", $hash2([], {}), self.$n_prop("post_test").$title()), self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": self.$get_thumbnail()})));
        }, TMP_2.$$arity = 0);

        return (Opal.defn(self, '$get_thumbnail', TMP_3 = function ːget_thumbnail() {
          var $a, self = this;

          if ((($a = self.$n_prop("show_serialized_fields")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$n_prop("post_test").$s_thumbnail()
            } else {
            return self.$n_prop("post_test").$thumbnail()
          };
        }, TMP_3.$$arity = 0), nil) && 'get_thumbnail';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/post_texts/edit"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$n_prop', '$t', '$input', '$lambda', '$handle_content_change', '$attribute_was_changed?', '$update', '$record_change_for_attribute', '$force_update', '$collect_inputs', '$start_spinning_icon', '$then', '$stop_spinning_icon', '$has_errors?', '$clear_change_record_for_attribute']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PostTexts, self = $PostTexts = $module($base, 'PostTexts');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Edit(){};
        var self = $Edit = $klass($base, $super, 'Edit', $Edit);

        var def = self.$$proto, $scope = self.$$scope, TMP_3, TMP_4, TMP_6;

        self.$expose();

        self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

        Opal.defn(self, '$render', TMP_3 = function ːrender() {
          var $a, $b, TMP_1, $c, TMP_2, self = this, post_text = nil;

          post_text = self.$n_prop("post_text");
          return self.$t("div", $hash2(["className"], {"className": "post-texts-new post-texts-edit"}), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('WysiTextarea')), post_text, "content", $hash2(["on_change"], {"on_change": ($a = ($b = self).$lambda, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this;

          return self.$handle_content_change()}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b)})), (function() {if ((($a = post_text['$attribute_was_changed?']("content")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("button", $hash2(["className", "onClick"], {"className": "btn btn-primary btn-sm", "onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

            return self.$update()}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($c)}), "update")
            } else {
            return nil
          }; return nil; })());
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$handle_content_change', TMP_4 = function ːhandle_content_change() {
          var $a, self = this, post_text = nil;

          post_text = self.$n_prop("post_text");
          if ((($a = post_text['$attribute_was_changed?']("content")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            post_text.$record_change_for_attribute("content");
            return self.$force_update();
          };
        }, TMP_4.$$arity = 0);

        return (Opal.defn(self, '$update', TMP_6 = function ːupdate() {
          var $a, $b, TMP_5, self = this;

          self.$collect_inputs();
          self.$start_spinning_icon();
          return ($a = ($b = self.$n_prop("post_text").$update($hash2(["namespace"], {"namespace": "staff"}))).$then, $a.$$p = (TMP_5 = function(post_text){var self = TMP_5.$$s || this, $c, e = nil;
if (post_text == null) post_text = nil;
          self.$stop_spinning_icon();
            try {
              if ((($c = post_text['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                } else {
                post_text.$clear_change_record_for_attribute("content")
              };
              return self.$force_update();
            } catch ($err) {
              if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                try {
                  return console.log(e);
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            };}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($b);
        }, TMP_6.$$arity = 0), nil) && 'update';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/post_texts/new"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$n_prop', '$new', '$n_state', '$t', '$general_errors_for', '$input', '$lambda', '$handle_submit', '$collect_inputs', '$call', '$create', '$force_update']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PostTexts, self = $PostTexts = $module($base, 'PostTexts');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $New(){};
        var self = $New = $klass($base, $super, 'New', $New);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3, TMP_5;

        self.$expose();

        self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

        Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
          var $a, self = this, post_text = nil;

          post_text = ((($a = self.$n_prop("post_text")) !== false && $a !== nil && $a != null) ? $a : $scope.get('PostText').$new());
          return $hash2(["post_text"], {"post_text": post_text});
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$render', TMP_3 = function ːrender() {
          var $a, $b, TMP_2, self = this, post_text = nil;

          post_text = self.$n_state("post_text");
          return self.$t("div", $hash2(["className"], {"className": "post-texts-new"}), self.$general_errors_for(self.$n_state("post")), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('WysiTextarea')), post_text, "content", $hash2([], {})), self.$t("button", $hash2(["className", "onClick"], {"className": "btn btn-primary btn-sm", "onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

          return self.$handle_submit()}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($b)}), "create"));
        }, TMP_3.$$arity = 0);

        return (Opal.defn(self, '$handle_submit', TMP_5 = function ːhandle_submit() {
          var $a, $b, TMP_4, self = this;

          self.$collect_inputs($hash2(["form_model"], {"form_model": self.$n_state("post_text")}));
          if ((($a = self.$n_prop("on_collect")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$n_prop("on_collect").$call(self.$n_state("post_text"), self);
            return nil;};
          return ($a = ($b = self.$n_state("post_text")).$create, $a.$$p = (TMP_4 = function(post_text){var self = TMP_4.$$s || this;
if (post_text == null) post_text = nil;
          return self.$force_update()}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($b);
        }, TMP_5.$$arity = 0), nil) && 'handle_submit';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/post_texts/show"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$!', '$post_text', '$props', '$is_a?', '$puts', '$class', '$t', '$to_n', '$content', '$truncate_text']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $PostTexts, self = $PostTexts = $module($base, 'PostTexts');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Show(){};
        var self = $Show = $klass($base, $super, 'Show', $Show);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

        self.$expose();

        Opal.defn(self, '$validate_props', TMP_1 = function ːvalidate_props() {
          var $a, $b, self = this;

          if ((($a = ((($b = self.$props().$post_text()['$!']()) !== false && $b !== nil && $b != null) ? $b : self.$props().$post_text()['$is_a?']($scope.get('PostText'))['$!']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$puts("" + (self) + " of " + (self.$class()) + ": required_prop :post_text : PostText was not passed -> got " + (self.$props().$post_text()) + " of " + (self.$props().$post_text().$class()) + " instead")
            } else {
            return nil
          };
        }, TMP_1.$$arity = 0);

        return (Opal.defn(self, '$render', TMP_2 = function ːrender() {
          var $a, self = this;

          return self.$t("div", $hash2(["dangerouslySetInnerHTML", "className"], {"dangerouslySetInnerHTML": $hash2(["__html"], {"__html": self.$props().$post_text().$content()}).$to_n(), "className": "post-text " + ((function() {if ((($a = self.$props().$truncate_text()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "truncate"
            } else {
            return ""
          }; return nil; })())}));
        }, TMP_2.$$arity = 0), nil) && 'render';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/posts/gridder"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$t']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Posts, self = $Posts = $module($base, 'Posts');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Gridder(){};
        var self = $Gridder = $klass($base, $super, 'Gridder', $Gridder);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        self.$expose();

        return (Opal.defn(self, '$render', TMP_1 = function ːrender() {
          var self = this;

          return self.$t("p", $hash2([], {}), "GRIDDER!");
        }, TMP_1.$$arity = 0), nil) && 'render';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/posts/grids/r1c2"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$t', '$children']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Posts, self = $Posts = $module($base, 'Posts');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $Grids, self = $Grids = $module($base, 'Grids');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $R1c2(){};
          var self = $R1c2 = $klass($base, $super, 'R1c2', $R1c2);

          var def = self.$$proto, $scope = self.$$scope, TMP_1;

          self.$expose();

          return (Opal.defn(self, '$render', TMP_1 = function ːrender() {
            var self = this;

            return self.$t("div", $hash2(["className"], {"className": "row R1c3 fl-align-baseline"}), self.$t("div", $hash2(["className"], {"className": "col-lg-6"}), self.$children()[0]), self.$t("div", $hash2(["className"], {"className": "col-lg-6"}), self.$children()[1]));
          }, TMP_1.$$arity = 0), nil) && 'render';
        })($scope.base, $scope.get('RW'))
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/posts/grids/r1c2r2c1"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$t', '$children']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Posts, self = $Posts = $module($base, 'Posts');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $Grids, self = $Grids = $module($base, 'Grids');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $R1c2r2c1(){};
          var self = $R1c2r2c1 = $klass($base, $super, 'R1c2r2c1', $R1c2r2c1);

          var def = self.$$proto, $scope = self.$$scope, TMP_1;

          self.$expose();

          return (Opal.defn(self, '$render', TMP_1 = function ːrender() {
            var self = this;

            return self.$t("div", $hash2(["className"], {"className": "row R1c3 fl-align-baseline"}), self.$t("div", $hash2(["className"], {"className": "col-lg-6"}), self.$children()[0]), self.$t("div", $hash2(["className"], {"className": "col-lg-6"}), self.$t("div", $hash2(["className"], {"className": "row"}), self.$children()[1]), self.$t("div", $hash2(["className"], {"className": "row"}), self.$children()[2])));
          }, TMP_1.$$arity = 0), nil) && 'render';
        })($scope.base, $scope.get('RW'))
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/posts/grids/r1c3"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$t', '$children']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Posts, self = $Posts = $module($base, 'Posts');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $Grids, self = $Grids = $module($base, 'Grids');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $R1c3(){};
          var self = $R1c3 = $klass($base, $super, 'R1c3', $R1c3);

          var def = self.$$proto, $scope = self.$$scope, TMP_1;

          self.$expose();

          return (Opal.defn(self, '$render', TMP_1 = function ːrender() {
            var self = this;

            return self.$t("div", $hash2(["className"], {"className": "row R1c3 fl-align-baseline"}), self.$t("div", $hash2(["className"], {"className": "col-lg-4 gridPart"}), self.$children()[0]), self.$t("div", $hash2(["className"], {"className": "col-lg-4 gridPart"}), self.$children()[1]), self.$t("div", $hash2(["className"], {"className": "col-lg-4 gridPart"}), self.$children()[2]));
          }, TMP_1.$$arity = 0), nil) && 'render';
        })($scope.base, $scope.get('RW'))
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/posts/index"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $gvars = Opal.gvars;

  Opal.add_stubs(['$expose', '$include', '$current_post_for_show=', '$class', '$new', '$subscribe', '$instance', '$==', '$pathname', '$location', '$props', '$fetch_and_set_posts', '$p', '$listen_attach_next_button_if_post_is_too_long', '$!', '$[]=', '$n_state', '$-', '$length', '$data', '$t', '$n_set_state', '$delete', '$force_update', '$!=', '$path', '$empty?', '$posts', '$state', '$then', '$extract_pagination', '$select', '$include?', '$fresh_already_shown', '$id', '$<<', '$fresh_already_shown=', '$+', '$<', '$sort_by', '$[]', '$attributes', '$data=', '$set_state', '$listen_to_infinite_scroll_beacon', '$listen_for_current_post_in_view', '$index', '$per_page', '$post_div_element_at_coords', '$>', '$*', '$start', '$stop', '$render_r1c3', '$render_r1c2', '$render_r1c1', '$tile_or_post', '$children', '$to_n', '$lambda', '$scroll_to_next_post', '$post_id', '$params', '$history', '$render_posts', '$progress_bar', '$next_page_infinite_scroll_beacon', '$current_index_in_view', '$title', '$count', '$post_karma', '$name', '$user_credential', '$author', '$bottom_lane_for_post_controll', '$usub_with_current_user', '$event', '$make_dirty', '$subscription_changed', '$link_to', '$set_current_post_for_show', '$current_user_pkt_or_new', '$pkt_changed', '$===', '$usub_with_current_user=', '$each', '$n_ref', '$puts', '$post_index_at_coords', '$destroy_infinite_scroll_beacon', '$pagination_current_page', '$is_element_out_of_viewport?', '$set_first_in_view', '$amount_change_factor', '$user_karma', '$count=', '$clear_current_post_for_show', '$unsubscribe', '$unlisten_for_current_post_in_view', '$unlisten_attach_next_button_if_post_is_too_long']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Posts, self = $Posts = $module($base, 'Posts');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Index(){};
        var self = $Index = $klass($base, $super, 'Index', $Index);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_13, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_24, TMP_28, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_40, TMP_41, TMP_43, TMP_44;
        if (self.current_post_for_show == null) self.current_post_for_show = nil;

        def.notifier_rendered = def.post_index_query_running = def.attach_next_button_if_post_is_too_long = def.length = def.current_index = def.repeating_index = def.height_at_which_post_is_considered_current = nil;
        self.$expose();

        self.$include((($scope.get('Plugins')).$$scope.get('InfiniteScrollable')));

        self.current_post_for_show;

        Opal.defs(self, '$current_post_for_show=', TMP_1 = function(post) {
          var self = this;

          return self.current_post_for_show = post;
        }, TMP_1.$$arity = 1);

        Opal.defs(self, '$current_post_for_show', TMP_2 = function ːcurrent_post_for_show() {
          var self = this;
          if (self.current_post_for_show == null) self.current_post_for_show = nil;

          return self.current_post_for_show;
        }, TMP_2.$$arity = 0);

        Opal.defs(self, '$clear_current_post_for_show', TMP_3 = function ːclear_current_post_for_show() {
          var self = this;

          return self.current_post_for_show = nil;
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$set_current_post_for_show', TMP_4 = function ːset_current_post_for_show(post) {
          var $a, $b, self = this;

          return (($a = [post]), $b = self.$class(), $b['$current_post_for_show='].apply($b, $a), $a[$a.length-1]);
        }, TMP_4.$$arity = 1);

        Opal.defn(self, '$get_initial_state', TMP_5 = function ːget_initial_state() {
          var self = this;

          self.post_index_query_running = false;
          return $hash2(["posts", "per_page", "current_index_in_view", "fresh_already_shown", "tiles_to_insert"], {"posts": $scope.get('ModelCollection').$new(), "per_page": 10, "current_index_in_view": 0, "fresh_already_shown": [], "tiles_to_insert": $hash2([], {})});
        }, TMP_5.$$arity = 0);

        Opal.defn(self, '$component_did_mount', TMP_6 = function ːcomponent_did_mount() {
          var $a, $b, self = this;
          if ($gvars.IS_MOBILE == null) $gvars.IS_MOBILE = nil;

          $scope.get('UserNotificationsManager').$instance().$subscribe("when_notifications_updated", self);
          if ((($a = ((($b = self.$props().$location().$pathname()['$==']("/posts/index")) !== false && $b !== nil && $b != null) ? $b : self.$props().$location().$pathname()['$==']("/"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$fetch_and_set_posts()};
          if ((($a = $gvars.IS_MOBILE) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$p("is mobile");
            return self.$listen_attach_next_button_if_post_is_too_long();
            } else {
            return nil
          };
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$when_notifications_updated', TMP_7 = function ːwhen_notifications_updated() {
          var $a, self = this;

          if ((($a = self.notifier_rendered['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.notifier_rendered = true;
            self.$n_state("tiles_to_insert")['$[]=']($rb_minus(self.$n_state("posts").$data().$length(), 1), self.$t((((($scope.get('Components')).$$scope.get('UserNotifications'))).$$scope.get('PostIndexIndex')), $hash2(["key", "arbitrary_id", "owner"], {"key": "" + ($rb_minus(self.$n_state("posts").$data().$length(), 1)) + "nm", "arbitrary_id": self.$n_state("posts").$data().$length(), "owner": self})));
            return self.$n_set_state({tiles_to_insert: self.$n_state("tiles_to_insert")});
            } else {
            return nil
          };
        }, TMP_7.$$arity = 0);

        Opal.defn(self, '$notifications_emptied', TMP_8 = function ːnotifications_emptied(index_at_tiles_to_insert) {
          var self = this;

          self.notifier_rendered = false;
          self.$n_state("tiles_to_insert").$delete(index_at_tiles_to_insert);
          return self.$force_update();
        }, TMP_8.$$arity = 1);

        Opal.defn(self, '$component_will_receive_props', TMP_9 = function ːcomponent_will_receive_props(np) {
          var $a, $b, self = this;

          if ((($a = ($b = np.$location().$pathname()['$!='](self.$props().$location().$path()), $b !== false && $b !== nil && $b != null ?self.$state().$posts().$data()['$empty?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$fetch_and_set_posts()
            } else {
            return nil
          };
        }, TMP_9.$$arity = 1);

        Opal.defn(self, '$fetch_and_set_posts', TMP_13 = function ːfetch_and_set_posts(page) {try {

          var $a, $b, TMP_10, self = this, promise = nil;

          if (page == null) {
            page = 1;
          }
          if ((($a = self.post_index_query_running) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil};
          self.post_index_query_running = true;
          return promise = ($a = ($b = $scope.get('Post').$index($hash2(["extra_params", "component"], {"extra_params": $hash2(["page", "per_page"], {"page": page, "per_page": self.$state().$per_page()}), "component": self}))).$then, $a.$$p = (TMP_10 = function(posts){var self = TMP_10.$$s || this, $c, $d, TMP_11, $e, TMP_12, $f, shown_ids = nil, e = nil;
            if ($gvars.IS_MOBILE == null) $gvars.IS_MOBILE = nil;
if (posts == null) posts = nil;
          try {
              self.$extract_pagination(posts);
              shown_ids = [];
              posts = ($c = ($d = posts).$select, $c.$$p = (TMP_11 = function(post){var self = TMP_11.$$s || this, $e;
if (post == null) post = nil;
              if ((($e = self.$state().$fresh_already_shown()['$include?'](post.$id())) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
                  return false
                  } else {
                  shown_ids['$<<'](post.$id());
                  return true;
                }}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $c).call($d);
              ($c = self.$state(), $c['$fresh_already_shown=']($rb_plus($c.$fresh_already_shown(), shown_ids)));
              if ((($c = $rb_lt(posts.$length(), 1)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                Opal.ret(nil)};
              posts = ($c = ($e = posts).$sort_by, $c.$$p = (TMP_12 = function(post){var self = TMP_12.$$s || this;
if (post == null) post = nil;
              return post.$attributes()['$[]']("created_at")}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $c).call($e);
              ($c = self.$state().$posts(), $c['$data=']($rb_plus($c.$data(), posts)));
              self.$set_state($hash2(["posts", "fresh_already_shown"], {"posts": self.$state().$posts(), "fresh_already_shown": self.$state().$fresh_already_shown()}));
              self.$listen_to_infinite_scroll_beacon();
              self.post_index_query_running = false;
              if ((($c = (($f = page['$=='](1)) ? $gvars.IS_MOBILE : page['$=='](1))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return self.$listen_for_current_post_in_view()
                } else {
                return nil
              };
            } catch ($err) {
              if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                try {
                  return self.$p(e)
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10), $a).call($b);
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, TMP_13.$$arity = -1);

        Opal.defn(self, '$listen_attach_next_button_if_post_is_too_long', TMP_15 = function ːlisten_attach_next_button_if_post_is_too_long() {
          var $a, $b, TMP_14, self = this, x = nil, y = nil;

          x = $(window).width() / 3;
          y = $(window).height() / 5;
          self.attach_next_button_if_post_is_too_long = ($a = ($b = (($scope.get('Services')).$$scope.get('Interval'))).$new, $a.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this, $c, pi = nil;

          if ((($c = pi = self.$post_div_element_at_coords(x, y)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              if ((($c = $rb_gt(pi["offsetHeight"], $rb_times(y, 5))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                if ((($c = self.$n_state("next_post_helper")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                  return nil
                  } else {
                  return self.$set_state($hash2(["next_post_helper", "next_post_helper_top"], {"next_post_helper": true, "next_post_helper_top": pi.getBoundingClientRect()["right"]}))
                }
              } else if ((($c = self.$n_state("next_post_helper")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return self.$set_state($hash2(["next_post_helper"], {"next_post_helper": false}))
                } else {
                return nil
              }
              } else {
              return nil
            }}, TMP_14.$$s = self, TMP_14.$$arity = 0, TMP_14), $a).call($b, 650);
          return self.attach_next_button_if_post_is_too_long.$start();
        }, TMP_15.$$arity = 0);

        Opal.defn(self, '$unlisten_attach_next_button_if_post_is_too_long', TMP_16 = function ːunlisten_attach_next_button_if_post_is_too_long() {
          var $a, self = this;
          if ($gvars.IS_MOBILE == null) $gvars.IS_MOBILE = nil;

          if ((($a = $gvars.IS_MOBILE) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.attach_next_button_if_post_is_too_long.$stop();
            return self.attach_next_button_if_post_is_too_long = nil;
            } else {
            return nil
          };
        }, TMP_16.$$arity = 0);

        Opal.defn(self, '$scroll_to_next_post', TMP_17 = function ːscroll_to_next_post() {
          var $a, self = this, x = nil, y = nil, pi = nil;

          x = $(window).width() / 3;
          y = $(window).height() / 5;
          if ((($a = pi = self.$post_div_element_at_coords(x, y)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            
          console.log(($(pi).data('post-index') + 1))
          var nextPost = $(".post[data-post-index='" + ($(pi).data('post-index') + 1) )[0];
          console.log(nextPost);
          var valueToIncrementScrollTop = nextPost.getBoundingClientRect().top;
          //fucking ie; god damn it even the latest versions cause shit like this to happen!
          if (document.documentElement && document.documentElement.scrollTop) {
            document.documentElement.scrollTop += valueToIncrementScrollTop
          } else {
            document.body.scrollTop += valueToIncrementScrollTop
          }
          ;
            } else {
            return nil
          };
        }, TMP_17.$$arity = 0);

        Opal.defn(self, '$render_posts', TMP_18 = function ːrender_posts() {
          var $a, self = this, length_availability = nil;

          length_availability = ($rb_minus(self.length, self.current_index));
          if ((($a = $rb_gt(length_availability, 5)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return [self.$render_r1c3(), self.$render_r1c2()]
          } else if ((($a = $rb_gt(length_availability, 3)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return [self.$render_r1c3()]
          } else if ((($a = $rb_gt(length_availability, 2)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return [self.$render_r1c2()]
          } else if ((($a = $rb_gt(length_availability, 1)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return [self.$render_r1c1()]
            } else {
            self.current_index = $rb_plus(self.current_index, 1);
            return [];
          };
        }, TMP_18.$$arity = 0);

        Opal.defn(self, '$render_r1c3', TMP_19 = function ːrender_r1c3() {
          var self = this;

          return self.$t((((((($scope.get('Components')).$$scope.get('Posts'))).$$scope.get('Grids'))).$$scope.get('R1c3')), $hash2([], {}), self.$tile_or_post(), self.$tile_or_post(), self.$tile_or_post());
        }, TMP_19.$$arity = 0);

        Opal.defn(self, '$render_r1c2', TMP_20 = function ːrender_r1c2() {
          var self = this;

          return self.$t((((((($scope.get('Components')).$$scope.get('Posts'))).$$scope.get('Grids'))).$$scope.get('R1c2')), $hash2([], {}), self.$tile_or_post(), self.$tile_or_post());
        }, TMP_20.$$arity = 0);

        Opal.defn(self, '$render_r1c1', TMP_21 = function ːrender_r1c1() {
          var self = this;

          return self.$tile_or_post();
        }, TMP_21.$$arity = 0);

        Opal.defn(self, '$tile_or_post', TMP_22 = function ːtile_or_post() {
          var $a, $b, self = this, is_current = nil;

          if ((($a = ($b = self.$n_state("tiles_to_insert")['$[]'](self.current_index), $b !== false && $b !== nil && $b != null ?self.repeating_index['$!='](self.current_index) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.repeating_index = self.current_index;
            return self.$n_state("tiles_to_insert")['$[]'](self.current_index);
            } else {
            self.repeating_index = nil;
            return (self.current_index = $rb_plus(self.current_index, 1), is_current = nil, (function() {if (self.$n_state("current_index_in_view")['$=='](self.current_index)) {
              return is_current = "current"
              } else {
              return nil
            }; return nil; })(), self.$t((((($scope.get('Components')).$$scope.get('Posts'))).$$scope.get('ShowInline')), $hash2(["post_link_part", "is_current", "post", "owner", "i", "key"], {"post_link_part": "", "is_current": is_current, "post": self.$n_state("posts").$data()['$[]'](self.current_index), "owner": self, "i": self.current_index, "key": self.current_index})));
          };
        }, TMP_22.$$arity = 0);

        Opal.defn(self, '$render', TMP_24 = function ːrender() {
          var $a, $b, TMP_23, $c, self = this, res = nil, post = nil;
          if ($gvars.CLIENT_HEIGHT == null) $gvars.CLIENT_HEIGHT = nil;
          if ($gvars.IS_MOBILE == null) $gvars.IS_MOBILE = nil;

          self.length = self.$n_state("posts").$data().$length();
          self.current_index = -1;
          return self.$t("div", $hash2(["className"], {"className": "posts-index"}), self.$children(), (function() {if ((($a = self.$n_state("next_post_helper")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("button", $hash2(["className", "style", "onClick"], {"className": "btn btn-xs", "style": $hash2(["position", "left"], {"position": "fixed", "left": self.$n_state("next_post_helper_top")}).$to_n(), "onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_23 = function(){var self = TMP_23.$$s || this;

            return self.$scroll_to_next_post()}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23), $a).call($b)}), "next")
            } else {
            return nil
          }; return nil; })(), (function() {if ((($a = ($c = self.$props().$params().$post_id(), $c !== false && $c !== nil && $c != null ?self.$props().$location().$pathname()['$==']("/" + (self.$props().$params().$post_id())) : $c)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t((((($scope.get('Components')).$$scope.get('Posts'))).$$scope.get('ShowProxy')), $hash2(["owner", "location", "params", "history"], {"owner": self, "location": self.$props().$location(), "params": self.$props().$params(), "history": self.$props().$history()}))
            } else {
            return nil
          }; return nil; })(), (function() {if ((($a = $rb_gt(self.length, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            res = [];
            while ((($c = $rb_lt(self.current_index, self.length)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            res = $rb_plus(res, self.$render_posts())};
            return res;
            } else {
            return nil
          }; return nil; })(), self.$progress_bar(), self.$t("p", $hash2(["ref"], {"ref": "last_beacon"}), self.$next_page_infinite_scroll_beacon($rb_minus(self.$state().$posts().$data().$length(), 1))), self.$t("div", $hash2(["style"], {"style": $hash2(["height"], {"height": $gvars.CLIENT_HEIGHT}).$to_n()})), (function() {if ((($a = $gvars.IS_MOBILE) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("div", $hash2(["className"], {"className": "row post-controll-row"}), self.$t("div", $hash2(["className"], {"className": "col-lg-8 post-controll"}), (function() {if ((($a = post = self.$state().$posts().$data()['$[]'](self.$state().$current_index_in_view())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("div", $hash2(["className"], {"className": ""}), self.$t("div", $hash2(["className"], {"className": "top-lane"}), self.$t("p", $hash2(["className"], {"className": "preview-name"}), post.$title()), self.$t("p", $hash2(["className"], {"className": "post-karma-count"}), "" + (post.$post_karma().$count())), self.$t("p", $hash2(["className"], {"className": "author-name"}), post.$author().$user_credential().$name())), self.$bottom_lane_for_post_controll(post))
              } else {
              return nil
            }; return nil; })()), self.$t("div", $hash2(["className"], {"className": "col-lg-4"})))
            } else {
            return nil
          }; return nil; })());
        }, TMP_24.$$arity = 0);

        Opal.defn(self, '$bottom_lane_for_post_controll', TMP_28 = function ːbottom_lane_for_post_controll(post) {
          var $a, $b, TMP_25, $c, TMP_26, $d, TMP_27, self = this, _ = nil;

          return self.$t("div", $hash2(["className"], {"className": "bottom-lane"}), self.$t("ul", $hash2([], {}), self.$t("li", $hash2([], {}), self.$t((((($scope.get('Components')).$$scope.get('UserSubscriptions'))).$$scope.get('CreateOrShow')), $hash2(["user_to_subscribe_to", "user_subscription", "subscription_changed"], {"user_to_subscribe_to": post.$author(), "user_subscription": ((function() {if ((($a = (_ = post.$author().$usub_with_current_user())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return _
            } else {
            return $scope.get('UserSubscription').$new()
          }; return nil; })()), "subscription_changed": (self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_25 = function(user, user_subscription, status){var self = TMP_25.$$s || this;
if (user == null) user = nil;if (user_subscription == null) user_subscription = nil;if (status == null) status = nil;
          post.$make_dirty();
            return self.$subscription_changed(user, user_subscription, status);}, TMP_25.$$s = self, TMP_25.$$arity = 3, TMP_25), $a).call($b)))}))), self.$link_to(self.$t("li", $hash2(["onClick"], {"onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_26 = function(){var self = TMP_26.$$s || this;

          return self.$set_current_post_for_show(post)}, TMP_26.$$s = self, TMP_26.$$arity = 0, TMP_26), $a).call($c)}), self.$t("i", $hash2(["className"], {"className": "icon-comment-empty"}))), "/" + (post.$id())), self.$t("li", $hash2([], {}), self.$t((((($scope.get('Components')).$$scope.get('PostKarmaTransactions'))).$$scope.get('New')), $hash2(["post_karma", "pkt", "pkt_changed"], {"post_karma": post.$post_karma(), "pkt": post.$post_karma().$current_user_pkt_or_new(), "pkt_changed": self.$event(($a = ($d = self).$lambda, $a.$$p = (TMP_27 = function(pkt){var self = TMP_27.$$s || this;
if (pkt == null) pkt = nil;
          return self.$pkt_changed(pkt, post.$author().$id())}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27), $a).call($d))})))));
        }, TMP_28.$$arity = 1);

        Opal.defn(self, '$subscription_changed', TMP_31 = function ːsubscription_changed(user, user_subscription, status) {
          var $a, $b, TMP_29, $c, TMP_30, self = this, $case = nil;

          self.$p("posts/index #subscription_changed called");
          $case = status;if ("unsubscribed"['$===']($case)) {(($a = [nil]), $b = user, $b['$usub_with_current_user='].apply($b, $a), $a[$a.length-1]);
          ($a = ($b = self.$state().$posts()).$each, $a.$$p = (TMP_29 = function(post){var self = TMP_29.$$s || this, $c, $d;
if (post == null) post = nil;
          if (post.$author().$id()['$=='](user.$id())) {
              return (($c = [$scope.get('UserSubscription').$new($hash2(["to_user_id"], {"to_user_id": user.$id()}))]), $d = post.$author(), $d['$usub_with_current_user='].apply($d, $c), $c[$c.length-1])
              } else {
              return nil
            }}, TMP_29.$$s = self, TMP_29.$$arity = 1, TMP_29), $a).call($b);}else if ("subscribed"['$===']($case)) {(($a = [user_subscription]), $c = user, $c['$usub_with_current_user='].apply($c, $a), $a[$a.length-1]);
          ($a = ($c = self.$state().$posts()).$each, $a.$$p = (TMP_30 = function(post){var self = TMP_30.$$s || this, $d, $e;
if (post == null) post = nil;
          if (post.$author().$id()['$=='](user.$id())) {
              return (($d = [user_subscription]), $e = post.$author(), $e['$usub_with_current_user='].apply($e, $d), $d[$d.length-1])
              } else {
              return nil
            }}, TMP_30.$$s = self, TMP_30.$$arity = 1, TMP_30), $a).call($c);};
          return self.$force_update();
        }, TMP_31.$$arity = 3);

        Opal.defn(self, '$scroll_to_next', TMP_32 = function ːscroll_to_next(index) {
          var $a, self = this, el = nil;

          if ((($a = $rb_gt(self.$state().$posts().$data().$length(), index)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            el = self.$n_ref("post" + (index));
            self.$puts("index - " + (index));
            console.log(el.getBoundingClientRect().top);
            
          function scrollTo(element, to, duration) {

              element.scrollTop += to
              /*if (duration <= 0) return;
              var difference = to - element.scrollTop;
              var perTick = difference / duration * 10;

              setTimeout(function() {
                  element.scrollTop += perTick;
                  if (element.scrollTop === to) {
                    return
                  };
                  scrollTo(element, to, duration - 10);
              }, 10);*/
          };
          scrollTo(document.body, el.getBoundingClientRect().top - self.height_at_which_post_is_considered_current + 1, 50);
          ;
            } else {
            return nil
          };
        }, TMP_32.$$arity = 1);

        Opal.defn(self, '$set_first_in_view', TMP_33 = function ːset_first_in_view() {
          var self = this;

          return nil;
        }, TMP_33.$$arity = 0);

        Opal.defn(self, '$listen_for_current_post_in_view', TMP_34 = function ːlisten_for_current_post_in_view() {
          var $a, self = this, pi = nil;

          
          var $firstPost = $('.current').first()[0];

          if((typeof $firstPost) != 'undefined') {

            var $window = $(window);
            var windowHeight = $window.height();
            var pixelsFromLeft = $window.width() / 3;
            var firstPostBottom = $firstPost.getBoundingClientRect().bottom;
            var pixelsFromTop = 0;

            if (firstPostBottom > (windowHeight / 2)) {
              pixelsFromTop = ((windowHeight / 3));
            } else {
              pixelsFromTop = firstPostBottom - 3;
            };

            //adds element pointer wich will hint user wich post is current
            $currentPostPointer = $("<div class='post-pointer' style='position: fixed; z-index: 10; top:" + pixelsFromTop + "px'></div>");
            $(document.body).prepend($currentPostPointer);

            //#sets attribute to be used in class later (e.g. in scroll to post and etc)
            self.height_at_which_post_is_considered_current = pixelsFromTop



            var isScrolling = false;

            $(document).on('scroll.postInView', function(){

              if (isScrolling) {

                return;

              } else {

                isScrolling = true;

                setTimeout(function(){
                  isScrolling = false;

                  (function() {if ((($a = pi = self.$post_index_at_coords(pixelsFromLeft, pixelsFromTop)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if ((("") + (pi))['$==']("" + (self.$n_state("current_index_in_view")))) {
              return nil
              } else {
              return self.$set_state($hash2(["current_index_in_view"], {"current_index_in_view": pi}))
            }
            } else {
            return nil
          }; return nil; })()

                }, 100)

              }

            })

          };

        
        }, TMP_34.$$arity = 0);

        Opal.defn(self, '$post_index_at_coords', TMP_35 = function ːpost_index_at_coords(x, y) {
          var self = this;

          
          var elementAtCoordinates = $(document.elementFromPoint(x, y));
          var closestPost = $(elementAtCoordinates.closest('.post'));

          if (closestPost[0]) {
            var postIndex = closestPost.data('post-index');
            return postIndex
          } else {
            return false;
          };
        ;
        }, TMP_35.$$arity = 2);

        Opal.defn(self, '$post_div_element_at_coords', TMP_36 = function ːpost_div_element_at_coords(x, y) {
          var self = this;

          
          var elementAtCoordinates = $(document.elementFromPoint(x, y));
          var closestPost = $(elementAtCoordinates.closest('.post'));
          if (closestPost[0]) {
            return closestPost[0]
          } else {
            return false;
          };
        ;
        }, TMP_36.$$arity = 2);

        Opal.defn(self, '$unlisten_for_current_post_in_view', TMP_37 = function ːunlisten_for_current_post_in_view() {
          var self = this;

          
          $(document).off('scroll.postInView');
        
        }, TMP_37.$$arity = 0);

        Opal.defn(self, '$next_beacon', TMP_38 = function ːnext_beacon(i) {
          var self = this;

          if (i == null) {
            i = 0;
          }
          return nil;
        }, TMP_38.$$arity = -1);

        Opal.defn(self, '$handle_infinite_croll_beacon_reach', TMP_39 = function ːhandle_infinite_croll_beacon_reach() {
          var self = this;

          self.$destroy_infinite_scroll_beacon();
          return self.$fetch_and_set_posts($rb_plus(self.$pagination_current_page(), 1));
        }, TMP_39.$$arity = 0);

        Opal.defn(self, '$expand_to_read', TMP_40 = function ːexpand_to_read(post) {
          var self = this;

          post.$make_dirty();
          post.$attributes()['$[]=']("opened", true);
          return self.$set_state($hash2(["posts"], {"posts": self.$state().$posts()}));
        }, TMP_40.$$arity = 1);

        Opal.defn(self, '$check_in_view_and_set_if_not', TMP_41 = function ːcheck_in_view_and_set_if_not() {
          var $a, self = this;

          if ((($a = (($scope.get('Services')).$$scope.get('JsHelpers'))['$is_element_out_of_viewport?'](self.$n_ref("post" + (self.$state().$current_index_in_view())))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$set_first_in_view()
            } else {
            return nil
          };
        }, TMP_41.$$arity = 0);

        Opal.defn(self, '$pkt_changed', TMP_43 = function ːpkt_changed(pkt, post_author_id) {
          var $a, $b, TMP_42, self = this, amount_to_increment_on = nil;

          amount_to_increment_on = $rb_times(pkt.$amount_change_factor(), (((($scope.get('Services')).$$scope.get('KarmaManager'))).$$scope.get('WHEN_LIKED_OR_DISLIKED_THIS_USERS_POST')));
          ($a = ($b = self.$n_state("posts")).$each, $a.$$p = (TMP_42 = function(post){var self = TMP_42.$$s || this, $c;
if (post == null) post = nil;
          if (post.$author().$id()['$=='](post_author_id)) {
              return ($c = post.$author().$user_karma(), $c['$count=']($rb_plus($c.$count(), amount_to_increment_on)))
              } else {
              return nil
            }}, TMP_42.$$s = self, TMP_42.$$arity = 1, TMP_42), $a).call($b);
          return self.$force_update();
        }, TMP_43.$$arity = 2);

        return (Opal.defn(self, '$component_will_unmount', TMP_44 = function ːcomponent_will_unmount() {
          var self = this;

          self.$class().$clear_current_post_for_show();
          $scope.get('UserNotificationsManager').$instance().$unsubscribe("when_notifications_updated", self);
          self.$unlisten_for_current_post_in_view();
          self.$unlisten_attach_next_button_if_post_is_too_long();
          return $('.post-pointer').remove();
        }, TMP_44.$$arity = 0), nil) && 'component_will_unmount';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/posts/main"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$t', '$children']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Posts, self = $Posts = $module($base, 'Posts');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Main(){};
        var self = $Main = $klass($base, $super, 'Main', $Main);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        self.$expose();

        return (Opal.defn(self, '$render', TMP_1 = function ːrender() {
          var self = this;

          return self.$t("div", $hash2(["className"], {"className": "Posts-Main"}), self.$children());
        }, TMP_1.$$arity = 0), nil) && 'render';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/posts/new"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $hash = Opal.hash, $gvars = Opal.gvars;

  Opal.add_stubs(['$expose', '$include', '$new', '$has_role?', '$instance', '$t', '$event', '$lambda', '$after_signup_ok', '$modal', '$general_errors_for', '$post', '$state', '$input', '$<', '$length', '$data', '$post_nodes', '$n_state', '$!', '$[]', '$controll_toolbar', '$map', '$-', '$clear_insert_toolbar_before', '$set_insert_toolbar_before', '$changing_position', '$!=', '$paste_at_position', '$==', '$init_change_index_position', '$remove_node', '$view_node', '$node', '$each_with_index', '$errors', '$url_for_feed', '$handle_inputs', '$post_thumb_expanded', '$data=', '$post_thumbs', '$set_state', '$try', '$put_text_node_thumb_at', '$init_image_insertion_for_thumb', '$changing_position_for_thumb', '$paste_at_position_for_thumb', '$init_change_index_position_for_thumb', '$delete_at', '$element_to_change_position_for_thumb', '$insert', '$validate_addition_post_thumb_addition_failed?', '$+', '$alert', '$modal_open', '$modal_head_for_image_insert_for_thumb', '$modal_content_for_image_insert_for_thumb', '$insert_image_component_for_thumb', '$modal_close', '$nodes', '$delete', '$put_text_node_at', '$init_image_insertion', '$init_gif_insertion', '$init_video_embed', '$init_vote_poll_insertion', '$init_post_test_insertion', '$init_personality_test_insertion', '$init_media_story_insertion', '$element_to_change_position', '$modal_head_for_image_insert', '$modal_content_for_image_insert', '$modal_head_for_gif_insert', '$modal_content_for_gif_insert', '$insert_vote_poll', '$insert_post_test', '$insert_personality_test', '$insert_media_story', '$insert_image_component', '$insert_gif_component', '$p', '$attributes', '$===', '$show_text_node', '$show_image_node', '$show_gif_node', '$show_video_embed_node', '$show_vote_poll_node', '$is_personality', '$show_personality_test_node', '$show_post_test_node', '$show_media_story_node', '$open_vote_poll_edit', '$open_media_story_edit', '$collect_inputs', '$has_errors?', '$then', '$pushState', '$id', '$create', '$set_user_and_login_status', '$ping_current_user']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Posts, self = $Posts = $module($base, 'Posts');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $New(){};
        var self = $New = $klass($base, $super, 'New', $New);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_10, TMP_11, TMP_12, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_39, TMP_40, TMP_41, TMP_42, TMP_43, TMP_44, TMP_47, TMP_50, TMP_53, TMP_56, TMP_57, TMP_59, TMP_60, TMP_62, TMP_63, TMP_64, TMP_65, TMP_66, TMP_67, TMP_68, TMP_69, TMP_70, TMP_71, TMP_72, TMP_73, TMP_74, TMP_75, TMP_77, TMP_78, TMP_79, TMP_81, TMP_84, TMP_87, TMP_88, TMP_90, TMP_92;

        def.current_edited_node_position_for_thumb = def.current_edited_node_position = nil;
        self.$expose();

        self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

        Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
          var self = this;

          self.current_edited_node_position = false;
          self.current_edited_node_position_for_thumb = false;
          return $hash2(["post", "changing_position", "post_thumb_expanded", "changing_position_for_thumb", "post_images_in_roster", "insert_toolbar_before"], {"post": $scope.get('Post').$new($hash2(["post_nodes", "post_tags", "post_thumbs"], {"post_nodes": $scope.get('ModelCollection').$new(), "post_tags": $scope.get('ModelCollection').$new(), "post_thumbs": $scope.get('ModelCollection').$new()})), "changing_position": false, "post_thumb_expanded": false, "changing_position_for_thumb": false, "post_images_in_roster": $scope.get('ModelCollection').$new(), "insert_toolbar_before": $hash2([], {})});
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$render', TMP_10 = function ːrender() {
          var $a, $b, TMP_2, $c, TMP_3, $d, TMP_9, self = this, x = nil;

          if ((($a = $scope.get('CurrentUser').$instance()['$has_role?']("guest")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t((((($scope.get('Components')).$$scope.get('Users'))).$$scope.get('Create')), $hash2(["message", "on_signup"], {"message": "you should provide username in order to create post", "on_signup": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

            return self.$after_signup_ok()}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($b))}))
            } else {
            return self.$t("div", $hash2(["className"], {"className": "posts-new"}), self.$modal(), self.$general_errors_for(self.$state().$post()), self.$t("div", $hash2(["className"], {"className": "row title-input"}), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('Input')), self.$state().$post(), "title", $hash2(["show_name", "required_field"], {"show_name": "title", "required_field": true}))), (function() {if ((($a = ($c = $rb_lt(self.$n_state("post").$post_nodes().$data().$length(), 1), $c !== false && $c !== nil && $c != null ?self.$n_state("insert_toolbar_before")['$[]'](1)['$!']() : $c)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$controll_toolbar(-1)
              } else {
              return nil
            }; return nil; })(), ($a = ($c = self.$state().$post().$post_nodes().$each_with_index()).$map, $a.$$p = (TMP_3 = function(post_node, i){var self = TMP_3.$$s || this, $d, $e, TMP_4, $f, TMP_5, $g, TMP_6, $h, TMP_7, $i, TMP_8;
if (post_node == null) post_node = nil;if (i == null) i = nil;
            return [(function() {if ((($d = self.$n_state("insert_toolbar_before")['$[]'](i)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                return self.$controll_toolbar($rb_minus(i, 1))
                } else {
                return nil
              }; return nil; })(), self.$t("div", $hash2(["key", "className"], {"key": i, "className": "node-wrapper"}), self.$t("div", $hash2(["className"], {"className": "node-and-controlls"}), self.$t("div", $hash2(["className"], {"className": "top-controlls"}), (function() {if ((($d = self.$n_state("insert_toolbar_before")['$[]'](i)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                return self.$t("button", $hash2(["className", "onClick"], {"className": "btn btn-xs btn-default", "onClick": ($d = ($e = self).$lambda, $d.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

                return self.$clear_insert_toolbar_before(i)}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $d).call($e)}), "-")
                } else {
                return self.$t("button", $hash2(["className", "onClick"], {"className": "btn btn-xs btn-default", "onClick": ($d = ($f = self).$lambda, $d.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

                return self.$set_insert_toolbar_before(i)}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $d).call($f)}), "+")
              }; return nil; })(), self.$t("div", $hash2(["className"], {"className": "right-group"}), (function() {if ((($d = ($g = self.$state().$changing_position(), $g !== false && $g !== nil && $g != null ?i['$!='](-1) : $g)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                return self.$t("button", $hash2(["onClick", "className"], {"onClick": ($d = ($g = self).$lambda, $d.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

                return self.$paste_at_position(i)}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $d).call($g), "className": "btn btn-sm btn-default"}), "paste here")
              } else if (i['$=='](0)) {
                return nil
                } else {
                return self.$t("button", $hash2(["onClick", "className"], {"onClick": ($d = ($h = self).$lambda, $d.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

                return self.$init_change_index_position(i)}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $d).call($h), "className": "btn btn-sm btn-default"}), "cut")
              }; return nil; })(), self.$t("button", $hash2(["className", "onClick"], {"className": "btn btn-xs btn-danger", "onClick": ($d = ($i = self).$lambda, $d.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

              return self.$remove_node(i)}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $d).call($i)}), "X"))), self.$t("div", $hash2(["className"], {"className": "node-body"}), self.$view_node(post_node.$node()))), (function() {if (i['$==']($rb_minus(self.$n_state("post").$post_nodes().$data().$length(), 1))) {
                return self.$controll_toolbar(i)
                } else {
                return nil
              }; return nil; })())]}, TMP_3.$$s = self, TMP_3.$$arity = 2, TMP_3), $a).call($c), self.$t("div", $hash2(["className"], {"className": "post-type"}), (function() {if ((($a = x = self.$state().$post().$errors()['$[]']("post_type")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("div", $hash2(["className"], {"className": "invalid"}), x)
              } else {
              return nil
            }; return nil; })(), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('SelectFromLabels')), self.$state().$post(), "post_type", $hash2(["parsing_model", "show_value", "url_feed", "show_name", "required_field"], {"parsing_model": $scope.get('PostType'), "show_value": "alt_name", "url_feed": $scope.get('PostType').$url_for_feed(), "show_name": "what this post is about?", "required_field": true}))), self.$t("div", $hash2(["className"], {"className": "tag-controll row"}), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('MultipleSelectAutocompleWithTypeInput')), self.$state().$post(), "post_tags", $hash2(["optional_field", "show_attribute", "parsing_model", "autocomplete_url"], {"optional_field": true, "show_attribute": "name", "parsing_model": "PostTag", "autocomplete_url": "/post_tags/autocompletes"}))), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($d = self).$lambda, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

            return self.$handle_inputs()}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($d), "className": "btn btn-primary"}), "create post"))
          };
        }, TMP_10.$$arity = 0);

        Opal.defn(self, '$toggle_thumbnail_expanded', TMP_11 = function ːtoggle_thumbnail_expanded() {
          var $a, $b, self = this;

          if ((($a = self.$state().$post_thumb_expanded()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            (($a = [[]]), $b = self.$state().$post().$post_thumbs(), $b['$data='].apply($b, $a), $a[$a.length-1]);
            self.current_edited_node_position_for_thumb = false;};
          return self.$set_state($hash2(["post_thumb_expanded"], {"post_thumb_expanded": self.$state().$post_thumb_expanded()['$!']()}));
        }, TMP_11.$$arity = 0);

        Opal.defn(self, '$post_thumbs', TMP_12 = function ːpost_thumbs() {
          var self = this;

          return self.$state().$post().$post_thumbs();
        }, TMP_12.$$arity = 0);

        Opal.defn(self, '$post_thumbs_controll_toolbar', TMP_17 = function ːpost_thumbs_controll_toolbar(position) {
          var $a, $b, $c, TMP_13, TMP_14, $d, TMP_15, $e, TMP_16, self = this;

          return self.$t("div", $hash2(["className"], {"className": "row controll-toolbar"}), (function() {if ((($a = ($b = (self.$post_thumbs()['$[]'](position).$try("node_type")['$==']("PostText"))['$!'](), $b !== false && $b !== nil && $b != null ?((($c = position['$=='](-1)) ? self.$post_thumbs()['$[]'](position).$try("node_type")['$==']("PostText") : position['$=='](-1)))['$!']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;

            return self.$put_text_node_thumb_at(position)}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $a).call($b), "className": "btn btn-sm btn-default"}), "add text")
            } else {
            return nil
          }; return nil; })(), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this;

          return self.$init_image_insertion_for_thumb(position)}, TMP_14.$$s = self, TMP_14.$$arity = 0, TMP_14), $a).call($c), "className": "btn btn-sm btn-default"}), "add image"), (function() {if ((($a = ($d = self.$state().$changing_position_for_thumb(), $d !== false && $d !== nil && $d != null ?position['$!='](-1) : $d)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($d = self).$lambda, $a.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this;

            return self.$paste_at_position_for_thumb(position)}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15), $a).call($d), "className": "btn btn-sm btn-default"}), "paste here")
          } else if (position['$=='](-1)) {
            return nil
            } else {
            return self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($e = self).$lambda, $a.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this;

            return self.$init_change_index_position_for_thumb(position)}, TMP_16.$$s = self, TMP_16.$$arity = 0, TMP_16), $a).call($e), "className": "btn btn-sm btn-default"}), "cut")
          }; return nil; })());
        }, TMP_17.$$arity = 1);

        Opal.defn(self, '$init_change_index_position_for_thumb', TMP_18 = function ːinit_change_index_position_for_thumb(position) {
          var self = this;

          return self.$set_state($hash2(["changing_position_for_thumb", "element_to_change_position_for_thumb"], {"changing_position_for_thumb": true, "element_to_change_position_for_thumb": position}));
        }, TMP_18.$$arity = 1);

        Opal.defn(self, '$paste_at_position_for_thumb', TMP_19 = function ːpaste_at_position_for_thumb(position) {
          var self = this, node = nil;

          node = self.$post_thumbs().$data().$delete_at(self.$state().$element_to_change_position_for_thumb());
          self.$post_thumbs().$data().$insert(position, node);
          return self.$set_state($hash2(["post", "changing_position_for_thumb", "element_to_change_position_for_thumb"], {"post": self.$state().$post(), "changing_position_for_thumb": false, "element_to_change_position_for_thumb": false}));
        }, TMP_19.$$arity = 1);

        Opal.defn(self, '$remove_post_thumb_node', TMP_20 = function ːremove_post_thumb_node(index) {
          var self = this;

          self.$post_thumbs().$data().$delete_at(index);
          return self.$set_state($hash2(["post"], {"post": self.$state().$post()}));
        }, TMP_20.$$arity = 1);

        Opal.defn(self, '$put_text_node_thumb_at', TMP_21 = function ːput_text_node_thumb_at(position) {
          var $a, self = this;

          if ((($a = self['$validate_addition_post_thumb_addition_failed?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil};
          self.current_edited_node_position_for_thumb = position;
          self.$post_thumbs().$insert($rb_plus(position, 1), $scope.get('PostNode').$new($hash2(["node", "node_type"], {"node": $scope.get('PostText').$new(), "node_type": "PostText"})));
          return self.$set_state($hash2(["post"], {"post": self.$state().$post()}));
        }, TMP_21.$$arity = 1);

        Opal.defn(self, '$validate_addition_post_thumb_addition_failed?', TMP_22 = function() {
          var self = this;

          if (self.$post_thumbs().$data().$length()['$=='](2)) {
            self.$alert("maximum two elements can be added for thumb");
            return true;
            } else {
            return nil
          };
        }, TMP_22.$$arity = 0);

        Opal.defn(self, '$init_image_insertion_for_thumb', TMP_23 = function ːinit_image_insertion_for_thumb(position) {
          var $a, self = this;

          if ((($a = self['$validate_addition_post_thumb_addition_failed?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil};
          self.current_edited_node_position_for_thumb = position;
          return self.$modal_open(self.$modal_head_for_image_insert_for_thumb(), self.$modal_content_for_image_insert_for_thumb());
        }, TMP_23.$$arity = 1);

        Opal.defn(self, '$modal_head_for_image_insert_for_thumb', TMP_24 = function ːmodal_head_for_image_insert_for_thumb() {
          var self = this;

          return self.$t("p", $hash2([], {}), "upload image and select it");
        }, TMP_24.$$arity = 0);

        Opal.defn(self, '$modal_content_for_image_insert_for_thumb', TMP_26 = function ːmodal_content_for_image_insert_for_thumb() {
          var $a, $b, TMP_25, self = this;

          return self.$t("div", $hash2([], {}), self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('UploadAndPreview')), $hash2(["on_image_selected", "post_images"], {"on_image_selected": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_25 = function(image){var self = TMP_25.$$s || this;
if (image == null) image = nil;
          return self.$insert_image_component_for_thumb(image)}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25), $a).call($b)), "post_images": self.$n_state("post_images_in_roster")})));
        }, TMP_26.$$arity = 0);

        Opal.defn(self, '$insert_image_component_for_thumb', TMP_27 = function ːinsert_image_component_for_thumb(post_image) {
          var self = this, post_node = nil;

          post_node = $scope.get('PostNode').$new($hash2(["node", "node_type"], {"node": post_image, "node_type": "PostImage"}));
          self.$post_thumbs().$insert($rb_plus(self.current_edited_node_position_for_thumb, 1), post_node);
          self.current_edited_node_position_for_thumb = false;
          self.$set_state($hash2(["post"], {"post": self.$state().$post()}));
          return self.$modal_close();
        }, TMP_27.$$arity = 1);

        Opal.defn(self, '$set_insert_toolbar_before', TMP_28 = function ːset_insert_toolbar_before(index) {
          var self = this;

          return self.$set_state($hash2(["insert_toolbar_before"], {"insert_toolbar_before": $hash(index, true)}));
        }, TMP_28.$$arity = 1);

        Opal.defn(self, '$clear_insert_toolbar_before', TMP_29 = function ːclear_insert_toolbar_before(index) {
          var self = this, insert_toolbar_before = nil;

          insert_toolbar_before = $hash2([], {});
          return self.$set_state($hash2(["insert_toolbar_before"], {"insert_toolbar_before": insert_toolbar_before}));
        }, TMP_29.$$arity = 1);

        Opal.defn(self, '$remove_node', TMP_30 = function ːremove_node(index) {
          var self = this, insert_toolbar_before = nil;

          self.$nodes().$data().$delete_at(index);
          insert_toolbar_before = self.$n_state("insert_toolbar_before");
          insert_toolbar_before.$delete(index);
          return self.$set_state($hash2(["post", "insert_toolbar_before"], {"post": self.$state().$post(), "insert_toolbar_before": insert_toolbar_before}));
        }, TMP_30.$$arity = 1);

        Opal.defn(self, '$controll_toolbar', TMP_39 = function ːcontroll_toolbar(position) {
          var $a, $b, $c, TMP_31, TMP_32, $d, TMP_33, $e, TMP_34, $f, TMP_35, $g, TMP_36, $h, TMP_37, $i, TMP_38, self = this;

          return self.$t("div", $hash2(["className"], {"className": "controll-toolbar"}), (function() {if ((($a = ($b = (self.$nodes()['$[]'](position).$try("node_type")['$==']("PostText"))['$!'](), $b !== false && $b !== nil && $b != null ?((($c = position['$=='](-1)) ? self.$nodes()['$[]'](position).$try("node_type")['$==']("PostText") : position['$=='](-1)))['$!']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_31 = function(){var self = TMP_31.$$s || this;

            return self.$put_text_node_at(position)}, TMP_31.$$s = self, TMP_31.$$arity = 0, TMP_31), $a).call($b), "className": "btn btn-sm btn-default"}), "add text")
            } else {
            return nil
          }; return nil; })(), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_32 = function(){var self = TMP_32.$$s || this;

          return self.$init_image_insertion(position)}, TMP_32.$$s = self, TMP_32.$$arity = 0, TMP_32), $a).call($c), "className": "btn btn-sm btn-default"}), "add image"), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($d = self).$lambda, $a.$$p = (TMP_33 = function(){var self = TMP_33.$$s || this;

          return self.$init_gif_insertion(position)}, TMP_33.$$s = self, TMP_33.$$arity = 0, TMP_33), $a).call($d), "className": "btn btn-sm btn-default"}), "add gif"), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($e = self).$lambda, $a.$$p = (TMP_34 = function(){var self = TMP_34.$$s || this;

          return self.$init_video_embed(position)}, TMP_34.$$s = self, TMP_34.$$arity = 0, TMP_34), $a).call($e), "className": "btn btn-sm btn-default"}), "embed video"), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($f = self).$lambda, $a.$$p = (TMP_35 = function(){var self = TMP_35.$$s || this;

          return self.$init_vote_poll_insertion(position)}, TMP_35.$$s = self, TMP_35.$$arity = 0, TMP_35), $a).call($f), "className": "btn btn-sm btn-default"}), "add voting"), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($g = self).$lambda, $a.$$p = (TMP_36 = function(){var self = TMP_36.$$s || this;

          return self.$init_post_test_insertion(position)}, TMP_36.$$s = self, TMP_36.$$arity = 0, TMP_36), $a).call($g), "className": "btn btn-sm btn-default"}), "add test"), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($h = self).$lambda, $a.$$p = (TMP_37 = function(){var self = TMP_37.$$s || this;

          return self.$init_personality_test_insertion(position)}, TMP_37.$$s = self, TMP_37.$$arity = 0, TMP_37), $a).call($h), "className": "btn btn-sm btn-default"}), "add personality test"), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($i = self).$lambda, $a.$$p = (TMP_38 = function(){var self = TMP_38.$$s || this;

          return self.$init_media_story_insertion(position)}, TMP_38.$$s = self, TMP_38.$$arity = 0, TMP_38), $a).call($i), "className": "btn btn-sm btn-default"}), "add media story"));
        }, TMP_39.$$arity = 1);

        Opal.defn(self, '$init_change_index_position', TMP_40 = function ːinit_change_index_position(position) {
          var self = this;

          return self.$set_state($hash2(["changing_position", "element_to_change_position"], {"changing_position": true, "element_to_change_position": position}));
        }, TMP_40.$$arity = 1);

        Opal.defn(self, '$paste_at_position', TMP_41 = function ːpaste_at_position(position) {
          var self = this, node = nil;

          node = self.$nodes().$data().$delete_at(self.$state().$element_to_change_position());
          self.$nodes().$data().$insert(position, node);
          return self.$set_state($hash2(["post", "changing_position", "element_to_change_position"], {"post": self.$state().$post(), "changing_position": false, "element_to_change_position": false}));
        }, TMP_41.$$arity = 1);

        Opal.defn(self, '$init_image_insertion', TMP_42 = function ːinit_image_insertion(position) {
          var self = this;

          self.current_edited_node_position = position;
          return self.$modal_open(self.$modal_head_for_image_insert(), self.$modal_content_for_image_insert());
        }, TMP_42.$$arity = 1);

        Opal.defn(self, '$init_gif_insertion', TMP_43 = function ːinit_gif_insertion(position) {
          var self = this;

          self.current_edited_node_position = position;
          return self.$modal_open(self.$modal_head_for_gif_insert(), self.$modal_content_for_gif_insert());
        }, TMP_43.$$arity = 1);

        Opal.defn(self, '$init_video_embed', TMP_44 = function ːinit_video_embed(position) {
          var self = this, post_node = nil;

          self.$clear_insert_toolbar_before(self.current_edited_node_position);
          self.current_edited_node_position = position;
          post_node = $scope.get('PostNode').$new($hash2(["node", "node_type"], {"node": $scope.get('VideoEmbed').$new(), "node_type": "VideoEmbed"}));
          self.$nodes().$insert($rb_plus(position, 1), post_node);
          return self.$set_state($hash2(["post"], {"post": self.$state().$post()}));
        }, TMP_44.$$arity = 1);

        Opal.defn(self, '$init_vote_poll_insertion', TMP_47 = function ːinit_vote_poll_insertion(position) {
          var $a, $b, TMP_45, $c, TMP_46, self = this;

          self.current_edited_node_position = position;
          return self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('VotePolls'))).$$scope.get('New')), $hash2(["on_done", "on_cancel"], {"on_done": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_45 = function(vote_poll){var self = TMP_45.$$s || this;
if (vote_poll == null) vote_poll = nil;
          return self.$insert_vote_poll(vote_poll)}, TMP_45.$$s = self, TMP_45.$$arity = 1, TMP_45), $a).call($b)), "on_cancel": self.$event(($a = ($c = self).$lambda, $a.$$p = (TMP_46 = function(){var self = TMP_46.$$s || this;

          return self.$modal_close()}, TMP_46.$$s = self, TMP_46.$$arity = 0, TMP_46), $a).call($c))})));
        }, TMP_47.$$arity = 1);

        Opal.defn(self, '$init_post_test_insertion', TMP_50 = function ːinit_post_test_insertion(position) {
          var $a, $b, TMP_48, $c, TMP_49, self = this;

          self.current_edited_node_position = position;
          return self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('PostTests'))).$$scope.get('New')), $hash2(["on_done", "on_cancel"], {"on_done": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_48 = function(post_test){var self = TMP_48.$$s || this;
if (post_test == null) post_test = nil;
          return self.$insert_post_test(post_test)}, TMP_48.$$s = self, TMP_48.$$arity = 1, TMP_48), $a).call($b)), "on_cancel": self.$event(($a = ($c = self).$lambda, $a.$$p = (TMP_49 = function(){var self = TMP_49.$$s || this;

          return self.$modal_close()}, TMP_49.$$s = self, TMP_49.$$arity = 0, TMP_49), $a).call($c))})));
        }, TMP_50.$$arity = 1);

        Opal.defn(self, '$init_personality_test_insertion', TMP_53 = function ːinit_personality_test_insertion(position) {
          var $a, $b, TMP_51, $c, TMP_52, self = this;

          self.current_edited_node_position = position;
          return self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('PersonalityTests'))).$$scope.get('New')), $hash2(["on_done", "on_cancel"], {"on_done": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_51 = function(personality_test){var self = TMP_51.$$s || this;
if (personality_test == null) personality_test = nil;
          return self.$insert_personality_test(personality_test)}, TMP_51.$$s = self, TMP_51.$$arity = 1, TMP_51), $a).call($b)), "on_cancel": self.$event(($a = ($c = self).$lambda, $a.$$p = (TMP_52 = function(){var self = TMP_52.$$s || this;

          return self.$modal_close()}, TMP_52.$$s = self, TMP_52.$$arity = 0, TMP_52), $a).call($c))})));
        }, TMP_53.$$arity = 1);

        Opal.defn(self, '$init_media_story_insertion', TMP_56 = function ːinit_media_story_insertion(position) {
          var $a, $b, TMP_54, $c, TMP_55, self = this;

          self.current_edited_node_position = position;
          return self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('MediaStories'))).$$scope.get('New')), $hash2(["on_done", "on_cancel"], {"on_done": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_54 = function(media_story){var self = TMP_54.$$s || this;
if (media_story == null) media_story = nil;
          return self.$insert_media_story(media_story)}, TMP_54.$$s = self, TMP_54.$$arity = 1, TMP_54), $a).call($b)), "on_cancel": self.$event(($a = ($c = self).$lambda, $a.$$p = (TMP_55 = function(){var self = TMP_55.$$s || this;

          return self.$modal_close()}, TMP_55.$$s = self, TMP_55.$$arity = 0, TMP_55), $a).call($c))})));
        }, TMP_56.$$arity = 1);

        Opal.defn(self, '$modal_head_for_image_insert', TMP_57 = function ːmodal_head_for_image_insert() {
          var self = this;

          return self.$t("p", $hash2([], {}), "upload image and select it");
        }, TMP_57.$$arity = 0);

        Opal.defn(self, '$modal_content_for_image_insert', TMP_59 = function ːmodal_content_for_image_insert() {
          var $a, $b, TMP_58, self = this;

          return self.$t("div", $hash2([], {}), self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('UploadAndPreview')), $hash2(["on_image_selected", "post_images"], {"on_image_selected": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_58 = function(image){var self = TMP_58.$$s || this;
if (image == null) image = nil;
          return self.$insert_image_component(image)}, TMP_58.$$s = self, TMP_58.$$arity = 1, TMP_58), $a).call($b)), "post_images": self.$n_state("post_images_in_roster")})));
        }, TMP_59.$$arity = 0);

        Opal.defn(self, '$modal_head_for_gif_insert', TMP_60 = function ːmodal_head_for_gif_insert() {
          var self = this;

          return self.$t("p", $hash2([], {}), "upload gif");
        }, TMP_60.$$arity = 0);

        Opal.defn(self, '$modal_content_for_gif_insert', TMP_62 = function ːmodal_content_for_gif_insert() {
          var $a, $b, TMP_61, self = this;

          return self.$t("div", $hash2([], {}), self.$t((((($scope.get('Components')).$$scope.get('PostGifs'))).$$scope.get('New')), $hash2(["on_done", "subtitles_allowed"], {"on_done": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_61 = function(post_gif){var self = TMP_61.$$s || this;
if (post_gif == null) post_gif = nil;
          return self.$insert_gif_component(post_gif)}, TMP_61.$$s = self, TMP_61.$$arity = 1, TMP_61), $a).call($b)), "subtitles_allowed": true})));
        }, TMP_62.$$arity = 0);

        Opal.defn(self, '$insert_image_component', TMP_63 = function ːinsert_image_component(post_image) {
          var self = this, post_node = nil;

          self.$clear_insert_toolbar_before(self.current_edited_node_position);
          post_node = $scope.get('PostNode').$new($hash2(["node", "node_type"], {"node": post_image, "node_type": "PostImage"}));
          self.$nodes().$insert($rb_plus(self.current_edited_node_position, 1), post_node);
          self.current_edited_node_position = false;
          self.$set_state($hash2(["post"], {"post": self.$state().$post()}));
          return self.$modal_close();
        }, TMP_63.$$arity = 1);

        Opal.defn(self, '$insert_vote_poll', TMP_64 = function ːinsert_vote_poll(vote_poll) {
          var self = this, post_node = nil;

          self.$clear_insert_toolbar_before(self.current_edited_node_position);
          post_node = $scope.get('PostNode').$new($hash2(["node", "node_type"], {"node": vote_poll, "node_type": "PostVotePoll"}));
          self.$nodes().$insert($rb_plus(self.current_edited_node_position, 1), post_node);
          self.current_edited_node_position = false;
          self.$set_state($hash2(["post"], {"post": self.$n_state("post")}));
          return self.$modal_close();
        }, TMP_64.$$arity = 1);

        Opal.defn(self, '$insert_post_test', TMP_65 = function ːinsert_post_test(post_test) {
          var self = this, post_node = nil;

          self.$p("should insert test " + (post_test));
          self.$clear_insert_toolbar_before(self.current_edited_node_position);
          post_node = $scope.get('PostNode').$new($hash2(["node", "node_type"], {"node": post_test, "node_type": "PostTest"}));
          self.$nodes().$insert($rb_plus(self.current_edited_node_position, 1), post_node);
          self.current_edited_node_position = false;
          self.$set_state($hash2(["post"], {"post": self.$n_state("post")}));
          return self.$modal_close();
        }, TMP_65.$$arity = 1);

        Opal.defn(self, '$insert_personality_test', TMP_66 = function ːinsert_personality_test(personality_test) {
          var self = this;

          self.$p("inserting " + (personality_test.$attributes()));
          self.$clear_insert_toolbar_before(self.current_edited_node_position);
          return self.$insert_post_test(personality_test);
        }, TMP_66.$$arity = 1);

        Opal.defn(self, '$insert_media_story', TMP_67 = function ːinsert_media_story(media_story) {
          var self = this, post_node = nil;

          self.$p("should insert media_story");
          self.$clear_insert_toolbar_before(self.current_edited_node_position);
          post_node = $scope.get('PostNode').$new($hash2(["node", "node_type"], {"node": media_story, "node_type": "MediaStory"}));
          self.$nodes().$insert($rb_plus(self.current_edited_node_position, 1), post_node);
          self.current_edited_node_position = false;
          self.$set_state($hash2(["post"], {"post": self.$n_state("post")}));
          return self.$modal_close();
        }, TMP_67.$$arity = 1);

        Opal.defn(self, '$insert_gif_component', TMP_68 = function ːinsert_gif_component(post_gif) {
          var self = this, post_node = nil;

          self.$clear_insert_toolbar_before(self.current_edited_node_position);
          post_gif.$attributes().$delete("file");
          post_node = $scope.get('PostNode').$new($hash2(["node", "node_type"], {"node": post_gif, "node_type": "PostGif"}));
          self.$nodes().$insert($rb_plus(self.current_edited_node_position, 1), post_node);
          self.current_edited_node_position = false;
          self.$set_state($hash2(["post"], {"post": self.$state().$post()}));
          return self.$modal_close();
        }, TMP_68.$$arity = 1);

        Opal.defn(self, '$put_text_node_at', TMP_69 = function ːput_text_node_at(position) {
          var self = this;

          self.$clear_insert_toolbar_before(self.current_edited_node_position);
          self.current_edited_node_position = position;
          self.$nodes().$insert($rb_plus(position, 1), $scope.get('PostNode').$new($hash2(["node", "node_type"], {"node": $scope.get('PostText').$new(), "node_type": "PostText"})));
          return self.$set_state($hash2(["post"], {"post": self.$state().$post()}));
        }, TMP_69.$$arity = 1);

        Opal.defn(self, '$nodes', TMP_70 = function ːnodes() {
          var self = this;

          return self.$state().$post().$post_nodes();
        }, TMP_70.$$arity = 0);

        Opal.defn(self, '$view_node', TMP_71 = function ːview_node(node) {
          var $a, self = this, $case = nil;

          return (function() {$case = node;if ($scope.get('PostText')['$===']($case)) {return self.$show_text_node(node)}else if ($scope.get('PostImage')['$===']($case)) {return self.$show_image_node(node)}else if ($scope.get('PostGif')['$===']($case)) {return self.$show_gif_node(node)}else if ($scope.get('VideoEmbed')['$===']($case)) {return self.$show_video_embed_node(node)}else if ($scope.get('PostVotePoll')['$===']($case)) {return self.$show_vote_poll_node(node)}else if ($scope.get('PostTest')['$===']($case)) {if ((($a = node.$is_personality()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$show_personality_test_node(node)
            } else {
            return self.$show_post_test_node(node)
          }}else if ($scope.get('MediaStory')['$===']($case)) {return self.$show_media_story_node(node)}else { return nil }})();
        }, TMP_71.$$arity = 1);

        Opal.defn(self, '$show_text_node', TMP_72 = function ːshow_text_node(post_text) {
          var self = this;

          return self.$t("div", $hash2([], {}), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('WysiTextarea')), post_text, "content", $hash2(["focus_on_load"], {"focus_on_load": true})));
        }, TMP_72.$$arity = 1);

        Opal.defn(self, '$show_image_node', TMP_73 = function ːshow_image_node(image_node) {
          var self = this;

          return self.$t("div", $hash2([], {}), self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": image_node})));
        }, TMP_73.$$arity = 1);

        Opal.defn(self, '$show_gif_node', TMP_74 = function ːshow_gif_node(post_gif) {
          var self = this;

          return self.$t("div", $hash2([], {}), self.$t((((($scope.get('Components')).$$scope.get('PostGifs'))).$$scope.get('Show')), $hash2(["post_gif", "subtitle_addable"], {"post_gif": post_gif, "subtitle_addable": true})));
        }, TMP_74.$$arity = 1);

        Opal.defn(self, '$show_video_embed_node', TMP_75 = function ːshow_video_embed_node(video_embed) {
          var self = this;

          return self.$t("div", $hash2([], {}), self.$t((((($scope.get('Components')).$$scope.get('VideoEmbeds'))).$$scope.get('New')), $hash2(["video_embed"], {"video_embed": video_embed})));
        }, TMP_75.$$arity = 1);

        Opal.defn(self, '$show_vote_poll_node', TMP_77 = function ːshow_vote_poll_node(node) {
          var $a, $b, TMP_76, self = this;

          return self.$t("div", $hash2([], {}), self.$t((((($scope.get('Components')).$$scope.get('VotePolls'))).$$scope.get('Show')), $hash2(["vote_poll"], {"vote_poll": node})), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_76 = function(){var self = TMP_76.$$s || this;

          return self.$open_vote_poll_edit(node)}, TMP_76.$$s = self, TMP_76.$$arity = 0, TMP_76), $a).call($b)}), "edit"));
        }, TMP_77.$$arity = 1);

        Opal.defn(self, '$show_post_test_node', TMP_78 = function ːshow_post_test_node(node) {
          var self = this;

          return self.$t("div", $hash2([], {}), self.$t((((($scope.get('Components')).$$scope.get('PostTests'))).$$scope.get('Show')), $hash2(["post_test"], {"post_test": node})));
        }, TMP_78.$$arity = 1);

        Opal.defn(self, '$show_personality_test_node', TMP_79 = function ːshow_personality_test_node(node) {
          var self = this;

          return self.$t("div", $hash2([], {}), self.$t((((($scope.get('Components')).$$scope.get('PersonalityTests'))).$$scope.get('Show')), $hash2(["post_test"], {"post_test": node})));
        }, TMP_79.$$arity = 1);

        Opal.defn(self, '$show_media_story_node', TMP_81 = function ːshow_media_story_node(node) {
          var $a, $b, TMP_80, self = this;

          return self.$t("div", $hash2([], {}), self.$t((((($scope.get('Components')).$$scope.get('MediaStories'))).$$scope.get('Show')), $hash2(["media_story"], {"media_story": node})), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_80 = function(){var self = TMP_80.$$s || this;

          return self.$open_media_story_edit(node)}, TMP_80.$$s = self, TMP_80.$$arity = 0, TMP_80), $a).call($b)}), "edit"));
        }, TMP_81.$$arity = 1);

        Opal.defn(self, '$open_vote_poll_edit', TMP_84 = function ːopen_vote_poll_edit(node) {
          var $a, $b, TMP_82, $c, TMP_83, self = this;

          return self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('VotePolls'))).$$scope.get('New')), $hash2(["vote_poll", "on_done", "on_cancel"], {"vote_poll": node, "on_done": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_82 = function(vote_poll){var self = TMP_82.$$s || this;
if (vote_poll == null) vote_poll = nil;
          self.$modal_close();
            return self.$set_state($hash2(["post"], {"post": self.$n_state("post")}));}, TMP_82.$$s = self, TMP_82.$$arity = 1, TMP_82), $a).call($b)), "on_cancel": self.$event(($a = ($c = self).$lambda, $a.$$p = (TMP_83 = function(){var self = TMP_83.$$s || this;

          return self.$modal_close()}, TMP_83.$$s = self, TMP_83.$$arity = 0, TMP_83), $a).call($c))})));
        }, TMP_84.$$arity = 1);

        Opal.defn(self, '$open_post_test_edit', TMP_87 = function ːopen_post_test_edit(node) {
          var $a, $b, TMP_85, $c, TMP_86, self = this;

          return self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('PostTests'))).$$scope.get('Edit')), $hash2(["post_test", "on_done", "on_cancel"], {"post_test": node, "on_done": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_85 = function(post_test){var self = TMP_85.$$s || this;
if (post_test == null) post_test = nil;
          self.$modal_close();
            return self.$set_state($hash2(["post"], {"post": self.$n_state("post")}));}, TMP_85.$$s = self, TMP_85.$$arity = 1, TMP_85), $a).call($b)), "on_cancel": self.$event(($a = ($c = self).$lambda, $a.$$p = (TMP_86 = function(){var self = TMP_86.$$s || this;

          self.$modal_close();
            return self.$set_state($hash2(["post"], {"post": self.$n_state("post")}));}, TMP_86.$$s = self, TMP_86.$$arity = 0, TMP_86), $a).call($c))})));
        }, TMP_87.$$arity = 1);

        Opal.defn(self, '$open_media_story_edit', TMP_88 = function ːopen_media_story_edit(node) {
          var self = this;

          return self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('MediaStories'))).$$scope.get('Edit')), $hash2(["media_story"], {"media_story": node})));
        }, TMP_88.$$arity = 1);

        Opal.defn(self, '$handle_inputs', TMP_90 = function ːhandle_inputs() {
          var $a, $b, TMP_89, self = this;

          self.$collect_inputs($hash2(["form_model"], {"form_model": "post"}));
          if ((($a = self.$state().$post()['$has_errors?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$set_state($hash2(["post"], {"post": self.$state().$post()}))
            } else {
            return ($a = ($b = self.$state().$post().$create()).$then, $a.$$p = (TMP_89 = function(post){var self = TMP_89.$$s || this, $c;
              if ($gvars.HISTORY == null) $gvars.HISTORY = nil;
if (post == null) post = nil;
            if ((($c = post['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return self.$set_state($hash2(["post"], {"post": post}))
                } else {
                return $gvars.HISTORY.$pushState(nil, "/posts/" + (post.$id()))
              }}, TMP_89.$$s = self, TMP_89.$$arity = 1, TMP_89), $a).call($b)
          };
        }, TMP_90.$$arity = 0);

        return (Opal.defn(self, '$after_signup_ok', TMP_92 = function ːafter_signup_ok() {
          var $a, $b, TMP_91, self = this;

          return ($a = ($b = $scope.get('CurrentUser').$ping_current_user()).$then, $a.$$p = (TMP_91 = function(user){var self = TMP_91.$$s || this;
if (user == null) user = nil;
          return $scope.get('CurrentUser').$set_user_and_login_status(user, true)}, TMP_91.$$s = self, TMP_91.$$arity = 1, TMP_91), $a).call($b);
        }, TMP_92.$$arity = 0), nil) && 'after_signup_ok';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/posts/node_wrapper"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$position', '$props', '$puts', '$class', '$node', '$name', '$t', '$children', '$lambda', '$emit']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Posts, self = $Posts = $module($base, 'Posts');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $NodeWrapper(){};
        var self = $NodeWrapper = $klass($base, $super, 'NodeWrapper', $NodeWrapper);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3;

        self.$expose();

        Opal.defn(self, '$validate_props', TMP_1 = function ːvalidate_props() {
          var $a, self = this;

          if ((($a = self.$props().$position()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return self.$puts("" + (self) + " of " + (self.$class()) + ": required :positin of Integer prop was not passed got\n               " + (self.$props().$node()) + " of " + (self.$props().$node().$class().$name()) + " instead")
          };
        }, TMP_1.$$arity = 0);

        return (Opal.defn(self, '$render', TMP_3 = function ːrender() {
          var $a, $b, TMP_2, self = this;

          return self.$t("div", $hash2(["className"], {"className": "node-wrapper"}), self.$t("div", $hash2(["className"], {"className": "node-container"}), self.$children()), self.$t("div", $hash2(["className"], {"className": "node-controll"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

          return self.$emit("on_remove")}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($b), "className": "btn btn-xs"}), "remove this")));
        }, TMP_3.$$arity = 0), nil) && 'render';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/posts/show"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$post', '$props', '$try', '$source_class', '$set_state', '$!=', '$post_id', '$params', '$fetch_post', '$then', '$p', '$show', '$t', '$progress_bar', '$n_state', '$title', '$!', '$[]', '$attributes', '$post_karma', '$current_user_post_karma_transaction', '$count', '$author', '$event', '$lambda', '$subscription_changed', '$created_at', '$map', '$show_node_depending_on_type', '$node', '$s_nodes', '$name', '$post_tags', '$state', '$current_user_pkt_or_new', '$pkt_changed', '$id', '$should_scroll_to_comments', '$location', '$query', '$n_prop', '$===', '$is_personality', '$force_update']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Posts, self = $Posts = $module($base, 'Posts');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Show(){};
        var self = $Show = $klass($base, $super, 'Show', $Show);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_5, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14;

        self.$expose();

        Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
          var $a, self = this, post = nil;

          post = ((($a = self.$props().$post()) !== false && $a !== nil && $a != null) ? $a : false);
          return $hash2(["post"], {"post": post});
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$component_will_receive_props', TMP_2 = function ːcomponent_will_receive_props(np) {
          var $a, self = this, cp = nil;

          if ((($a = cp = self.$props().$source_class().$try("current_post_for_show")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$set_state($hash2(["post"], {"post": cp}))
          } else if ((($a = np.$params().$post_id()['$!='](self.$props().$params().$post_id())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$fetch_post(np.$params().$post_id())
            } else {
            return nil
          };
        }, TMP_2.$$arity = 1);

        Opal.defn(self, '$component_did_mount', TMP_3 = function ːcomponent_did_mount() {
          var $a, self = this, cp = nil, post_id = nil;

          if ((($a = cp = self.$props().$source_class().$try("current_post_for_show")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$set_state($hash2(["post"], {"post": cp}))
          } else if ((($a = self.$props().$post()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$set_state($hash2(["post"], {"post": self.$props().$post()}))
            } else {
            post_id = self.$props().$params().$post_id();
            return self.$fetch_post(post_id);
          };
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$fetch_post', TMP_5 = function ːfetch_post(post_id) {
          var $a, $b, TMP_4, self = this;

          return ($a = ($b = $scope.get('Post').$show($hash2(["wilds", "component"], {"wilds": $hash2(["id"], {"id": post_id}), "component": self}))).$then, $a.$$p = (TMP_4 = function(post){var self = TMP_4.$$s || this, e = nil;
if (post == null) post = nil;
          try {
              return self.$set_state($hash2(["post"], {"post": post}))
            } catch ($err) {
              if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                try {
                  self.$p(e);
                  return console.log(e);
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($b);
        }, TMP_5.$$arity = 1);

        Opal.defn(self, '$render', TMP_10 = function ːrender() {
          var $a, $b, TMP_6, $c, TMP_7, $d, TMP_8, $e, TMP_9, self = this, e = nil;

          try {
            return self.$t("div", $hash2(["className"], {"className": "post posts-show"}), self.$progress_bar(), (function() {if ((($a = self.$n_state("post")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("div", $hash2([], {}), self.$t("div", $hash2(["className"], {"className": "post-head"}), self.$t("div", $hash2(["className"], {"className": "row post-title-and-karma-count"}), self.$t("h1", $hash2(["className"], {"className": "post-title col-lg-9"}), self.$n_state("post").$title()), self.$t("p", $hash2(["className"], {"className": "post-karma-count col-lg-3"}), (function() {if ((($a = ($b = self.$n_state("post").$post_karma().$attributes()['$[]']("hot_since")['$!'](), $b !== false && $b !== nil && $b != null ?self.$n_state("post").$post_karma().$current_user_post_karma_transaction().$try("cancel_type")['$!']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return self.$t("p", $hash2(["className"], {"className": "freshnotifier"}), "vote to get double karma!")
                } else {
                return nil
              }; return nil; })(), self.$t("p", $hash2(["className"], {"className": "karmaamount"}), "" + (self.$n_state("post").$post_karma().$count()))))), self.$t("div", $hash2(["className"], {"className": "author-date"}), self.$t((((((($scope.get('Components')).$$scope.get('Users'))).$$scope.get('Partials'))).$$scope.get('AuthorLabel')), $hash2(["user", "subscription_changed"], {"user": self.$n_state("post").$author(), "subscription_changed": (self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_6 = function(user, user_subscription, status){var self = TMP_6.$$s || this;
if (user == null) user = nil;if (user_subscription == null) user_subscription = nil;if (status == null) status = nil;
              return self.$subscription_changed(user, user_subscription, status)}, TMP_6.$$s = self, TMP_6.$$arity = 3, TMP_6), $a).call($b)))})), self.$t("div", $hash2(["className"], {"className": "date"}), new Date(self.$n_state("post").$created_at()).toLocaleDateString('us-US', {day: 'numeric', month: 'long', year: '2-digit'}))), self.$t("div", $hash2(["className"], {"className": "post-nodes"}), ($a = ($c = self.$n_state("post").$s_nodes()).$map, $a.$$p = (TMP_7 = function(post_node){var self = TMP_7.$$s || this;
if (post_node == null) post_node = nil;
              return self.$show_node_depending_on_type(post_node.$node())}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($c), self.$t("div", $hash2(["className"], {"className": "tags"}), ($a = ($d = self.$state().$post().$post_tags()).$map, $a.$$p = (TMP_8 = function(pt){var self = TMP_8.$$s || this, $e;
if (pt == null) pt = nil;
              if ((($e = pt.$name()) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
                  return pt.$name()
                  } else {
                  return nil;
                }}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $a).call($d))), self.$t((((($scope.get('Components')).$$scope.get('PostKarmaTransactions'))).$$scope.get('New')), $hash2(["post_karma", "pkt", "pkt_changed"], {"post_karma": self.$n_state("post").$post_karma(), "pkt": self.$n_state("post").$post_karma().$current_user_pkt_or_new(), "pkt_changed": self.$event(($a = ($e = self).$lambda, $a.$$p = (TMP_9 = function(pkt){var self = TMP_9.$$s || this;
if (pkt == null) pkt = nil;
              return self.$pkt_changed(pkt)}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $a).call($e))})), self.$t("div", $hash2(["className"], {"className": "discussions-block"}), self.$t((((($scope.get('Components')).$$scope.get('Discussions'))).$$scope.get('Show')), $hash2(["post_id", "should_scroll_to_comments"], {"post_id": self.$state().$post().$id(), "should_scroll_to_comments": self.$should_scroll_to_comments()}))))
              } else {
              return nil
            }; return nil; })())
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
              try {
                return self.$p(e)
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };
        }, TMP_10.$$arity = 0);

        Opal.defn(self, '$should_scroll_to_comments', TMP_11 = function ːshould_scroll_to_comments() {
          var $a, self = this;

          if ((($a = self.$props().$location()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if ((($a = self.$props().$location().$query()['$[]']("scroll_to_comments")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return true
              } else {
              return nil
            }
            } else {
            return false
          };
        }, TMP_11.$$arity = 0);

        Opal.defn(self, '$subscription_changed', TMP_12 = function ːsubscription_changed(user, user_subscription, status) {
          var $a, self = this;

          if ((($a = self.$n_prop("owner")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$n_prop("owner").$subscription_changed(user, user_subscription, status)
            } else {
            return nil
          };
        }, TMP_12.$$arity = 3);

        Opal.defn(self, '$show_node_depending_on_type', TMP_13 = function ːshow_node_depending_on_type(node) {
          var $a, self = this, $case = nil;

          return (function() {$case = node;if ($scope.get('PostText')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('PostTexts'))).$$scope.get('Show')), $hash2(["post_text"], {"post_text": node}))}else if ($scope.get('PostImage')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image", "show_source"], {"post_image": node, "show_source": true}))}else if ($scope.get('PostGif')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('PostGifs'))).$$scope.get('Show')), $hash2(["post_gif"], {"post_gif": node}))}else if ($scope.get('VideoEmbed')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('VideoEmbeds'))).$$scope.get('Show')), $hash2(["video_embed"], {"video_embed": node}))}else if ($scope.get('PostVotePoll')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('VotePolls'))).$$scope.get('Show')), $hash2(["vote_poll"], {"vote_poll": node}))}else if ($scope.get('PostTest')['$===']($case)) {if ((($a = node.$is_personality()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t((((($scope.get('Components')).$$scope.get('PersonalityTests'))).$$scope.get('Show')), $hash2(["post_test"], {"post_test": node}))
            } else {
            return self.$t((((($scope.get('Components')).$$scope.get('PostTests'))).$$scope.get('Show')), $hash2(["post_test", "show_serialized_fields"], {"post_test": node, "show_serialized_fields": true}))
          }}else if ($scope.get('MediaStory')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('MediaStories'))).$$scope.get('Show')), $hash2(["media_story"], {"media_story": node}))}else { return nil }})();
        }, TMP_13.$$arity = 1);

        return (Opal.defn(self, '$pkt_changed', TMP_14 = function ːpkt_changed(pkt) {
          var self = this;

          self.$force_update();
          return self.$n_prop("owner").$pkt_changed(pkt);
        }, TMP_14.$$arity = 1), nil) && 'pkt_changed';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/posts/show_inline"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $gvars = Opal.gvars;

  Opal.add_stubs(['$expose', '$n_prop', '$t', '$lambda', '$set_current_post_for_show', '$link_to', '$title', '$id', '$!', '$[]', '$attributes', '$post_karma', '$try', '$current_user_post_karma_transaction', '$count', '$should_truncate?', '$map', '$render_post_node_depending_on_type', '$node', '$s_nodes', '$count_elements_disclaimer', '$bottom_lane_for_post_controll', '$created_at', '$author', '$event', '$make_dirty', '$subscription_changed', '$discussion', '$messages_count', '$current_user_pkt_or_new', '$pkt_changed', '$>', '$length', '$data', '$is_a?', '$content', '$===', '$is_personality', '$each', '$+']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Posts, self = $Posts = $module($base, 'Posts');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $ShowInline(){};
        var self = $ShowInline = $klass($base, $super, 'ShowInline', $ShowInline);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_8, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_19;

        def.post_link_preceding_part = nil;
        self.$expose();

        Opal.defn(self, '$validate_props', TMP_1 = function ːvalidate_props() {
          var self = this;

          return nil;
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$init', TMP_2 = function ːinit() {
          var $a, self = this;

          if ((($a = self.$n_prop("post_link_preceding_part")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.post_link_preceding_part = self.$n_prop("post_link_preceding_part")
            } else {
            return self.post_link_preceding_part = ""
          };
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$component_did_mount', TMP_3 = function ːcomponent_did_mount() {
          var self = this;

          return nil;
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$render', TMP_8 = function ːrender() {
          var $a, $b, TMP_4, $c, TMP_5, $d, TMP_6, $e, TMP_7, self = this, post = nil, i = nil, truncated = nil;
          if ($gvars.DISPLAY_SIZE == null) $gvars.DISPLAY_SIZE = nil;
          if ($gvars.IS_MOBILE == null) $gvars.IS_MOBILE = nil;

          post = self.$n_prop("post");
          i = self.$n_prop("i");
          if (post !== false && post !== nil && post != null) {
            return self.$t("div", $hash2(["ref", "data-post-index", "className"], {"ref": "post" + (i), "data-post-index": i, "className": "" + ($gvars.DISPLAY_SIZE) + " post " + (self.$n_prop("is_current"))}), self.$t("div", $hash2(["className"], {"className": "post-head"}), self.$t("div", $hash2(["className"], {"className": "row post-title-and-karma-count"}), self.$t("h1", $hash2(["className", "onClick"], {"className": "post-title col-lg-9", "onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

            return self.$set_current_post_for_show(post)}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($b)}), self.$link_to(post.$title(), "" + (self.post_link_preceding_part) + "/" + (post.$id()))), self.$t("p", $hash2(["className"], {"className": "post-karma-count col-lg-3"}), (function() {if ((($a = ($c = post.$post_karma().$attributes()['$[]']("hot_since")['$!'](), $c !== false && $c !== nil && $c != null ?post.$post_karma().$current_user_post_karma_transaction().$try("cancel_type")['$!']() : $c)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("p", $hash2(["className"], {"className": "freshnotifier"}), "vote to get double karma!")
              } else {
              return nil
            }; return nil; })(), self.$t("p", $hash2(["className"], {"className": "karmaamount"}), "" + (post.$post_karma().$count()))))), self.$t("div", $hash2(["className"], {"className": "post-body"}), (function() {if ((($a = post.$attributes()['$[]']("opened")['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              truncated = (function() {if ((($a = self['$should_truncate?'](post)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return "truncated"
                } else {
                return nil
              }; return nil; })();
              return [self.$t("div", $hash2(["className"], {"className": "post-nodes " + (truncated)}), ($a = ($c = post.$s_nodes()).$map, $a.$$p = (TMP_5 = function(post_node){var self = TMP_5.$$s || this;
if (post_node == null) post_node = nil;
              return self.$render_post_node_depending_on_type(post_node.$node())}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($c)), (function() {if (truncated !== false && truncated !== nil && truncated != null) {
                return self.$link_to(self.$t("div", $hash2(["onClick", "className"], {"onClick": ($a = ($d = self).$lambda, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

                return self.$set_current_post_for_show(post)}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($d), "className": "read-more post-expander"}), self.$count_elements_disclaimer(post.$s_nodes()), "more...", self.$t("i", $hash2(["className"], {"className": "icon-window-restore"}))), "" + (self.post_link_preceding_part) + "/" + (post.$id()))
                } else {
                return nil
              }; return nil; })()];
              } else {
              return self.$t("div", $hash2(["className"], {"className": "post-nodes"}), ($a = ($e = post.$s_nodes()).$map, $a.$$p = (TMP_7 = function(post_node){var self = TMP_7.$$s || this;
if (post_node == null) post_node = nil;
              return self.$render_post_node_depending_on_type(post_node.$node())}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($e))
            }; return nil; })()), (function() {if ((($a = $gvars.IS_MOBILE['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$bottom_lane_for_post_controll(post)
              } else {
              return nil
            }; return nil; })())
            } else {
            return ""
          };
        }, TMP_8.$$arity = 0);

        Opal.defn(self, '$bottom_lane_for_post_controll', TMP_12 = function ːbottom_lane_for_post_controll(post) {
          var $a, $b, TMP_9, $c, TMP_10, $d, TMP_11, self = this, date = nil;

          date = new Date(post.$created_at());
          return self.$t("div", $hash2(["className"], {"className": "bottom-lane"}), self.$t("ul", $hash2([], {}), self.$t("li", $hash2(["className"], {"className": "date"}), date.toLocaleDateString('us-US', {day: 'numeric', month: 'long', year: '2-digit'})), self.$t("li", $hash2([], {}), (function() {if ((($a = post.$author()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t((((((($scope.get('Components')).$$scope.get('Users'))).$$scope.get('Partials'))).$$scope.get('AuthorLabel')), $hash2(["user", "subscription_changed"], {"user": post.$author(), "subscription_changed": (self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_9 = function(user, user_subscription, status){var self = TMP_9.$$s || this;
if (user == null) user = nil;if (user_subscription == null) user_subscription = nil;if (status == null) status = nil;
            post.$make_dirty();
              return self.$subscription_changed(user, user_subscription, status);}, TMP_9.$$s = self, TMP_9.$$arity = 3, TMP_9), $a).call($b)))}))
            } else {
            return nil
          }; return nil; })()), self.$link_to(self.$t("li", $hash2(["onClick"], {"onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

          return self.$set_current_post_for_show(post)}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $a).call($c)}), self.$t("i", $hash2(["className"], {"className": "icon-comment-empty zoom"})), (function() {if ((($a = post.$discussion()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return post.$discussion().$messages_count()
            } else {
            return nil
          }; return nil; })()), "/" + (post.$id()), $hash2(["scroll_to_comments"], {"scroll_to_comments": true})), self.$t("li", $hash2([], {}), self.$t((((($scope.get('Components')).$$scope.get('PostKarmaTransactions'))).$$scope.get('New')), $hash2(["post_karma", "pkt", "pkt_changed"], {"post_karma": post.$post_karma(), "pkt": post.$post_karma().$current_user_pkt_or_new(), "pkt_changed": self.$event(($a = ($d = self).$lambda, $a.$$p = (TMP_11 = function(pkt){var self = TMP_11.$$s || this;
if (pkt == null) pkt = nil;
          return self.$pkt_changed(pkt, post.$author().$id())}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($d))})))));
        }, TMP_12.$$arity = 1);

        Opal.defn(self, '$subscription_changed', TMP_13 = function ːsubscription_changed(user, user_subscription, status) {
          var self = this;

          return self.$n_prop("owner").$subscription_changed(user, user_subscription, status);
        }, TMP_13.$$arity = 3);

        Opal.defn(self, '$pkt_changed', TMP_14 = function ːpkt_changed(pkt, user_id) {
          var self = this;

          return self.$n_prop("owner").$pkt_changed(pkt, user_id);
        }, TMP_14.$$arity = 2);

        Opal.defn(self, '$set_current_post_for_show', TMP_15 = function ːset_current_post_for_show(post) {
          var self = this;

          return self.$n_prop("owner").$set_current_post_for_show(post);
        }, TMP_15.$$arity = 1);

        Opal.defn(self, '$should_truncate?', TMP_16 = function(post) {
          var $a, $b, self = this;

          if ((($a = $rb_gt(post.$s_nodes().$data().$length(), 1)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return true
          } else if ((($a = ($b = post.$s_nodes()['$[]'](0).$node()['$is_a?']($scope.get('PostText')), $b !== false && $b !== nil && $b != null ?$rb_gt(post.$s_nodes()['$[]'](0).$node().$content().$length(), 200) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return true
          } else if ((($a = post.$s_nodes()['$[]'](0).$node()['$is_a?']($scope.get('PostTest'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return true
            } else {
            return nil
          };
        }, TMP_16.$$arity = 1);

        Opal.defn(self, '$render_post_node_depending_on_type', TMP_17 = function ːrender_post_node_depending_on_type(node, truncate_text) {
          var $a, self = this, $case = nil;

          if (truncate_text == null) {
            truncate_text = false;
          }
          return (function() {$case = node;if ($scope.get('PostText')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('PostTexts'))).$$scope.get('Show')), $hash2(["post_text", "truncate_text"], {"post_text": node, "truncate_text": truncate_text}))}else if ($scope.get('PostImage')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": node}))}else if ($scope.get('PostGif')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('PostGifs'))).$$scope.get('Show')), $hash2(["post_gif"], {"post_gif": node}))}else if ($scope.get('VideoEmbed')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('VideoEmbeds'))).$$scope.get('Show')), $hash2(["video_embed"], {"video_embed": node}))}else if ($scope.get('PostVotePoll')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('VotePolls'))).$$scope.get('Show')), $hash2(["vote_poll", "show_inline"], {"vote_poll": node, "show_inline": true}))}else if ($scope.get('PostTest')['$===']($case)) {if ((($a = node.$is_personality()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t((((($scope.get('Components')).$$scope.get('PersonalityTests'))).$$scope.get('Show')), $hash2(["post_test"], {"post_test": node}))
            } else {
            return self.$t((((($scope.get('Components')).$$scope.get('PostTests'))).$$scope.get('ThumbShow')), $hash2(["post_test"], {"post_test": node}))
          }}else if ($scope.get('MediaStory')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('MediaStories'))).$$scope.get('Show')), $hash2(["media_story"], {"media_story": node}))}else { return nil }})();
        }, TMP_17.$$arity = -2);

        return (Opal.defn(self, '$count_elements_disclaimer', TMP_19 = function ːcount_elements_disclaimer(post_nodes) {
          var $a, $b, TMP_18, self = this, images = nil, videos = nil, text = nil, post_tests = nil;

          images = 0;
          videos = 0;
          text = 0;
          post_tests = 0;
          ($a = ($b = post_nodes).$each, $a.$$p = (TMP_18 = function(post_node){var self = TMP_18.$$s || this, $case = nil;
if (post_node == null) post_node = nil;
          return (function() {$case = post_node.$node();if ($scope.get('PostImage')['$===']($case)) {return images = $rb_plus(images, 1)}else if ($scope.get('VideoEmbed')['$===']($case)) {return videos = $rb_plus(videos, 1)}else if ($scope.get('PostText')['$===']($case)) {return text = $rb_plus(text, 1)}else if ($scope.get('PostTest')['$===']($case)) {return post_tests = $rb_plus(post_tests, 1)}else { return nil }})()}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18), $a).call($b);
          return self.$t("div", $hash2([], {}), (function() {if ((($a = $rb_gt(videos, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("span", $hash2(["className"], {"className": "item"}), videos, self.$t("i", $hash2(["className"], {"className": "icon-youtube-play"})))
            } else {
            return nil
          }; return nil; })(), (function() {if ((($a = $rb_gt(images, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("span", $hash2(["className"], {"className": "item"}), images, self.$t("i", $hash2(["className"], {"className": "icon-picture"})))
            } else {
            return nil
          }; return nil; })(), (function() {if ((($a = $rb_gt(text, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("span", $hash2(["className"], {"className": "item"}), self.$t("i", $hash2(["className"], {"className": "icon-doc-text"})))
            } else {
            return nil
          }; return nil; })(), (function() {if ((($a = $rb_gt(post_tests, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("span", $hash2(["className"], {"className": "item"}), post_tests, self.$t("i", $hash2(["className"], {"className": "icon-help"})))
            } else {
            return nil
          }; return nil; })());
        }, TMP_19.$$arity = 1), nil) && 'count_elements_disclaimer';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/posts/show_mini"] = function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$!', '$post', '$props', '$is_a?', '$p', '$name', '$class', '$node', '$[]', '$post_nodes', '$content=', '$content', '$each_with_index', '$>=', '$<<', '$t', '$title', '$map', '$show_node_depending_on_type', '$state', '$===']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Posts, self = $Posts = $module($base, 'Posts');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $ShowMini(){};
        var self = $ShowMini = $klass($base, $super, 'ShowMini', $ShowMini);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3, TMP_5, TMP_6;

        self.$expose();

        Opal.defn(self, '$validate_props', TMP_1 = function ːvalidate_props() {
          var $a, $b, self = this;

          if ((($a = ((($b = self.$props().$post()['$!']()) !== false && $b !== nil && $b != null) ? $b : self.$props().$post()['$is_a?']($scope.get('Post'))['$!']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$p("" + (self.$class().$name()) + " requires props.post of type Post, got " + (self.$props().$post()) + " instead")
            } else {
            return nil
          };
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$get_initial_state', TMP_3 = function ːget_initial_state() {
          var $a, $b, TMP_2, self = this, post_nodes = nil;

          post_nodes = [];
          if ((($a = self.$props().$post().$post_nodes()['$[]'](0).$node()['$is_a?']($scope.get('PostText'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            (($a = [self.$props().$post().$post_nodes()['$[]'](0).$node().$content()['$[]']($range(0, 140, false))]), $b = self.$props().$post().$post_nodes()['$[]'](0).$node(), $b['$content='].apply($b, $a), $a[$a.length-1])};
          (function(){var $brk = Opal.new_brk(); try {return ($a = ($b = self.$props().$post().$post_nodes()).$each_with_index, $a.$$p = (TMP_2 = function(post_node, i){var self = TMP_2.$$s || this, $c;
if (post_node == null) post_node = nil;if (i == null) i = nil;
          if ((($c = $rb_ge(i, 1)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              
              Opal.brk(nil, $brk)};
            return post_nodes['$<<'](post_node);}, TMP_2.$$s = self, TMP_2.$$brk = $brk, TMP_2.$$arity = 2, TMP_2), $a).call($b)
          } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
          return $hash2(["post_nodes"], {"post_nodes": post_nodes});
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$render', TMP_5 = function ːrender() {
          var $a, $b, TMP_4, self = this;

          return self.$t("div", $hash2(["className"], {"className": "posts-showMini"}), self.$t("p", $hash2(["className"], {"className": "title"}), self.$props().$post().$title()), ($a = ($b = self.$state().$post_nodes()).$map, $a.$$p = (TMP_4 = function(post_node){var self = TMP_4.$$s || this;
if (post_node == null) post_node = nil;
          return self.$t("div", $hash2(["className"], {"className": "node"}), self.$show_node_depending_on_type(post_node.$node()))}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($b));
        }, TMP_5.$$arity = 0);

        return (Opal.defn(self, '$show_node_depending_on_type', TMP_6 = function ːshow_node_depending_on_type(node) {
          var self = this, $case = nil;

          return (function() {$case = node;if ($scope.get('PostText')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('PostTexts'))).$$scope.get('Show')), $hash2(["post_text"], {"post_text": node}))}else if ($scope.get('PostImage')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": node}))}else if ($scope.get('PostGif')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('PostGifs'))).$$scope.get('Show')), $hash2(["post_gif"], {"post_gif": node}))}else if ($scope.get('VideoEmbed')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('VideoEmbeds'))).$$scope.get('Show')), $hash2(["video_embed"], {"video_embed": node}))}else { return nil }})();
        }, TMP_6.$$arity = 1), nil) && 'show_node_depending_on_type';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/posts/show_proxy"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$==', '$pathname', '$location', '$props', '$user_id', '$params', '$post_id', '$n_prop', '$owner=', '$instance', '$modal_open', '$content', '$modal', '$new', '$lambda', '$push_history_one_level_back', '$split', '$pop', '$join', '$push', '$history', '$t']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Posts, self = $Posts = $module($base, 'Posts');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $ShowProxy(){};
        var self = $ShowProxy = $klass($base, $super, 'ShowProxy', $ShowProxy);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_6, TMP_7, TMP_8;

        def.source_class = nil;
        self.$expose();

        Opal.defn(self, '$init', TMP_1 = function ːinit() {
          var $a, $b, self = this;

          if ((($a = (self.$props().$location().$pathname()['$==']("/dashboard/" + (self.$props().$params().$user_id()) + "/posts/index/" + (self.$props().$params().$post_id())))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.source_class = (((((($scope.get('Components')).$$scope.get('Users'))).$$scope.get('Posts'))).$$scope.get('Index'))
          } else if ((($a = (self.$props().$location().$pathname()['$==']("/users/" + (self.$props().$params().$user_id()) + "/posts/" + (self.$props().$params().$post_id())))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.source_class = (((((($scope.get('Components')).$$scope.get('Users'))).$$scope.get('Posts'))).$$scope.get('Index'))
            } else {
            self.source_class = (((($scope.get('Components')).$$scope.get('Posts'))).$$scope.get('Index'))
          };
          if ((($a = self.$n_prop("owner")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return (($a = [self.source_class.$instance()]), $b = self.$props(), $b['$owner='].apply($b, $a), $a[$a.length-1])
          };
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$component_did_mount', TMP_2 = function ːcomponent_did_mount() {
          var self = this;

          return self.$modal_open(nil, self.$content());
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$method_name', TMP_3 = function ːmethod_name() {
          var self = this;

          return self.$modal_open(nil, self.$content());
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$component_will_receive_props', TMP_4 = function ːcomponent_will_receive_props(np) {
          var self = this;

          return self.$modal_open(nil, self.$content());
        }, TMP_4.$$arity = 1);

        Opal.defn(self, '$render', TMP_6 = function ːrender() {
          var $a, $b, TMP_5, self = this;

          return self.$modal($hash2(["className", "on_user_intentional_close"], {"className": "modal-fullscreen", "on_user_intentional_close": $scope.get('ProcEvent').$new(($a = ($b = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

          return self.$push_history_one_level_back()}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($b))}));
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$push_history_one_level_back', TMP_7 = function ːpush_history_one_level_back() {
          var self = this, full_path = nil;

          full_path = self.$props().$location().$pathname().$split("/");
          full_path.$pop();
          full_path = full_path.$join("/");
          return self.$props().$history().$push(full_path);
        }, TMP_7.$$arity = 0);

        return (Opal.defn(self, '$content', TMP_8 = function ːcontent() {
          var self = this;

          return self.$t((((($scope.get('Components')).$$scope.get('Posts'))).$$scope.get('Show')), $hash2(["owner", "params", "source_class", "location"], {"owner": self.$n_prop("owner"), "params": self.$props().$params(), "source_class": self.source_class, "location": self.$props().$location()}));
        }, TMP_8.$$arity = 0), nil) && 'content';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/sessions/create"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$new', '$t', '$display_general_errors_for', '$user_credential', '$user', '$state', '$lambda', '$open_popup_for_oauth', '$input', '$submit_via_link', '$submit_via_pwd', '$collect_inputs', '$has_errors?', '$set_state', '$then', '$alert', '$send_login_link', '$set_proc_on_auth_popup_close', '$set_user_and_login_status', '$instance', '$ping_current_user', '$open_child_window', '$login_via_pwd']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Sessions, self = $Sessions = $module($base, 'Sessions');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Create(){};
        var self = $Create = $klass($base, $super, 'Create', $Create);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_5, TMP_7, TMP_10, TMP_12;

        self.$expose();

        self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

        Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
          var self = this;

          return $hash2(["user"], {"user": $scope.get('User').$new($hash2(["user_credential"], {"user_credential": $scope.get('UserCredential').$new()}))});
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$render', TMP_5 = function ːrender() {
          var $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, self = this;

          return self.$t("div", $hash2(["className"], {"className": "users-create"}), self.$display_general_errors_for(self.$state().$user().$user_credential()), self.$t("div", $hash2(["className"], {"className": "oauth-block"}), self.$t("h3", $hash2([], {}), "login via:"), self.$t("div", $hash2(["className"], {"className": "oath-provider-list"}), self.$t("button", $hash2(["className", "onClick"], {"className": "btn btn-default", "onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

          return self.$open_popup_for_oauth("http://localhost:3000/auth/developer")}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($b)}), "DEVELOPER"))), self.$t("div", $hash2(["className"], {"className": "login-via-email"}), [self.$t("h3", $hash2([], {}), "login via email that will be sent to you"), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('Input')), self.$state().$user().$user_credential(), "email", $hash2(["show_name"], {"show_name": "your email"})), self.$t("div", $hash2(["className"], {"className": "controll-buttons"}), self.$t("button", $hash2(["className", "onClick"], {"className": "btn btn-default", "onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

          return self.$submit_via_link()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($c)}), "send me login link"))]), self.$t("div", $hash2(["className"], {"className": "login-via-pwd"}), self.$t("h3", $hash2([], {}), "login with email and password"), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('Input')), self.$state().$user().$user_credential(), "email", $hash2(["type", "show_name"], {"type": "email", "show_name": "your username or email"})), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('Input')), self.$state().$user().$user_credential(), "password", $hash2(["type", "show_name"], {"type": "password", "show_name": "password"})), self.$t("div", $hash2(["className"], {"className": "controll-buttons"}), self.$t("button", $hash2(["className", "onClick"], {"className": "btn btn-default", "onClick": ($a = ($d = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

          return self.$submit_via_pwd()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($d)}), "login"))));
        }, TMP_5.$$arity = 0);

        Opal.defn(self, '$submit_via_link', TMP_7 = function ːsubmit_via_link() {
          var $a, $b, TMP_6, self = this;

          self.$collect_inputs($hash2(["form_model"], {"form_model": "user"}));
          if ((($a = self.$state().$user()['$has_errors?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$set_state($hash2(["user"], {"user": self.$state().$user()}))
            } else {
            return ($a = ($b = self.$state().$user().$send_login_link()).$then, $a.$$p = (TMP_6 = function(user){var self = TMP_6.$$s || this, $c;
if (user == null) user = nil;
            if ((($c = user['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return self.$set_state($hash2(["user"], {"user": user}))
                } else {
                return self.$alert("logged in")
              }}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($b)
          };
        }, TMP_7.$$arity = 0);

        Opal.defn(self, '$open_popup_for_oauth', TMP_10 = function ːopen_popup_for_oauth(path) {
          var $a, $b, TMP_8, self = this;

          ($a = ($b = $scope.get('OauthHelper')).$set_proc_on_auth_popup_close, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $c, $d, TMP_9;

          return ($c = ($d = $scope.get('CurrentUser').$instance().$ping_current_user()).$then, $c.$$p = (TMP_9 = function(user){var self = TMP_9.$$s || this;
if (user == null) user = nil;
            return $scope.get('CurrentUser').$set_user_and_login_status($scope.get('CurrentUser').$instance(), true)}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $c).call($d)}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($b);
          return $scope.get('OauthHelper').$open_child_window(path);
        }, TMP_10.$$arity = 1);

        return (Opal.defn(self, '$submit_via_pwd', TMP_12 = function ːsubmit_via_pwd() {
          var $a, $b, TMP_11, self = this;

          self.$collect_inputs($hash2(["form_model"], {"form_model": "user"}));
          if ((($a = self.$state().$user()['$has_errors?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$set_state($hash2(["user"], {"user": self.$state().$user()}))
            } else {
            return ($a = ($b = self.$state().$user().$login_via_pwd()).$then, $a.$$p = (TMP_11 = function(user){var self = TMP_11.$$s || this, $c;
if (user == null) user = nil;
            if ((($c = user['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return self.$set_state($hash2(["user"], {"user": user}))
                } else {
                $scope.get('CurrentUser').$set_user_and_login_status(user, true);
                return self.$alert("logged in");
              }}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($b)
          };
        }, TMP_12.$$arity = 0), nil) && 'submit_via_pwd';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/staff/main"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$t', '$children']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Staff, self = $Staff = $module($base, 'Staff');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Main(){};
        var self = $Main = $klass($base, $super, 'Main', $Main);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        self.$expose();

        return (Opal.defn(self, '$render', TMP_1 = function ːrender() {
          var self = this;

          return self.$t("div", $hash2([], {}), self.$children());
        }, TMP_1.$$arity = 0), nil) && 'render';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/staff/posts/main"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$t', '$children']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Staff, self = $Staff = $module($base, 'Staff');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $Posts, self = $Posts = $module($base, 'Posts');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Main(){};
          var self = $Main = $klass($base, $super, 'Main', $Main);

          var def = self.$$proto, $scope = self.$$scope, TMP_1;

          self.$expose();

          return (Opal.defn(self, '$render', TMP_1 = function ːrender() {
            var self = this;

            return self.$t("div", $hash2([], {}), self.$children());
          }, TMP_1.$$arity = 0), nil) && 'render';
        })($scope.base, $scope.get('RW'))
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/staff/posts/new"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $gvars = Opal.gvars;

  Opal.add_stubs(['$expose', '$include', '$new', '$t', '$modal', '$general_errors_for', '$post', '$state', '$input', '$controll_toolbar', '$map', '$event', '$lambda', '$remove_node', '$view_node', '$each_with_index', '$post_nodes', '$handle_inputs', '$delete_at', '$data', '$nodes', '$set_state', '$!', '$is_a?', '$[]', '$==', '$put_text_node_at', '$init_image_insertion', '$init_gif_insertion', '$changing_position', '$!=', '$paste_at_position', '$init_change_index_position', '$element_to_change_position', '$insert', '$modal_open', '$modal_head_for_image_insert', '$modal_content_for_image_insert', '$modal_head_for_gif_insert', '$modal_content_for_gif_insert', '$insert_image_component', '$insert_gif_component', '$+', '$modal_close', '$delete', '$attributes', '$post_image', '$===', '$show_text_node', '$show_image_node', '$show_gif_node', '$collect_inputs', '$has_errors?', '$then', '$pushState', '$id', '$create']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Staff, self = $Staff = $module($base, 'Staff');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $Posts, self = $Posts = $module($base, 'Posts');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $New(){};
          var self = $New = $klass($base, $super, 'New', $New);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_5, TMP_6, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_19, TMP_20, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_32;

          def.current_edited_node_position = nil;
          self.$expose();

          self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

          Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
            var self = this;

            self.current_edited_node_position = false;
            return $hash2(["post", "changing_position"], {"post": $scope.get('Post').$new($hash2(["post_nodes", "post_tags"], {"post_nodes": $scope.get('ModelCollection').$new(), "post_tags": $scope.get('ModelCollection').$new()})), "changing_position": false});
          }, TMP_1.$$arity = 0);

          Opal.defn(self, '$render', TMP_5 = function ːrender() {
            var $a, $b, TMP_2, $c, TMP_4, self = this;

            return self.$t("div", $hash2([], {}), self.$modal(), self.$general_errors_for(self.$state().$post()), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('Input')), self.$state().$post(), "title", $hash2(["show_name"], {"show_name": "title"})), self.$controll_toolbar(-1), ($a = ($b = self.$state().$post().$post_nodes().$each_with_index()).$map, $a.$$p = (TMP_2 = function(node, i){var self = TMP_2.$$s || this, $c, $d, TMP_3;
if (node == null) node = nil;if (i == null) i = nil;
            return self.$t("div", $hash2(["key"], {"key": node}), self.$t((((($scope.get('Components')).$$scope.get('Posts'))).$$scope.get('NodeWrapper')), $hash2(["position", "on_remove"], {"position": i, "on_remove": self.$event(($c = ($d = self).$lambda, $c.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

              return self.$remove_node(i)}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $c).call($d))}), self.$view_node(node)), self.$controll_toolbar(i))}, TMP_2.$$s = self, TMP_2.$$arity = 2, TMP_2), $a).call($b), self.$t("div", $hash2([], {}), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('MultipleSelectAutocompleWithTypeInput')), self.$state().$post(), "post_tags", $hash2(["show_attribute", "parsing_model", "autocomplete_url"], {"show_attribute": "name", "parsing_model": "PostTag", "autocomplete_url": "/post_tags/autocompletes"}))), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

            return self.$handle_inputs()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($c)}), "create post"));
          }, TMP_5.$$arity = 0);

          Opal.defn(self, '$remove_node', TMP_6 = function ːremove_node(index) {
            var self = this;

            self.$nodes().$data().$delete_at(index);
            return self.$set_state($hash2(["post"], {"post": self.$state().$post()}));
          }, TMP_6.$$arity = 1);

          Opal.defn(self, '$controll_toolbar', TMP_12 = function ːcontroll_toolbar(position) {
            var $a, $b, $c, TMP_7, TMP_8, $d, TMP_9, $e, TMP_10, $f, TMP_11, self = this;

            return self.$t("div", $hash2([], {}), (function() {if ((($a = ($b = self.$nodes()['$[]'](position)['$is_a?']($scope.get('PostText'))['$!'](), $b !== false && $b !== nil && $b != null ?((($c = position['$=='](-1)) ? self.$nodes()['$[]'](0)['$is_a?']($scope.get('PostText')) : position['$=='](-1)))['$!']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

              return self.$put_text_node_at(position)}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($b)}), "add text")
              } else {
              return nil
            }; return nil; })(), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

            return self.$init_image_insertion(position)}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($c)}), "add image"), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($d = self).$lambda, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

            return self.$init_gif_insertion(position)}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($d)}), "add gif"), (function() {if ((($a = ($e = self.$state().$changing_position(), $e !== false && $e !== nil && $e != null ?position['$!='](-1) : $e)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($e = self).$lambda, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

              return self.$paste_at_position(position)}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $a).call($e)}), "paste here")
            } else if (position['$=='](-1)) {
              return nil
              } else {
              return self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($f = self).$lambda, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

              return self.$init_change_index_position(position)}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $a).call($f)}), "cut")
            }; return nil; })());
          }, TMP_12.$$arity = 1);

          Opal.defn(self, '$init_change_index_position', TMP_13 = function ːinit_change_index_position(position) {
            var self = this;

            return self.$set_state($hash2(["changing_position", "element_to_change_position"], {"changing_position": true, "element_to_change_position": position}));
          }, TMP_13.$$arity = 1);

          Opal.defn(self, '$paste_at_position', TMP_14 = function ːpaste_at_position(position) {
            var self = this, node = nil;

            node = self.$nodes().$data().$delete_at(self.$state().$element_to_change_position());
            self.$nodes().$data().$insert(position, node);
            return self.$set_state($hash2(["post", "changing_position", "element_to_change_position"], {"post": self.$state().$post(), "changing_position": false, "element_to_change_position": false}));
          }, TMP_14.$$arity = 1);

          Opal.defn(self, '$init_image_insertion', TMP_15 = function ːinit_image_insertion(position) {
            var self = this;

            self.current_edited_node_position = position;
            return self.$modal_open(self.$modal_head_for_image_insert(), self.$modal_content_for_image_insert());
          }, TMP_15.$$arity = 1);

          Opal.defn(self, '$init_gif_insertion', TMP_16 = function ːinit_gif_insertion(position) {
            var self = this;

            self.current_edited_node_position = position;
            return self.$modal_open(self.$modal_head_for_gif_insert(), self.$modal_content_for_gif_insert());
          }, TMP_16.$$arity = 1);

          Opal.defn(self, '$modal_head_for_image_insert', TMP_17 = function ːmodal_head_for_image_insert() {
            var self = this;

            return self.$t("p", $hash2([], {}), "upload image and select it");
          }, TMP_17.$$arity = 0);

          Opal.defn(self, '$modal_content_for_image_insert', TMP_19 = function ːmodal_content_for_image_insert() {
            var $a, $b, TMP_18, self = this;

            return self.$t("div", $hash2([], {}), self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('UploadAndPreview')), $hash2(["on_image_selected"], {"on_image_selected": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_18 = function(image){var self = TMP_18.$$s || this;
if (image == null) image = nil;
            return self.$insert_image_component(image)}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18), $a).call($b))})));
          }, TMP_19.$$arity = 0);

          Opal.defn(self, '$modal_head_for_gif_insert', TMP_20 = function ːmodal_head_for_gif_insert() {
            var self = this;

            return self.$t("p", $hash2([], {}), "upload gif");
          }, TMP_20.$$arity = 0);

          Opal.defn(self, '$modal_content_for_gif_insert', TMP_22 = function ːmodal_content_for_gif_insert() {
            var $a, $b, TMP_21, self = this;

            return self.$t("div", $hash2([], {}), self.$t((((($scope.get('Components')).$$scope.get('PostGifs'))).$$scope.get('New')), $hash2(["on_post_gif_uploaded"], {"on_post_gif_uploaded": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_21 = function(post_gif){var self = TMP_21.$$s || this;
if (post_gif == null) post_gif = nil;
            return self.$insert_gif_component(post_gif)}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21), $a).call($b))})));
          }, TMP_22.$$arity = 0);

          Opal.defn(self, '$insert_image_component', TMP_23 = function ːinsert_image_component(post_image) {
            var self = this;

            self.$nodes().$insert($rb_plus(self.current_edited_node_position, 1), post_image);
            self.current_edited_node_position = false;
            self.$set_state($hash2(["post"], {"post": self.$state().$post()}));
            return self.$modal_close();
          }, TMP_23.$$arity = 1);

          Opal.defn(self, '$insert_gif_component', TMP_24 = function ːinsert_gif_component(post_gif) {
            var self = this;

            post_gif.$attributes().$delete("file");
            self.$nodes().$insert($rb_plus(self.current_edited_node_position, 1), post_gif);
            self.current_edited_node_position = false;
            self.$set_state($hash2(["post"], {"post": self.$state().$post()}));
            return self.$modal_close();
          }, TMP_24.$$arity = 1);

          Opal.defn(self, '$put_text_node_at', TMP_25 = function ːput_text_node_at(position) {
            var self = this;

            self.current_edited_node_position = position;
            self.$nodes().$insert($rb_plus(position, 1), $scope.get('PostText').$new());
            return self.$set_state($hash2(["post_image"], {"post_image": self.$state().$post_image()}));
          }, TMP_25.$$arity = 1);

          Opal.defn(self, '$nodes', TMP_26 = function ːnodes() {
            var self = this;

            return self.$state().$post().$post_nodes();
          }, TMP_26.$$arity = 0);

          Opal.defn(self, '$view_node', TMP_27 = function ːview_node(node) {
            var self = this, $case = nil;

            return (function() {$case = node;if ($scope.get('PostText')['$===']($case)) {return self.$show_text_node(node)}else if ($scope.get('PostImage')['$===']($case)) {return self.$show_image_node(node)}else if ($scope.get('PostGif')['$===']($case)) {return self.$show_gif_node(node)}else { return nil }})();
          }, TMP_27.$$arity = 1);

          Opal.defn(self, '$show_text_node', TMP_28 = function ːshow_text_node(post_text) {
            var self = this;

            return self.$t("div", $hash2([], {}), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('WysiTextarea')), post_text, "content", $hash2([], {})));
          }, TMP_28.$$arity = 1);

          Opal.defn(self, '$show_image_node', TMP_29 = function ːshow_image_node(image_node) {
            var self = this;

            return self.$t("div", $hash2([], {}), self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": image_node})));
          }, TMP_29.$$arity = 1);

          Opal.defn(self, '$show_gif_node', TMP_30 = function ːshow_gif_node(post_gif) {
            var self = this;

            return self.$t("div", $hash2([], {}), self.$t((((($scope.get('Components')).$$scope.get('PostGifs'))).$$scope.get('Show')), $hash2(["post_gif"], {"post_gif": post_gif})));
          }, TMP_30.$$arity = 1);

          return (Opal.defn(self, '$handle_inputs', TMP_32 = function ːhandle_inputs() {
            var $a, $b, TMP_31, self = this;

            self.$collect_inputs($hash2(["form_model"], {"form_model": "post"}));
            if ((($a = self.$state().$post()['$has_errors?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$set_state($hash2(["post"], {"post": self.$state().$post()}))
              } else {
              return ($a = ($b = self.$state().$post().$create($hash2(["namespace"], {"namespace": "staff"}))).$then, $a.$$p = (TMP_31 = function(post){var self = TMP_31.$$s || this, $c;
                if ($gvars.HISTORY == null) $gvars.HISTORY = nil;
if (post == null) post = nil;
              if ((($c = post['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                  return self.$set_state($hash2(["post"], {"post": post}))
                  } else {
                  return $gvars.HISTORY.$pushState(nil, "/posts/" + (post.$id()))
                }}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31), $a).call($b)
            };
          }, TMP_32.$$arity = 0), nil) && 'handle_inputs';
        })($scope.base, $scope.get('RW'))
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/staff/user_submitted/post_texts/edit"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$post_text', '$props', '$t', '$input', '$form_model', '$state', '$content', '$collect_inputs', '$!=', '$[]=', '$attributes', '$[]']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Staff, self = $Staff = $module($base, 'Staff');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $UserSubmitted, self = $UserSubmitted = $module($base, 'UserSubmitted');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base) {
          var $PostTexts, self = $PostTexts = $module($base, 'PostTexts');

          var def = self.$$proto, $scope = self.$$scope;

          (function($base, $super) {
            function $Edit(){};
            var self = $Edit = $klass($base, $super, 'Edit', $Edit);

            var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

            self.$expose();

            self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

            Opal.defn(self, '$validate_props', TMP_1 = function ːvalidate_props() {
              var self = this;

              return nil;
            }, TMP_1.$$arity = 0);

            Opal.defn(self, '$get_initial_state', TMP_2 = function ːget_initial_state() {
              var self = this;

              return $hash2(["form_model"], {"form_model": self.$props().$post_text()});
            }, TMP_2.$$arity = 0);

            Opal.defn(self, '$render', TMP_3 = function ːrender() {
              var self = this;

              return self.$t("div", $hash2([], {}), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('Input')), self.$state().$form_model(), "content", $hash2([], {})));
            }, TMP_3.$$arity = 0);

            return (Opal.defn(self, '$reap_inputs', TMP_4 = function ːreap_inputs() {
              var $a, $b, $c, self = this, current_content = nil;

              current_content = self.$state().$form_model().$content();
              self.$collect_inputs();
              if ((($a = current_content['$!='](self.$state().$form_model().$content())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return (($a = "changed", $b = self.$state().$form_model().$attributes(), ((($c = $b['$[]']($a)) !== false && $c !== nil && $c != null) ? $c : $b['$[]=']($a, $hash2([], {})))))['$[]=']("content", $hash2(["from", "to"], {"from": current_content, "to": self.$state().$form_model().$content()}))
                } else {
                return nil
              };
            }, TMP_4.$$arity = 0), nil) && 'reap_inputs';
          })($scope.base, $scope.get('RW'))
        })($scope.base)
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/staff/user_submitted/posts/edit"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$expose', '$include', '$new', '$then', '$sort_post_nodes_in_order_as_in_s_nodes', '$set_state', '$edit', '$id', '$post', '$props', '$n_state', '$t', '$modal', '$general_errors_for', '$state', '$input', '$lambda', '$handle_title_change', '$attribute_was_changed?', '$update_title', '$post_karma', '$handle_karma_change', '$change_karma', '$<', '$length', '$data', '$post_nodes', '$!', '$[]', '$controll_toolbar', '$map', '$-', '$clear_insert_toolbar_before', '$set_insert_toolbar_before', '$changing_position', '$!=', '$paste_at_position', '$==', '$init_change_index_position', '$remove_node', '$errors', '$node', '$each', '$view_node', '$each_with_index', '$url_for_feed', '$try', '$init_post_text_addition', '$init_image_insertion', '$init_gif_insertion', '$init_video_embed', '$init_vote_poll_insertion', '$init_post_test_insertion', '$init_personality_test_insertion', '$init_media_story_insertion', '$modal_open', '$insert_node', '$generic_create_node', '$event', '$insert_image_component', '$parse_post_node_set_node_validate', '$json', '$has_errors?', '$is_a?', '$update_when_has_errors', '$force_update', '$modal_close', '$insert_created_post_node', '$create', '$+', '$parse', '$attributes=', '$attributes', '$node=', '$validate', '$insert', '$delete_at', '$nodes', '$element_to_change_position', '$===', '$show_text_node', '$show_image_node', '$show_gif_node', '$show_video_embed', '$show_post_vote_poll', '$show_post_test', '$show_media_story', '$post_text', '$post_test_edit_done', '$open_for_edit_media_story', '$record_change_for_attribute', '$collect_inputs', '$title=', '$title', '$[]=', '$delete', '$clear_change_record_for_attribute', '$errors=', '$count=', '$count', '$update_count', '$reset_errors', '$destroy']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Staff, self = $Staff = $module($base, 'Staff');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $Posts, self = $Posts = $module($base, 'Posts');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Edit(){};
          var self = $Edit = $klass($base, $super, 'Edit', $Edit);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3, TMP_15, TMP_24, TMP_25, TMP_26, TMP_29, TMP_32, TMP_34, TMP_36, TMP_38, TMP_40, TMP_41, TMP_42, TMP_43, TMP_44, TMP_45, TMP_46, TMP_47, TMP_48, TMP_49, TMP_50, TMP_51, TMP_52, TMP_54, TMP_55, TMP_57, TMP_58, TMP_59, TMP_61, TMP_62, TMP_64, TMP_66;

          def.current_edited_node_position = nil;
          self.$expose();

          self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

          Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
            var self = this;

            self.current_edited_node_position = false;
            self.current_edited_node_position_for_thumb = false;
            return $hash2(["post", "changing_position", "post_thumb_expanded", "changing_position_for_thumb", "post_images_in_roster", "insert_toolbar_before"], {"post": false, "changing_position": false, "post_thumb_expanded": false, "changing_position_for_thumb": false, "post_images_in_roster": $scope.get('ModelCollection').$new(), "insert_toolbar_before": $hash2([], {})});
          }, TMP_1.$$arity = 0);

          Opal.defn(self, '$component_did_mount', TMP_3 = function ːcomponent_did_mount() {
            var $a, $b, TMP_2, self = this;

            return ($a = ($b = $scope.get('Post').$edit($hash2(["namespace", "wilds", "component"], {"namespace": "staff/user_submitted", "wilds": $hash2(["id"], {"id": self.$props().$post().$id()}), "component": self}))).$then, $a.$$p = (TMP_2 = function(post){var self = TMP_2.$$s || this, e = nil;
if (post == null) post = nil;
            try {
                post.$sort_post_nodes_in_order_as_in_s_nodes();
                return self.$set_state($hash2(["post"], {"post": post}));
              } catch ($err) {
                if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                  try {
                    return console.log(e);
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              }}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b);
          }, TMP_3.$$arity = 0);

          Opal.defn(self, '$render', TMP_15 = function ːrender() {
            var $a, $b, TMP_4, $c, TMP_5, $d, TMP_6, $e, TMP_7, $f, TMP_8, self = this, post = nil, x = nil;

            post = self.$n_state("post");
            return self.$t("div", $hash2(["className"], {"className": "posts-new"}), self.$modal(), (function() {if (post !== false && post !== nil && post != null) {
              return [self.$general_errors_for(self.$state().$post()), self.$t("div", $hash2(["className"], {"className": "input-and-button"}), self.$t("p", $hash2([], {}), "title: "), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('Input')), post, "title", $hash2(["show_name", "on_change", "namespace"], {"show_name": "title", "on_change": ($a = ($b = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

              return self.$handle_title_change()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($b), "namespace": "title"})), (function() {if ((($a = post['$attribute_was_changed?']("title")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return self.$t("button", $hash2(["className", "onClick"], {"className": "btn btn-primary btn-sm", "onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

                return self.$update_title()}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($c)}), "update title")
                } else {
                return nil
              }; return nil; })()), self.$t("div", $hash2(["className"], {"className": "input-and-button"}), self.$t("p", $hash2([], {}), "karma: "), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('Input')), post.$post_karma(), "count", $hash2(["show_name", "namespace", "on_change"], {"show_name": "karma", "namespace": "karma_count", "on_change": ($a = ($d = self).$lambda, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

              return self.$handle_karma_change()}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($d)})), (function() {if ((($a = post.$post_karma()['$attribute_was_changed?']("count")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return self.$t("button", $hash2(["className", "onClick"], {"className": "btn btn-primary btn-sm", "onClick": ($a = ($e = self).$lambda, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

                return self.$change_karma()}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($e)}), "set new karama count")
                } else {
                return nil
              }; return nil; })()), (function() {if ((($a = ($f = $rb_lt(self.$n_state("post").$post_nodes().$data().$length(), 1), $f !== false && $f !== nil && $f != null ?self.$n_state("insert_toolbar_before")['$[]'](1)['$!']() : $f)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return self.$controll_toolbar(-1)
                } else {
                return nil
              }; return nil; })(), ($a = ($f = self.$state().$post().$post_nodes().$each_with_index()).$map, $a.$$p = (TMP_8 = function(post_node, i){var self = TMP_8.$$s || this, $g, $h, TMP_9, $i, TMP_10, $j, TMP_11, $k, TMP_12, $l, TMP_13, $m, TMP_14, errors = nil;
if (post_node == null) post_node = nil;if (i == null) i = nil;
              return [(function() {if ((($g = self.$n_state("insert_toolbar_before")['$[]'](i)) !== nil && $g != null && (!$g.$$is_boolean || $g == true))) {
                  return self.$controll_toolbar($rb_minus(i, 1))
                  } else {
                  return nil
                }; return nil; })(), self.$t("div", $hash2(["key", "className"], {"key": i, "className": "node-wrapper"}), self.$t("div", $hash2(["className"], {"className": "node-and-controlls"}), self.$t("div", $hash2(["className"], {"className": "top-controlls"}), (function() {if ((($g = self.$n_state("insert_toolbar_before")['$[]'](i)) !== nil && $g != null && (!$g.$$is_boolean || $g == true))) {
                  return self.$t("button", $hash2(["className", "onClick"], {"className": "btn btn-xs btn-default", "onClick": ($g = ($h = self).$lambda, $g.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

                  return self.$clear_insert_toolbar_before(i)}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $g).call($h)}), "-")
                  } else {
                  return self.$t("button", $hash2(["className", "onClick"], {"className": "btn btn-xs btn-default", "onClick": ($g = ($i = self).$lambda, $g.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

                  return self.$set_insert_toolbar_before(i)}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $g).call($i)}), "+")
                }; return nil; })(), self.$t("div", $hash2(["className"], {"className": "right-group"}), (function() {if ((($g = ($j = self.$state().$changing_position(), $j !== false && $j !== nil && $j != null ?i['$!='](-1) : $j)) !== nil && $g != null && (!$g.$$is_boolean || $g == true))) {
                  return self.$t("button", $hash2(["onClick", "className"], {"onClick": ($g = ($j = self).$lambda, $g.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

                  return self.$paste_at_position(i)}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $g).call($j), "className": "btn btn-sm btn-default"}), "paste here")
                } else if (i['$=='](0)) {
                  return nil
                  } else {
                  return self.$t("button", $hash2(["onClick", "className"], {"onClick": ($g = ($k = self).$lambda, $g.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this;

                  return self.$init_change_index_position(i)}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12), $g).call($k), "className": "btn btn-sm btn-default"}), "cut")
                }; return nil; })(), self.$t("button", $hash2(["className", "onClick"], {"className": "btn btn-xs btn-danger", "onClick": ($g = ($l = self).$lambda, $g.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;

                return self.$remove_node(i)}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $g).call($l)}), "X"))), self.$t("div", $hash2(["className"], {"className": "node-body"}), (function() {if ((($g = errors = post_node.$node().$errors()['$[]']("general")) !== nil && $g != null && (!$g.$$is_boolean || $g == true))) {
                  return self.$t("div", $hash2(["className"], {"className": "invalid"}), ($g = ($m = errors).$each, $g.$$p = (TMP_14 = function(error){var self = TMP_14.$$s || this;
if (error == null) error = nil;
                  return self.$t("p", $hash2([], {}), error)}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $g).call($m))
                  } else {
                  return nil
                }; return nil; })(), self.$view_node(post_node))), (function() {if (i['$==']($rb_minus(self.$n_state("post").$post_nodes().$data().$length(), 1))) {
                  return self.$controll_toolbar(i)
                  } else {
                  return nil
                }; return nil; })())]}, TMP_8.$$s = self, TMP_8.$$arity = 2, TMP_8), $a).call($f), self.$t("div", $hash2(["className"], {"className": "post-type"}), (function() {if ((($a = x = self.$state().$post().$errors()['$[]']("post_type")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return self.$t("div", $hash2(["className"], {"className": "invalid"}), x)
                } else {
                return nil
              }; return nil; })(), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('SelectFromLabels')), self.$state().$post(), "post_type", $hash2(["parsing_model", "show_value", "url_feed", "show_name", "required_field"], {"parsing_model": $scope.get('PostType'), "show_value": "alt_name", "url_feed": $scope.get('PostType').$url_for_feed(), "show_name": "what this post is about?", "required_field": true}))), self.$t("div", $hash2(["className"], {"className": "tag-controll row"}), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('MultipleSelectAutocompleWithTypeInput')), self.$state().$post(), "post_tags", $hash2(["optional_field", "show_attribute", "parsing_model", "autocomplete_url"], {"optional_field": true, "show_attribute": "name", "parsing_model": "PostTag", "autocomplete_url": "/post_tags/autocompletes"})))]
              } else {
              return nil
            }; return nil; })());
          }, TMP_15.$$arity = 0);

          Opal.defn(self, '$controll_toolbar', TMP_24 = function ːcontroll_toolbar(position) {
            var $a, $b, $c, TMP_16, TMP_17, $d, TMP_18, $e, TMP_19, $f, TMP_20, $g, TMP_21, $h, TMP_22, $i, TMP_23, self = this, nodes = nil;

            nodes = self.$n_state("post").$post_nodes();
            return self.$t("div", $hash2(["className"], {"className": "controll-toolbar"}), (function() {if ((($a = ($b = (nodes['$[]'](position).$try("node_type")['$==']("PostText"))['$!'](), $b !== false && $b !== nil && $b != null ?((($c = position['$=='](-1)) ? nodes['$[]'](position).$try("node_type")['$==']("PostText") : position['$=='](-1)))['$!']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this;

              return self.$init_post_text_addition(position)}, TMP_16.$$s = self, TMP_16.$$arity = 0, TMP_16), $a).call($b), "className": "btn btn-sm btn-default"}), "add text")
              } else {
              return nil
            }; return nil; })(), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this;

            return self.$init_image_insertion(position)}, TMP_17.$$s = self, TMP_17.$$arity = 0, TMP_17), $a).call($c), "className": "btn btn-sm btn-default"}), "add image"), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($d = self).$lambda, $a.$$p = (TMP_18 = function(){var self = TMP_18.$$s || this;

            return self.$init_gif_insertion(position)}, TMP_18.$$s = self, TMP_18.$$arity = 0, TMP_18), $a).call($d), "className": "btn btn-sm btn-default"}), "add gif"), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($e = self).$lambda, $a.$$p = (TMP_19 = function(){var self = TMP_19.$$s || this;

            return self.$init_video_embed(position)}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19), $a).call($e), "className": "btn btn-sm btn-default"}), "embed video"), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($f = self).$lambda, $a.$$p = (TMP_20 = function(){var self = TMP_20.$$s || this;

            return self.$init_vote_poll_insertion(position)}, TMP_20.$$s = self, TMP_20.$$arity = 0, TMP_20), $a).call($f), "className": "btn btn-sm btn-default"}), "add voting"), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($g = self).$lambda, $a.$$p = (TMP_21 = function(){var self = TMP_21.$$s || this;

            return self.$init_post_test_insertion(position)}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21), $a).call($g), "className": "btn btn-sm btn-default"}), "add test"), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($h = self).$lambda, $a.$$p = (TMP_22 = function(){var self = TMP_22.$$s || this;

            return self.$init_personality_test_insertion(position)}, TMP_22.$$s = self, TMP_22.$$arity = 0, TMP_22), $a).call($h), "className": "btn btn-sm btn-default"}), "add personality test"), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($i = self).$lambda, $a.$$p = (TMP_23 = function(){var self = TMP_23.$$s || this;

            return self.$init_media_story_insertion(position)}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23), $a).call($i), "className": "btn btn-sm btn-default"}), "add media story"));
          }, TMP_24.$$arity = 1);

          Opal.defn(self, '$set_insert_toolbar_before', TMP_25 = function ːset_insert_toolbar_before(index) {
            var self = this;

            return self.$set_state($hash2(["insert_toolbar_before"], {"insert_toolbar_before": $hash(index, true)}));
          }, TMP_25.$$arity = 1);

          Opal.defn(self, '$clear_insert_toolbar_before', TMP_26 = function ːclear_insert_toolbar_before(index) {
            var self = this, insert_toolbar_before = nil;

            insert_toolbar_before = $hash2([], {});
            return self.$set_state($hash2(["insert_toolbar_before"], {"insert_toolbar_before": insert_toolbar_before}));
          }, TMP_26.$$arity = 1);

          Opal.defn(self, '$init_post_text_addition', TMP_29 = function ːinit_post_text_addition(position) {
            var $a, $b, TMP_27, $c, TMP_28, self = this;

            self.$clear_insert_toolbar_before(self.current_edited_node_position);
            self.current_edited_node_position = position;
            return self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('PostTexts'))).$$scope.get('New')), $hash2(["on_done", "on_collect"], {"on_done": ($a = ($b = self).$lambda, $a.$$p = (TMP_27 = function(post_node){var self = TMP_27.$$s || this;
if (post_node == null) post_node = nil;
            return self.$insert_node(post_node)}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27), $a).call($b), "on_collect": ($a = ($c = self).$lambda, $a.$$p = (TMP_28 = function(post_text, component){var self = TMP_28.$$s || this;
if (post_text == null) post_text = nil;if (component == null) component = nil;
            return self.$generic_create_node(post_text, component)}, TMP_28.$$s = self, TMP_28.$$arity = 2, TMP_28), $a).call($c)})));
          }, TMP_29.$$arity = 1);

          Opal.defn(self, '$init_image_insertion', TMP_32 = function ːinit_image_insertion(position) {
            var $a, $b, TMP_30, $c, TMP_31, self = this;

            self.$clear_insert_toolbar_before(self.current_edited_node_position);
            self.current_edited_node_position = position;
            return self.$modal_open(nil, self.$t("div", $hash2([], {}), self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('New')), $hash2(["on_image_selected", "post_images", "on_collect"], {"on_image_selected": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_30 = function(image){var self = TMP_30.$$s || this;
if (image == null) image = nil;
            return self.$insert_image_component(image)}, TMP_30.$$s = self, TMP_30.$$arity = 1, TMP_30), $a).call($b)), "post_images": [], "on_collect": ($a = ($c = self).$lambda, $a.$$p = (TMP_31 = function(post_image, component){var self = TMP_31.$$s || this;
if (post_image == null) post_image = nil;if (component == null) component = nil;
            return self.$generic_create_node(post_image, component)}, TMP_31.$$s = self, TMP_31.$$arity = 2, TMP_31), $a).call($c)}))));
          }, TMP_32.$$arity = 1);

          Opal.defn(self, '$init_video_embed', TMP_34 = function ːinit_video_embed(position) {
            var $a, $b, TMP_33, self = this, video_embed = nil;

            self.$clear_insert_toolbar_before(self.current_edited_node_position);
            self.current_edited_node_position = position;
            video_embed = $scope.get('VideoEmbed').$new();
            return self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('VideoEmbeds'))).$$scope.get('New')), $hash2(["video_embed", "on_collect"], {"video_embed": video_embed, "on_collect": ($a = ($b = self).$lambda, $a.$$p = (TMP_33 = function(video_embed, component){var self = TMP_33.$$s || this;
if (video_embed == null) video_embed = nil;if (component == null) component = nil;
            return self.$generic_create_node(video_embed, component)}, TMP_33.$$s = self, TMP_33.$$arity = 2, TMP_33), $a).call($b)})));
          }, TMP_34.$$arity = 1);

          Opal.defn(self, '$init_vote_poll_insertion', TMP_36 = function ːinit_vote_poll_insertion(position) {
            var $a, $b, TMP_35, self = this, post_vote_poll = nil;

            self.$clear_insert_toolbar_before(self.current_edited_node_position);
            self.current_edited_node_position = position;
            post_vote_poll = $scope.get('PostVotePoll').$new();
            return self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('VotePolls'))).$$scope.get('New')), $hash2(["post_vote_poll", "on_collect"], {"post_vote_poll": post_vote_poll, "on_collect": ($a = ($b = self).$lambda, $a.$$p = (TMP_35 = function(post_vote_poll, component){var self = TMP_35.$$s || this;
if (post_vote_poll == null) post_vote_poll = nil;if (component == null) component = nil;
            return self.$generic_create_node(post_vote_poll, component)}, TMP_35.$$s = self, TMP_35.$$arity = 2, TMP_35), $a).call($b)})));
          }, TMP_36.$$arity = 1);

          Opal.defn(self, '$init_post_test_insertion', TMP_38 = function ːinit_post_test_insertion(position) {
            var $a, $b, TMP_37, self = this, post_test = nil;

            self.$clear_insert_toolbar_before(self.current_edited_node_position);
            self.current_edited_node_position = position;
            post_test = $scope.get('PostTest').$new();
            return self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('PostTests'))).$$scope.get('New')), $hash2(["post_test", "on_collect"], {"post_test": post_test, "on_collect": ($a = ($b = self).$lambda, $a.$$p = (TMP_37 = function(post_test, component){var self = TMP_37.$$s || this;
if (post_test == null) post_test = nil;if (component == null) component = nil;
            return self.$generic_create_node(post_test, component)}, TMP_37.$$s = self, TMP_37.$$arity = 2, TMP_37), $a).call($b)})));
          }, TMP_38.$$arity = 1);

          Opal.defn(self, '$generic_create_node', TMP_40 = function ːgeneric_create_node(node, component) {
            var $a, $b, TMP_39, self = this;

            return ($a = ($b = node.$create($hash2(["namespace", "extra_params", "yield_response"], {"namespace": "staff", "extra_params": $hash2(["post_id", "position"], {"post_id": self.$n_state("post").$id(), "position": $rb_plus(self.current_edited_node_position, 1)}), "yield_response": true}))).$then, $a.$$p = (TMP_39 = function(response){var self = TMP_39.$$s || this, $c, post_node = nil, e = nil;
if (response == null) response = nil;
            try {
                post_node = self.$parse_post_node_set_node_validate(response.$json(), node);
                if ((($c = post_node.$node()['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                  if ((($c = node['$is_a?']($scope.get('PostImage'))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                    return component.$update_when_has_errors()
                    } else {
                    return component.$force_update()
                  }
                  } else {
                  self.$modal_close();
                  return self.$insert_created_post_node(post_node);
                };
              } catch ($err) {
                if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                  try {
                    return console.log(e);
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              }}, TMP_39.$$s = self, TMP_39.$$arity = 1, TMP_39), $a).call($b);
          }, TMP_40.$$arity = 2);

          Opal.defn(self, '$parse_post_node_set_node_validate', TMP_41 = function ːparse_post_node_set_node_validate(json, node) {
            var $a, $b, self = this, post_node = nil;

            post_node = $scope.get('PostNode').$parse(json);
            (($a = [post_node.$node().$attributes()]), $b = node, $b['$attributes='].apply($b, $a), $a[$a.length-1]);
            (($a = [node]), $b = post_node, $b['$node='].apply($b, $a), $a[$a.length-1]);
            post_node.$validate();
            return post_node;
          }, TMP_41.$$arity = 2);

          Opal.defn(self, '$insert_created_post_node', TMP_42 = function ːinsert_created_post_node(post_node) {
            var self = this;

            self.$clear_insert_toolbar_before(self.current_edited_node_position);
            self.$n_state("post").$post_nodes().$data().$insert($rb_plus(self.current_edited_node_position, 1), post_node);
            self.current_edited_node_position = false;
            return self.$set_state($hash2(["post"], {"post": self.$n_state("post")}));
          }, TMP_42.$$arity = 1);

          Opal.defn(self, '$init_change_index_position', TMP_43 = function ːinit_change_index_position(position) {
            var self = this;

            return self.$set_state($hash2(["changing_position", "element_to_change_position"], {"changing_position": true, "element_to_change_position": position}));
          }, TMP_43.$$arity = 1);

          Opal.defn(self, '$paste_at_position', TMP_44 = function ːpaste_at_position(position) {
            var self = this, node = nil;

            node = self.$nodes().$data().$delete_at(self.$state().$element_to_change_position());
            self.$nodes().$data().$insert(position, node);
            return self.$set_state($hash2(["post", "changing_position", "element_to_change_position"], {"post": self.$state().$post(), "changing_position": false, "element_to_change_position": false}));
          }, TMP_44.$$arity = 1);

          Opal.defn(self, '$view_node', TMP_45 = function ːview_node(post_node) {
            var self = this, node = nil, $case = nil;

            node = post_node.$node();
            return (function() {$case = node;if ($scope.get('PostText')['$===']($case)) {return self.$show_text_node(post_node)}else if ($scope.get('PostImage')['$===']($case)) {return self.$show_image_node(node)}else if ($scope.get('PostGif')['$===']($case)) {return self.$show_gif_node(node)}else if ($scope.get('VideoEmbed')['$===']($case)) {return self.$show_video_embed(node)}else if ($scope.get('PostVotePoll')['$===']($case)) {return self.$show_post_vote_poll(node)}else if ($scope.get('PostTest')['$===']($case)) {return self.$show_post_test(node)}else if ($scope.get('MediaStory')['$===']($case)) {return self.$show_media_story(node)}else { return nil }})();
          }, TMP_45.$$arity = 1);

          Opal.defn(self, '$show_text_node', TMP_46 = function ːshow_text_node(post_node) {
            var $a, self = this, node = nil;

            node = post_node.$node();
            if ((($a = node.$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t((((($scope.get('Components')).$$scope.get('PostTexts'))).$$scope.get('Edit')), $hash2(["post_text", "post_node"], {"post_text": node, "post_node": post_node}))
              } else {
              return self.$t("div", $hash2([], {}), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('WysiTextarea')), self.$post_text(), "content", $hash2(["record_changes"], {"record_changes": true})))
            };
          }, TMP_46.$$arity = 1);

          Opal.defn(self, '$show_image_node', TMP_47 = function ːshow_image_node(image_node) {
            var self = this;

            return self.$t("div", $hash2([], {}), self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": image_node})));
          }, TMP_47.$$arity = 1);

          Opal.defn(self, '$show_gif_node', TMP_48 = function ːshow_gif_node(post_gif) {
            var self = this;

            return self.$t("div", $hash2([], {}), self.$t((((($scope.get('Components')).$$scope.get('PostGifs'))).$$scope.get('Show')), $hash2(["post_gif"], {"post_gif": post_gif})));
          }, TMP_48.$$arity = 1);

          Opal.defn(self, '$show_video_embed', TMP_49 = function ːshow_video_embed(video_embed) {
            var self = this;

            return self.$t((((($scope.get('Components')).$$scope.get('VideoEmbeds'))).$$scope.get('Show')), $hash2(["video_embed"], {"video_embed": video_embed}));
          }, TMP_49.$$arity = 1);

          Opal.defn(self, '$show_post_vote_poll', TMP_50 = function ːshow_post_vote_poll(post_vote_poll) {
            var self = this;

            return self.$t((((($scope.get('Components')).$$scope.get('VotePolls'))).$$scope.get('Edit')), $hash2(["vote_poll"], {"vote_poll": post_vote_poll}));
          }, TMP_50.$$arity = 1);

          Opal.defn(self, '$post_vote_poll_edit_done', TMP_51 = function ːpost_vote_poll_edit_done(post_test) {
            var self = this;

            self.$modal_close();
            return self.$force_update();
          }, TMP_51.$$arity = 1);

          Opal.defn(self, '$show_post_test', TMP_52 = function ːshow_post_test(post_test) {
            var self = this;

            return self.$t((((($scope.get('Components')).$$scope.get('PostTests'))).$$scope.get('Edit')), $hash2(["post_test"], {"post_test": post_test}));
          }, TMP_52.$$arity = 1);

          Opal.defn(self, '$open_for_edit_post_test', TMP_54 = function ːopen_for_edit_post_test(post_test) {
            var $a, $b, TMP_53, self = this;

            return self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('PostTests'))).$$scope.get('Edit')), $hash2(["post_test", "on_cancel"], {"post_test": post_test, "on_cancel": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_53 = function(_post_test){var self = TMP_53.$$s || this;
if (_post_test == null) _post_test = nil;
            return self.$post_test_edit_done(_post_test)}, TMP_53.$$s = self, TMP_53.$$arity = 1, TMP_53), $a).call($b))})));
          }, TMP_54.$$arity = 1);

          Opal.defn(self, '$post_test_edit_done', TMP_55 = function ːpost_test_edit_done(post_test) {
            var self = this;

            self.$modal_close();
            return self.$force_update();
          }, TMP_55.$$arity = 1);

          Opal.defn(self, '$show_media_story', TMP_57 = function ːshow_media_story(media_story) {
            var $a, $b, TMP_56, self = this;

            return self.$t("div", $hash2([], {}), self.$t((((($scope.get('Components')).$$scope.get('MediaStories'))).$$scope.get('Show')), $hash2(["media_story"], {"media_story": media_story})), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_56 = function(){var self = TMP_56.$$s || this;

            return self.$open_for_edit_media_story(media_story)}, TMP_56.$$s = self, TMP_56.$$arity = 0, TMP_56), $a).call($b)})));
          }, TMP_57.$$arity = 1);

          Opal.defn(self, '$open_for_edit_media_story', TMP_58 = function ːopen_for_edit_media_story(media_story) {
            var self = this;

            return self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('MediaStories'))).$$scope.get('Edit')), $hash2(["media_story"], {"media_story": media_story})));
          }, TMP_58.$$arity = 1);

          Opal.defn(self, '$handle_title_change', TMP_59 = function ːhandle_title_change() {
            var $a, self = this, post = nil;

            post = self.$n_state("post");
            if ((($a = post['$attribute_was_changed?']("title")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              post.$record_change_for_attribute("title");
              return self.$force_update();
            };
          }, TMP_59.$$arity = 0);

          Opal.defn(self, '$update_title', TMP_61 = function ːupdate_title() {
            var $a, $b, TMP_60, self = this, post = nil;

            post = self.$n_state("post");
            self.$collect_inputs($hash2(["form_model", "namespace"], {"form_model": "post", "namespace": "title"}));
            return ($a = ($b = post.$update_title()).$then, $a.$$p = (TMP_60 = function(returned_post){var self = TMP_60.$$s || this, $c, $d, errors = nil;
if (returned_post == null) returned_post = nil;
            errors = returned_post.$errors()['$[]']("title");
              (($c = [returned_post.$title()]), $d = post, $d['$title='].apply($d, $c), $c[$c.length-1]);
              if (errors !== false && errors !== nil && errors != null) {
                post.$errors()['$[]=']("title", errors)
                } else {
                post.$errors().$delete("title")
              };
              post.$clear_change_record_for_attribute("title");
              return self.$force_update();}, TMP_60.$$s = self, TMP_60.$$arity = 1, TMP_60), $a).call($b);
          }, TMP_61.$$arity = 0);

          Opal.defn(self, '$handle_karma_change', TMP_62 = function ːhandle_karma_change() {
            var $a, self = this, karma = nil;

            karma = self.$n_state("post").$post_karma();
            if ((($a = karma['$attribute_was_changed?']("count")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              karma.$record_change_for_attribute("count");
              return self.$force_update();
            };
          }, TMP_62.$$arity = 0);

          Opal.defn(self, '$change_karma', TMP_64 = function ːchange_karma() {
            var $a, $b, TMP_63, self = this;

            self.$collect_inputs($hash2(["form_model", "namespace", "component"], {"form_model": "post", "namespace": "karma_count", "component": self}));
            return ($a = ($b = self.$state().$post().$post_karma().$update_count($hash2(["namespace"], {"namespace": "staff/user_submitted"}))).$then, $a.$$p = (TMP_63 = function(post_karma){var self = TMP_63.$$s || this, $c, $d;
if (post_karma == null) post_karma = nil;
            if ((($c = post_karma['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                (($c = [post_karma.$errors()]), $d = self.$state().$post().$post_karma(), $d['$errors='].apply($d, $c), $c[$c.length-1]);
                return self.$set_state($hash2(["post"], {"post": self.$state().$post()}));
                } else {
                (($c = [post_karma.$count()]), $d = self.$state().$post().$post_karma(), $d['$count='].apply($d, $c), $c[$c.length-1]);
                self.$state().$post().$post_karma().$clear_change_record_for_attribute("count");
                return self.$force_update();
              }}, TMP_63.$$s = self, TMP_63.$$arity = 1, TMP_63), $a).call($b);
          }, TMP_64.$$arity = 0);

          return (Opal.defn(self, '$remove_node', TMP_66 = function ːremove_node(i) {
            var $a, $b, TMP_65, self = this, post_node = nil;

            post_node = self.$n_state("post").$post_nodes().$data()['$[]'](i);
            return ($a = ($b = post_node.$node().$destroy($hash2(["namespace", "extra_params"], {"namespace": "staff", "extra_params": $hash2(["post_node_id"], {"post_node_id": post_node.$id()})}))).$then, $a.$$p = (TMP_65 = function(node){var self = TMP_65.$$s || this, $c, $d, insert_toolbar_before = nil, e = nil;
if (node == null) node = nil;
            try {
                if ((($c = node['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                  (($c = [node.$errors()]), $d = post_node.$node(), $d['$errors='].apply($d, $c), $c[$c.length-1])
                  } else {
                  post_node.$node().$reset_errors();
                  insert_toolbar_before = self.$n_state("insert_toolbar_before");
                  insert_toolbar_before.$delete(i);
                  self.$n_state("post").$post_nodes().$data().$delete_at(i);
                };
                return self.$set_state($hash2(["post", "insert_toolbar_before"], {"post": self.$state().$post(), "insert_toolbar_before": self.$n_state("insert_toolbar_before")}));
              } catch ($err) {
                if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                  try {
                    return console.log(e);
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              }}, TMP_65.$$s = self, TMP_65.$$arity = 1, TMP_65), $a).call($b);
          }, TMP_66.$$arity = 1), nil) && 'remove_node';
        })($scope.base, $scope.get('RW'))
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/staff/user_submitted/posts/edit_title"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$post', '$props', '$t', '$input', '$form_model', '$state', '$title', '$collect_inputs', '$!=', '$[]=', '$attributes', '$[]']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Staff, self = $Staff = $module($base, 'Staff');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $UserSubmitted, self = $UserSubmitted = $module($base, 'UserSubmitted');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base) {
          var $Posts, self = $Posts = $module($base, 'Posts');

          var def = self.$$proto, $scope = self.$$scope;

          (function($base, $super) {
            function $EditTitle(){};
            var self = $EditTitle = $klass($base, $super, 'EditTitle', $EditTitle);

            var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

            self.$expose();

            self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

            Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
              var self = this;

              return $hash2(["form_model"], {"form_model": self.$props().$post()});
            }, TMP_1.$$arity = 0);

            Opal.defn(self, '$render', TMP_2 = function ːrender() {
              var self = this;

              return self.$t("div", $hash2([], {}), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('Input')), self.$state().$form_model(), "title", $hash2([], {})));
            }, TMP_2.$$arity = 0);

            return (Opal.defn(self, '$reap_inputs', TMP_3 = function ːreap_inputs() {
              var $a, $b, $c, self = this, current_title = nil;

              current_title = self.$state().$form_model().$title();
              self.$collect_inputs($hash2(["form_model"], {"form_model": "form_model"}));
              if ((($a = current_title['$!='](self.$state().$form_model().$title())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return (($a = "changed", $b = self.$state().$form_model().$attributes(), ((($c = $b['$[]']($a)) !== false && $c !== nil && $c != null) ? $c : $b['$[]=']($a, $hash2([], {})))))['$[]=']("title", $hash2(["from", "to"], {"from": current_title, "to": self.$state().$form_model().$title()}))
                } else {
                return nil
              };
            }, TMP_3.$$arity = 0), nil) && 'reap_inputs';
          })($scope.base, $scope.get('RW'))
        })($scope.base)
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/staff/user_submitted/posts/index"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$new', '$fetch_and_set_posts', '$perform_search', '$t', '$modal', '$input', '$post_search_object', '$state', '$lambda', '$map', '$title', '$link_to', '$id', '$init_post_editing', '$[]', '$attributes', '$unpublish_post', '$publish_post', '$render_post_node_depending_on_type', '$node', '$post_nodes', '$count', '$post_karma', '$current_user_pkt_or_new', '$event', '$pkt_changed', '$posts', '$next_page_infinite_scroll_beacon', '$force_update', '$===', '$destroy_infinite_scroll_beacon', '$+', '$pagination_current_page', '$count=', '$amount', '$set_state', '$then', '$[]=', '$p', '$set_published', '$set_unpublished', '$collect_inputs', '$extract_pagination', '$uniq!', '$data', '$==', '$data=', '$empty?', '$listen_to_infinite_scroll_beacon', '$per_page', '$modal_open', '$on_edit_done', '$modal_close', '$each', '$attributes=']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Staff, self = $Staff = $module($base, 'Staff');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $UserSubmitted, self = $UserSubmitted = $module($base, 'UserSubmitted');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base) {
          var $Posts, self = $Posts = $module($base, 'Posts');

          var def = self.$$proto, $scope = self.$$scope;

          (function($base, $super) {
            function $Index(){};
            var self = $Index = $klass($base, $super, 'Index', $Index);

            var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_17, TMP_19, TMP_22, TMP_24, TMP_26;

            def._preselected = def._select_options = nil;
            self.$expose();

            self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

            self.$include((($scope.get('Plugins')).$$scope.get('InfiniteScrollable')));

            Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
              var self = this;

              return $hash2(["post_search_object", "posts", "per_page"], {"post_search_object": $scope.get('Post').$new(), "posts": $scope.get('ModelCollection').$new(), "per_page": 10});
            }, TMP_1.$$arity = 0);

            Opal.defn(self, '$component_did_mount', TMP_2 = function ːcomponent_did_mount() {
              var self = this;

              return self.$fetch_and_set_posts();
            }, TMP_2.$$arity = 0);

            Opal.defn(self, '$fetch_and_set_posts', TMP_3 = function ːfetch_and_set_posts() {
              var self = this;

              return self.$perform_search($hash2(["page"], {"page": 1}));
            }, TMP_3.$$arity = 0);

            Opal.defn(self, '$render', TMP_11 = function ːrender() {
              var $a, $b, TMP_4, $c, TMP_5, self = this, _s_o = nil;

              return self.$t("div", $hash2([], {}), self.$modal(), self.$t("div", $hash2([], {}), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('Input')), self.$state().$post_search_object(), "fulltext", $hash2(["namespace", "show_name"], {"namespace": "search_object", "show_name": "fulltext search"})), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('Input')), self.$state().$post_search_object(), "title", $hash2(["namespace", "show_name"], {"namespace": "search_object", "show_name": "search by title"})), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('PlainCheckbox')), self.$state().$post_search_object(), "published", $hash2(["namespace", "show_name"], {"namespace": "search_object", "show_name": "search published"})), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('PlainCheckbox')), self.$state().$post_search_object(), "unpublished", $hash2(["namespace", "show_name"], {"namespace": "search_object", "show_name": "search unpublished"})), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('Input')), self.$state().$post_search_object(), "by_user_name", $hash2(["namespace", "show_name"], {"namespace": "search_object", "show_name": "by user name"})), (_s_o = (((($scope.get('Forms')).$$scope.get('Services'))).$$scope.get('SelectOption')), ((($a = self._preselected) !== false && $a !== nil && $a != null) ? $a : self._preselected = _s_o.$new("desc", "desc")), self._select_options = [self._preselected, _s_o.$new("asc", "asc")], self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('PlainSingleSelect')), self.$state().$post_search_object(), "order", $hash2(["namespace", "show_name", "select_options", "preselected_option"], {"namespace": "search_object", "show_name": "set order", "select_options": self._select_options, "preselected_option": self._preselected}))), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

              return self.$perform_search($hash2(["page", "flush"], {"page": 1, "flush": true}))}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($b)}), "search")), ($a = ($c = self.$state().$posts()).$map, $a.$$p = (TMP_5 = function(post){var self = TMP_5.$$s || this, $d, $e, TMP_6, $f, TMP_7, $g, TMP_8, $h, TMP_9, $i, TMP_10;
if (post == null) post = nil;
              return self.$t("div", $hash2([], {}), self.$t("div", $hash2([], {}), (function() {if ((($d = post.$title()) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                  return self.$t("h1", $hash2([], {}), self.$link_to("" + (post.$title()) + " # " + (post.$id()), "/posts/" + (post.$id())))
                  } else {
                  return nil
                }; return nil; })(), self.$t("button", $hash2(["onClick"], {"onClick": ($d = ($e = self).$lambda, $d.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

                return self.$init_post_editing(post)}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $d).call($e)}), "edit"), (function() {if ((($d = post.$attributes()['$[]']("published")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                  return self.$t("div", $hash2([], {}), "published on " + (post.$attributes()['$[]']("published_at")), self.$t("button", $hash2(["onClick"], {"onClick": ($d = ($f = self).$lambda, $d.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

                  return self.$unpublish_post(post)}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $d).call($f)}), "unpublish this"))
                  } else {
                  return self.$t("div", $hash2([], {}), self.$t("button", $hash2(["onClick"], {"onClick": ($d = ($g = self).$lambda, $d.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

                  return self.$publish_post(post)}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $d).call($g)}), "publish this"))
                }; return nil; })(), ($d = ($h = post.$post_nodes()).$map, $d.$$p = (TMP_9 = function(post_node){var self = TMP_9.$$s || this;
if (post_node == null) post_node = nil;
                return self.$render_post_node_depending_on_type(post_node.$node())}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $d).call($h)), self.$t("div", $hash2([], {}), self.$t("p", $hash2([], {}), "post karma: " + (post.$post_karma().$count())), self.$t((((($scope.get('Components')).$$scope.get('PostKarmaTransactions'))).$$scope.get('New')), $hash2(["post_karma", "pkt", "pkt_changed"], {"post_karma": post.$post_karma(), "pkt": post.$post_karma().$current_user_pkt_or_new(), "pkt_changed": self.$event(($d = ($i = self).$lambda, $d.$$p = (TMP_10 = function(pkt){var self = TMP_10.$$s || this;
if (pkt == null) pkt = nil;
                return self.$pkt_changed(pkt)}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10), $d).call($i))}))))}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($c), self.$next_page_infinite_scroll_beacon());
            }, TMP_11.$$arity = 0);

            Opal.defn(self, '$pkt_changed', TMP_12 = function ːpkt_changed(pkt) {
              var self = this;

              return self.$force_update();
            }, TMP_12.$$arity = 1);

            Opal.defn(self, '$render_post_node_depending_on_type', TMP_13 = function ːrender_post_node_depending_on_type(node) {
              var self = this, $case = nil;

              return (function() {$case = node;if ($scope.get('PostText')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('PostTexts'))).$$scope.get('Show')), $hash2(["post_text"], {"post_text": node}))}else if ($scope.get('PostImage')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": node}))}else if ($scope.get('PostGif')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('PostGifs'))).$$scope.get('Show')), $hash2(["post_gif"], {"post_gif": node}))}else if ($scope.get('VideoEmbed')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('VideoEmbeds'))).$$scope.get('Show')), $hash2(["video_embed"], {"video_embed": node}))}else { return nil }})();
            }, TMP_13.$$arity = 1);

            Opal.defn(self, '$handle_infinite_croll_beacon_reach', TMP_14 = function ːhandle_infinite_croll_beacon_reach() {
              var self = this;

              self.$destroy_infinite_scroll_beacon();
              return self.$perform_search($hash2(["page", "flush"], {"page": ($rb_plus(self.$pagination_current_page(), 1)), "flush": false}));
            }, TMP_14.$$arity = 0);

            Opal.defn(self, '$on_post_karma_transaction_created', TMP_15 = function ːon_post_karma_transaction_created(p_k_t, post) {
              var $a, self = this;

              ($a = post.$post_karma(), $a['$count=']($rb_plus($a.$count(), p_k_t.$amount())));
              return self.$set_state($hash2(["posts"], {"posts": self.$state().$posts()}));
            }, TMP_15.$$arity = 2);

            Opal.defn(self, '$publish_post', TMP_17 = function ːpublish_post(post) {
              var $a, $b, TMP_16, self = this;

              return ($a = ($b = post.$set_published($hash2(["namespace", "wilds"], {"namespace": "staff/user_submitted/unpublished/", "wilds": $hash2(["id"], {"id": post.$id()})}))).$then, $a.$$p = (TMP_16 = function(_post){var self = TMP_16.$$s || this, e = nil;
if (_post == null) _post = nil;
              try {
                  post.$attributes()['$[]=']("published", true);
                  post.$attributes()['$[]=']("published_at", _post['$[]']("post")['$[]']("published_at"));
                  return self.$set_state($hash2(["posts"], {"posts": self.$state().$posts()}));
                } catch ($err) {
                  if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                    try {
                      return self.$p(e)
                    } finally { Opal.pop_exception() }
                  } else { throw $err; }
                }}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $a).call($b);
            }, TMP_17.$$arity = 1);

            Opal.defn(self, '$unpublish_post', TMP_19 = function ːunpublish_post(post) {
              var $a, $b, TMP_18, self = this;

              return ($a = ($b = post.$set_unpublished($hash2(["namespace", "wilds"], {"namespace": "staff/user_submitted/unpublished", "wilds": $hash2(["id"], {"id": post.$id()})}))).$then, $a.$$p = (TMP_18 = function(_post){var self = TMP_18.$$s || this;
if (_post == null) _post = nil;
              post.$attributes()['$[]=']("published", false);
                post.$attributes()['$[]=']("published_at", nil);
                return self.$set_state($hash2(["posts"], {"posts": self.$state().$posts()}));}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18), $a).call($b);
            }, TMP_19.$$arity = 1);

            Opal.defn(self, '$perform_search', TMP_22 = function ːperform_search(options) {
              var $a, $b, TMP_20, self = this;

              if (options == null) {
                options = $hash2([], {});
              }
              self.$collect_inputs($hash2(["namespace", "form_model"], {"namespace": "search_object", "form_model": "post_search_object"}));
              return ($a = ($b = self.$state().$post_search_object().$perform_search($hash2(["namespace", "extra_params"], {"namespace": "staff", "extra_params": $hash2(["page", "per_page"], {"page": options['$[]']("page"), "per_page": self.$state().$per_page()})}))).$then, $a.$$p = (TMP_20 = function(posts){var self = TMP_20.$$s || this, $c, $d, TMP_21, $e, e = nil;
if (posts == null) posts = nil;
              try {
                  self.$extract_pagination(posts);
                  ($c = ($d = posts.$data())['$uniq!'], $c.$$p = (TMP_21 = function(post){var self = TMP_21.$$s || this;
if (post == null) post = nil;
                  return post.$id()}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21), $c).call($d);
                  if (options['$[]']("flush")['$=='](true)) {
                    (($c = [posts.$data()]), $e = self.$state().$posts(), $e['$data='].apply($e, $c), $c[$c.length-1])
                    } else {
                    ($c = self.$state().$posts(), $c['$data=']($rb_plus($c.$data(), posts.$data())))
                  };
                  self.$set_state($hash2(["posts"], {"posts": self.$state().$posts()}));
                  if ((($c = posts.$data()['$empty?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                    return nil
                    } else {
                    return self.$listen_to_infinite_scroll_beacon()
                  };
                } catch ($err) {
                  if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                    try {
                      return self.$p(e)
                    } finally { Opal.pop_exception() }
                  } else { throw $err; }
                }}, TMP_20.$$s = self, TMP_20.$$arity = 1, TMP_20), $a).call($b);
            }, TMP_22.$$arity = -1);

            Opal.defn(self, '$init_post_editing', TMP_24 = function ːinit_post_editing(post) {
              var $a, $b, TMP_23, self = this;

              return self.$modal_open("editing post # " + (post.$id()), self.$t((((((($scope.get('Components')).$$scope.get('Staff'))).$$scope.get('Posts'))).$$scope.get('Edit')), $hash2(["post", "on_edit_done"], {"post": post, "on_edit_done": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_23 = function(post){var self = TMP_23.$$s || this;
if (post == null) post = nil;
              return self.$on_edit_done(post)}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23), $a).call($b))})));
            }, TMP_24.$$arity = 1);

            return (Opal.defn(self, '$on_edit_done', TMP_26 = function ːon_edit_done(post) {
              var $a, $b, TMP_25, self = this;

              self.$modal_close();
              (function(){var $brk = Opal.new_brk(); try {return ($a = ($b = self.$state().$posts()).$each, $a.$$p = (TMP_25 = function(_post){var self = TMP_25.$$s || this, $c, $d;
if (_post == null) _post = nil;
              if (_post.$id()['$=='](post.$id())) {
                  self.$p("found");
                  (($c = [post.$attributes()]), $d = _post, $d['$attributes='].apply($d, $c), $c[$c.length-1]);
                  
                  Opal.brk(nil, $brk);
                  } else {
                  return nil
                }}, TMP_25.$$s = self, TMP_25.$$brk = $brk, TMP_25.$$arity = 1, TMP_25), $a).call($b)
              } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
              return self.$set_state($hash2(["posts"], {"posts": self.$state().$posts()}));
            }, TMP_26.$$arity = 1), nil) && 'on_edit_done';
          })($scope.base, $scope.get('RW'))
        })($scope.base)
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/staff/user_submitted/posts/main"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$t', '$children']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Staff, self = $Staff = $module($base, 'Staff');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $UserSubmitted, self = $UserSubmitted = $module($base, 'UserSubmitted');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base) {
          var $Posts, self = $Posts = $module($base, 'Posts');

          var def = self.$$proto, $scope = self.$$scope;

          (function($base, $super) {
            function $Main(){};
            var self = $Main = $klass($base, $super, 'Main', $Main);

            var def = self.$$proto, $scope = self.$$scope, TMP_1;

            self.$expose();

            return (Opal.defn(self, '$render', TMP_1 = function ːrender() {
              var self = this;

              return self.$t("div", $hash2([], {}), self.$children());
            }, TMP_1.$$arity = 0), nil) && 'render';
          })($scope.base, $scope.get('RW'))
        })($scope.base)
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/subtititles/create_individual"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$t', '$lambda', '$read_input', '$set_time_from', '$from', '$n_prop', '$set_time_to', '$to', '$delete', '$n_ref', '$content=', '$force_update', '$from=', '$get_video_current_time', '$to=', '$emit']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Subtitles, self = $Subtitles = $module($base, 'Subtitles');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $CreateIndividual(){};
        var self = $CreateIndividual = $klass($base, $super, 'CreateIndividual', $CreateIndividual);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10;

        self.$expose();

        Opal.defn(self, '$validate_props', TMP_1 = function ːvalidate_props() {
          var self = this;

          return nil;
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$render', TMP_6 = function ːrender() {
          var $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, $e, TMP_5, self = this;

          return self.$t("div", $hash2(["className"], {"className": "row subtitle-individual-create"}), self.$t("input", $hash2(["type", "onChange", "ref"], {"type": "text", "onChange": ($a = ($b = self).$lambda, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

          return self.$read_input()}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($b), "ref": "input"})), self.$t("button", $hash2(["className", "onClick"], {"className": "btn btn-xs", "onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

          return self.$set_time_from()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($c)}), "get time"), self.$t("p", $hash2([], {}), "time_from: " + (self.$n_prop("subtitle").$from())), self.$t("button", $hash2(["className", "onClick"], {"className": "btn btn-xs", "onClick": ($a = ($d = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

          return self.$set_time_to()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($d)}), "get time"), self.$t("p", $hash2([], {}), "time_to: " + (self.$n_prop("subtitle").$to())), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($e = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

          return self.$delete()}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($e)}), "X"));
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$read_input', TMP_7 = function ːread_input() {
          var $a, $b, self = this, value = nil;

          value = self.$n_ref("input")["value"];
          (($a = [value]), $b = self.$n_prop("subtitle"), $b['$content='].apply($b, $a), $a[$a.length-1]);
          return self.$force_update();
        }, TMP_7.$$arity = 0);

        Opal.defn(self, '$set_time_from', TMP_8 = function ːset_time_from() {
          var $a, $b, self = this;

          (($a = [self.$n_prop("owner").$get_video_current_time()]), $b = self.$n_prop("subtitle"), $b['$from='].apply($b, $a), $a[$a.length-1]);
          return self.$force_update();
        }, TMP_8.$$arity = 0);

        Opal.defn(self, '$set_time_to', TMP_9 = function ːset_time_to() {
          var $a, $b, self = this;

          (($a = [self.$n_prop("owner").$get_video_current_time()]), $b = self.$n_prop("subtitle"), $b['$to='].apply($b, $a), $a[$a.length-1]);
          return self.$force_update();
        }, TMP_9.$$arity = 0);

        return (Opal.defn(self, '$delete', TMP_10 = function() {
          var self = this;

          return self.$emit("on_delete", self.$n_prop("subtitle"));
        }, TMP_10.$$arity = 0), nil) && 'delete';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/subtititles/new"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$t', '$post_gif_url', '$n_prop', '$map', '$content', '$n_state', '$lambda', '$add_subtitle', '$submit', '$>', '$length', '$event', '$delete_subtitle', '$create_for_new', '$<<', '$set_state', '$delete', '$attach_listeners_to_video', '$n_ref', '$find_and_render_subtitles', '$map_bserach_subtitles', '$get_video_current_time', '$!=', '$map_bserach', '$from', '$to', '$-', '$then', '$validate', '$has_errors?', '$[]', '$errors', '$subtitles=', '$subtitles', '$p', '$emit', '$add_subtitles', '$id', '$to_json']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Subtitles, self = $Subtitles = $module($base, 'Subtitles');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $New(){};
        var self = $New = $klass($base, $super, 'New', $New);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_17, TMP_19;

        def.video = nil;
        self.$expose();

        Opal.defn(self, '$validate_props', TMP_1 = function ːvalidate_props() {
          var self = this;

          return nil;
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$get_initial_state', TMP_2 = function ːget_initial_state() {
          var self = this;

          return $hash2(["subtitles", "subtitles_to_render", "errors"], {"subtitles": [], "subtitles_to_render": [], "errors": []});
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$render', TMP_9 = function ːrender() {
          var $a, $b, TMP_3, $c, TMP_4, $d, TMP_5, $e, TMP_6, $f, TMP_7, self = this, errors = nil;

          return self.$t("div", $hash2(["className"], {"className": "row subtitles-new"}), self.$t("div", $hash2(["className"], {"className": "col-lg-6"}), self.$t("div", $hash2(["className"], {"className": "video"}), self.$t("video", $hash2(["controls", "ref"], {"controls": true, "ref": "vid"}), self.$t("source", $hash2(["src"], {"src": self.$n_prop("post_gif").$post_gif_url()}))), self.$t("div", $hash2(["className"], {"className": "subtitle-block"}), ($a = ($b = self.$n_state("subtitles_to_render")).$map, $a.$$p = (TMP_3 = function(subtitle){var self = TMP_3.$$s || this;
if (subtitle == null) subtitle = nil;
          return self.$t("p", $hash2(["className"], {"className": "individual-subtitle"}), subtitle.$content())}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b)))), self.$t("div", $hash2(["className"], {"className": "col-lg-6 sandbox"}), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

          return self.$add_subtitle()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($c)}), "add subtitle"), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($d = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

          return self.$submit()}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($d)}), "save subtitles"), (function() {if ((($a = $rb_gt(((errors = self.$n_state("errors"))).$length(), 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("div", $hash2(["className"], {"className": "errors"}), ($a = ($e = errors).$map, $a.$$p = (TMP_6 = function(error){var self = TMP_6.$$s || this;
if (error == null) error = nil;
            return self.$t("p", $hash2([], {}), error)}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($e))
            } else {
            return nil
          }; return nil; })(), ($a = ($f = self.$n_state("subtitles")).$map, $a.$$p = (TMP_7 = function(subtitle){var self = TMP_7.$$s || this, $g, $h, TMP_8;
if (subtitle == null) subtitle = nil;
          return self.$t((((($scope.get('Components')).$$scope.get('Subtitles'))).$$scope.get('CreateIndividual')), $hash2(["subtitle", "owner", "on_delete"], {"subtitle": subtitle, "owner": self, "on_delete": self.$event(($g = ($h = self).$lambda, $g.$$p = (TMP_8 = function(_subtitle){var self = TMP_8.$$s || this;
if (_subtitle == null) _subtitle = nil;
            return self.$delete_subtitle(_subtitle)}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $g).call($h))}))}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($f)));
        }, TMP_9.$$arity = 0);

        Opal.defn(self, '$add_subtitle', TMP_10 = function ːadd_subtitle() {
          var self = this, subtitles = nil, new_sub = nil;

          subtitles = self.$n_state("subtitles");
          new_sub = $scope.get('Subtitle').$create_for_new();
          subtitles['$<<'](new_sub);
          return self.$set_state($hash2(["subtitles"], {"subtitles": subtitles}));
        }, TMP_10.$$arity = 0);

        Opal.defn(self, '$delete_subtitle', TMP_11 = function ːdelete_subtitle(subtitle) {
          var self = this, subtitles = nil;

          subtitles = self.$n_state("subtitles");
          subtitles.$delete(subtitle);
          return self.$set_state($hash2(["subtitles"], {"subtitles": subtitles}));
        }, TMP_11.$$arity = 1);

        Opal.defn(self, '$get_video_current_time', TMP_12 = function ːget_video_current_time() {
          var self = this;

          return self.video["currentTime"];
        }, TMP_12.$$arity = 0);

        Opal.defn(self, '$component_did_mount', TMP_13 = function ːcomponent_did_mount() {
          var self = this;

          return self.$attach_listeners_to_video();
        }, TMP_13.$$arity = 0);

        Opal.defn(self, '$attach_listeners_to_video', TMP_14 = function ːattach_listeners_to_video() {
          var self = this;

          self.video = self.$n_ref("vid");
          

          self.video.ontimeupdate = function(){
            self.$find_and_render_subtitles()
          }

        ;
        }, TMP_14.$$arity = 0);

        Opal.defn(self, '$find_and_render_subtitles', TMP_15 = function ːfind_and_render_subtitles() {
          var $a, self = this, subtitles = nil;

          subtitles = self.$map_bserach_subtitles(self.$get_video_current_time());
          if ((($a = self.$n_state("subtitles_to_render")['$!='](subtitles)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$set_state($hash2(["subtitles_to_render"], {"subtitles_to_render": subtitles}))
            } else {
            return nil
          };
        }, TMP_15.$$arity = 0);

        Opal.defn(self, '$map_bserach_subtitles', TMP_17 = function ːmap_bserach_subtitles(time) {
          var $a, $b, TMP_16, self = this;

          return ($a = ($b = $scope.get('Subtitle')).$map_bserach, $a.$$p = (TMP_16 = function(val){var self = TMP_16.$$s || this;
if (val == null) val = nil;
          
            if (time >= val.$from() && !(time > val.$to())) {
              return true
            } else {
              return false
            }
          ;}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $a).call($b, self.$n_state("subtitles"), time, 0, $rb_minus(self.$n_state("subtitles").$length(), 1), [], false);
        }, TMP_17.$$arity = 1);

        return (Opal.defn(self, '$submit', TMP_19 = function ːsubmit() {
          var $a, $b, TMP_18, self = this;

          return ($a = ($b = self.$n_prop("post_gif").$add_subtitles($hash2(["component", "payload"], {"component": self, "payload": $hash2(["post_gif"], {"post_gif": $hash2(["id", "subtitles"], {"id": self.$n_prop("post_gif").$id(), "subtitles": self.$n_state("subtitles").$to_json()})})}))).$then, $a.$$p = (TMP_18 = function(post_gif){var self = TMP_18.$$s || this, $c, $d, _post_gif = nil, e = nil;
if (post_gif == null) post_gif = nil;
          try {
              post_gif.$validate();
              if ((($c = post_gif['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return self.$set_state($hash2(["errors"], {"errors": post_gif.$errors()['$[]']("subtitles")}))
                } else {
                _post_gif = self.$n_prop("post_gif");
                (($c = [post_gif.$subtitles()]), $d = _post_gif, $d['$subtitles='].apply($d, $c), $c[$c.length-1]);
                self.$p("should insert");
                return self.$emit("on_completed", self.$n_prop("post_gif"));
              };
            } catch ($err) {
              if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                try {
                  return self.$p(e)
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18), $a).call($b);
        }, TMP_19.$$arity = 0), nil) && 'submit';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/user_notifications/index"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$fetch_notifications', '$destroy_infinite_scroll_beacon', '$then', '$n_state', '$+', '$data', '$set_state', '$<', '$length', '$listen_to_infinite_scroll_beacon', '$p', '$index_for_user', '$id', '$instance', '$try', '$[]', '$t', '$map', '$read', '$to_n', '$content', '$lambda', '$set_read', '$next_page_infinite_scroll_beacon', '$-', '$force_update']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $UserNotifications, self = $UserNotifications = $module($base, 'UserNotifications');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Index(){};
        var self = $Index = $klass($base, $super, 'Index', $Index);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_5, TMP_6, TMP_9, TMP_11;

        def.notification_index_query_runnig = nil;
        self.$expose();

        self.$include((($scope.get('Plugins')).$$scope.get('InfiniteScrollable')));

        Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
          var self = this;

          self.notification_index_query_runnig = false;
          return $hash2(["notifications"], {"notifications": []});
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$component_did_mount', TMP_2 = function ːcomponent_did_mount() {
          var self = this;

          return self.$fetch_notifications();
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$component_will_unmount', TMP_3 = function ːcomponent_will_unmount() {
          var self = this;

          return self.$destroy_infinite_scroll_beacon();
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$fetch_notifications', TMP_5 = function ːfetch_notifications(last_date) {try {

          var $a, $b, TMP_4, self = this;

          if (last_date == null) {
            last_date = nil;
          }
          if ((($a = self.notification_index_query_runnig) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil};
          self.notification_index_query_runnig = true;
          return ($a = ($b = $scope.get('Notification').$index_for_user($hash2(["wilds", "extra_params"], {"wilds": $hash2(["user_id"], {"user_id": $scope.get('CurrentUser').$instance().$id()}), "extra_params": $hash2(["last_date"], {"last_date": last_date})}))).$then, $a.$$p = (TMP_4 = function(notifications){var self = TMP_4.$$s || this, $c, _notifications = nil, new_notifications = nil, e = nil;
if (notifications == null) notifications = nil;
          try {
              _notifications = self.$n_state("notifications");
              new_notifications = _notifications = $rb_plus(_notifications, notifications.$data());
              self.$set_state($hash2(["notifications"], {"notifications": new_notifications}));
              if ((($c = $rb_lt(notifications.$data().$length(), 1)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                self.$destroy_infinite_scroll_beacon();
                Opal.ret(nil);};
              self.$listen_to_infinite_scroll_beacon();
              return self.notification_index_query_runnig = false;
            } catch ($err) {
              if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                try {
                  return self.$p(e)
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($b);
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, TMP_5.$$arity = -1);

        Opal.defn(self, '$handle_infinite_croll_beacon_reach', TMP_6 = function ːhandle_infinite_croll_beacon_reach() {
          var self = this;

          return self.$fetch_notifications(self.$n_state("notifications")['$[]'](-1).$try("created_at"));
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$render', TMP_9 = function ːrender() {
          var $a, $b, TMP_7, self = this;

          return self.$t("div", $hash2(["className"], {"className": "userNotifications-index"}), ($a = ($b = self.$n_state("notifications")).$map, $a.$$p = (TMP_7 = function(user_notification){var self = TMP_7.$$s || this, $c, $d, TMP_8;
if (user_notification == null) user_notification = nil;
          if ((($c = user_notification.$read()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return nil;};
            return self.$t("div", $hash2(["className"], {"className": "Notification-Show"}), self.$t("div", $hash2(["className", "dangerouslySetInnerHTML"], {"className": "text", "dangerouslySetInnerHTML": $hash2(["__html"], {"__html": user_notification.$content()}).$to_n()})), self.$t("button", $hash2(["className", "onClick"], {"className": "controll btn btn-primary btn-xs", "onClick": ($c = ($d = self).$lambda, $c.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

            return self.$set_read(user_notification)}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $c).call($d)}), "got it!"));}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b), self.$t("p", $hash2(["ref"], {"ref": "last_beacon"}), self.$next_page_infinite_scroll_beacon($rb_minus(self.$n_state("notifications").$length(), 1))));
        }, TMP_9.$$arity = 0);

        return (Opal.defn(self, '$set_read', TMP_11 = function ːset_read(notification) {
          var $a, $b, TMP_10, self = this;

          return ($a = ($b = notification.$set_read()).$then, $a.$$p = (TMP_10 = function(notification){var self = TMP_10.$$s || this;
if (notification == null) notification = nil;
          return self.$force_update()}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10), $a).call($b);
        }, TMP_11.$$arity = 1), nil) && 'set_read';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/user_notifications/post_index_inde"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$instance', '$subscribe', '$notifications_manager', '$state', '$t', '$!', '$empty?', '$notifications', '$map', '$to_n', '$content', '$lambda', '$remove_notification', '$unsubscribe', '$set_state', '$n_prop', '$notifications_emptied', '$owner', '$props', '$remove_notification_and_set_it_read']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $UserNotifications, self = $UserNotifications = $module($base, 'UserNotifications');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $PostIndexIndex(){};
        var self = $PostIndexIndex = $klass($base, $super, 'PostIndexIndex', $PostIndexIndex);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_5, TMP_6, TMP_7, TMP_8;

        self.$expose();

        Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
          var self = this;

          return $hash2(["notifications_manager"], {"notifications_manager": $scope.get('UserNotificationsManager').$instance()});
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$component_did_mount', TMP_2 = function ːcomponent_did_mount() {
          var self = this;

          return self.$state().$notifications_manager().$subscribe("when_notifications_updated", self);
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$render', TMP_5 = function ːrender() {
          var $a, $b, TMP_3, self = this;

          return self.$t("div", $hash2(["className"], {"className": "userNotifications-index on-index"}), (function() {if ((($a = self.$state().$notifications_manager().$notifications()['$empty?']()['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("p", $hash2(["className"], {"className": "messageInformer"}), "you've got a new message")
            } else {
            return nil
          }; return nil; })(), ($a = ($b = self.$state().$notifications_manager().$notifications()).$map, $a.$$p = (TMP_3 = function(user_notification){var self = TMP_3.$$s || this, $c, $d, TMP_4;
if (user_notification == null) user_notification = nil;
          return self.$t("div", $hash2(["className"], {"className": "Notification-Show"}), self.$t("div", $hash2(["className", "dangerouslySetInnerHTML"], {"className": "text", "dangerouslySetInnerHTML": $hash2(["__html"], {"__html": user_notification.$content()}).$to_n()})), self.$t("button", $hash2(["className", "onClick"], {"className": "controll btn btn-primary btn-xs", "onClick": ($c = ($d = self).$lambda, $c.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

            return self.$remove_notification(user_notification)}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $c).call($d)}), "got it!"))}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b));
        }, TMP_5.$$arity = 0);

        Opal.defn(self, '$component_will_unmount', TMP_6 = function ːcomponent_will_unmount() {
          var self = this;

          return self.$state().$notifications_manager().$unsubscribe("when_notifications_updated", self);
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$when_notifications_updated', TMP_7 = function ːwhen_notifications_updated() {
          var $a, $b, self = this;

          self.$set_state($hash2(["notifications_manager"], {"notifications_manager": self.$state().$notifications_manager()}));
          if ((($a = ($b = self.$state().$notifications_manager().$notifications()['$empty?'](), $b !== false && $b !== nil && $b != null ?self.$n_prop("owner") : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$props().$owner().$notifications_emptied(self.$n_prop("arbitrary_id"))
            } else {
            return nil
          };
        }, TMP_7.$$arity = 0);

        return (Opal.defn(self, '$remove_notification', TMP_8 = function ːremove_notification(user_notification) {
          var self = this;

          return self.$state().$notifications_manager().$remove_notification_and_set_it_read(user_notification);
        }, TMP_8.$$arity = 1), nil) && 'remove_notification';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/user_subscriptions/create"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$t']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $UserSubscriptions, self = $UserSubscriptions = $module($base, 'UserSubscriptions');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Create(){};
        var self = $Create = $klass($base, $super, 'Create', $Create);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        self.$expose();

        return (Opal.defn(self, '$render', TMP_1 = function ːrender() {
          var self = this;

          return self.$t("div", $hash2([], {}));
        }, TMP_1.$$arity = 0), nil) && 'render';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/user_subscriptions/create_or_show"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$t', '$try', '$usub_with_current_user', '$n_prop', '$lambda', '$destroy_subscription', '$create_subscription', '$user_denormalized_stat', '$subscribers_count', '$new', '$to_user_id=', '$id', '$user_to_subscribe_to', '$props', '$then', '$usub_with_current_user=', '$update_karma', '$emit', '$p', '$create', '$force_update', '$id=', '$destroy']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $UserSubscriptions, self = $UserSubscriptions = $module($base, 'UserSubscriptions');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $CreateOrShow(){};
        var self = $CreateOrShow = $klass($base, $super, 'CreateOrShow', $CreateOrShow);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_4, TMP_6, TMP_8;

        self.$expose();

        Opal.defn(self, '$validate_props', TMP_1 = function ːvalidate_props() {
          var self = this;

          return nil;
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$render', TMP_4 = function ːrender() {
          var $a, $b, TMP_2, $c, TMP_3, self = this, uds = nil;

          return self.$t("div", $hash2(["className"], {"className": "userSubscriptions-createOrShow"}), (function() {if ((($a = self.$n_prop("user_to_subscribe_to").$usub_with_current_user().$try("id")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("button", $hash2(["className", "onClick"], {"className": "subscribe-btn zoom btn btn-primary btn-sm btn-danger", "onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

            return self.$destroy_subscription()}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($b)}), "Unsubscribe")
            } else {
            return self.$t("button", $hash2(["className", "onClick"], {"className": "subscribe-btn zoom btn btn-primary btn-sm", "onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

            return self.$create_subscription()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($c)}), self.$t("span", $hash2(["className"], {"className": "text"}), "subscribe"), (function() {if ((($a = uds = self.$n_prop("user_to_subscribe_to").$user_denormalized_stat()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("span", $hash2(["className"], {"className": "subscriberCount"}), uds.$subscribers_count())
              } else {
              return nil
            }; return nil; })())
          }; return nil; })());
        }, TMP_4.$$arity = 0);

        Opal.defn(self, '$create_subscription', TMP_6 = function ːcreate_subscription() {
          var $a, $b, TMP_5, self = this, us = nil;

          us = $scope.get('UserSubscription').$new();
          (($a = [self.$props().$user_to_subscribe_to().$id()]), $b = us, $b['$to_user_id='].apply($b, $a), $a[$a.length-1]);
          ($a = ($b = us.$create()).$then, $a.$$p = (TMP_5 = function(user_subscription){var self = TMP_5.$$s || this, $c, $d, e = nil;
if (user_subscription == null) user_subscription = nil;
          try {
              (($c = [us]), $d = self.$n_prop("user_to_subscribe_to"), $d['$usub_with_current_user='].apply($d, $c), $c[$c.length-1]);
              $scope.get('CurrentUser').$update_karma((($scope.get('KarmaManager')).$$scope.get('WHEN_SUBSCRIBED_TO_USER')));
              return self.$emit("subscription_changed", self.$props().$user_to_subscribe_to(), user_subscription, "subscribed");
            } catch ($err) {
              if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                try {
                  return self.$p(e)
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($b);
          return self.$force_update();
        }, TMP_6.$$arity = 0);

        return (Opal.defn(self, '$destroy_subscription', TMP_8 = function ːdestroy_subscription() {
          var $a, $b, TMP_7, self = this;

          return ($a = ($b = self.$props().$user_to_subscribe_to().$usub_with_current_user().$destroy()).$then, $a.$$p = (TMP_7 = function(user_subscription){var self = TMP_7.$$s || this, $c, $d;
if (user_subscription == null) user_subscription = nil;
          $scope.get('CurrentUser').$update_karma((($scope.get('KarmaManager')).$$scope.get('WHEN_UNSUBSCRIBED_FROM_USER')));
            self.$emit("subscription_changed", self.$props().$user_to_subscribe_to(), user_subscription, "unsubscribed");
            (($c = [nil]), $d = self.$props().$user_to_subscribe_to().$usub_with_current_user(), $d['$id='].apply($d, $c), $c[$c.length-1]);
            return self.$force_update();}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b);
        }, TMP_8.$$arity = 0), nil) && 'destroy_subscription';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/users/avatars/edit"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$is_a?', '$avatar', '$n_prop', '$[]', '$t', '$modal', '$errors', '$map', '$!', '$n_state', '$event', '$lambda', '$upload_avatar', '$new', '$on_file_chosen_by_user', '$on_cancel_upload', '$set_state', '$reset_errors', '$avatar=', '$then', '$has_errors?', '$force_update', '$delete', '$attributes', '$update_avatar']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Users, self = $Users = $module($base, 'Users');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $Avatars, self = $Avatars = $module($base, 'Avatars');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Edit(){};
          var self = $Edit = $klass($base, $super, 'Edit', $Edit);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_7, TMP_8, TMP_9, TMP_11;

          self.$expose();

          self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

          Opal.defn(self, '$validate_props', TMP_1 = function ːvalidate_props() {
            var self = this;

            return nil;
          }, TMP_1.$$arity = 0);

          Opal.defn(self, '$get_initial_state', TMP_2 = function ːget_initial_state() {
            var self = this;

            return $hash2(["image_chosen"], {"image_chosen": false});
          }, TMP_2.$$arity = 0);

          Opal.defn(self, '$render', TMP_7 = function ːrender() {
            var $a, $b, TMP_3, $c, TMP_4, $d, TMP_5, $e, TMP_6, self = this, avatar_url = nil, errors = nil;

            avatar_url = ((function() {if ((($a = self.$n_prop("user").$avatar()['$is_a?']($scope.get('Hash'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$n_prop("user").$avatar()['$[]']("thumb_url")
              } else {
              return nil
            }; return nil; })());
            return self.$t("div", $hash2(["className"], {"className": "avatars-edit"}), self.$modal(), (function() {if ((($a = errors = self.$n_prop("user").$errors()['$[]']("avatar")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("div", $hash2(["className"], {"className": "errors"}), ($a = ($b = errors).$map, $a.$$p = (TMP_3 = function(error){var self = TMP_3.$$s || this;
if (error == null) error = nil;
              return self.$t("p", $hash2(["className"], {"className": "invalid"}), error)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b))
              } else {
              return nil
            }; return nil; })(), (function() {if ((($a = self.$n_state("image_chosen")['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              if (avatar_url !== false && avatar_url !== nil && avatar_url != null) {
                return self.$t("div", $hash2(["className"], {"className": "image"}), self.$t("img", $hash2(["src", "className"], {"src": avatar_url, "className": "image"})))
                } else {
                return self.$t("div", $hash2(["className"], {"className": "absent-avatar"}), self.$t("p", $hash2([], {}), "you have no avatar"))
              }
              } else {
              return nil
            }; return nil; })(), self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('New')), $hash2(["acts_as_proxy", "on_image_selected", "hide_alt_text", "on_file_chosen_by_user", "on_cancel_upload", "ref"], {"acts_as_proxy": true, "on_image_selected": self.$event(($a = ($c = self).$lambda, $a.$$p = (TMP_4 = function(file){var self = TMP_4.$$s || this;
if (file == null) file = nil;
            return self.$upload_avatar(file)}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($c)), "hide_alt_text": true, "on_file_chosen_by_user": $scope.get('ProcEvent').$new(($a = ($d = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

            return self.$on_file_chosen_by_user()}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($d)), "on_cancel_upload": $scope.get('ProcEvent').$new(($a = ($e = self).$lambda, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

            return self.$on_cancel_upload()}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($e)), "ref": "new_image_component"})));
          }, TMP_7.$$arity = 0);

          Opal.defn(self, '$on_file_chosen_by_user', TMP_8 = function ːon_file_chosen_by_user() {
            var self = this;

            return self.$set_state($hash2(["image_chosen"], {"image_chosen": true}));
          }, TMP_8.$$arity = 0);

          Opal.defn(self, '$on_cancel_upload', TMP_9 = function ːon_cancel_upload() {
            var self = this;

            return self.$set_state($hash2(["image_chosen"], {"image_chosen": false}));
          }, TMP_9.$$arity = 0);

          return (Opal.defn(self, '$upload_avatar', TMP_11 = function ːupload_avatar(file) {
            var $a, $b, TMP_10, self = this;

            self.$n_prop("user").$reset_errors();
            (($a = [file]), $b = self.$n_prop("user"), $b['$avatar='].apply($b, $a), $a[$a.length-1]);
            return ($a = ($b = self.$n_prop("user").$update_avatar($hash2(["wilds"], {"wilds": $hash2(["id"], {"id": self.$n_prop("user_id")})}))).$then, $a.$$p = (TMP_10 = function(user){var self = TMP_10.$$s || this, $c;
if (user == null) user = nil;
            if ((($c = user['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return self.$force_update()
                } else {
                self.$n_prop("user").$attributes().$delete("avatar");
                return self.$set_state($hash2(["image_chosen"], {"image_chosen": false}));
              }}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10), $a).call($b);
          }, TMP_11.$$arity = 1), nil) && 'upload_avatar';
        })($scope.base, $scope.get('RW'))
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/users/create"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$!', '$instance_has_role?', '$instance', '$t', '$progress_bar', '$==', '$step', '$state', '$no_steps', '$props', '$message', '$input', '$user_credential', '$user', '$lambda', '$submit', '$open_popup_for_oauth', '$transition_from_0', '$n_state', '$id', '$set_state', '$set_proc_on_auth_popup_close', '$then', '$set_user_and_login_status', '$ping_current_user', '$open_child_window', '$collect_inputs', '$has_errors?', '$on_signup', '$emit', '$each', '$name', '$user_roles', '$force_update', '$create']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Users, self = $Users = $module($base, 'Users');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Create(){};
        var self = $Create = $klass($base, $super, 'Create', $Create);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_5, TMP_6, TMP_9, TMP_12;

        self.$expose();

        self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

        Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
          var $a, self = this, step = nil;

          step = 0;
          if ((($a = $scope.get('CurrentUser')['$instance_has_role?']("name_provided")['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            step = 0
          } else if ((($a = $scope.get('CurrentUser')['$instance_has_role?']("no_e_or_p")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            step = 1};
          return $hash2(["user", "step"], {"user": $scope.get('CurrentUser').$instance(), "step": step});
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$render', TMP_5 = function ːrender() {
          var $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, self = this;

          return self.$t("div", $hash2(["className"], {"className": "users-create"}), self.$progress_bar(), (function() {if ((($a = ((($b = self.$state().$step()['$=='](0)) !== false && $b !== nil && $b != null) ? $b : self.$props().$no_steps())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return [(function() {if ((($a = self.$props().$message()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("div", $hash2(["className"], {"className": "message"}), self.$t("p", $hash2([], {}), self.$props().$message()))
              } else {
              return nil
            }; return nil; })(), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('Input')), self.$state().$user().$user_credential(), "name", $hash2(["show_name", "required_field"], {"show_name": "nickname", "required_field": true})), (function() {if ((($a = self.$props().$no_steps()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$t("div", $hash2(["className"], {"className": "btn-controll"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

              return self.$submit()}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($b), "className": "btn btn-default"}), "submit"))
            }; return nil; })(), self.$t("h3", $hash2(["className"], {"className": "or"}), "or"), self.$t("div", $hash2(["className"], {"className": "oath-provider-list"}), self.$t("h3", $hash2([], {}), "create account via:"), self.$t("button", $hash2(["className", "onClick"], {"className": "btn btn-primary", "onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

            return self.$open_popup_for_oauth("http://localhost:3000/auth/developer")}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($c)}), "DEVELOPER"))]
            } else {
            return nil
          }; return nil; })(), (function() {if ((($a = ((($d = self.$state().$step()['$=='](1)) !== false && $d !== nil && $d != null) ? $d : self.$props().$no_steps())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return [(function() {if ((($a = self.$state().$transition_from_0()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("p", $hash2(["className"], {"className": "afterSignupMessage"}), "congratulations you've been registered!")
              } else {
              return nil
            }; return nil; })(), self.$t((((((($scope.get('Components')).$$scope.get('Users'))).$$scope.get('Avatars'))).$$scope.get('Edit')), $hash2(["user", "user_id"], {"user": self.$n_state("user"), "user_id": $scope.get('CurrentUser').$instance().$id()})), self.$t("p", $hash2(["className"], {"className": "message"}), "if you want to login later in future, leave either password or email, or both, but this is not required"), self.$t("div", $hash2(["className"], {"className": "emailAndPwdContainer"}), self.$t("div", $hash2(["className"], {"className": "row"}), self.$t("div", $hash2(["className"], {"className": "col-lg-6 emailBlock"}), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('Input')), self.$state().$user().$user_credential(), "email", $hash2(["show_name", "type", "optional_field"], {"show_name": "email", "type": "email", "optional_field": true}))), self.$t("div", $hash2(["className"], {"className": "col-lg-6 pwdBlock"}), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('Input')), self.$state().$user().$user_credential(), "password", $hash2(["type", "show_name", "optional_field"], {"type": "password", "show_name": "password", "optional_field": true})), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('Input')), self.$state().$user().$user_credential(), "password_confirmation", $hash2(["type", "show_name"], {"type": "password", "show_name": "confirm password"}))))), self.$t("div", $hash2(["className"], {"className": "btn-controll"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($d = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

            return self.$submit()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($d), "className": "btn btn-primary"}), "submit"))]
            } else {
            return nil
          }; return nil; })());
        }, TMP_5.$$arity = 0);

        Opal.defn(self, '$hide', TMP_6 = function ːhide() {
          var self = this;

          return self.$set_state($hash2(["step"], {"step": false}));
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$open_popup_for_oauth', TMP_9 = function ːopen_popup_for_oauth(path) {
          var $a, $b, TMP_7, self = this;

          ($a = ($b = $scope.get('OauthHelper')).$set_proc_on_auth_popup_close, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $c, $d, TMP_8;

          return ($c = ($d = $scope.get('CurrentUser').$instance().$ping_current_user()).$then, $c.$$p = (TMP_8 = function(user){var self = TMP_8.$$s || this;
if (user == null) user = nil;
            return $scope.get('CurrentUser').$set_user_and_login_status($scope.get('CurrentUser').$instance(), true)}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $c).call($d)}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($b);
          return $scope.get('OauthHelper').$open_child_window(path);
        }, TMP_9.$$arity = 1);

        return (Opal.defn(self, '$submit', TMP_12 = function ːsubmit() {
          var $a, $b, TMP_10, self = this;

          self.$collect_inputs($hash2(["form_model"], {"form_model": "user"}));
          if ((($a = self.$state().$user()['$has_errors?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$set_state($hash2(["user"], {"user": self.$state().$user()}))
            } else {
            return ($a = ($b = self.$state().$user().$create($hash2(["component"], {"component": self}))).$then, $a.$$p = (TMP_10 = function(user){var self = TMP_10.$$s || this, $c, $d, TMP_11, no_e_or_p = nil;
if (user == null) user = nil;
            if ((($c = user['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return self.$set_state($hash2(["user"], {"user": user}))
                } else {
                if ((($c = self.$props().$on_signup()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                  self.$emit("on_signup", user)};
                if (self.$state().$step()['$=='](0)) {
                  return self.$set_state($hash2(["step", "transition_from_0"], {"step": 1, "transition_from_0": true}))
                  } else {
                  no_e_or_p = false;
                  (function(){var $brk = Opal.new_brk(); try {return ($c = ($d = user.$user_roles()).$each, $c.$$p = (TMP_11 = function(user_role){var self = TMP_11.$$s || this;
if (user_role == null) user_role = nil;
                  if (user_role.$name()['$==']("no_e_or_p")) {
                      no_e_or_p = true;
                      
                      Opal.brk(nil, $brk);
                      } else {
                      return nil
                    }}, TMP_11.$$s = self, TMP_11.$$brk = $brk, TMP_11.$$arity = 1, TMP_11), $c).call($d)
                  } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
                  if (no_e_or_p !== false && no_e_or_p !== nil && no_e_or_p != null) {
                    return self.$force_update()
                    } else {
                    return self.$set_state($hash2(["step"], {"step": false}))
                  };
                };
              }}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10), $a).call($b)
          };
        }, TMP_12.$$arity = 0), nil) && 'submit';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/users/current_user_status"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$subscribe', '$unsubscribe', '$logged_in', '$t', '$state', '$name', '$user_credential', '$instance', '$n_state', '$try', '$user_karma', '$!=', '$>', '$set_state']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Users, self = $Users = $module($base, 'Users');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $CurrentUserStatus(){};
        var self = $CurrentUserStatus = $klass($base, $super, 'CurrentUserStatus', $CurrentUserStatus);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8;

        self.$expose();

        Opal.defs(self, '$instance', TMP_1 = function ːinstance() {
          var $a, self = this;

          return (($a = Opal.cvars['@@instance']) == null ? nil : $a);
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$init', TMP_2 = function ːinit() {
          var self = this;

          $scope.get('CurrentUser').$subscribe("user_logged_in", self);
          $scope.get('CurrentUser').$subscribe("user_logged_out", self);
          return $scope.get('CurrentUser').$subscribe("karma_changed", self);
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$component_will_unmount', TMP_3 = function ːcomponent_will_unmount() {
          var self = this;

          $scope.get('CurrentUser').$unsubscribe("user_logged_in", self);
          $scope.get('CurrentUser').$unsubscribe("user_logged_out", self);
          return $scope.get('CurrentUser').$unsubscribe("karma_changed", self);
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$get_initial_state', TMP_4 = function ːget_initial_state() {
          var self = this, logged_in = nil;

          logged_in = $scope.get('CurrentUser').$logged_in();
          return $hash2(["logged_in", "transition_blink", "amount"], {"logged_in": logged_in, "transition_blink": "", "amount": false});
        }, TMP_4.$$arity = 0);

        Opal.defn(self, '$render', TMP_5 = function ːrender() {
          var $a, self = this, should_plus = nil;

          return self.$t("div", $hash2(["className"], {"className": "current-user-status-bar"}), (function() {if ((($a = self.$state().$logged_in()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return [self.$t("p", $hash2([], {}), ((($a = $scope.get('CurrentUser').$instance().$user_credential().$name()) !== false && $a !== nil && $a != null) ? $a : "guest")), self.$t("p", $hash2(["className"], {"className": "user-karma " + (self.$n_state("transition_blink"))}), self.$t("p", $hash2([], {}), $scope.get('CurrentUser').$instance().$user_karma().$try("count")), (function() {if ((($a = self.$n_state("transition_blink")['$!=']("")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              if ((($a = self.$n_state("amount")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                should_plus = (function() {if ((($a = $rb_gt(self.$n_state("amount"), 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                  return "+"
                  } else {
                  return nil
                }; return nil; })();
                return self.$t("p", $hash2([], {}), "" + (should_plus) + (self.$n_state("amount")));
                } else {
                return nil
              }
              } else {
              return nil
            }; return nil; })())]
            } else {
            return self.$t("p", $hash2([], {}), "not logged in")
          }; return nil; })());
        }, TMP_5.$$arity = 0);

        Opal.defn(self, '$user_logged_in', TMP_6 = function ːuser_logged_in() {
          var self = this;

          return self.$set_state($hash2(["logged_in"], {"logged_in": true}));
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$user_logged_out', TMP_7 = function ːuser_logged_out() {
          var self = this;

          return self.$set_state($hash2(["logged_in"], {"logged_in": false}));
        }, TMP_7.$$arity = 0);

        return (Opal.defn(self, '$karma_changed', TMP_8 = function ːkarma_changed(amount) {
          var self = this;

          self.$set_state($hash2(["transition_blink", "amount"], {"transition_blink": "transitionBlink", "amount": amount}));
          
          setTimeout(
            function(){ 
              self.$set_state($hash2(["transition_blink"], {"transition_blink": ""})); 
            }, 
            300
          );
        ;
        }, TMP_8.$$arity = 1), nil) && 'karma_changed';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/users/edit"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$then', '$set_initial_fields', '$set_state', '$p', '$ping_current_user', '$blank?', '$name', '$user_credential', '$email', '$[]', '$attributes', '$t', '$progress_bar', '$ok_message', '$state', '$user', '$n_state', '$id', '$instance', '$!', '$input', '$lambda', '$open_popup_for_oauth', '$submit', '$set_proc_on_auth_popup_close', '$set_user_and_login_status', '$open_child_window', '$collect_inputs', '$has_errors?', '$clear_inputs', '$create']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Users, self = $Users = $module($base, 'Users');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Edit(){};
        var self = $Edit = $klass($base, $super, 'Edit', $Edit);

        var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_7, TMP_10, TMP_12;

        def.has_name = def.has_email = def.has_password = nil;
        self.$expose();

        self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

        Opal.defn(self, '$component_did_mount', TMP_2 = function ːcomponent_did_mount() {
          var $a, $b, TMP_1, self = this;

          return ($a = ($b = $scope.get('CurrentUser').$ping_current_user($hash2(["component"], {"component": self}))).$then, $a.$$p = (TMP_1 = function(user){var self = TMP_1.$$s || this, e = nil;
if (user == null) user = nil;
          try {
              self.$set_initial_fields(user);
              return self.$set_state($hash2(["user"], {"user": user}));
            } catch ($err) {
              if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                try {
                  return self.$p(e)
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$get_initial_state', TMP_3 = function ːget_initial_state() {
          var self = this;

          return $hash2(["user"], {"user": false});
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$set_initial_fields', TMP_4 = function ːset_initial_fields(user) {
          var $a, self = this;

          self.has_name = (function() {if ((($a = user.$user_credential().$name()['$blank?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return false
            } else {
            return true
          }; return nil; })();
          self.has_email = (function() {if ((($a = user.$user_credential().$email()['$blank?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return false
            } else {
            return true
          }; return nil; })();
          return self.has_password = (function() {if ((($a = user.$attributes()['$[]']("has_password")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return true
            } else {
            return false
          }; return nil; })();
        }, TMP_4.$$arity = 1);

        Opal.defn(self, '$render', TMP_7 = function ːrender() {
          var $a, $b, TMP_5, $c, TMP_6, self = this;

          return self.$t("div", $hash2([], {}), self.$progress_bar(), (function() {if ((($a = self.$state().$ok_message()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("p", $hash2([], {}), self.$state().$ok_message())
            } else {
            return nil
          }; return nil; })(), (function() {if ((($a = self.$state().$user()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("div", $hash2(["className"], {"className": "users-create"}), self.$t("div", $hash2(["className"], {"className": "avatar-name-group"}), self.$t((((((($scope.get('Components')).$$scope.get('Users'))).$$scope.get('Avatars'))).$$scope.get('Edit')), $hash2(["user", "user_id"], {"user": self.$n_state("user"), "user_id": $scope.get('CurrentUser').$instance().$id()})), (function() {if ((($a = self.has_name['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('Input')), self.$state().$user().$user_credential(), "name", $hash2(["show_name", "required_field"], {"show_name": "username", "required_field": true}))
              } else {
              return self.$t("p", $hash2(["className"], {"className": "name"}), self.$state().$user().$user_credential().$name())
            }; return nil; })()), self.$t("div", $hash2(["className"], {"className": "emailAndPwdContainer"}), self.$t("div", $hash2(["className"], {"className": "row"}), self.$t("div", $hash2(["className"], {"className": "col-lg-6 emailBlock"}), self.$t("p", $hash2([], {}), "create account from PROVIDER"), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

            return self.$open_popup_for_oauth("http://localhost:3000/auth/developer")}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($b)}), "DEVELOPER")), self.$t("div", $hash2(["className"], {"className": "col-lg-6 pwdBlock"}), (function() {if ((($a = self.has_email['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('Input')), self.$state().$user().$user_credential(), "email", $hash2(["show_name", "type", "optional_field"], {"show_name": "email", "type": "email", "optional_field": true}))
              } else {
              return self.$t("p", $hash2([], {}), self.$state().$user().$user_credential().$email())
            }; return nil; })(), (function() {if ((($a = self.has_password['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              self.$t("p", $hash2([], {}), "set password");
              return [self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('Input')), self.$state().$user().$user_credential(), "password", $hash2(["type", "show_name", "optional_field", "namespace"], {"type": "password", "show_name": "password", "optional_field": true, "namespace": "pwdgroup"})), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('Input')), self.$state().$user().$user_credential(), "password_confirmation", $hash2(["type", "show_name", "namespace"], {"type": "password", "show_name": "confirm password", "namespace": "pwdgroup"}))];
              } else {
              return [self.$t("p", $hash2([], {}), "change password"), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('Input')), self.$state().$user().$user_credential(), "old_password", $hash2(["show_name", "namespace"], {"show_name": "old password", "namespace": "pwdgroup"})), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('Input')), self.$state().$user().$user_credential(), "password", $hash2(["type", "show_name", "namespace"], {"type": "password", "show_name": "new password", "namespace": "pwdgroup"})), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('Input')), self.$state().$user().$user_credential(), "password_confirmation", $hash2(["type", "show_name", "namespace"], {"type": "password", "show_name": "confirm new password", "namespace": "pwdgroup"}))]
            }; return nil; })()))), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

            return self.$submit()}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($c), "className": "btn btn-default"}), "submit"))
            } else {
            return nil
          }; return nil; })());
        }, TMP_7.$$arity = 0);

        Opal.defn(self, '$open_popup_for_oauth', TMP_10 = function ːopen_popup_for_oauth(path) {
          var $a, $b, TMP_8, self = this;

          ($a = ($b = $scope.get('OauthHelper')).$set_proc_on_auth_popup_close, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $c, $d, TMP_9;

          return ($c = ($d = $scope.get('CurrentUser').$instance().$ping_current_user()).$then, $c.$$p = (TMP_9 = function(user){var self = TMP_9.$$s || this;
if (user == null) user = nil;
            return $scope.get('CurrentUser').$set_user_and_login_status($scope.get('CurrentUser').$instance(), true)}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $c).call($d)}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($b);
          return $scope.get('OauthHelper').$open_child_window(path);
        }, TMP_10.$$arity = 1);

        return (Opal.defn(self, '$submit', TMP_12 = function ːsubmit() {
          var $a, $b, TMP_11, self = this;

          self.$collect_inputs($hash2(["form_model"], {"form_model": "user"}));
          if ((($a = self.$state().$user()['$has_errors?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$set_state($hash2(["user"], {"user": self.$state().$user()}))
            } else {
            return ($a = ($b = self.$state().$user().$create($hash2(["component"], {"component": self}))).$then, $a.$$p = (TMP_11 = function(user){var self = TMP_11.$$s || this, $c;
if (user == null) user = nil;
            if ((($c = user['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return self.$set_state($hash2(["user"], {"user": user}))
                } else {
                self.$clear_inputs("pwdgroup");
                $scope.get('CurrentUser').$set_user_and_login_status(user, true);
                return self.$set_state($hash2(["user", "ok_message"], {"user": user, "ok_message": "account successfully udpated"}));
              }}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($b)
          };
        }, TMP_12.$$arity = 0), nil) && 'submit';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/users/login_or_continue_as_guest"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$t']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Users, self = $Users = $module($base, 'Users');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $LoginOrContinueAsGuest(){};
        var self = $LoginOrContinueAsGuest = $klass($base, $super, 'LoginOrContinueAsGuest', $LoginOrContinueAsGuest);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        self.$expose();

        return (Opal.defn(self, '$render', TMP_1 = function ːrender() {
          var self = this;

          return self.$t("div", $hash2(["className"], {"className": "login-or-continue-as-guest"}), self.$t("div", $hash2(["className"], {"className": "row"}), self.$t((((($scope.get('Components')).$$scope.get('Sessions'))).$$scope.get('Create')), $hash2([], {}))), self.$t("div", $hash2(["className"], {"className": "row"}), "or"), self.$t("div", $hash2(["className"], {"className": "row"}), self.$t("a", $hash2(["href"], {"href": "/"}), self.$t("button", $hash2(["className"], {"className": "btn btn-primary"}), "continue as guest"))));
        }, TMP_1.$$arity = 0), nil) && 'render';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/users/partials/author_label"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$n_prop', '$p', '$name', '$class', '$t', '$link_to', '$id', '$try', '$user_karma']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Users, self = $Users = $module($base, 'Users');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $Partials, self = $Partials = $module($base, 'Partials');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $AuthorLabel(){};
          var self = $AuthorLabel = $klass($base, $super, 'AuthorLabel', $AuthorLabel);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

          self.$expose();

          Opal.defn(self, '$validate_props', TMP_1 = function ːvalidate_props() {
            var $a, self = this;

            if ((($a = self.$n_prop("user")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$p("no user passed to " + (self.$class().$name()))
            };
          }, TMP_1.$$arity = 0);

          return (Opal.defn(self, '$render', TMP_2 = function ːrender() {
            var $a, self = this, user = nil;

            user = self.$n_prop("user");
            return self.$t("div", $hash2(["className"], {"className": "Users-Partials-AuthorLabel"}), self.$t("div", $hash2(["className"], {"className": "avatar"}), self.$t("i", $hash2(["className"], {"className": "icon-user-o"}))), self.$t("div", $hash2(["className"], {"className": "name-karma"}), (function() {if ((($a = self.$n_prop("promote_registration")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("div", $hash2(["className"], {"className": "name"}), self.$link_to("create nickname", "/dashboard/\#{CurrentUser.instance.id}/edit_account"))
              } else {
              return self.$t("div", $hash2(["className"], {"className": "name"}), self.$link_to(user.$name(), "users/" + (user.$id())))
            }; return nil; })(), self.$t("div", $hash2(["className"], {"className": "karma"}), user.$user_karma().$try("count"))), (function() {if ((($a = self.$n_prop("show_only_name")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$t((((($scope.get('Components')).$$scope.get('UserSubscriptions'))).$$scope.get('CreateOrShow')), $hash2(["user_to_subscribe_to", "subscription_changed"], {"user_to_subscribe_to": user, "subscription_changed": self.$n_prop("subscription_changed")}))
            }; return nil; })());
          }, TMP_2.$$arity = 0), nil) && 'render';
        })($scope.base, $scope.get('RW'))
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/users/posts/index"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$current_post_for_show=', '$class', '$==', '$pathname', '$location', '$props', '$user_id', '$params', '$n_prop', '$new', '$set_state', '$fetch_and_set_posts', '$!=', '$empty?', '$data', '$posts', '$state', '$location=', '$init', '$then', '$<', '$length', '$handle_in_then', '$p', '$index_for_user_show', '$per_page', '$index_for_user', '$[]', '$attributes', '$extract_pagination', '$data=', '$+', '$n_state', '$listen_to_infinite_scroll_beacon', '$t', '$children', '$no_posts_message', '$with_index', '$map', '$next_page_infinite_scroll_beacon', '$-', '$===', '$destroy_infinite_scroll_beacon', '$pagination_current_page', '$usub_with_current_user=', '$each', '$id', '$author', '$force_update']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Users, self = $Users = $module($base, 'Users');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $Posts, self = $Posts = $module($base, 'Posts');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Index(){};
          var self = $Index = $klass($base, $super, 'Index', $Index);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_13, TMP_14, TMP_16, TMP_17, TMP_18, TMP_21, TMP_22, TMP_23, TMP_24;
          if (self.current_post_for_show == null) self.current_post_for_show = nil;

          def.index_to_show_map = def.is_at_dashboard = def.is_at_user_show = def.post_index_query_running = nil;
          self.$expose();

          self.$include((($scope.get('Plugins')).$$scope.get('InfiniteScrollable')));

          self.current_post_for_show;

          Opal.defs(self, '$instance', TMP_1 = function ːinstance() {
            var $a, self = this;

            return (($a = Opal.cvars['@@instance']) == null ? nil : $a);
          }, TMP_1.$$arity = 0);

          Opal.defs(self, '$current_post_for_show=', TMP_2 = function(post) {
            var self = this;

            return self.current_post_for_show = post;
          }, TMP_2.$$arity = 1);

          Opal.defs(self, '$current_post_for_show', TMP_3 = function ːcurrent_post_for_show() {
            var self = this;
            if (self.current_post_for_show == null) self.current_post_for_show = nil;

            return self.current_post_for_show;
          }, TMP_3.$$arity = 0);

          Opal.defs(self, '$clear_current_post_for_show', TMP_4 = function ːclear_current_post_for_show() {
            var self = this;

            return self.current_post_for_show = nil;
          }, TMP_4.$$arity = 0);

          Opal.defn(self, '$set_current_post_for_show', TMP_5 = function ːset_current_post_for_show(post) {
            var $a, $b, self = this;

            return (($a = [post]), $b = self.$class(), $b['$current_post_for_show='].apply($b, $a), $a[$a.length-1]);
          }, TMP_5.$$arity = 1);

          Opal.defn(self, '$init', TMP_6 = function ːinit() {
            var $a, $b, self = this;

            (Opal.cvars['@@instance'] = self);
            if ((($a = self.is_at_dashboard = (function() {if ((($b = (self.$props().$location().$pathname()['$==']("/dashboard/" + (self.$props().$params().$user_id()) + "/posts/index"))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              return true
              } else {
              return false
            }; return nil; })()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.post_link = "/dashboard/" + (self.$props().$params().$user_id()) + "/posts/index"
            } else if ((($a = self.is_at_user_show = (function() {if (self.$props().$location().$pathname()['$==']("/users/" + (self.$props().$params().$user_id()) + "/posts")) {
              return true
              } else {
              return false
            }; return nil; })()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.post_link = "/users/" + (self.$props().$params().$user_id()) + "/posts"
            } else if ((($a = self.$n_prop("post_link")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.post_link = self.$n_prop("post_link")
              } else {
              return self.post_link = nil
            };
          }, TMP_6.$$arity = 0);

          Opal.defn(self, '$index_to_show_map', TMP_7 = function ːindex_to_show_map() {
            var self = this;

            return self.index_to_show_map;
          }, TMP_7.$$arity = 0);

          Opal.defn(self, '$get_initial_state', TMP_8 = function ːget_initial_state() {
            var self = this;

            self.index_to_show_map = $hash2([], {});
            self.post_index_query_running = false;
            return $hash2(["posts", "per_page", "no_posts"], {"posts": $scope.get('ModelCollection').$new(), "per_page": 10, "no_posts": false});
          }, TMP_8.$$arity = 0);

          Opal.defn(self, '$component_did_mount', TMP_9 = function ːcomponent_did_mount() {
            var $a, $b, self = this;

            if ((($a = self.$n_prop("posts")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$set_state($hash2(["posts"], {"posts": self.$n_prop("posts")}))
            } else if ((($a = ((($b = self.is_at_dashboard) !== false && $b !== nil && $b != null) ? $b : self.is_at_user_show)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$fetch_and_set_posts()
              } else {
              return nil
            };
          }, TMP_9.$$arity = 0);

          Opal.defn(self, '$component_will_receive_props', TMP_10 = function ːcomponent_will_receive_props(np) {
            var $a, $b, self = this;

            if ((($a = ($b = np.$location()['$!='](self.$props().$location()), $b !== false && $b !== nil && $b != null ?self.$state().$posts().$data()['$empty?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              (($a = [np.$location()]), $b = self.$props(), $b['$location='].apply($b, $a), $a[$a.length-1]);
              self.$init();
              return self.$fetch_and_set_posts();
              } else {
              return nil
            };
          }, TMP_10.$$arity = 1);

          Opal.defn(self, '$fetch_and_set_posts', TMP_13 = function ːfetch_and_set_posts(page) {
            var $a, $b, TMP_11, $c, TMP_12, self = this;

            if (page == null) {
              page = 1;
            }
            if ((($a = self.post_index_query_running) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return nil};
            self.post_index_query_running = true;
            if ((($a = self.is_at_user_show) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return ($a = ($b = $scope.get('Post').$index_for_user_show($hash2(["wilds", "extra_params"], {"wilds": $hash2(["id"], {"id": self.$props().$params().$user_id()}), "extra_params": $hash2(["page", "per_page"], {"page": page, "per_page": self.$state().$per_page()})}))).$then, $a.$$p = (TMP_11 = function(posts){var self = TMP_11.$$s || this, $c, e = nil;
if (posts == null) posts = nil;
              if (page['$=='](1)) {
                  if ((($c = $rb_lt(posts.$data().$length(), 2)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                    self.$set_state($hash2(["no_posts"], {"no_posts": true}))}};
                try {
                  return self.$handle_in_then(posts)
                } catch ($err) {
                  if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                    try {
                      return self.$p(e)
                    } finally { Opal.pop_exception() }
                  } else { throw $err; }
                };}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($b)
            } else if ((($a = self.is_at_dashboard) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return ($a = ($c = $scope.get('Post').$index_for_user($hash2(["wilds", "extra_params"], {"wilds": $hash2(["id"], {"id": self.$props().$params().$user_id()}), "extra_params": $hash2(["page", "per_page"], {"page": page, "per_page": self.$state().$per_page()})}))).$then, $a.$$p = (TMP_12 = function(posts){var self = TMP_12.$$s || this, $d, e = nil;
if (posts == null) posts = nil;
              if (page['$=='](1)) {
                  if ((($d = $rb_lt(posts.$data().$length(), 2)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                    self.$set_state($hash2(["no_posts"], {"no_posts": true}))}};
                try {
                  return self.$handle_in_then(posts)
                } catch ($err) {
                  if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                    try {
                      return console.log(e);
                    } finally { Opal.pop_exception() }
                  } else { throw $err; }
                };}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $a).call($c)
              } else {
              return nil
            };
          }, TMP_13.$$arity = -1);

          Opal.defn(self, '$handle_in_then', TMP_14 = function ːhandle_in_then(posts) {
            var $a, self = this;

            if ((($a = posts.$data()['$[]'](0).$attributes()['$[]']("pagination")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return nil};
            self.$extract_pagination(posts);
            ($a = self.$state().$posts(), $a['$data=']($rb_plus($a.$data(), posts.$data())));
            self.$set_state($hash2(["posts"], {"posts": self.$n_state("posts")}));
            self.$listen_to_infinite_scroll_beacon();
            return self.post_index_query_running = false;
          }, TMP_14.$$arity = 1);

          Opal.defn(self, '$render', TMP_16 = function ːrender() {
            var $a, $b, TMP_15, self = this;

            return self.$t("div", $hash2(["className"], {"className": "Users-Posts-Index"}), self.$children(), (function() {if ((($a = self.$n_state("no_posts")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$no_posts_message()
              } else {
              return nil
            }; return nil; })(), ($a = ($b = self.$state().$posts().$data().$map()).$with_index, $a.$$p = (TMP_15 = function(post, i){var self = TMP_15.$$s || this;
              if (self.post_link == null) self.post_link = nil;
if (post == null) post = nil;if (i == null) i = nil;
            return self.$t((((($scope.get('Components')).$$scope.get('Posts'))).$$scope.get('ShowInline')), $hash2(["post_link_preceding_part", "post", "owner", "i", "key"], {"post_link_preceding_part": self.post_link, "post": post, "owner": self, "i": i, "key": i}))}, TMP_15.$$s = self, TMP_15.$$arity = 2, TMP_15), $a).call($b), self.$t("div", $hash2(["ref"], {"ref": "last_beacon"}), self.$next_page_infinite_scroll_beacon($rb_minus(self.$state().$posts().$data().$length(), 1))));
          }, TMP_16.$$arity = 0);

          Opal.defn(self, '$render_post_node_depending_on_type', TMP_17 = function ːrender_post_node_depending_on_type(node, truncate_text) {
            var self = this, $case = nil;

            if (truncate_text == null) {
              truncate_text = false;
            }
            return (function() {$case = node;if ($scope.get('PostText')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('PostTexts'))).$$scope.get('Show')), $hash2(["post_text", "truncate_text"], {"post_text": node, "truncate_text": truncate_text}))}else if ($scope.get('PostImage')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": node}))}else if ($scope.get('PostGif')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('PostGifs'))).$$scope.get('Show')), $hash2(["post_gif"], {"post_gif": node}))}else if ($scope.get('VideoEmbed')['$===']($case)) {return self.$t((((($scope.get('Components')).$$scope.get('VideoEmbeds'))).$$scope.get('Show')), $hash2(["video_embed"], {"video_embed": node}))}else { return nil }})();
          }, TMP_17.$$arity = -2);

          Opal.defn(self, '$handle_infinite_croll_beacon_reach', TMP_18 = function ːhandle_infinite_croll_beacon_reach() {
            var self = this;

            self.$destroy_infinite_scroll_beacon();
            return self.$fetch_and_set_posts($rb_plus(self.$pagination_current_page(), 1));
          }, TMP_18.$$arity = 0);

          Opal.defn(self, '$subscription_changed', TMP_21 = function ːsubscription_changed(user, user_subscription, status) {
            var $a, $b, TMP_19, $c, TMP_20, self = this, $case = nil;

            $case = status;if ("unsubscribed"['$===']($case)) {(($a = [nil]), $b = user, $b['$usub_with_current_user='].apply($b, $a), $a[$a.length-1]);
            ($a = ($b = self.$state().$posts()).$each, $a.$$p = (TMP_19 = function(post){var self = TMP_19.$$s || this, $c, $d;
if (post == null) post = nil;
            if (post.$author().$id()['$=='](user.$id())) {
                return (($c = [$scope.get('UserSubscription').$new($hash2(["to_user_id"], {"to_user_id": user.$id()}))]), $d = post.$author(), $d['$usub_with_current_user='].apply($d, $c), $c[$c.length-1])
                } else {
                return nil
              }}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19), $a).call($b);}else if ("subscribed"['$===']($case)) {(($a = [user_subscription]), $c = user, $c['$usub_with_current_user='].apply($c, $a), $a[$a.length-1]);
            ($a = ($c = self.$state().$posts()).$each, $a.$$p = (TMP_20 = function(post){var self = TMP_20.$$s || this, $d, $e;
if (post == null) post = nil;
            if (post.$author().$id()['$=='](user.$id())) {
                return (($d = [user_subscription]), $e = post.$author(), $e['$usub_with_current_user='].apply($e, $d), $d[$d.length-1])
                } else {
                return nil
              }}, TMP_20.$$s = self, TMP_20.$$arity = 1, TMP_20), $a).call($c);};
            return self.$force_update();
          }, TMP_21.$$arity = 3);

          Opal.defn(self, '$pkt_changed', TMP_22 = function ːpkt_changed(pkt) {
            var self = this;

            self.$p("changed " + (pkt) + ": " + (pkt.$attributes()));
            return self.$force_update();
          }, TMP_22.$$arity = 1);

          Opal.defn(self, '$component_will_unmount', TMP_23 = function ːcomponent_will_unmount() {
            var self = this;

            return (Opal.cvars['@@instance'] = nil);
          }, TMP_23.$$arity = 0);

          return (Opal.defn(self, '$no_posts_message', TMP_24 = function ːno_posts_message() {
            var $a, self = this;

            if ((($a = self.is_at_dashboard) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("p", $hash2([], {}), "you have not created posts yet")
              } else {
              return self.$t("p", $hash2([], {}), "ths user has not created posts yet")
            };
          }, TMP_24.$$arity = 0), nil) && 'no_posts_message';
        })($scope.base, $scope.get('RW'))
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/users/show/general_info"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$user_id', '$props', '$params', '$then', '$set_state', '$p', '$general_info', '$n_state', '$t', '$progress_bar', '$user', '$state', '$==', '$id', '$instance', '$promote_registration', '$>', '$total_posts', '$no_post_message', '$top_post', '$length', '$data', '$map', '$each_with_index', '$latest_user_posts', '$top_comment', '$content', '$latest_discussion_messages', '$n_prop', '$name', '$link_to']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Users, self = $Users = $module($base, 'Users');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $Show, self = $Show = $module($base, 'Show');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $GeneralInfo(){};
          var self = $GeneralInfo = $klass($base, $super, 'GeneralInfo', $GeneralInfo);

          var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_5, TMP_6, TMP_7, TMP_8;

          self.$expose();

          Opal.defn(self, '$component_did_mount', TMP_2 = function ːcomponent_did_mount() {
            var $a, $b, TMP_1, self = this, user_id = nil;

            if ((($a = self.$props().$user_id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              user_id = self.$props().$user_id()
              } else {
              user_id = self.$props().$params().$user_id()
            };
            return ($a = ($b = $scope.get('User').$general_info($hash2(["wilds", "component"], {"wilds": $hash2(["id"], {"id": user_id}), "component": self}))).$then, $a.$$p = (TMP_1 = function(result){var self = TMP_1.$$s || this, e = nil;
if (result == null) result = nil;
            try {
                return self.$set_state(result)
              } catch ($err) {
                if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                  try {
                    return self.$p(e)
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              }}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);
          }, TMP_2.$$arity = 0);

          Opal.defn(self, '$render', TMP_5 = function ːrender() {
            var $a, $b, TMP_3, $c, TMP_4, self = this;

            self.$p(self.$n_state("total_posts"));
            return self.$t("div", $hash2(["className"], {"className": "users-show-generalInfo"}), self.$progress_bar(), (function() {if ((($a = self.$state().$user()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return [self.$t("div", $hash2(["className"], {"className": "user"}), self.$t((((((($scope.get('Components')).$$scope.get('Users'))).$$scope.get('Partials'))).$$scope.get('AuthorLabel')), $hash2(["user", "show_only_name", "promote_registration"], {"user": self.$n_state("user"), "show_only_name": ((function() {if ($scope.get('CurrentUser').$instance().$id()['$=='](self.$state().$user().$id())) {
                return true
                } else {
                return nil
              }; return nil; })()), "promote_registration": self.$promote_registration()})), (function() {if ((($a = ($b = self.$n_state("total_posts"), $b !== false && $b !== nil && $b != null ?$rb_gt(self.$n_state("total_posts"), 0) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return self.$t("p", $hash2([], {}), "total posts: " + (self.$state().$total_posts()))
                } else {
                return self.$no_post_message()
              }; return nil; })()), (function() {if ((($a = self.$n_state("top_post")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return [self.$t("div", $hash2(["className"], {"className": "topPost"}), self.$t("p", $hash2([], {}), "best post so far:")), self.$t((((($scope.get('Components')).$$scope.get('Posts'))).$$scope.get('ShowInline')), $hash2(["post", "i", "owner"], {"post": self.$state().$top_post(), "i": "top_post", "owner": self}))]
                } else {
                return nil
              }; return nil; })(), (function() {if ((($a = ($b = self.$n_state("latest_user_posts"), $b !== false && $b !== nil && $b != null ?$rb_gt(self.$n_state("latest_user_posts").$data().$length(), 0) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return [self.$t("div", $hash2(["className"], {"className": "latestPosts"}), self.$t("p", $hash2([], {}), "latest posts:")), ($a = ($b = self.$state().$latest_user_posts().$data().$each_with_index()).$map, $a.$$p = (TMP_3 = function(post, i){var self = TMP_3.$$s || this;
if (post == null) post = nil;if (i == null) i = nil;
                return self.$t((((($scope.get('Components')).$$scope.get('Posts'))).$$scope.get('ShowInline')), $hash2(["post", "i", "owner"], {"post": post, "i": i, "owner": self}))}, TMP_3.$$s = self, TMP_3.$$arity = 2, TMP_3), $a).call($b)]
                } else {
                return nil
              }; return nil; })(), self.$t("div", $hash2(["className"], {"className": "topComment"}), (function() {if ((($a = self.$state().$top_comment()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return self.$t("div", $hash2([], {}), self.$state().$top_comment().$content())
                } else {
                return nil
              }; return nil; })()), self.$t("div", $hash2(["className"], {"className": "latestComments"}), (function() {if ((($a = self.$state().$latest_discussion_messages()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return ($a = ($c = self.$state().$latest_discussion_messages()).$map, $a.$$p = (TMP_4 = function(discussion_message){var self = TMP_4.$$s || this;
if (discussion_message == null) discussion_message = nil;
                return self.$t("div", $hash2(["className"], {"className": "commentContent"}), discussion_message.$content())}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($c)
                } else {
                return nil
              }; return nil; })())]
              } else {
              return nil
            }; return nil; })());
          }, TMP_5.$$arity = 0);

          Opal.defn(self, '$promote_registration', TMP_6 = function ːpromote_registration() {
            var $a, self = this;

            if ((($a = self.$n_prop("dashboard_mode")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return ((function() {if ((($a = self.$n_state("user").$name()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return false
                } else {
                return true
              }; return nil; })())
              } else {
              return nil
            };
          }, TMP_6.$$arity = 0);

          Opal.defn(self, '$no_post_message', TMP_7 = function ːno_post_message() {
            var $a, self = this;

            if ((($a = self.$n_prop("dashboard_mode")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("p", $hash2([], {}), "you have not yet created any posts, ", self.$link_to("go ahead", "/dashboard/" + ($scope.get('CurrentUser').$instance().$id()) + "/posts/new"), " it's easy and fun!")
              } else {
              return self.$t("p", $hash2([], {}), "this user has not created any post yet")
            };
          }, TMP_7.$$arity = 0);

          return (Opal.defn(self, '$set_current_post_for_show', TMP_8 = function ːset_current_post_for_show(post) {
            var self = this;

            return nil;
          }, TMP_8.$$arity = 1), nil) && 'set_current_post_for_show';
        })($scope.base, $scope.get('RW'))
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/users/show/main"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$==', '$n_prop', '$t', '$link_to', '$on_main', '$params', '$props', '$children']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Users, self = $Users = $module($base, 'Users');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $Show, self = $Show = $module($base, 'Show');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Main(){};
          var self = $Main = $klass($base, $super, 'Main', $Main);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

          self.$expose();

          Opal.defn(self, '$on_main', TMP_1 = function ːon_main() {
            var self = this;

            if (self.$n_prop("location")["pathname"]['$==']("users/" + (self.$n_prop("params")["user_id"]))) {
              return true
              } else {
              return false
            };
          }, TMP_1.$$arity = 0);

          return (Opal.defn(self, '$render', TMP_2 = function ːrender() {
            var $a, self = this;

            return self.$t("div", $hash2(["className"], {"className": "dashboards-index users-show"}), self.$t("div", $hash2(["className"], {"className": "controlls"}), self.$t("ul", $hash2([], {}), self.$link_to(self.$t("li", $hash2([], {}), "users posts"), "/users/" + (self.$n_prop("params")["user_id"]) + "/posts"))), self.$t("div", $hash2(["className"], {"className": "content"}), (function() {if ((($a = self.$on_main()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t((((((($scope.get('Components')).$$scope.get('Users'))).$$scope.get('Show'))).$$scope.get('GeneralInfo')), $hash2(["params"], {"params": self.$props().$params()}))
              } else {
              return nil
            }; return nil; })(), self.$children()));
          }, TMP_2.$$arity = 0), nil) && 'render';
        })($scope.base, $scope.get('RW'))
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/users/user_subscriptions/index"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$new', '$then', '$<', '$length', '$data', '$set_state', '$index_for_user', '$id', '$instance', '$t', '$n_state', '$map', '$users', '$state']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Users, self = $Users = $module($base, 'Users');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $UserSubscriptions, self = $UserSubscriptions = $module($base, 'UserSubscriptions');

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Index(){};
          var self = $Index = $klass($base, $super, 'Index', $Index);

          var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3, TMP_5;

          self.$expose();

          Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
            var self = this;

            return $hash2(["users", "no_subs"], {"users": $scope.get('ModelCollection').$new(), "no_subs": false});
          }, TMP_1.$$arity = 0);

          Opal.defn(self, '$component_did_mount', TMP_3 = function ːcomponent_did_mount() {
            var $a, $b, TMP_2, self = this;

            return ($a = ($b = $scope.get('UserSubscription').$index_for_user($hash2(["wilds"], {"wilds": $hash2(["id"], {"id": $scope.get('CurrentUser').$instance().$id()})}))).$then, $a.$$p = (TMP_2 = function(users){var self = TMP_2.$$s || this, $c, no_subs = nil;
if (users == null) users = nil;
            no_subs = (function() {if ((($c = $rb_lt(users.$data().$length(), 1)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return true
                } else {
                return false
              }; return nil; })();
              return self.$set_state($hash2(["users", "no_subs"], {"users": users, "no_subs": no_subs}));}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b);
          }, TMP_3.$$arity = 0);

          return (Opal.defn(self, '$render', TMP_5 = function ːrender() {
            var $a, $b, TMP_4, self = this;

            return self.$t("div", $hash2(["className"], {"className": "UserSubscriptions-Index"}), (function() {if ((($a = self.$n_state("no_subs")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return "you have no subscriptions yet"
              } else {
              return nil
            }; return nil; })(), ($a = ($b = self.$state().$users()).$map, $a.$$p = (TMP_4 = function(user){var self = TMP_4.$$s || this;
if (user == null) user = nil;
            return self.$t((((((($scope.get('Components')).$$scope.get('Users'))).$$scope.get('Partials'))).$$scope.get('AuthorLabel')), $hash2(["user"], {"user": user}))}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($b));
          }, TMP_5.$$arity = 0), nil) && 'render';
        })($scope.base, $scope.get('RW'))
      })($scope.base)
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/video_embeds/edit"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$t']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $VideoEmbeds, self = $VideoEmbeds = $module($base, 'VideoEmbeds');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Edit(){};
        var self = $Edit = $klass($base, $super, 'Edit', $Edit);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

        self.$expose();

        Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
          var self = this;

          return $hash2(["editing"], {"editing": false});
        }, TMP_1.$$arity = 0);

        return (Opal.defn(self, '$render', TMP_2 = function ːrender() {
          var self = this;

          return self.$t("div", $hash2([], {}));
        }, TMP_2.$$arity = 0), nil) && 'render';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/video_embeds/new"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$p', '$!', '$has_errors?', '$video_embed', '$props', '$link', '$t', '$submitted', '$state', '$form_model', '$map', '$errors', '$lambda', '$cancel', '$input', '$record_changes', '$submit', '$collect_inputs', '$link=', '$translate_youtube_link_to_embed', '$==', '$add_error', '$set_state', '$n_prop', '$call', '$n_state', '$then', '$emit', '$create', '$provider=']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $VideoEmbeds, self = $VideoEmbeds = $module($base, 'VideoEmbeds');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $New(){};
        var self = $New = $klass($base, $super, 'New', $New);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_6, TMP_8, TMP_9;

        self.$expose();

        self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

        Opal.defn(self, '$init', TMP_1 = function ːinit() {
          var self = this;

          return self.$p("inited");
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$get_initial_state', TMP_2 = function ːget_initial_state() {
          var $a, $b, self = this, submitted = nil;

          if ((($a = ($b = self.$props().$video_embed()['$has_errors?']()['$!'](), $b !== false && $b !== nil && $b != null ?self.$props().$video_embed().$link() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            submitted = true
            } else {
            submitted = false
          };
          return $hash2(["form_model", "submitted"], {"form_model": self.$props().$video_embed(), "submitted": submitted});
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$render', TMP_6 = function ːrender() {
          var $a, $b, TMP_3, $c, TMP_4, $d, TMP_5, self = this;

          return self.$t("div", $hash2(["className"], {"className": "video-embed-new"}), (function() {if ((($a = self.$state().$submitted()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return [(function() {if ((($a = self.$state().$form_model()['$has_errors?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("div", $hash2(["className"], {"className": "errors"}), ($a = ($b = self.$state().$form_model().$errors()).$map, $a.$$p = (TMP_3 = function(error){var self = TMP_3.$$s || this;
if (error == null) error = nil;
              return self.$t("p", $hash2([], {}), "" + (error))}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b))
              } else {
              return nil
            }; return nil; })(), self.$t((((($scope.get('Components')).$$scope.get('VideoEmbeds'))).$$scope.get('Show')), $hash2(["video_embed"], {"video_embed": self.$state().$form_model()})), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

            return self.$cancel()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($c), "className": "btn btn-xs"}), "cancel and insert another")]
            } else {
            return [self.$t("p", $hash2([], {}), "insert your youtube link here"), self.$input((((($scope.get('Components')).$$scope.get('Forms'))).$$scope.get('Input')), self.$state().$form_model(), "link", $hash2(["record_changes"], {"record_changes": self.$props().$record_changes()})), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($d = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

            return self.$submit()}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($d), "className": "btn btn-xs submit-btn"}), "ok")]
          }; return nil; })());
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$submit', TMP_8 = function ːsubmit() {
          var $a, $b, TMP_7, self = this;

          self.$collect_inputs();
          (($a = [(($scope.get('Services')).$$scope.get('JsHelpers')).$translate_youtube_link_to_embed(self.$state().$form_model().$link())]), $b = self.$state().$form_model(), $b['$link='].apply($b, $a), $a[$a.length-1]);
          if (self.$state().$form_model().$link()['$==']("error")) {
            self.$state().$form_model().$add_error("link", "invalid link provided");
            return self.$set_state($hash2(["form_model"], {"form_model": self.$state().$form_model()}));
            } else {
            if ((($a = self.$n_prop("on_collect")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              self.$n_prop("on_collect").$call(self.$n_state("form_model"), self);
              return nil;};
            return ($a = ($b = self.$n_state("form_model").$create()).$then, $a.$$p = (TMP_7 = function(video_embed){var self = TMP_7.$$s || this, $c;
if (video_embed == null) video_embed = nil;
            if ((($c = video_embed['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return self.$set_state($hash2(["form_model"], {"form_model": video_embed}))
                } else {
                self.$set_state($hash2(["form_model", "submitted"], {"form_model": video_embed, "submitted": true}));
                if ((($c = self.$n_prop("on_done")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                  return self.$emit("on_done", video_embed)
                  } else {
                  return nil
                };
              }}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b);
          };
        }, TMP_8.$$arity = 0);

        return (Opal.defn(self, '$cancel', TMP_9 = function ːcancel() {
          var $a, $b, self = this;

          (($a = [nil]), $b = self.$state().$form_model(), $b['$link='].apply($b, $a), $a[$a.length-1]);
          (($a = [nil]), $b = self.$state().$form_model(), $b['$provider='].apply($b, $a), $a[$a.length-1]);
          return self.$set_state($hash2(["form_model", "submitted"], {"form_model": self.$state().$form_model(), "submitted": false}));
        }, TMP_9.$$arity = 0), nil) && 'cancel';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/video_embeds/show"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$video_embed', '$props', '$is_a?', '$puts', '$name', '$class', '$get_id', '$link', '$n_prop', '$t', '$n_state', '$lambda', '$toggle_playbacked', '$set_state', '$!', '$[]', '$split']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $VideoEmbeds, self = $VideoEmbeds = $module($base, 'VideoEmbeds');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Show(){};
        var self = $Show = $klass($base, $super, 'Show', $Show);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4, TMP_5, TMP_6;

        def.link_to_thumbnail = nil;
        self.$expose();

        Opal.defn(self, '$validate_props', TMP_1 = function ːvalidate_props() {
          var $a, $b, self = this;

          if ((($a = ($b = self.$props().$video_embed(), $b !== false && $b !== nil && $b != null ?self.$props().$video_embed()['$is_a?']($scope.get('VideoEmbed')) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return self.$puts("" + (self.$class().$name()) + " reuired prop video_embed expected\n                got " + (self.$props().$video_embed()) + " of " + (self.$props().$video_embed().$class().$name()) + " ")
          };
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$get_initial_state', TMP_2 = function ːget_initial_state() {
          var self = this, youtube_id = nil;

          youtube_id = self.$get_id(self.$n_prop("video_embed").$link());
          self.link_to_thumbnail = "http://img.youtube.com/vi/" + (youtube_id) + "/mqdefault.jpg";
          return $hash2(["playbacked"], {"playbacked": false});
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$render', TMP_4 = function ːrender() {
          var $a, $b, TMP_3, self = this;

          return self.$t("div", $hash2(["className"], {"className": "VideoEmbed-Show"}), (function() {if ((($a = self.$n_state("playbacked")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("div", $hash2(["className"], {"className": "video-embed-show embed-responsive embed-responsive-16by9"}), self.$t("iframe", $hash2(["key", "src", "className"], {"key": self.$props().$video_embed().$link(), "src": "" + (self.$props().$video_embed().$link()) + "?autoplay=1", "className": "embed-responsive-item"})))
            } else {
            return self.$t("div", $hash2(["className", "onClick"], {"className": "img-thumb", "onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

            return self.$toggle_playbacked()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($b)}), self.$t("img", $hash2(["className", "src"], {"className": "img-responsive", "src": self.link_to_thumbnail})), (function() {if ((($a = self.$n_prop("no_playback")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$t("i", $hash2(["className"], {"className": "play-btn icon-play"}))
            }; return nil; })())
          }; return nil; })());
        }, TMP_4.$$arity = 0);

        Opal.defn(self, '$toggle_playbacked', TMP_5 = function ːtoggle_playbacked() {
          var $a, self = this;

          if ((($a = self.$n_prop("no_playback")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return self.$set_state($hash2(["playbacked"], {"playbacked": self.$n_state("playbacked")['$!']()}))
          };
        }, TMP_5.$$arity = 0);

        return (Opal.defn(self, '$get_id', TMP_6 = function ːget_id(link) {
          var self = this;

          return link.$split("/")['$[]'](-1);
        }, TMP_6.$$arity = 1), nil) && 'get_id';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/vote_poll_options/edit"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$n_prop', '$t', '$modal', '$general_errors_for', '$n_state', '$lambda', '$update_option', '$input', '$set_vote_poll_option_changed', '$m_content', '$==', '$m_content_type', '$remove_image_from_m_content', '$init_image_addition', '$delete_option', '$modal_open', '$event', '$insert_image_to_m_content', '$modal_close', '$then', '$has_errors?', '$each', '$add_error', '$errors', '$m_content=', '$m_content_type=', '$set_state', '$update_vote_poll_option_as_content', '$id', '$remove_from_vote_poll_option', '$collect_inputs', '$update', '$errors=', '$force_update', '$emit', '$destroy']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $VotePollOptions, self = $VotePollOptions = $module($base, 'VotePollOptions');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Edit(){};
        var self = $Edit = $klass($base, $super, 'Edit', $Edit);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_7, TMP_9, TMP_12, TMP_15, TMP_16, TMP_18, TMP_20;

        self.$expose();

        self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

        Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
          var $a, self = this, vote_poll_option = nil;

          vote_poll_option = self.$n_prop("vote_poll_option");
          return $hash2(["vote_poll_option", "vote_poll_option_changed", "image_roster"], {"vote_poll_option": vote_poll_option, "vote_poll_option_changed": false, "image_roster": (((($a = self.$n_prop("image_roster")) !== false && $a !== nil && $a != null) ? $a : []))});
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$render', TMP_7 = function ːrender() {
          var $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, $e, TMP_5, $f, TMP_6, self = this;

          return self.$t("div", $hash2([], {}), self.$modal(), self.$general_errors_for(self.$n_state("vote_poll_option")), (function() {if ((($a = self.$n_state("vote_poll_option_changed")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

            return self.$update_option()}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($b)}), "udpate")
            } else {
            return nil
          }; return nil; })(), self.$input((($scope.get('Forms')).$$scope.get('Input')), self.$n_state("vote_poll_option"), "content", $hash2(["show_name", "required_field", "on_change"], {"show_name": "type what to vote about", "required_field": true, "on_change": ($a = ($c = self).$lambda, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

          return self.$set_vote_poll_option_changed()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($c)})), (function() {if ((($a = ($d = self.$n_state("vote_poll_option").$m_content(), $d !== false && $d !== nil && $d != null ?self.$n_state("vote_poll_option").$m_content_type()['$==']("PostImage") : $d)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return [self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": self.$n_state("vote_poll_option").$m_content()})), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($d = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

            return self.$remove_image_from_m_content()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($d)}), "remove image")]
            } else {
            return self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($e = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

            return self.$init_image_addition()}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($e)}), "add image")
          }; return nil; })(), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($f = self).$lambda, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

          return self.$delete_option()}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($f)}), "remove this option"));
        }, TMP_7.$$arity = 0);

        Opal.defn(self, '$init_image_addition', TMP_9 = function ːinit_image_addition() {
          var $a, $b, TMP_8, self = this;

          return self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('UploadAndPreview')), $hash2(["on_image_selected", "post_images"], {"on_image_selected": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_8 = function(image){var self = TMP_8.$$s || this;
if (image == null) image = nil;
          return self.$insert_image_to_m_content(image)}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $a).call($b)), "post_images": self.$n_state("image_roster")})));
        }, TMP_9.$$arity = 0);

        Opal.defn(self, '$insert_image_to_m_content', TMP_12 = function ːinsert_image_to_m_content(image) {
          var $a, $b, TMP_10, self = this;

          self.$modal_close();
          return ($a = ($b = image.$update_vote_poll_option_as_content($hash2(["wilds"], {"wilds": $hash2(["vote_poll_option_id"], {"vote_poll_option_id": self.$n_state("vote_poll_option").$id()})}))).$then, $a.$$p = (TMP_10 = function(u_img){var self = TMP_10.$$s || this, $c, $d, TMP_11, $e;
if (u_img == null) u_img = nil;
          if ((($c = u_img['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              ($c = ($d = u_img.$errors()).$each, $c.$$p = (TMP_11 = function(er){var self = TMP_11.$$s || this;
if (er == null) er = nil;
              return self.$n_state("vote_poll_option").$add_error("m_content", er)}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $c).call($d)
              } else {
              (($c = [u_img]), $e = self.$n_state("vote_poll_option"), $e['$m_content='].apply($e, $c), $c[$c.length-1]);
              (($c = ["PostImage"]), $e = self.$n_state("vote_poll_option"), $e['$m_content_type='].apply($e, $c), $c[$c.length-1]);
            };
            return self.$set_state($hash2(["vote_poll_option"], {"vote_poll_option": self.$n_state("vote_poll_option")}));}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10), $a).call($b);
        }, TMP_12.$$arity = 1);

        Opal.defn(self, '$remove_image_from_m_content', TMP_15 = function ːremove_image_from_m_content() {
          var $a, $b, TMP_13, self = this;

          return ($a = ($b = self.$n_state("vote_poll_option").$m_content().$remove_from_vote_poll_option($hash2(["wilds"], {"wilds": $hash2(["vote_poll_option_id"], {"vote_poll_option_id": self.$n_state("vote_poll_option").$id()})}))).$then, $a.$$p = (TMP_13 = function(image){var self = TMP_13.$$s || this, $c, $d, TMP_14, $e;
if (image == null) image = nil;
          if ((($c = image['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              ($c = ($d = image.$errors()).$each, $c.$$p = (TMP_14 = function(er){var self = TMP_14.$$s || this;
if (er == null) er = nil;
              return self.$n_state("vote_poll_option").$add_error("m_content", er)}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $c).call($d)
              } else {
              (($c = [nil]), $e = self.$n_state("vote_poll_option"), $e['$m_content='].apply($e, $c), $c[$c.length-1]);
              (($c = [nil]), $e = self.$n_state("vote_poll_option"), $e['$m_content_type='].apply($e, $c), $c[$c.length-1]);
            };
            return self.$set_state($hash2(["vote_poll_option"], {"vote_poll_option": self.$n_state("vote_poll_option")}));}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13), $a).call($b);
        }, TMP_15.$$arity = 0);

        Opal.defn(self, '$set_vote_poll_option_changed', TMP_16 = function ːset_vote_poll_option_changed() {
          var $a, self = this;

          if ((($a = self.$n_state("vote_poll_option_changed")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return self.$set_state($hash2(["vote_poll_option_changed"], {"vote_poll_option_changed": true}))
          };
        }, TMP_16.$$arity = 0);

        Opal.defn(self, '$update_option', TMP_18 = function ːupdate_option() {
          var $a, $b, TMP_17, self = this;

          self.$collect_inputs();
          return ($a = ($b = self.$n_state("vote_poll_option").$update()).$then, $a.$$p = (TMP_17 = function(vote_poll_option){var self = TMP_17.$$s || this, $c;
if (vote_poll_option == null) vote_poll_option = nil;
          if ((($c = vote_poll_option['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return self.$set_state($hash2(["vote_poll_option"], {"vote_poll_option": vote_poll_option}))
              } else {
              return self.$set_state($hash2(["vote_poll_option", "vote_poll_option_changed"], {"vote_poll_option": vote_poll_option, "vote_poll_option_changed": false}))
            }}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17), $a).call($b);
        }, TMP_18.$$arity = 0);

        return (Opal.defn(self, '$delete_option', TMP_20 = function ːdelete_option() {
          var $a, $b, TMP_19, self = this;

          return ($a = ($b = self.$n_state("vote_poll_option").$destroy()).$then, $a.$$p = (TMP_19 = function(vote_poll_option){var self = TMP_19.$$s || this, $c, $d;
if (vote_poll_option == null) vote_poll_option = nil;
          if ((($c = vote_poll_option['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              (($c = [vote_poll_option.$errors()]), $d = self.$n_state("vote_poll_option"), $d['$errors='].apply($d, $c), $c[$c.length-1]);
              return self.$force_update();
              } else {
              return self.$emit("on_delete")
            }}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19), $a).call($b);
        }, TMP_20.$$arity = 0), nil) && 'delete_option';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/vote_poll_options/new"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$n_prop', '$t', '$modal', '$input', '$n_state', '$m_content', '$==', '$m_content_type', '$lambda', '$remove_image_from_m_content', '$init_image_addition', '$submit_when_save_in_place', '$delete_option', '$modal_open', '$event', '$insert_image', '$modal_close', '$m_content=', '$m_content_type=', '$set_state', '$collect_inputs', '$then', '$has_errors?', '$emit', '$create', '$id']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $VotePollOptions, self = $VotePollOptions = $module($base, 'VotePollOptions');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $New(){};
        var self = $New = $klass($base, $super, 'New', $New);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_6, TMP_8, TMP_9, TMP_10, TMP_12;

        self.$expose();

        self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

        Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
          var self = this;

          return $hash2(["vote_poll_option", "image_roster"], {"vote_poll_option": self.$n_prop("vote_poll_option"), "image_roster": []});
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$render', TMP_6 = function ːrender() {
          var $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, $e, TMP_5, self = this;

          return self.$t("div", $hash2(["className"], {"className": "VotePollOptions-New"}), self.$modal(), self.$input((($scope.get('Forms')).$$scope.get('Input')), self.$n_state("vote_poll_option"), "content", $hash2(["show_name", "required_field"], {"show_name": "type what to vote about", "required_field": true})), (function() {if ((($a = ($b = self.$n_state("vote_poll_option").$m_content(), $b !== false && $b !== nil && $b != null ?self.$n_state("vote_poll_option").$m_content_type()['$==']("PostImage") : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return [self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": self.$n_state("vote_poll_option").$m_content()})), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

            return self.$remove_image_from_m_content()}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($b)}), "remove image")]
            } else {
            return self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

            return self.$init_image_addition()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($c), "className": "btn btn-sm"}), "add image")
          }; return nil; })(), (function() {if ((($a = self.$n_prop("save_in_place")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($d = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

            return self.$submit_when_save_in_place()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($d)}), "save")
            } else {
            return self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($e = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

            return self.$delete_option()}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($e)}), "remove this option")
          }; return nil; })());
        }, TMP_6.$$arity = 0);

        Opal.defn(self, '$init_image_addition', TMP_8 = function ːinit_image_addition() {
          var $a, $b, TMP_7, self = this;

          return self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('UploadAndPreview')), $hash2(["on_image_selected", "post_images"], {"on_image_selected": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_7 = function(image){var self = TMP_7.$$s || this;
if (image == null) image = nil;
          return self.$insert_image(image)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b)), "post_images": self.$n_state("image_roster")})));
        }, TMP_8.$$arity = 0);

        Opal.defn(self, '$insert_image', TMP_9 = function ːinsert_image(image) {
          var $a, $b, self = this;

          self.$modal_close();
          (($a = [image]), $b = self.$n_state("vote_poll_option"), $b['$m_content='].apply($b, $a), $a[$a.length-1]);
          (($a = ["PostImage"]), $b = self.$n_state("vote_poll_option"), $b['$m_content_type='].apply($b, $a), $a[$a.length-1]);
          return self.$set_state($hash2(["vote_poll_option"], {"vote_poll_option": self.$n_state("vote_poll_option")}));
        }, TMP_9.$$arity = 1);

        Opal.defn(self, '$remove_image_from_m_content', TMP_10 = function ːremove_image_from_m_content() {
          var $a, $b, self = this;

          (($a = [nil]), $b = self.$n_state("vote_poll_option"), $b['$m_content='].apply($b, $a), $a[$a.length-1]);
          (($a = [nil]), $b = self.$n_state("vote_poll_option"), $b['$m_content_type='].apply($b, $a), $a[$a.length-1]);
          return self.$set_state($hash2(["vote_poll_option"], {"vote_poll_option": self.$n_state("vote_poll_option")}));
        }, TMP_10.$$arity = 0);

        return (Opal.defn(self, '$submit_when_save_in_place', TMP_12 = function ːsubmit_when_save_in_place() {
          var $a, $b, TMP_11, self = this;

          self.$collect_inputs();
          return ($a = ($b = self.$n_state("vote_poll_option").$create($hash2(["wilds"], {"wilds": $hash2(["post_vote_poll_id"], {"post_vote_poll_id": self.$n_prop("owner").$n_state("vote_poll").$id()})}))).$then, $a.$$p = (TMP_11 = function(vote_poll_option){var self = TMP_11.$$s || this, $c;
if (vote_poll_option == null) vote_poll_option = nil;
          if ((($c = vote_poll_option['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return self.$set_state($hash2(["vote_poll_option"], {"vote_poll_option": vote_poll_option}))
              } else {
              return self.$emit("on_done", vote_poll_option)
            }}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($b);
        }, TMP_12.$$arity = 0), nil) && 'submit_when_save_in_place';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/vote_polls/edit"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$then', '$set_state', '$p', '$show', '$id', '$n_prop', '$t', '$n_state', '$modal', '$lambda', '$update_vote_poll', '$input', '$set_vote_poll_changed', '$[]', '$errors', '$map', '$m_content', '$==', '$m_content_type', '$remove_image_from_vote_poll', '$init_image_addition_to_vote_poll', '$event', '$delete_option', '$data', '$vote_poll_options', '$init_option_addition', '$done', '$cancel', '$modal_open', '$insert_image_to_m_content', '$modal_close', '$has_errors?', '$each', '$add_error', '$m_content=', '$m_content_type=', '$update_post_vote_poll_as_content', '$remove_from_post_vote_poll', '$insert_vote_option', '$new', '$<<', '$collect_inputs', '$update', '$delete']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $VotePolls, self = $VotePolls = $module($base, 'VotePolls');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Edit(){};
        var self = $Edit = $klass($base, $super, 'Edit', $Edit);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3, TMP_14, TMP_15, TMP_17, TMP_20, TMP_23, TMP_25, TMP_26, TMP_28, TMP_29;

        self.$expose();

        self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

        Opal.defn(self, '$get_initial_state', TMP_1 = function ːget_initial_state() {
          var self = this;

          return $hash2(["vote_poll", "vote_poll_changed", "image_roster"], {"vote_poll": false, "vote_poll_changed": false, "image_roster": []});
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$component_did_mount', TMP_3 = function ːcomponent_did_mount() {
          var $a, $b, TMP_2, self = this;

          return ($a = ($b = $scope.get('PostVotePoll').$show($hash2(["wilds"], {"wilds": $hash2(["id"], {"id": self.$n_prop("vote_poll").$id()})}))).$then, $a.$$p = (TMP_2 = function(vote_poll){var self = TMP_2.$$s || this, e = nil;
if (vote_poll == null) vote_poll = nil;
          try {
              return self.$set_state($hash2(["vote_poll"], {"vote_poll": vote_poll}))
            } catch ($err) {
              if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                try {
                  return self.$p(e)
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b);
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$render', TMP_14 = function ːrender() {
          var $a, $b, TMP_4, $c, TMP_5, $d, TMP_6, $e, TMP_7, $f, TMP_8, $g, TMP_9, $h, TMP_11, $i, TMP_12, $j, TMP_13, self = this, ers = nil;

          return self.$t("div", $hash2([], {}), (function() {if ((($a = self.$n_state("vote_poll")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("div", $hash2([], {}), self.$modal(), (function() {if ((($a = self.$n_state("vote_poll_changed")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

              return self.$update_vote_poll()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($b)}), "update")
              } else {
              return nil
            }; return nil; })(), self.$input((($scope.get('Forms')).$$scope.get('Input')), self.$n_state("vote_poll"), "question", $hash2(["show_name", "required_field", "on_change"], {"show_name": "enter vote question", "required_field": true, "on_change": ($a = ($c = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

            return self.$set_vote_poll_changed()}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($c)})), (function() {if ((($a = ers = self.$n_state("vote_poll").$errors()['$[]']("m_content")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return ($a = ($d = ers).$map, $a.$$p = (TMP_6 = function(er){var self = TMP_6.$$s || this;
if (er == null) er = nil;
              return self.$t("p", $hash2([], {}), "image: " + (er))}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($d)
              } else {
              return nil
            }; return nil; })(), (function() {if ((($a = ($e = self.$n_state("vote_poll").$m_content(), $e !== false && $e !== nil && $e != null ?self.$n_state("vote_poll").$m_content_type()['$==']("PostImage") : $e)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return [self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": self.$n_state("vote_poll").$m_content()})), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($e = self).$lambda, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

              return self.$remove_image_from_vote_poll()}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($e)}), "remove image")]
              } else {
              return self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($f = self).$lambda, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

              return self.$init_image_addition_to_vote_poll()}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($f)}), "add image")
            }; return nil; })(), ($a = ($g = self.$n_state("vote_poll").$vote_poll_options().$data()).$map, $a.$$p = (TMP_9 = function(vote_poll_option){var self = TMP_9.$$s || this, $h, $i, TMP_10;
if (vote_poll_option == null) vote_poll_option = nil;
            return self.$t((((($scope.get('Components')).$$scope.get('VotePollOptions'))).$$scope.get('Edit')), $hash2(["key", "vote_poll_option", "on_delete"], {"key": "" + (vote_poll_option), "vote_poll_option": vote_poll_option, "on_delete": self.$event(($h = ($i = self).$lambda, $h.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

              return self.$delete_option(vote_poll_option)}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $h).call($i))}))}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $a).call($g), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($h = self).$lambda, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

            return self.$init_option_addition()}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $a).call($h)}), "add vote option"), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($i = self).$lambda, $a.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this;

            return self.$done()}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12), $a).call($i)}), "OK"), self.$t("button", $hash2(["onClick"], {"onClick": ($a = ($j = self).$lambda, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;

            return self.$cancel()}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $a).call($j)}), "cancel"))
            } else {
            return nil
          }; return nil; })());
        }, TMP_14.$$arity = 0);

        Opal.defn(self, '$set_vote_poll_changed', TMP_15 = function ːset_vote_poll_changed() {
          var $a, self = this;

          if ((($a = self.$n_state("vote_poll_changed")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return self.$set_state($hash2(["vote_poll_changed"], {"vote_poll_changed": true}))
          };
        }, TMP_15.$$arity = 0);

        Opal.defn(self, '$init_image_addition_to_vote_poll', TMP_17 = function ːinit_image_addition_to_vote_poll() {
          var $a, $b, TMP_16, self = this;

          return self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('UploadAndPreview')), $hash2(["on_image_selected", "post_images"], {"on_image_selected": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_16 = function(image){var self = TMP_16.$$s || this;
if (image == null) image = nil;
          return self.$insert_image_to_m_content(image)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $a).call($b)), "post_images": self.$n_state("image_roster")})));
        }, TMP_17.$$arity = 0);

        Opal.defn(self, '$insert_image_to_m_content', TMP_20 = function ːinsert_image_to_m_content(image) {
          var $a, $b, TMP_18, self = this;

          self.$modal_close();
          return ($a = ($b = image.$update_post_vote_poll_as_content($hash2(["wilds"], {"wilds": $hash2(["post_vote_poll_id"], {"post_vote_poll_id": self.$n_state("vote_poll").$id()})}))).$then, $a.$$p = (TMP_18 = function(u_img){var self = TMP_18.$$s || this, $c, $d, TMP_19, $e;
if (u_img == null) u_img = nil;
          if ((($c = u_img['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              ($c = ($d = u_img.$errors()).$each, $c.$$p = (TMP_19 = function(er){var self = TMP_19.$$s || this;
if (er == null) er = nil;
              return self.$n_state("vote_poll").$add_error("m_content", er)}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19), $c).call($d)
              } else {
              (($c = [u_img]), $e = self.$n_state("vote_poll"), $e['$m_content='].apply($e, $c), $c[$c.length-1]);
              (($c = ["PostImage"]), $e = self.$n_state("vote_poll"), $e['$m_content_type='].apply($e, $c), $c[$c.length-1]);
            };
            return self.$set_state($hash2(["vote_poll"], {"vote_poll": self.$n_state("vote_poll")}));}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18), $a).call($b);
        }, TMP_20.$$arity = 1);

        Opal.defn(self, '$remove_image_from_vote_poll', TMP_23 = function ːremove_image_from_vote_poll() {
          var $a, $b, TMP_21, self = this;

          return ($a = ($b = self.$n_state("vote_poll").$m_content().$remove_from_post_vote_poll($hash2(["wilds"], {"wilds": $hash2(["post_vote_poll_id"], {"post_vote_poll_id": self.$n_state("vote_poll").$id()})}))).$then, $a.$$p = (TMP_21 = function(image){var self = TMP_21.$$s || this, $c, $d, TMP_22, $e;
if (image == null) image = nil;
          if ((($c = image['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              ($c = ($d = image.$errors()).$each, $c.$$p = (TMP_22 = function(er){var self = TMP_22.$$s || this;
if (er == null) er = nil;
              return self.$n_state("vote_poll").$add_error("m_content", er)}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22), $c).call($d)
              } else {
              (($c = [nil]), $e = self.$n_state("vote_poll"), $e['$m_content='].apply($e, $c), $c[$c.length-1]);
              (($c = [nil]), $e = self.$n_state("vote_poll"), $e['$m_content_type='].apply($e, $c), $c[$c.length-1]);
            };
            return self.$set_state($hash2(["vote_poll"], {"vote_poll": self.$n_state("vote_poll")}));}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21), $a).call($b);
        }, TMP_23.$$arity = 0);

        Opal.defn(self, '$init_option_addition', TMP_25 = function ːinit_option_addition() {
          var $a, $b, TMP_24, self = this;

          return self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('VotePollOptions'))).$$scope.get('New')), $hash2(["save_in_place", "on_done", "owner", "vote_poll_option"], {"save_in_place": true, "on_done": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_24 = function(vote_option){var self = TMP_24.$$s || this;
if (vote_option == null) vote_option = nil;
          return self.$insert_vote_option(vote_option)}, TMP_24.$$s = self, TMP_24.$$arity = 1, TMP_24), $a).call($b)), "owner": self, "vote_poll_option": $scope.get('VotePollOption').$new()})));
        }, TMP_25.$$arity = 0);

        Opal.defn(self, '$insert_vote_option', TMP_26 = function ːinsert_vote_option(vote_option) {
          var self = this;

          self.$modal_close();
          self.$n_state("vote_poll").$vote_poll_options().$data()['$<<'](vote_option);
          return self.$set_state($hash2(["vote_poll"], {"vote_poll": self.$n_state("vote_poll")}));
        }, TMP_26.$$arity = 1);

        Opal.defn(self, '$update_vote_poll', TMP_28 = function ːupdate_vote_poll() {
          var $a, $b, TMP_27, self = this;

          self.$collect_inputs();
          return ($a = ($b = self.$n_state("vote_poll").$update()).$then, $a.$$p = (TMP_27 = function(vote_poll){var self = TMP_27.$$s || this, $c;
if (vote_poll == null) vote_poll = nil;
          if ((($c = vote_poll['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return self.$set_state($hash2(["vote_poll"], {"vote_poll": vote_poll}))
              } else {
              return self.$set_state($hash2(["vote_poll", "vote_poll_changed"], {"vote_poll": vote_poll, "vote_poll_changed": false}))
            }}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27), $a).call($b);
        }, TMP_28.$$arity = 0);

        return (Opal.defn(self, '$delete_option', TMP_29 = function ːdelete_option(vote_poll_option) {
          var self = this;

          self.$n_state("vote_poll").$vote_poll_options().$data().$delete(vote_poll_option);
          return self.$set_state($hash2(["vote_poll"], {"vote_poll": self.$n_state("vote_poll")}));
        }, TMP_29.$$arity = 1), nil) && 'delete_option';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/vote_polls/new"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$include', '$n_prop', '$new', '$t', '$modal', '$input', '$n_state', '$m_content', '$==', '$m_content_type', '$lambda', '$remove_image_from_vote_poll', '$init_image_addition_to_vote_poll', '$map', '$remove_image_from_vote_poll_option', '$init_image_addition_to_vote_poll_option', '$delete_option', '$vote_poll_options', '$add_option', '$done', '$cancel', '$modal_open', '$event', '$insert_image_to_vote_poll_option', '$modal_close', '$m_content=', '$m_content_type=', '$set_state', '$insert_image_to_vote_poll', '$<<', '$delete', '$data', '$collect_inputs', '$then', '$has_errors?', '$call', '$emit', '$create']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $VotePolls, self = $VotePolls = $module($base, 'VotePolls');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $New(){};
        var self = $New = $klass($base, $super, 'New', $New);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_12, TMP_14, TMP_15, TMP_16, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_24, TMP_25;

        self.$expose();

        self.$include((($scope.get('Plugins')).$$scope.get('Formable')));

        Opal.defn(self, '$validate_props', TMP_1 = function ːvalidate_props() {
          var self = this;

          return nil;
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$get_initial_state', TMP_2 = function ːget_initial_state() {
          var $a, self = this, vote_poll = nil;

          vote_poll = (function() {if ((($a = self.$n_prop("vote_poll")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$n_prop("vote_poll")
            } else {
            return $scope.get('PostVotePoll').$new()
          }; return nil; })();
          return $hash2(["vote_poll", "image_roster"], {"vote_poll": vote_poll, "image_roster": []});
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$render', TMP_12 = function ːrender() {
          var $a, $b, TMP_3, $c, TMP_4, $d, TMP_5, $e, TMP_9, $f, TMP_10, $g, TMP_11, self = this;

          return self.$t("div", $hash2(["className"], {"className": "VotePolls-New"}), self.$modal(), self.$t("div", $hash2(["className"], {"className": "question"}), self.$input((($scope.get('Forms')).$$scope.get('Input')), self.$n_state("vote_poll"), "question", $hash2(["show_name", "required_field"], {"show_name": "enter vote question", "required_field": true})), self.$t("div", $hash2(["className"], {"className": "mContent"}), (function() {if ((($a = ($b = self.$n_state("vote_poll").$m_content(), $b !== false && $b !== nil && $b != null ?self.$n_state("vote_poll").$m_content_type()['$==']("PostImage") : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return [self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": self.$n_state("vote_poll").$m_content()})), self.$t("div", $hash2(["className"], {"className": "btn btn-group"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($b = self).$lambda, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

            return self.$remove_image_from_vote_poll()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($b), "className": "btn btn-sm"}), "remove image"))]
            } else {
            return self.$t("div", $hash2(["className"], {"className": "btn-group"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($c = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

            return self.$init_image_addition_to_vote_poll()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($c), "className": "btn btn-sm"}), "add image"))
          }; return nil; })())), ($a = ($d = self.$n_state("vote_poll").$vote_poll_options()).$map, $a.$$p = (TMP_5 = function(vote_poll_option){var self = TMP_5.$$s || this, $e, $f, TMP_6, $g, TMP_7, $h, TMP_8;
if (vote_poll_option == null) vote_poll_option = nil;
          return self.$t("div", $hash2(["className"], {"className": "option"}), self.$input((($scope.get('Forms')).$$scope.get('Input')), vote_poll_option, "content", $hash2(["show_name", "required_field"], {"show_name": "type what to vote about", "required_field": true})), self.$t("div", $hash2(["className"], {"className": "m_content"}), (function() {if ((($e = ($f = vote_poll_option.$m_content(), $f !== false && $f !== nil && $f != null ?vote_poll_option.$m_content_type()['$==']("PostImage") : $f)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
              return [self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image"], {"post_image": vote_poll_option.$m_content()})), self.$t("div", $hash2(["className"], {"className": "btn-group"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($e = ($f = self).$lambda, $e.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

              return self.$remove_image_from_vote_poll_option(vote_poll_option)}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $e).call($f), "className": "btn btn-sm"}), "remove image"))]
              } else {
              return self.$t("div", $hash2(["className"], {"className": "btn-group"}), self.$t("button", $hash2(["className", "onClick"], {"className": "btn btn-sm", "onClick": ($e = ($g = self).$lambda, $e.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

              return self.$init_image_addition_to_vote_poll_option(vote_poll_option)}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $e).call($g)}), "add image"))
            }; return nil; })()), self.$t("div", $hash2(["className"], {"className": "btn-group"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($e = ($h = self).$lambda, $e.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

            return self.$delete_option(vote_poll_option)}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $e).call($h), "className": "btn btn-sm"}), "remove")))}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($d), self.$t("div", $hash2(["className"], {"className": "btn btn-group"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($e = self).$lambda, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

          return self.$add_option()}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($e), "className": "btn btn-sm btn-primary addOption-btn"}), "add vote option")), self.$t("div", $hash2(["className"], {"className": "btn-group"}), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($f = self).$lambda, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

          return self.$done()}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $a).call($f), "className": "btn btn-sm"}), "OK"), self.$t("button", $hash2(["onClick", "className"], {"onClick": ($a = ($g = self).$lambda, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

          return self.$cancel()}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $a).call($g), "className": "btn btn-sm"}), "cancel")));
        }, TMP_12.$$arity = 0);

        Opal.defn(self, '$init_image_addition_to_vote_poll_option', TMP_14 = function ːinit_image_addition_to_vote_poll_option(vote_poll_option) {
          var $a, $b, TMP_13, self = this;

          return self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('UploadAndPreview')), $hash2(["on_image_selected", "post_images"], {"on_image_selected": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_13 = function(image){var self = TMP_13.$$s || this;
if (image == null) image = nil;
          return self.$insert_image_to_vote_poll_option(image, vote_poll_option)}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13), $a).call($b)), "post_images": self.$n_state("image_roster")})));
        }, TMP_14.$$arity = 1);

        Opal.defn(self, '$insert_image_to_vote_poll_option', TMP_15 = function ːinsert_image_to_vote_poll_option(image, vote_poll_option) {
          var $a, $b, self = this;

          self.$modal_close();
          (($a = [image]), $b = vote_poll_option, $b['$m_content='].apply($b, $a), $a[$a.length-1]);
          (($a = ["PostImage"]), $b = vote_poll_option, $b['$m_content_type='].apply($b, $a), $a[$a.length-1]);
          return self.$set_state($hash2(["vote_poll"], {"vote_poll": self.$n_state("vote_poll")}));
        }, TMP_15.$$arity = 2);

        Opal.defn(self, '$remove_image_from_vote_poll_option', TMP_16 = function ːremove_image_from_vote_poll_option(vote_poll_option) {
          var $a, $b, self = this;

          (($a = [nil]), $b = vote_poll_option, $b['$m_content='].apply($b, $a), $a[$a.length-1]);
          (($a = [nil]), $b = vote_poll_option, $b['$m_content_type='].apply($b, $a), $a[$a.length-1]);
          return self.$set_state($hash2(["vote_poll"], {"vote_poll": self.$n_state("vote_poll")}));
        }, TMP_16.$$arity = 1);

        Opal.defn(self, '$init_image_addition_to_vote_poll', TMP_18 = function ːinit_image_addition_to_vote_poll() {
          var $a, $b, TMP_17, self = this;

          return self.$modal_open(nil, self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('UploadAndPreview')), $hash2(["on_image_selected", "post_images"], {"on_image_selected": self.$event(($a = ($b = self).$lambda, $a.$$p = (TMP_17 = function(image){var self = TMP_17.$$s || this;
if (image == null) image = nil;
          return self.$insert_image_to_vote_poll(image)}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17), $a).call($b)), "post_images": self.$n_state("image_roster")})));
        }, TMP_18.$$arity = 0);

        Opal.defn(self, '$insert_image_to_vote_poll', TMP_19 = function ːinsert_image_to_vote_poll(image) {
          var $a, $b, self = this;

          self.$modal_close();
          (($a = [image]), $b = self.$n_state("vote_poll"), $b['$m_content='].apply($b, $a), $a[$a.length-1]);
          (($a = ["PostImage"]), $b = self.$n_state("vote_poll"), $b['$m_content_type='].apply($b, $a), $a[$a.length-1]);
          return self.$set_state($hash2(["vote_poll"], {"vote_poll": self.$n_state("vote_poll")}));
        }, TMP_19.$$arity = 1);

        Opal.defn(self, '$remove_image_from_vote_poll', TMP_20 = function ːremove_image_from_vote_poll() {
          var $a, $b, self = this;

          (($a = [nil]), $b = self.$n_state("vote_poll"), $b['$m_content='].apply($b, $a), $a[$a.length-1]);
          (($a = [nil]), $b = self.$n_state("vote_poll"), $b['$m_content_type='].apply($b, $a), $a[$a.length-1]);
          return self.$set_state($hash2(["vote_poll"], {"vote_poll": self.$n_state("vote_poll")}));
        }, TMP_20.$$arity = 0);

        Opal.defn(self, '$add_option', TMP_21 = function ːadd_option() {
          var self = this, vote_poll = nil, new_option = nil;

          vote_poll = self.$n_state("vote_poll");
          new_option = $scope.get('VotePollOption').$new();
          vote_poll.$vote_poll_options()['$<<'](new_option);
          return self.$set_state($hash2(["vote_poll"], {"vote_poll": self.$n_state("vote_poll")}));
        }, TMP_21.$$arity = 0);

        Opal.defn(self, '$delete_option', TMP_22 = function ːdelete_option(vote_option) {
          var self = this;

          self.$n_state("vote_poll").$vote_poll_options().$data().$delete(vote_option);
          return self.$set_state($hash2(["vote_poll"], {"vote_poll": self.$n_state("vote_poll")}));
        }, TMP_22.$$arity = 1);

        Opal.defn(self, '$done', TMP_24 = function ːdone() {
          var $a, $b, TMP_23, self = this;

          self.$collect_inputs($hash2(["form_model"], {"form_model": "vote_poll"}));
          return ($a = ($b = self.$n_state("vote_poll").$create()).$then, $a.$$p = (TMP_23 = function(vote_poll){var self = TMP_23.$$s || this, $c;
if (vote_poll == null) vote_poll = nil;
          if ((($c = vote_poll['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return self.$set_state($hash2(["vote_poll"], {"vote_poll": vote_poll}))
              } else {
              if ((($c = self.$n_prop("on_collect")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                self.$n_prop("on_collect").$call(vote_poll, self)};
              return self.$emit("on_done", vote_poll);
            }}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23), $a).call($b);
        }, TMP_24.$$arity = 0);

        return (Opal.defn(self, '$cancel', TMP_25 = function ːcancel() {
          var self = this;

          return self.$emit("on_cancel");
        }, TMP_25.$$arity = 0), nil) && 'cancel';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["components/vote_polls/show"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$expose', '$n_prop', '$get_max_count_option', '$t', '$m_content', '$question', '$map', '$content', '$[]', '$arbitrary', '$lambda', '$increment', '$to_n', '$calculate_width_proportion', '$count', '$data', '$vote_poll_options', '$==', '$>', '$ceil', '$*', '$/', '$new', '$id', '$then', '$has_errors?', '$include?', '$errors', '$alert', '$[]=', '$count=', '$+', '$force_update', '$create', '$loaded', '$load_counts']);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $VotePolls, self = $VotePolls = $module($base, 'VotePolls');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Show(){};
        var self = $Show = $klass($base, $super, 'Show', $Show);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_4, TMP_5, TMP_7, TMP_9;

        self.$expose();

        Opal.defn(self, '$validate_props', TMP_1 = function ːvalidate_props() {
          var self = this;

          return nil;
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$render', TMP_4 = function ːrender() {
          var $a, $b, TMP_2, self = this, inline = nil, max_count = nil;

          inline = (function() {if ((($a = self.$n_prop("show_inline")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "inline"
            } else {
            return ""
          }; return nil; })();
          max_count = self.$n_prop("vote_poll").$get_max_count_option();
          return self.$t("div", $hash2(["className"], {"className": "PostVotePolls-Show"}), self.$t("div", $hash2(["className"], {"className": "question-group"}), (function() {if ((($a = self.$n_prop("vote_poll").$m_content()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$t("div", $hash2(["className"], {"className": "m_content"}), self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image", "css_class"], {"post_image": self.$n_prop("vote_poll").$m_content(), "css_class": inline})))
            } else {
            return nil
          }; return nil; })(), self.$t("h3", $hash2(["className"], {"className": "question"}), self.$n_prop("vote_poll").$question())), self.$t("div", $hash2(["className"], {"className": "options"}), ($a = ($b = self.$n_prop("vote_poll").$vote_poll_options().$data()).$map, $a.$$p = (TMP_2 = function(option){var self = TMP_2.$$s || this, $c, $d, TMP_3;
if (option == null) option = nil;
          return self.$t("div", $hash2(["className"], {"className": "option-wrap"}), self.$t("div", $hash2(["className"], {"className": "title-group"}), self.$t("p", $hash2([], {}), option.$content()), (function() {if ((($c = option.$m_content()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return self.$t("div", $hash2(["className"], {"className": "option-m_content"}), self.$t((((($scope.get('Components')).$$scope.get('PostImages'))).$$scope.get('Show')), $hash2(["post_image", "css_class"], {"post_image": option.$m_content(), "css_class": inline})))
              } else {
              return nil
            }; return nil; })()), self.$t("div", $hash2(["className"], {"className": "option"}), (function() {if ((($c = self.$n_prop("vote_poll").$arbitrary()['$[]']("already_voted")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return nil
              } else {
              return self.$t("div", $hash2(["className"], {"className": "select"}), self.$t("i", $hash2(["className", "onClick"], {"className": "icon-up-big", "onClick": ($c = ($d = self).$lambda, $c.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

              return self.$increment(option)}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $c).call($d)})))
            }; return nil; })(), self.$t("div", $hash2(["className", "style"], {"className": "proportion", "style": $hash2(["width"], {"width": "" + (self.$calculate_width_proportion(max_count, option.$count())) + "%"}).$to_n()})), self.$t("div", $hash2([], {}), self.$t("p", $hash2([], {}), option.$count()))))}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b)));
        }, TMP_4.$$arity = 0);

        Opal.defn(self, '$calculate_width_proportion', TMP_5 = function ːcalculate_width_proportion(max_count, option_count) {
          var $a, self = this;

          if (max_count['$=='](nil)) {
            return 0};
          if (max_count['$=='](option_count)) {
            return 100
          } else if ((($a = $rb_gt(max_count, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ($rb_times(($rb_divide(100, max_count)), option_count)).$ceil()
            } else {
            return 0
          };
        }, TMP_5.$$arity = 2);

        Opal.defn(self, '$increment', TMP_7 = function ːincrement(option) {
          var $a, $b, TMP_6, self = this, vpt = nil;

          vpt = $scope.get('VotePollTransaction').$new($hash2(["vote_poll_option_id"], {"vote_poll_option_id": option.$id()}));
          return ($a = ($b = vpt.$create()).$then, $a.$$p = (TMP_6 = function(_vpt){var self = TMP_6.$$s || this, $c;
if (_vpt == null) _vpt = nil;
          if ((($c = _vpt['$has_errors?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              if ((($c = _vpt.$errors()['$[]']("general")['$include?']("voted_already")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                self.$alert("you have already voted");
                self.$n_prop("vote_poll").$arbitrary()['$[]=']("already_voted", true);}
              } else {
              ($c = option, $c['$count=']($rb_plus($c.$count(), 1)));
              self.$n_prop("vote_poll").$arbitrary()['$[]=']("already_voted", true);
            };
            return self.$force_update();}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($b);
        }, TMP_7.$$arity = 1);

        return (Opal.defn(self, '$component_did_mount', TMP_9 = function ːcomponent_did_mount() {
          var $a, $b, TMP_8, self = this;

          if ((($a = self.$n_prop("vote_poll").$loaded()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return ($a = ($b = self.$n_prop("vote_poll").$load_counts()).$then, $a.$$p = (TMP_8 = function(post_vote_poll){var self = TMP_8.$$s || this, e = nil;
if (post_vote_poll == null) post_vote_poll = nil;
            try {
                return self.$force_update()
              } catch ($err) {
                if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
                  try {
                    return console.log(e);
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              }}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $a).call($b)
          };
        }, TMP_9.$$arity = 0), nil) && 'component_did_mount';
      })($scope.base, $scope.get('RW'))
    })($scope.base)
  })($scope.base)
};
/* Generated by Opal 0.10.0.rc2 */
Opal.modules["application"] = function(Opal) {
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$require_tree', '$include', '$ready?']);
  self.$require("opal");
  self.$require("./vendor/zepto");
  self.$require("opal-jquery");
  self.$require("./vendor/react");
  self.$require("./vendor/react_router");
  self.$require("./vendor/moment");
  self.$require("./vendor/waypoints");
  self.$require("./vendor/wisyhtml5/wysihtml");
  self.$require("./vendor/wisyhtml5/wysihtml_parser_rules");
  self.$require_tree("vendor/core_monkey_patches");
  self.$require_tree("vendor/model");
  self.$require_tree("vendor/react_wrapper");
  self.$require_tree("vendor/native_wrappers");
  self.$require_tree("plugins");
  $scope.get('RW').$include((($scope.get('Plugins')).$$scope.get('FlashMessage')));
  $scope.get('RW').$include((($scope.get('Plugins')).$$scope.get('Modal')));
  $scope.get('RW').$include((($scope.get('Plugins')).$$scope.get('PhantomYielder')));
  $scope.get('RW').$include((($scope.get('Plugins')).$$scope.get('ReactRouter')));
  $scope.get('RW').$include((($scope.get('Plugins')).$$scope.get('ProgressBar')));
  $scope.get('RW').$include((($scope.get('Plugins')).$$scope.get('RWGlobalExtensions')));
  $scope.get('RequestHandler').$include((($scope.get('Plugins')).$$scope.get('RequestHandler')));
  self.$require_tree("models");
  self.$require_tree("services");
  self.$require_tree("components/shared");
  self.$require_tree("components");
  return ($a = ($b = $scope.get('Document'))['$ready?'], $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this;

  

  var app_element = document.getElementById('app')

  if (app_element)
  {
    ReactDOM.render(React.createElement(Components_App_Router), document.getElementById('app'));
  }
  else
  {
    return false
  }

  }, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b);
};
